repo,file,function
data/raw/repos\official\common,distribute_utils.py,def _collective_communication(all_reduce_alg):
data/raw/repos\official\common,distribute_utils.py,"def _mirrored_cross_device_ops(all_reduce_alg, num_packs):"
data/raw/repos\official\common,distribute_utils.py,def tpu_initialize(tpu_address):
data/raw/repos\official\common,distribute_utils.py,"def configure_cluster(worker_hosts=None, task_index=-1):"
data/raw/repos\official\common,distribute_utils.py,def get_strategy_scope(strategy):
data/raw/repos\official\common,distribute_utils.py,def __enter__(self):
data/raw/repos\official\common,distribute_utils.py,"def __exit__(self, *args):"
data/raw/repos\official\common,distribute_utils_test.py,def test_invalid_args(self):
data/raw/repos\official\common,distribute_utils_test.py,def test_one_device_strategy_cpu(self):
data/raw/repos\official\common,distribute_utils_test.py,def test_one_device_strategy_gpu(self):
data/raw/repos\official\common,distribute_utils_test.py,def test_mirrored_strategy(self):
data/raw/repos\official\common,distribute_utils_test.py,def test_mwms(self):
data/raw/repos\official\common,distribute_utils_test.py,def test_no_strategy(self):
data/raw/repos\official\common,distribute_utils_test.py,def test_tpu_strategy(self):
data/raw/repos\official\common,distribute_utils_test.py,def test_invalid_strategy(self):
data/raw/repos\official\common,distribute_utils_test.py,def test_get_strategy_scope(self):
data/raw/repos\official\common,flags.py,def define_flags():
data/raw/repos\official\core,actions.py,"def __call__(self, output: orbit.runner.Output):"
data/raw/repos\official\core,actions.py,"def __call__(self, output: orbit.runner.Output):"
data/raw/repos\official\core,actions.py,"def __init__(self, checkpoint_manager: tf.train.CheckpointManager):"
data/raw/repos\official\core,actions.py,"def __call__(self, _):"
data/raw/repos\official\core,actions.py,"def __call__(self, outputs: orbit.runner.Output):"
data/raw/repos\official\core,actions_test.py,def __init__(self):
data/raw/repos\official\core,actions_test.py,"def call(self, x, training=None):"
data/raw/repos\official\core,actions_test.py,"def test_ema_checkpointing(self, distribution):"
data/raw/repos\official\core,actions_test.py,"def test_recovery_condition(self, distribution):"
data/raw/repos\official\core,actions_test.py,"def test_pruning(self, distribution):"
data/raw/repos\official\core,base_task.py,def task_config(self):
data/raw/repos\official\core,base_task.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\core,base_task.py,"def build_metrics(self, training: bool = True):"
data/raw/repos\official\core,base_task.py,"def process_metrics(self, metrics, labels, model_outputs, **kwargs):"
data/raw/repos\official\core,base_task.py,"def process_compiled_metrics(self, compiled_metrics, labels, model_outputs):"
data/raw/repos\official\core,base_task.py,"def validation_step(self, inputs, model: tf_keras.Model, metrics=None):"
data/raw/repos\official\core,base_task.py,"def inference_step(self, inputs, model: tf_keras.Model):"
data/raw/repos\official\core,base_task.py,"def aggregate_logs(self, state, step_logs):"
data/raw/repos\official\core,base_trainer.py,def init_async(self):
data/raw/repos\official\core,base_trainer.py,def join(self):
data/raw/repos\official\core,base_trainer.py,def create_train_loop_fn(self):
data/raw/repos\official\core,base_trainer.py,"def _async_loop_fn(iterator, num_steps):"
data/raw/repos\official\core,base_trainer.py,"def create_eval_loop_fn(self, has_state: bool):"
data/raw/repos\official\core,base_trainer.py,"def _async_loop_fn(iterator, num_steps, state=None, reduce_fn=None):"
data/raw/repos\official\core,base_trainer.py,"def distribute_dataset(self, dataset_or_fn, *args, **kwargs):"
data/raw/repos\official\core,base_trainer.py,def get_runtime_options(config: ExperimentConfig):
data/raw/repos\official\core,base_trainer.py,def strategy(self):
data/raw/repos\official\core,base_trainer.py,def config(self):
data/raw/repos\official\core,base_trainer.py,def task(self):
data/raw/repos\official\core,base_trainer.py,def model(self):
data/raw/repos\official\core,base_trainer.py,def optimizer(self):
data/raw/repos\official\core,base_trainer.py,def global_step(self):
data/raw/repos\official\core,base_trainer.py,def train_loss(self):
data/raw/repos\official\core,base_trainer.py,def validation_loss(self):
data/raw/repos\official\core,base_trainer.py,def train_metrics(self):
data/raw/repos\official\core,base_trainer.py,def validation_metrics(self):
data/raw/repos\official\core,base_trainer.py,def initialize(self):
data/raw/repos\official\core,base_trainer.py,def checkpoint(self):
data/raw/repos\official\core,base_trainer.py,def checkpoint_exporter(self):
data/raw/repos\official\core,base_trainer.py,def train_loop_end(self):
data/raw/repos\official\core,base_trainer.py,"def next_train_inputs(self, iterator):"
data/raw/repos\official\core,base_trainer.py,"def train_step(self, iterator):"
data/raw/repos\official\core,base_trainer.py,def step_fn(inputs):
data/raw/repos\official\core,base_trainer.py,def eval_begin(self):
data/raw/repos\official\core,base_trainer.py,"def next_eval_inputs(self, iterator):"
data/raw/repos\official\core,base_trainer.py,"def eval_step(self, iterator):"
data/raw/repos\official\core,base_trainer.py,def step_fn(inputs):
data/raw/repos\official\core,base_trainer.py,"def eval_end(self, aggregated_logs=None):"
data/raw/repos\official\core,base_trainer.py,"def eval_reduce(self, state=None, step_outputs=None):"
data/raw/repos\official\core,base_trainer_test.py,def all_strategy_combinations():
data/raw/repos\official\core,base_trainer_test.py,"def create_in_process_cluster(num_workers, num_ps):"
data/raw/repos\official\core,base_trainer_test.py,def dataset_fn(input_context=None):
data/raw/repos\official\core,base_trainer_test.py,def dummy_data(_):
data/raw/repos\official\core,base_trainer_test.py,def __init__(self):
data/raw/repos\official\core,base_trainer_test.py,def train_loop_begin(self):
data/raw/repos\official\core,base_trainer_test.py,"def train_step(self, iterator):"
data/raw/repos\official\core,base_trainer_test.py,def replica_step(_):
data/raw/repos\official\core,base_trainer_test.py,def train_loop_end(self):
data/raw/repos\official\core,base_trainer_test.py,def eval_begin(self):
data/raw/repos\official\core,base_trainer_test.py,"def eval_step(self, iterator):"
data/raw/repos\official\core,base_trainer_test.py,def replica_step(_):
data/raw/repos\official\core,base_trainer_test.py,def eval_end(self):
data/raw/repos\official\core,base_trainer_test.py,def setUp(self):
data/raw/repos\official\core,base_trainer_test.py,def tearDown(self):
data/raw/repos\official\core,base_trainer_test.py,"def create_test_trainer(self, config, model_dir=None, task=None):"
data/raw/repos\official\core,base_trainer_test.py,"def test_trainer_train(self, distribution):"
data/raw/repos\official\core,base_trainer_test.py,"def test_trainer_passing_datasets(self, distribution):"
data/raw/repos\official\core,base_trainer_test.py,def test_base_async_trainer(self):
data/raw/repos\official\core,base_trainer_test.py,def test_async_trainer_train(self):
data/raw/repos\official\core,base_trainer_test.py,def test_async_trainer_validate(self):
data/raw/repos\official\core,base_trainer_test.py,"def test_trainer_validate(self, distribution):"
data/raw/repos\official\core,base_trainer_test.py,"def test_trainer_validate_without_loss(self, distribution):"
data/raw/repos\official\core,base_trainer_test.py,"def validation_step(self, inputs, model, metrics=None):"
data/raw/repos\official\core,base_trainer_test.py,"def test_configure_optimizer(self, mixed_precision_dtype, loss_scale):"
data/raw/repos\official\core,base_trainer_test.py,def test_export_best_ckpt(self):
data/raw/repos\official\core,base_trainer_test.py,def test_model_with_compiled_loss(self):
data/raw/repos\official\core,config_definitions.py,def model_parallelism(self):
data/raw/repos\official\core,export_base.py,"def _inference_step(inputs, model=None):"
data/raw/repos\official\core,export_base.py,def get_timestamped_export_dir(export_dir_base):
data/raw/repos\official\core,export_base_test.py,def test_export_module(self):
data/raw/repos\official\core,export_base_test.py,def test_custom_inference_step(self):
data/raw/repos\official\core,export_base_test.py,"def _inference_step(inputs, model):"
data/raw/repos\official\core,export_base_test.py,def test_processors(self):
data/raw/repos\official\core,export_base_test.py,"def _inference_step(inputs, model):"
data/raw/repos\official\core,export_base_test.py,def _preprocessor(inputs):
data/raw/repos\official\core,export_base_test.py,"def __call__(self, inputs):"
data/raw/repos\official\core,export_base_test.py,def test_get_timestamped_export_dir(self):
data/raw/repos\official\core,exp_factory.py,def register_config_factory(name):
data/raw/repos\official\core,file_writers_test.py,def setUp(self):
data/raw/repos\official\core,file_writers_test.py,"def test_write_small_dataset_success(self, file_type):"
data/raw/repos\official\core,file_writers_test.py,def test_write_small_dataset_unrecognized_format(self):
data/raw/repos\official\core,input_reader.py,def _get_random_integer():
data/raw/repos\official\core,input_reader.py,"def get_files(self, input_path):"
data/raw/repos\official\core,input_reader.py,def _shuffle_and_decode(ds):
data/raw/repos\official\core,registry.py,"def register(registered_collection, reg_key):"
data/raw/repos\official\core,registry.py,def decorator(fn_or_cls):
data/raw/repos\official\core,registry.py,"def lookup(registered_collection, reg_key):"
data/raw/repos\official\core,registry_test.py,def test_register(self):
data/raw/repos\official\core,registry_test.py,def func_test():
data/raw/repos\official\core,registry_test.py,def test_register_hierarchy(self):
data/raw/repos\official\core,registry_test.py,def func_test0():
data/raw/repos\official\core,registry_test.py,def func_test1():
data/raw/repos\official\core,registry_test.py,def func_test2():
data/raw/repos\official\core,registry_test.py,def test_register_error(self):
data/raw/repos\official\core,registry_test.py,def func_test0():
data/raw/repos\official\core,registry_test.py,def func_test1():
data/raw/repos\official\core,savedmodel_checkpoint_manager_test.py,"def __init__(self, hidden_size: int = 8):"
data/raw/repos\official\core,savedmodel_checkpoint_manager_test.py,"def call(self, inputs):"
data/raw/repos\official\core,savedmodel_checkpoint_manager_test.py,def saved_model_signatures(self):
data/raw/repos\official\core,savedmodel_checkpoint_manager_test.py,def test_max_to_keep(self):
data/raw/repos\official\core,savedmodel_checkpoint_manager_test.py,def test_returns_none_after_timeout(self):
data/raw/repos\official\core,savedmodel_checkpoint_manager_test.py,def test_saved_model_iterator(self):
data/raw/repos\official\core,savedmodel_checkpoint_manager_test.py,def test_saved_model_iterator_timeout_fn(self):
data/raw/repos\official\core,savedmodel_checkpoint_manager_test.py,def timeout_fn():
data/raw/repos\official\core,task_factory.py,def register_task_cls(task_config_cls):
data/raw/repos\official\core,task_factory.py,"def get_task(task_config, **kwargs):"
data/raw/repos\official\core,task_factory.py,def get_task_cls(task_config_cls):
data/raw/repos\official\core,test_utils.py,def __init__(self):
data/raw/repos\official\core,test_utils.py,"def call(self, inputs):"
data/raw/repos\official\core,test_utils.py,"def __init__(self, input_dim, output_size, name=None):"
data/raw/repos\official\core,test_utils.py,"def __call__(self, x):"
data/raw/repos\official\core,test_utils.py,"def __init__(self, input_size, name=None):"
data/raw/repos\official\core,test_utils.py,"def __call__(self, x):"
data/raw/repos\official\core,tf_example_builder_test.py,def test_init_an_empty_example(self):
data/raw/repos\official\core,tf_example_builder_test.py,def test_init_an_empty_serialized_example(self):
data/raw/repos\official\core,tf_example_builder_test.py,def test_add_feature(self):
data/raw/repos\official\core,tf_example_builder_test.py,def test_add_feature_dict(self):
data/raw/repos\official\core,tf_example_builder_test.py,"def test_add_single_byte_feature(self, value, expected_value):"
data/raw/repos\official\core,tf_example_builder_test.py,"def test_add_multiple_bytes_feature(self, values, expected_values):"
data/raw/repos\official\core,tf_example_builder_test.py,"def test_add_ints_feature(self, value, expected_value):"
data/raw/repos\official\core,tf_example_builder_test.py,"def test_add_floats_feature(self, value, expected_value):"
data/raw/repos\official\core,tf_example_feature_key.py,"def __init__(self, prefix: Optional[str] = None):"
data/raw/repos\official\core,tf_example_feature_key_test.py,def test_add_prefix_success(self):
data/raw/repos\official\core,tf_example_feature_key_test.py,"def test_add_prefix_skip_success(self, prefix):"
data/raw/repos\official\core,tf_example_feature_key_test.py,def test_all_feature_key_classes_are_valid(self):
data/raw/repos\official\core,train_lib.py,def _maybe_build_checkpoint_manager(sefl):
data/raw/repos\official\core,train_lib.py,def _build_best_checkpoint_exporter(self):
data/raw/repos\official\core,train_lib.py,def timeout_fn():
data/raw/repos\official\core,train_lib_test.py,def setUp(self):
data/raw/repos\official\core,train_lib_test.py,"def test_end_to_end(self, distribution_strategy, flag_mode, run_post_eval):"
data/raw/repos\official\core,train_lib_test.py,"def test_recovery_nan_error(self, distribution_strategy, flag_mode):"
data/raw/repos\official\core,train_lib_test.py,"def build_losses(labels, model_outputs, aux_losses=None):"
data/raw/repos\official\core,train_lib_test.py,"def test_recovery(self, distribution_strategy, flag_mode):"
data/raw/repos\official\core,train_lib_test.py,"def build_losses(labels, model_outputs, aux_losses=None):"
data/raw/repos\official\core,train_lib_test.py,def test_parse_configuration(self):
data/raw/repos\official\core,train_utils.py,"def __init__(self, export_dir: str, metric_name: str, metric_comp: str):"
data/raw/repos\official\core,train_utils.py,"def _get_checkpoint_manager(self, checkpoint):"
data/raw/repos\official\core,train_utils.py,def _maybe_load_best_eval_metric(self):
data/raw/repos\official\core,train_utils.py,"def _new_metric_is_better(self, old_logs, new_logs):"
data/raw/repos\official\core,train_utils.py,"def export_best_eval_metric(self, eval_logs, global_step):"
data/raw/repos\official\core,train_utils.py,def best_ckpt_logs(self):
data/raw/repos\official\core,train_utils.py,def best_ckpt_logs_path(self):
data/raw/repos\official\core,train_utils.py,def best_ckpt_path(self):
data/raw/repos\official\core,train_utils.py,"def __contains__(self, name):"
data/raw/repos\official\core,train_utils.py,"def __init__(self, flags_obj):"
data/raw/repos\official\core,train_utils.py,def parse(self):
data/raw/repos\official\core,train_utils.py,def base_experiment(self):
data/raw/repos\official\core,train_utils.py,"def parse_config_file(self, params):"
data/raw/repos\official\core,train_utils.py,"def parse_runtime(self, params):"
data/raw/repos\official\core,train_utils.py,"def parse_data_service(self, params):"
data/raw/repos\official\core,train_utils.py,"def parse_params_override(self, params):"
data/raw/repos\official\core,train_utils.py,"def parse_configuration(flags_obj, lock_return=True, print_return=True):"
data/raw/repos\official\core,train_utils.py,"def save_gin_config(filename_suffix: str, model_dir: str):"
data/raw/repos\official\core,train_utils.py,def read_global_step_from_checkpoint(ckpt_file_path):
data/raw/repos\official\core,train_utils.py,"def write_json_summary(log_dir, global_step, eval_metrics):"
data/raw/repos\official\core,train_utils.py,"def write_summary(summary_writer, global_step, eval_metrics):"
data/raw/repos\official\core,train_utils.py,def remove_ckpts(model_dir):
data/raw/repos\official\core,train_utils.py,"def _einsum_flops(graph, node):"
data/raw/repos\official\core,train_utils_test.py,def foo():
data/raw/repos\official\core,train_utils_test.py,def test_get_leaf_nested_dict(self):
data/raw/repos\official\core,train_utils_test.py,def test_get_leaf_nested_dict_not_leaf(self):
data/raw/repos\official\core,train_utils_test.py,def test_get_leaf_nested_dict_path_not_exist_missing_key(self):
data/raw/repos\official\core,train_utils_test.py,def test_get_leaf_nested_dict_path_not_exist_out_of_range(self):
data/raw/repos\official\core,train_utils_test.py,def test_get_leaf_nested_dict_path_not_exist_meets_leaf(self):
data/raw/repos\official\core,train_utils_test.py,def test_cast_leaf_nested_dict(self):
data/raw/repos\official\core,train_utils_test.py,def test_write_model_params_keras_model(self):
data/raw/repos\official\core,train_utils_test.py,def test_write_model_params_module(self):
data/raw/repos\official\core,train_utils_test.py,def test_construct_experiment_from_flags(self):
data/raw/repos\official\core,train_utils_test.py,def test_maybe_export(self):
data/raw/repos\official\core,train_utils_test.py,def test_export_best_eval_metric(self):
data/raw/repos\official\core,train_utils_test.py,def test_export_best_eval_metric_skips_non_scalar_values(self):
data/raw/repos\official\legacy\albert,configs.py,"def __init__(self, num_hidden_groups=1, inner_group_num=1, **kwargs):"
data/raw/repos\official\legacy\albert,configs.py,"def from_dict(cls, json_object):"
data/raw/repos\official\legacy\bert,bert_models.py,"def __init__(self, vocab_size, **kwargs):"
data/raw/repos\official\legacy\bert,bert_models_test.py,def setUp(self):
data/raw/repos\official\legacy\bert,bert_models_test.py,def test_pretrain_model(self):
data/raw/repos\official\legacy\bert,bert_models_test.py,def test_squad_model(self):
data/raw/repos\official\legacy\bert,bert_models_test.py,def test_classifier_model(self):
data/raw/repos\official\legacy\bert,common_flags.py,def define_common_bert_flags():
data/raw/repos\official\legacy\bert,common_flags.py,def dtype():
data/raw/repos\official\legacy\bert,common_flags.py,def use_float16():
data/raw/repos\official\legacy\bert,common_flags.py,def get_loss_scale():
data/raw/repos\official\legacy\bert,configs.py,"def from_dict(cls, json_object):"
data/raw/repos\official\legacy\bert,configs.py,"def from_json_file(cls, json_file):"
data/raw/repos\official\legacy\bert,configs.py,def to_dict(self):
data/raw/repos\official\legacy\bert,configs.py,def to_json_string(self):
data/raw/repos\official\legacy\bert,export_tfhub.py,def main(_):
data/raw/repos\official\legacy\bert,export_tfhub_test.py,"def test_export_tfhub(self, ckpt_key_name):"
data/raw/repos\official\legacy\bert,export_tfhub_test.py,"def _dropout_mean_stddev(training, num_runs=20):"
data/raw/repos\official\legacy\bert,input_pipeline.py,"def decode_record(record, name_to_features):"
data/raw/repos\official\legacy\bert,input_pipeline.py,"def single_file_dataset(input_file, name_to_features, num_samples=None):"
data/raw/repos\official\legacy\bert,input_pipeline.py,def _select_data_from_record(record):
data/raw/repos\official\legacy\bert,input_pipeline.py,def _select_data_from_record(record):
data/raw/repos\official\legacy\bert,input_pipeline.py,def _select_data_from_record(record):
data/raw/repos\official\legacy\bert,input_pipeline.py,def _select_data_from_record(record):
data/raw/repos\official\legacy\bert,input_pipeline.py,"def _pad_to_batch(x, y):"
data/raw/repos\official\legacy\bert,model_training_utils.py,def _should_export_checkpoint(strategy):
data/raw/repos\official\legacy\bert,model_training_utils.py,def _should_export_summary(strategy):
data/raw/repos\official\legacy\bert,model_training_utils.py,"def _save_checkpoint(strategy, checkpoint, model_dir, checkpoint_prefix):"
data/raw/repos\official\legacy\bert,model_training_utils.py,"def _get_input_iterator(input_fn, strategy):"
data/raw/repos\official\legacy\bert,model_training_utils.py,def _float_metric_value(metric):
data/raw/repos\official\legacy\bert,model_training_utils.py,def clip_by_global_norm_callback(grads_and_vars):
data/raw/repos\official\legacy\bert,model_training_utils.py,"def steps_to_run(current_step, steps_per_epoch, steps_per_loop):"
data/raw/repos\official\legacy\bert,model_training_utils.py,"def write_txt_summary(training_summary, summary_dir):"
data/raw/repos\official\legacy\bert,model_training_utils.py,def _replicated_step(inputs):
data/raw/repos\official\legacy\bert,model_training_utils.py,"def train_steps(iterator, steps):"
data/raw/repos\official\legacy\bert,model_training_utils.py,def train_single_step(iterator):
data/raw/repos\official\legacy\bert,model_training_utils.py,def test_step(iterator):
data/raw/repos\official\legacy\bert,model_training_utils.py,def _test_step_fn(inputs):
data/raw/repos\official\legacy\bert,model_training_utils.py,"def _run_evaluation(current_training_step, test_iterator):"
data/raw/repos\official\legacy\bert,model_training_utils_test.py,def eager_strategy_combinations():
data/raw/repos\official\legacy\bert,model_training_utils_test.py,def eager_gpu_strategy_combinations():
data/raw/repos\official\legacy\bert,model_training_utils_test.py,"def create_fake_data_input_fn(batch_size, features_shape, num_classes):"
data/raw/repos\official\legacy\bert,model_training_utils_test.py,def _dataset_fn(input_context=None):
data/raw/repos\official\legacy\bert,model_training_utils_test.py,"def _assign_dtype(features, labels):"
data/raw/repos\official\legacy\bert,model_training_utils_test.py,"def create_model_fn(input_shape, num_classes, use_float16=False):"
data/raw/repos\official\legacy\bert,model_training_utils_test.py,def _model_fn():
data/raw/repos\official\legacy\bert,model_training_utils_test.py,def metric_fn():
data/raw/repos\official\legacy\bert,model_training_utils_test.py,"def summaries_with_matching_keyword(keyword, summary_dir):"
data/raw/repos\official\legacy\bert,model_training_utils_test.py,"def check_eventfile_for_keyword(keyword, summary_dir):"
data/raw/repos\official\legacy\bert,model_training_utils_test.py,def __init__(self):
data/raw/repos\official\legacy\bert,model_training_utils_test.py,"def on_batch_begin(self, batch, logs=None):"
data/raw/repos\official\legacy\bert,model_training_utils_test.py,"def on_batch_end(self, batch, logs=None):"
data/raw/repos\official\legacy\bert,model_training_utils_test.py,"def on_epoch_begin(self, epoch, logs=None):"
data/raw/repos\official\legacy\bert,model_training_utils_test.py,"def on_epoch_end(self, epoch, logs=None):"
data/raw/repos\official\legacy\bert,model_training_utils_test.py,def setUp(self):
data/raw/repos\official\legacy\bert,model_training_utils_test.py,"def run_training(self, strategy, model_dir, steps_per_loop, run_eagerly):"
data/raw/repos\official\legacy\bert,model_training_utils_test.py,"def test_train_eager_single_step(self, distribution):"
data/raw/repos\official\legacy\bert,model_training_utils_test.py,"def test_train_eager_mixed_precision(self, distribution):"
data/raw/repos\official\legacy\bert,model_training_utils_test.py,"def test_train_check_artifacts(self, distribution):"
data/raw/repos\official\legacy\bert,model_training_utils_test.py,"def test_train_check_callbacks(self, distribution):"
data/raw/repos\official\legacy\bert,model_training_utils_test.py,"def test_train_check_artifacts_non_chief(self, distribution):"
data/raw/repos\official\legacy\bert,run_classifier.py,def get_loss_fn(num_classes):
data/raw/repos\official\legacy\bert,run_classifier.py,"def classification_loss_fn(labels, logits):"
data/raw/repos\official\legacy\bert,run_classifier.py,def _dataset_fn(ctx=None):
data/raw/repos\official\legacy\bert,run_classifier.py,def _get_classifier_model():
data/raw/repos\official\legacy\bert,run_classifier.py,def test_step(iterator):
data/raw/repos\official\legacy\bert,run_classifier.py,def _test_step_fn(inputs):
data/raw/repos\official\legacy\bert,run_classifier.py,def _run_evaluation(test_iterator):
data/raw/repos\official\legacy\bert,run_classifier.py,"def custom_main(custom_callbacks=None, custom_metrics=None):"
data/raw/repos\official\legacy\bert,run_classifier.py,def main(_):
data/raw/repos\official\legacy\bert,run_pretraining.py,def _dataset_fn(ctx=None):
data/raw/repos\official\legacy\bert,run_pretraining.py,def get_loss_fn():
data/raw/repos\official\legacy\bert,run_pretraining.py,"def _bert_pretrain_loss_fn(unused_labels, losses, **unused_args):"
data/raw/repos\official\legacy\bert,run_pretraining.py,def _get_pretrain_model():
data/raw/repos\official\legacy\bert,run_pretraining.py,"def run_bert_pretrain(strategy, custom_callbacks=None):"
data/raw/repos\official\legacy\bert,run_pretraining.py,def main(_):
data/raw/repos\official\legacy\bert,run_squad.py,"def predict_squad(strategy, input_meta_data):"
data/raw/repos\official\legacy\bert,run_squad.py,"def eval_squad(strategy, input_meta_data):"
data/raw/repos\official\legacy\bert,run_squad.py,"def export_squad(model_export_path, input_meta_data):"
data/raw/repos\official\legacy\bert,run_squad.py,def main(_):
data/raw/repos\official\legacy\bert,run_squad_helper.py,def define_common_squad_flags():
data/raw/repos\official\legacy\bert,run_squad_helper.py,"def squad_loss_fn(start_positions, end_positions, start_logits, end_logits):"
data/raw/repos\official\legacy\bert,run_squad_helper.py,def get_loss_fn():
data/raw/repos\official\legacy\bert,run_squad_helper.py,"def _loss_fn(labels, model_outputs):"
data/raw/repos\official\legacy\bert,run_squad_helper.py,def get_raw_results(predictions):
data/raw/repos\official\legacy\bert,run_squad_helper.py,def _dataset_fn(ctx=None):
data/raw/repos\official\legacy\bert,run_squad_helper.py,def predict_step(iterator):
data/raw/repos\official\legacy\bert,run_squad_helper.py,def _replicated_step(inputs):
data/raw/repos\official\legacy\bert,run_squad_helper.py,def _get_squad_model():
data/raw/repos\official\legacy\bert,run_squad_helper.py,"def _append_feature(feature, is_padding):"
data/raw/repos\official\legacy\bert,run_squad_helper.py,def _get_matched_files(input_path):
data/raw/repos\official\legacy\bert,run_squad_helper.py,"def export_squad(model_export_path, input_meta_data, bert_config):"
data/raw/repos\official\legacy\bert,serving.py,"def __init__(self, bert_config, name_to_features=None, name=""serving_model""):"
data/raw/repos\official\legacy\bert,serving.py,"def call(self, inputs):"
data/raw/repos\official\legacy\bert,serving.py,"def serve_body(self, input_ids, input_mask=None, segment_ids=None):"
data/raw/repos\official\legacy\bert,serving.py,"def serve(self, input_ids, input_mask=None, segment_ids=None):"
data/raw/repos\official\legacy\bert,serving.py,"def serve_examples(self, inputs):"
data/raw/repos\official\legacy\bert,serving.py,"def export(cls, model, export_dir):"
data/raw/repos\official\legacy\bert,serving.py,def main(_):
data/raw/repos\official\legacy\detection,main.py,def _model_fn(params):
data/raw/repos\official\legacy\detection,main.py,def _model_fn(params):
data/raw/repos\official\legacy\detection,main.py,def run(callbacks=None):
data/raw/repos\official\legacy\detection,main.py,def main(argv):
data/raw/repos\official\legacy\detection\configs,factory.py,def config_generator(model):
data/raw/repos\official\legacy\detection\dataloader,anchor.py,def _generate_boxes(self):
data/raw/repos\official\legacy\detection\dataloader,anchor.py,"def unpack_labels(self, labels):"
data/raw/repos\official\legacy\detection\dataloader,anchor.py,def anchors_per_location(self):
data/raw/repos\official\legacy\detection\dataloader,anchor.py,def multilevel_boxes(self):
data/raw/repos\official\legacy\detection\dataloader,anchor.py,"def __init__(self, anchor, match_threshold=0.5, unmatched_threshold=0.5):"
data/raw/repos\official\legacy\detection\dataloader,anchor.py,"def label_anchors(self, gt_boxes, gt_labels):"
data/raw/repos\official\legacy\detection\dataloader,anchor.py,"def _get_rpn_samples(self, match_results):"
data/raw/repos\official\legacy\detection\dataloader,anchor.py,"def label_anchors(self, gt_boxes, gt_labels):"
data/raw/repos\official\legacy\detection\dataloader,anchor.py,"def label_anchors_lrtb(self, gt_boxes, gt_labels):"
data/raw/repos\official\legacy\detection\dataloader,factory.py,"def parser_generator(params, mode):"
data/raw/repos\official\legacy\detection\dataloader,input_reader.py,"def __call__(self, ctx=None, batch_size: int = None):"
data/raw/repos\official\legacy\detection\dataloader,maskrcnn_parser.py,"def __call__(self, value):"
data/raw/repos\official\legacy\detection\dataloader,maskrcnn_parser.py,"def _parse_train_data(self, data):"
data/raw/repos\official\legacy\detection\dataloader,maskrcnn_parser.py,"def _parse_eval_data(self, data):"
data/raw/repos\official\legacy\detection\dataloader,maskrcnn_parser.py,"def _parse_predict_data(self, data):"
data/raw/repos\official\legacy\detection\dataloader,olnmask_parser.py,"def _parse_train_data(self, data):"
data/raw/repos\official\legacy\detection\dataloader,retinanet_parser.py,def process_source_id(source_id):
data/raw/repos\official\legacy\detection\dataloader,retinanet_parser.py,"def pad_groundtruths_to_fixed_size(gt, n):"
data/raw/repos\official\legacy\detection\dataloader,retinanet_parser.py,"def __call__(self, value):"
data/raw/repos\official\legacy\detection\dataloader,retinanet_parser.py,"def _parse_train_data(self, data):"
data/raw/repos\official\legacy\detection\dataloader,retinanet_parser.py,"def _parse_eval_data(self, data):"
data/raw/repos\official\legacy\detection\dataloader,retinanet_parser.py,"def _parse_predict_data(self, data):"
data/raw/repos\official\legacy\detection\dataloader,shapemask_parser.py,"def pad_to_size(input_tensor, size):"
data/raw/repos\official\legacy\detection\dataloader,shapemask_parser.py,"def __call__(self, value):"
data/raw/repos\official\legacy\detection\dataloader,shapemask_parser.py,"def _parse_train_data(self, data):"
data/raw/repos\official\legacy\detection\dataloader,shapemask_parser.py,"def _parse_predict_data(self, data):"
data/raw/repos\official\legacy\detection\dataloader,tf_example_decoder.py,"def __init__(self, include_mask=False):"
data/raw/repos\official\legacy\detection\dataloader,tf_example_decoder.py,"def _decode_image(self, parsed_tensors):"
data/raw/repos\official\legacy\detection\dataloader,tf_example_decoder.py,"def _decode_boxes(self, parsed_tensors):"
data/raw/repos\official\legacy\detection\dataloader,tf_example_decoder.py,"def _decode_masks(self, parsed_tensors):"
data/raw/repos\official\legacy\detection\dataloader,tf_example_decoder.py,def _decode_png_mask(png_bytes):
data/raw/repos\official\legacy\detection\dataloader,tf_example_decoder.py,"def _decode_areas(self, parsed_tensors):"
data/raw/repos\official\legacy\detection\dataloader,tf_example_decoder.py,"def decode(self, serialized_example):"
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,"def __init__(self, coco_gt, coco_dt, iou_type='box'):"
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,def summarize(self):
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,"def _summarize(ap=1, iou_thr=None, area_rng='all', max_dets=100):"
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,def _summarize_dets():
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,"def __init__(self, coco_gt, coco_dt, iou_type='box'):"
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,"def evaluateImg(self, img_id, cat_id, a_rng, max_det):"
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,"def __init__(self, evaluator):"
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,"def update_state(self, y_true, y_pred):"
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,def result(self):
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,def reset_states(self):
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,"def __init__(self, annotation_file, include_mask, need_rescale_bboxes=True):"
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,def reset(self):
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,def evaluate(self):
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,"def _process_predictions(self, predictions):"
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,"def update(self, predictions, groundtruths=None):"
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,def evaluate(self):
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,def evaluate(self):
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,"def __init__(self, mask_eval_class, **kwargs):"
data/raw/repos\official\legacy\detection\evaluation,coco_evaluator.py,def evaluate(self):
data/raw/repos\official\legacy\detection\evaluation,coco_utils.py,"def __init__(self, eval_type='box', annotation_file=None, gt_dataset=None):"
data/raw/repos\official\legacy\detection\evaluation,coco_utils.py,"def loadRes(self, predictions):"
data/raw/repos\official\legacy\detection\evaluation,coco_utils.py,def convert_predictions_to_coco_annotations(predictions):
data/raw/repos\official\legacy\detection\evaluation,coco_utils.py,"def convert_groundtruths_to_coco_dataset(groundtruths, label_map=None):"
data/raw/repos\official\legacy\detection\evaluation,coco_utils.py,"def __init__(self, file_pattern, num_examples, include_mask):"
data/raw/repos\official\legacy\detection\evaluation,coco_utils.py,"def _parse_single_example(self, example):"
data/raw/repos\official\legacy\detection\evaluation,coco_utils.py,def _build_pipeline(self):
data/raw/repos\official\legacy\detection\evaluation,coco_utils.py,def __call__(self):
data/raw/repos\official\legacy\detection\evaluation,factory.py,def evaluator_generator(params):
data/raw/repos\official\legacy\detection\executor,detection_executor.py,def _replicated_step(inputs):
data/raw/repos\official\legacy\detection\executor,detection_executor.py,"def _create_test_step(self, strategy, model, metric):"
data/raw/repos\official\legacy\detection\executor,detection_executor.py,"def test_step(iterator, eval_steps):"
data/raw/repos\official\legacy\detection\executor,detection_executor.py,"def _test_step_fn(inputs, eval_steps):"
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,"def _save_checkpoint(checkpoint, model_dir, checkpoint_prefix):"
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,"def _steps_to_run(current_step, total_steps, steps_per_loop):"
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,def _no_metric():
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,def metrics_as_dict(metric):
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,def metric_results(metric):
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,def reset_states(metric):
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,"def __init__(self, model_dir: Text, name: Text):"
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,"def __call__(self, metrics: Union[Dict[Text, float], float], step: int):"
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,"def __init__(self, strategy, params, model_fn, loss_fn, is_multi_host=False):"
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,def checkpoint_name(self):
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,"def checkpoint_name(self, name):"
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,def loss_fn(self):
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,"def model_fn(self, params):"
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,"def _save_config(self, model_dir):"
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,def _replicated_step(inputs):
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,"def train_step(iterator, num_steps):"
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,"def _create_test_step(self, strategy, model, metric):"
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,def test_step(iterator):
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,def _test_step_fn(inputs):
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,def _run_callbacks_on_batch_begin(batch):
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,def _run_callbacks_on_batch_end(batch):
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,def terminate_eval():
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,def predict(self):
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,"def __init__(self, strategy_type=None, strategy_config=None):"
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,def strategy(self):
data/raw/repos\official\legacy\detection\executor,distributed_executor.py,"def strategy(self, new_strategy):"
data/raw/repos\official\legacy\detection\modeling,base_model.py,def _make_filter_trainable_variables_fn(frozen_variable_prefix):
data/raw/repos\official\legacy\detection\modeling,base_model.py,def _filter_trainable_variables(variables):
data/raw/repos\official\legacy\detection\modeling,base_model.py,"def __init__(self, params):"
data/raw/repos\official\legacy\detection\modeling,base_model.py,"def build_outputs(self, inputs, mode):"
data/raw/repos\official\legacy\detection\modeling,base_model.py,"def build_model(self, params, mode):"
data/raw/repos\official\legacy\detection\modeling,base_model.py,def build_loss_fn(self):
data/raw/repos\official\legacy\detection\modeling,base_model.py,"def post_processing(self, labels, outputs):"
data/raw/repos\official\legacy\detection\modeling,base_model.py,"def model_outputs(self, inputs, mode):"
data/raw/repos\official\legacy\detection\modeling,base_model.py,def build_optimizer(self):
data/raw/repos\official\legacy\detection\modeling,base_model.py,def make_filter_trainable_variables_fn(self):
data/raw/repos\official\legacy\detection\modeling,base_model.py,"def weight_decay_loss(self, trainable_variables):"
data/raw/repos\official\legacy\detection\modeling,base_model.py,def make_restore_checkpoint_fn(self):
data/raw/repos\official\legacy\detection\modeling,base_model.py,def eval_metrics(self):
data/raw/repos\official\legacy\detection\modeling,checkpoint_utils.py,def _get_checkpoint_map(checkpoint_path):
data/raw/repos\official\legacy\detection\modeling,checkpoint_utils.py,"def make_restore_checkpoint_fn(checkpoint_path, prefix='', skip_regex=None):"
data/raw/repos\official\legacy\detection\modeling,checkpoint_utils.py,def _restore_checkpoint_fn(keras_model):
data/raw/repos\official\legacy\detection\modeling,factory.py,def model_generator(params):
data/raw/repos\official\legacy\detection\modeling,learning_rates.py,"def __init__(self, total_steps, params):"
data/raw/repos\official\legacy\detection\modeling,learning_rates.py,"def __call__(self, global_step):"
data/raw/repos\official\legacy\detection\modeling,learning_rates.py,def get_config(self):
data/raw/repos\official\legacy\detection\modeling,learning_rates.py,"def __init__(self, total_steps, params):"
data/raw/repos\official\legacy\detection\modeling,learning_rates.py,"def __call__(self, global_step):"
data/raw/repos\official\legacy\detection\modeling,learning_rates.py,def get_config(self):
data/raw/repos\official\legacy\detection\modeling,learning_rates.py,"def learning_rate_generator(total_steps, params):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def focal_loss(logits, targets, alpha, gamma, normalizer):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __init__(self, params):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __call__(self, score_outputs, labels):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def _rpn_score_loss(self, score_outputs, score_targets, normalizer=1.0):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __init__(self, params):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __call__(self, box_outputs, labels):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def _rpn_box_loss(self, box_outputs, box_targets, normalizer=1.0):"
data/raw/repos\official\legacy\detection\modeling,losses.py,def __init__(self):
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __call__(self, center_outputs, labels):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __call__(self, box_outputs, labels, center_targets):"
data/raw/repos\official\legacy\detection\modeling,losses.py,def __init__(self):
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __call__(self, class_outputs, class_targets):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __init__(self, params):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __call__(self, box_outputs, class_targets, box_targets):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __init__(self, params):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __call__(self, score_outputs, score_targets):"
data/raw/repos\official\legacy\detection\modeling,losses.py,def __init__(self):
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __call__(self, mask_outputs, mask_targets, select_class_targets):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __init__(self, params, num_classes):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __call__(self, cls_outputs, labels, num_positives):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __init__(self, params):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __call__(self, box_outputs, labels, num_positives):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def box_loss(self, box_outputs, box_targets, num_positives):"
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __call__(self, probs, labels, valid_mask):"
data/raw/repos\official\legacy\detection\modeling,losses.py,def __init__(self):
data/raw/repos\official\legacy\detection\modeling,losses.py,"def __call__(self, logits, labels, valid_mask):"
data/raw/repos\official\legacy\detection\modeling,maskrcnn_model.py,"def __init__(self, params):"
data/raw/repos\official\legacy\detection\modeling,maskrcnn_model.py,"def build_outputs(self, inputs, mode):"
data/raw/repos\official\legacy\detection\modeling,maskrcnn_model.py,def build_loss_fn(self):
data/raw/repos\official\legacy\detection\modeling,maskrcnn_model.py,"def _total_loss_fn(labels, outputs):"
data/raw/repos\official\legacy\detection\modeling,maskrcnn_model.py,"def build_input_layers(self, params, mode):"
data/raw/repos\official\legacy\detection\modeling,maskrcnn_model.py,"def build_model(self, params, mode):"
data/raw/repos\official\legacy\detection\modeling,maskrcnn_model.py,"def post_processing(self, labels, outputs):"
data/raw/repos\official\legacy\detection\modeling,maskrcnn_model.py,def eval_metrics(self):
data/raw/repos\official\legacy\detection\modeling,olnmask_model.py,"def __init__(self, params):"
data/raw/repos\official\legacy\detection\modeling,olnmask_model.py,"def build_outputs(self, inputs, mode):"
data/raw/repos\official\legacy\detection\modeling,olnmask_model.py,def build_loss_fn(self):
data/raw/repos\official\legacy\detection\modeling,olnmask_model.py,"def _total_loss_fn(labels, outputs):"
data/raw/repos\official\legacy\detection\modeling,olnmask_model.py,"def build_input_layers(self, params, mode):"
data/raw/repos\official\legacy\detection\modeling,olnmask_model.py,"def build_model(self, params, mode):"
data/raw/repos\official\legacy\detection\modeling,optimizers.py,"def __init__(self, params):"
data/raw/repos\official\legacy\detection\modeling,optimizers.py,"def __call__(self, learning_rate):"
data/raw/repos\official\legacy\detection\modeling,retinanet_model.py,"def __init__(self, params):"
data/raw/repos\official\legacy\detection\modeling,retinanet_model.py,"def build_outputs(self, inputs, mode):"
data/raw/repos\official\legacy\detection\modeling,retinanet_model.py,def build_loss_fn(self):
data/raw/repos\official\legacy\detection\modeling,retinanet_model.py,"def _total_loss_fn(labels, outputs):"
data/raw/repos\official\legacy\detection\modeling,retinanet_model.py,"def build_model(self, params, mode=None):"
data/raw/repos\official\legacy\detection\modeling,retinanet_model.py,"def post_processing(self, labels, outputs):"
data/raw/repos\official\legacy\detection\modeling,retinanet_model.py,def eval_metrics(self):
data/raw/repos\official\legacy\detection\modeling,shapemask_model.py,"def __init__(self, params):"
data/raw/repos\official\legacy\detection\modeling,shapemask_model.py,"def build_outputs(self, inputs, mode):"
data/raw/repos\official\legacy\detection\modeling,shapemask_model.py,"def call(self, inputs, val_boxes, val_classes, val_outer_boxes, training):"
data/raw/repos\official\legacy\detection\modeling,shapemask_model.py,def build_loss_fn(self):
data/raw/repos\official\legacy\detection\modeling,shapemask_model.py,"def _total_loss_fn(labels, outputs):"
data/raw/repos\official\legacy\detection\modeling,shapemask_model.py,"def build_input_layers(self, params, mode):"
data/raw/repos\official\legacy\detection\modeling,shapemask_model.py,"def build_model(self, params, mode):"
data/raw/repos\official\legacy\detection\modeling,shapemask_model.py,"def post_processing(self, labels, outputs):"
data/raw/repos\official\legacy\detection\modeling,shapemask_model.py,def eval_metrics(self):
data/raw/repos\official\legacy\detection\modeling\architecture,factory.py,def norm_activation_generator(params):
data/raw/repos\official\legacy\detection\modeling\architecture,factory.py,def backbone_generator(params):
data/raw/repos\official\legacy\detection\modeling\architecture,factory.py,def multilevel_features_generator(params):
data/raw/repos\official\legacy\detection\modeling\architecture,factory.py,def retinanet_head_generator(params):
data/raw/repos\official\legacy\detection\modeling\architecture,factory.py,def rpn_head_generator(params):
data/raw/repos\official\legacy\detection\modeling\architecture,factory.py,def oln_rpn_head_generator(params):
data/raw/repos\official\legacy\detection\modeling\architecture,factory.py,def fast_rcnn_head_generator(params):
data/raw/repos\official\legacy\detection\modeling\architecture,factory.py,def oln_box_score_head_generator(params):
data/raw/repos\official\legacy\detection\modeling\architecture,factory.py,def mask_rcnn_head_generator(params):
data/raw/repos\official\legacy\detection\modeling\architecture,factory.py,def oln_mask_score_head_generator(params):
data/raw/repos\official\legacy\detection\modeling\architecture,factory.py,def shapeprior_head_generator(params):
data/raw/repos\official\legacy\detection\modeling\architecture,factory.py,def coarsemask_head_generator(params):
data/raw/repos\official\legacy\detection\modeling\architecture,factory.py,def finemask_head_generator(params):
data/raw/repos\official\legacy\detection\modeling\architecture,fpn.py,"def __call__(self, multilevel_features, is_training=None):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def call(self, features, is_training=None):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def __call__(self, features, is_training=None):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def call(self, roi_features, is_training=None):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def __call__(self, roi_features, is_training=None):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def call(self, roi_features, class_indices, is_training=None):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def _class_net_batch_norm_name(self, i, level):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def _box_net_batch_norm_name(self, i, level):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def _build_class_net_layers(self, norm_activation):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def _build_box_net_layers(self, norm_activation):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def __call__(self, fpn_features, is_training=None):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def class_net(self, features, level, is_training):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def box_net(self, features, level, is_training=None):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def __call__(self, fpn_features, boxes, outer_boxes, classes, is_training):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,def _get_priors(self):
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def _classify_shape_priors(self, features, uniform_priors, classes):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def __call__(self, features, detection_priors, classes, is_training):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def decoder_net(self, features, is_training=False):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def __call__(self, features, mask_logits, classes, is_training):"
data/raw/repos\official\legacy\detection\modeling\architecture,heads.py,"def decoder_net(self, features, is_training=False):"
data/raw/repos\official\legacy\detection\modeling\architecture,identity.py,"def __call__(self, features, is_training=False):"
data/raw/repos\official\legacy\detection\modeling\architecture,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\legacy\detection\modeling\architecture,nn_blocks.py,def get_config(self):
data/raw/repos\official\legacy\detection\modeling\architecture,nn_blocks.py,"def call(self, inputs):"
data/raw/repos\official\legacy\detection\modeling\architecture,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\legacy\detection\modeling\architecture,nn_blocks.py,def get_config(self):
data/raw/repos\official\legacy\detection\modeling\architecture,nn_blocks.py,"def call(self, inputs):"
data/raw/repos\official\legacy\detection\modeling\architecture,nn_ops.py,"def __call__(self, inputs, is_training=None):"
data/raw/repos\official\legacy\detection\modeling\architecture,resnet.py,"def __call__(self, inputs, is_training=None):"
data/raw/repos\official\legacy\detection\modeling\architecture,resnet.py,"def fixed_padding(self, inputs, kernel_size):"
data/raw/repos\official\legacy\detection\modeling\architecture,resnet.py,"def conv2d_fixed_padding(self, inputs, filters, kernel_size, strides):"
data/raw/repos\official\legacy\detection\modeling\architecture,resnet.py,"def resnet_v1_generator(self, block_fn, layers):"
data/raw/repos\official\legacy\detection\modeling\architecture,resnet.py,"def model(inputs, is_training=None):"
data/raw/repos\official\legacy\detection\modeling\architecture,spinenet.py,"def __init__(self, level, block_fn, input_offsets, is_output):"
data/raw/repos\official\legacy\detection\modeling\architecture,spinenet.py,def build_block_specs(block_specs=None):
data/raw/repos\official\legacy\detection\modeling\architecture,spinenet.py,"def _build_stem(self, inputs):"
data/raw/repos\official\legacy\detection\modeling\architecture,spinenet.py,"def _build_endpoints(self, net):"
data/raw/repos\official\legacy\detection\modeling\architecture,spinenet.py,"def __call__(self, inputs, is_training=None):"
data/raw/repos\official\legacy\detection\ops,nms.py,"def _self_suppression(iou, _, iou_sum):"
data/raw/repos\official\legacy\detection\ops,nms.py,"def _cross_suppression(boxes, box_slice, iou_threshold, inner_idx):"
data/raw/repos\official\legacy\detection\ops,nms.py,"def _suppression_loop_body(boxes, iou_threshold, output_size, idx):"
data/raw/repos\official\legacy\detection\ops,nms.py,"def _loop_cond(unused_boxes, unused_threshold, output_size, idx):"
data/raw/repos\official\legacy\detection\ops,postprocess_ops.py,def generate_detections_factory(params):
data/raw/repos\official\legacy\detection\ops,postprocess_ops.py,"def _select_top_k_scores(scores_in, pre_nms_num_detections):"
data/raw/repos\official\legacy\detection\ops,postprocess_ops.py,"def __init__(self, min_level, max_level, params):"
data/raw/repos\official\legacy\detection\ops,postprocess_ops.py,"def call(self, box_outputs, class_outputs, anchor_boxes, image_shape):"
data/raw/repos\official\legacy\detection\ops,postprocess_ops.py,"def __init__(self, params):"
data/raw/repos\official\legacy\detection\ops,postprocess_ops.py,"def call(self, box_outputs, class_outputs, anchor_boxes, image_shape):"
data/raw/repos\official\legacy\detection\ops,roi_ops.py,"def __init__(self, params):"
data/raw/repos\official\legacy\detection\ops,roi_ops.py,"def call(self, boxes, scores, anchor_boxes, image_shape, is_training):"
data/raw/repos\official\legacy\detection\ops,spatial_transform_ops.py,"def nearest_upsampling(data, scale):"
data/raw/repos\official\legacy\detection\ops,spatial_transform_ops.py,"def feature_bilinear_interpolation(features, kernel_y, kernel_x):"
data/raw/repos\official\legacy\detection\ops,spatial_transform_ops.py,"def compute_grid_positions(boxes, boundaries, output_size, sample_offset):"
data/raw/repos\official\legacy\detection\ops,spatial_transform_ops.py,"def get_grid_one_hot(box_gridy0y1, box_gridx0x1, feature_height, feature_width):"
data/raw/repos\official\legacy\detection\ops,spatial_transform_ops.py,"def multilevel_crop_and_resize(features, boxes, output_size=7):"
data/raw/repos\official\legacy\detection\ops,target_ops.py,"def box_matching(boxes, gt_boxes, gt_classes):"
data/raw/repos\official\legacy\detection\ops,target_ops.py,"def __init__(self, params):"
data/raw/repos\official\legacy\detection\ops,target_ops.py,"def call(self, rois, gt_boxes, gt_classes):"
data/raw/repos\official\legacy\detection\ops,target_ops.py,"def __call__(self, rois, roi_scores, gt_boxes, gt_classes):"
data/raw/repos\official\legacy\detection\ops,target_ops.py,"def __init__(self, mask_target_size, num_mask_samples_per_image):"
data/raw/repos\official\legacy\detection\utils,box_utils.py,def yxyx_to_xywh(boxes):
data/raw/repos\official\legacy\detection\utils,box_utils.py,"def jitter_boxes(boxes, noise_scale=0.025):"
data/raw/repos\official\legacy\detection\utils,box_utils.py,"def normalize_boxes(boxes, image_shape):"
data/raw/repos\official\legacy\detection\utils,box_utils.py,"def denormalize_boxes(boxes, image_shape):"
data/raw/repos\official\legacy\detection\utils,box_utils.py,"def clip_boxes(boxes, image_shape):"
data/raw/repos\official\legacy\detection\utils,box_utils.py,"def compute_outer_boxes(boxes, image_shape, scale=1.0):"
data/raw/repos\official\legacy\detection\utils,box_utils.py,"def encode_boxes(boxes, anchors, weights=None):"
data/raw/repos\official\legacy\detection\utils,box_utils.py,"def decode_boxes(encoded_boxes, anchors, weights=None):"
data/raw/repos\official\legacy\detection\utils,box_utils.py,"def encode_boxes_lrtb(boxes, anchors, weights=None):"
data/raw/repos\official\legacy\detection\utils,box_utils.py,"def decode_boxes_lrtb(encoded_boxes_lrtb, anchors, weights=None):"
data/raw/repos\official\legacy\detection\utils,box_utils.py,"def filter_boxes(boxes, scores, image_shape, min_size_threshold):"
data/raw/repos\official\legacy\detection\utils,box_utils.py,"def filter_boxes_by_scores(boxes, scores, min_score_threshold):"
data/raw/repos\official\legacy\detection\utils,box_utils.py,"def top_k_boxes(boxes, scores, k):"
data/raw/repos\official\legacy\detection\utils,box_utils.py,"def bbox_overlap(boxes, gt_boxes):"
data/raw/repos\official\legacy\detection\utils,box_utils.py,def get_non_empty_box_indices(boxes):
data/raw/repos\official\legacy\detection\utils,class_utils.py,def coco_split_class_ids(split_name):
data/raw/repos\official\legacy\detection\utils,dataloader_utils.py,def process_source_id(source_id):
data/raw/repos\official\legacy\detection\utils,dataloader_utils.py,"def pad_groundtruths_to_fixed_size(gt, n):"
data/raw/repos\official\legacy\detection\utils,input_utils.py,"def pad_to_fixed_size(input_tensor, size, constant_values=0):"
data/raw/repos\official\legacy\detection\utils,input_utils.py,"def compute_padded_size(desired_size, stride):"
data/raw/repos\official\legacy\detection\utils,input_utils.py,"def resize_and_crop_boxes(boxes, image_scale, output_size, offset):"
data/raw/repos\official\legacy\detection\utils,input_utils.py,"def resize_and_crop_masks(masks, image_scale, output_size, offset):"
data/raw/repos\official\legacy\detection\utils,input_utils.py,"def random_horizontal_flip(image, boxes=None, masks=None):"
data/raw/repos\official\legacy\detection\utils,mask_utils.py,"def paste_instance_masks(masks, detected_boxes, image_height, image_width):"
data/raw/repos\official\legacy\detection\utils,mask_utils.py,"def expand_boxes(boxes, scale):"
data/raw/repos\official\legacy\detection\utils,mask_utils.py,"def paste_instance_masks_v2(masks, detected_boxes, image_height, image_width):"
data/raw/repos\official\legacy\image_classification,augment.py,def scale_values(im):
data/raw/repos\official\legacy\image_classification,augment.py,"def scale_channel(im, c):"
data/raw/repos\official\legacy\image_classification,augment.py,"def build_lut(histo, step):"
data/raw/repos\official\legacy\image_classification,augment.py,def _randomly_negate_tensor(tensor):
data/raw/repos\official\legacy\image_classification,augment.py,def _rotate_level_to_arg(level: float):
data/raw/repos\official\legacy\image_classification,augment.py,def _shrink_level_to_arg(level: float):
data/raw/repos\official\legacy\image_classification,augment.py,def _enhance_level_to_arg(level: float):
data/raw/repos\official\legacy\image_classification,augment.py,def _shear_level_to_arg(level: float):
data/raw/repos\official\legacy\image_classification,augment.py,"def _translate_level_to_arg(level: float, translate_const: float):"
data/raw/repos\official\legacy\image_classification,augment.py,"def _mult_to_arg(level: float, multiplier: float = 1.):"
data/raw/repos\official\legacy\image_classification,augment.py,"def _apply_func_with_prob(func: Any, image: tf.Tensor, args: Any, prob: float):"
data/raw/repos\official\legacy\image_classification,augment.py,"def select_and_apply_random_policy(policies: Any, image: tf.Tensor):"
data/raw/repos\official\legacy\image_classification,augment.py,"def level_to_arg(cutout_const: float, translate_const: float):"
data/raw/repos\official\legacy\image_classification,augment.py,def make_final_policy(tf_policy_):
data/raw/repos\official\legacy\image_classification,augment.py,def final_policy(image_):
data/raw/repos\official\legacy\image_classification,augment.py,def policy_v0():
data/raw/repos\official\legacy\image_classification,augment.py,def policy_simple():
data/raw/repos\official\legacy\image_classification,augment.py,def policy_test():
data/raw/repos\official\legacy\image_classification,augment_test.py,def get_dtype_test_cases():
data/raw/repos\official\legacy\image_classification,augment_test.py,"def test_to_from_4d(self, dtype):"
data/raw/repos\official\legacy\image_classification,augment_test.py,"def test_transform(self, dtype):"
data/raw/repos\official\legacy\image_classification,augment_test.py,"def test_translate(self, dtype):"
data/raw/repos\official\legacy\image_classification,augment_test.py,"def test_translate_shapes(self, dtype):"
data/raw/repos\official\legacy\image_classification,augment_test.py,"def test_translate_invalid_translation(self, dtype):"
data/raw/repos\official\legacy\image_classification,augment_test.py,"def test_rotate(self, dtype):"
data/raw/repos\official\legacy\image_classification,augment_test.py,"def test_rotate_shapes(self, dtype):"
data/raw/repos\official\legacy\image_classification,augment_test.py,def test_autoaugment(self):
data/raw/repos\official\legacy\image_classification,augment_test.py,def test_randaug(self):
data/raw/repos\official\legacy\image_classification,augment_test.py,def test_all_policy_ops(self):
data/raw/repos\official\legacy\image_classification,callbacks.py,"def __init__(self, overwrite_weights_on_train_end: bool = False, **kwargs):"
data/raw/repos\official\legacy\image_classification,callbacks.py,"def set_model(self, model: tf_keras.Model):"
data/raw/repos\official\legacy\image_classification,callbacks.py,"def on_test_begin(self, logs: Optional[MutableMapping[Text, Any]] = None):"
data/raw/repos\official\legacy\image_classification,callbacks.py,"def on_test_end(self, logs: Optional[MutableMapping[Text, Any]] = None):"
data/raw/repos\official\legacy\image_classification,callbacks.py,"def on_train_end(self, logs: Optional[MutableMapping[Text, Any]] = None):"
data/raw/repos\official\legacy\image_classification,callbacks.py,"def set_model(self, model):"
data/raw/repos\official\legacy\image_classification,callbacks.py,"def _save_model(self, epoch, logs):"
data/raw/repos\official\legacy\image_classification,classifier_trainer.py,def _get_params_from_flags(flags_obj: flags.FlagValues):
data/raw/repos\official\legacy\image_classification,classifier_trainer.py,def define_classifier_flags():
data/raw/repos\official\legacy\image_classification,classifier_trainer.py,"def serialize_config(params: base_configs.ExperimentConfig, model_dir: str):"
data/raw/repos\official\legacy\image_classification,classifier_trainer.py,def export(params: base_configs.ExperimentConfig):
data/raw/repos\official\legacy\image_classification,classifier_trainer.py,def main(_):
data/raw/repos\official\legacy\image_classification,classifier_trainer_test.py,def setUpClass(cls):
data/raw/repos\official\legacy\image_classification,classifier_trainer_test.py,def tearDown(self):
data/raw/repos\official\legacy\image_classification,classifier_trainer_test.py,"def test_end_to_end_train_and_eval(self, distribution, model, dataset):"
data/raw/repos\official\legacy\image_classification,classifier_trainer_test.py,"def test_gpu_train(self, distribution, model, dataset, dtype):"
data/raw/repos\official\legacy\image_classification,classifier_trainer_test.py,"def test_tpu_train(self, distribution, model, dataset, dtype):"
data/raw/repos\official\legacy\image_classification,classifier_trainer_test.py,"def test_end_to_end_invalid_mode(self, distribution, model, dataset):"
data/raw/repos\official\legacy\image_classification,classifier_trainer_util_test.py,"def test_get_model_size(self, model, model_name, expected):"
data/raw/repos\official\legacy\image_classification,classifier_trainer_util_test.py,"def test_get_loss_scale(self, loss_scale, dtype, expected):"
data/raw/repos\official\legacy\image_classification,classifier_trainer_util_test.py,"def test_initialize(self, dtype):"
data/raw/repos\official\legacy\image_classification,classifier_trainer_util_test.py,def test_resume_from_checkpoint(self):
data/raw/repos\official\legacy\image_classification,classifier_trainer_util_test.py,def test_serialize_config(self):
data/raw/repos\official\legacy\image_classification,dataset_factory.py,def has_data(self):
data/raw/repos\official\legacy\image_classification,dataset_factory.py,"def __init__(self, config: DatasetConfig, **overrides: Any):"
data/raw/repos\official\legacy\image_classification,dataset_factory.py,def global_batch_size(self):
data/raw/repos\official\legacy\image_classification,dataset_factory.py,def local_batch_size(self):
data/raw/repos\official\legacy\image_classification,dataset_factory.py,def generate_data(_):
data/raw/repos\official\legacy\image_classification,dataset_factory.py,"def from_params(cls, *args, **kwargs):"
data/raw/repos\official\legacy\image_classification,learning_rate.py,"def __call__(self, step: int):"
data/raw/repos\official\legacy\image_classification,learning_rate.py,"def __init__(self, batch_size: int, total_steps: int, warmup_steps: int):"
data/raw/repos\official\legacy\image_classification,learning_rate.py,"def __call__(self, global_step: int):"
data/raw/repos\official\legacy\image_classification,learning_rate.py,def get_config(self):
data/raw/repos\official\legacy\image_classification,learning_rate_test.py,def test_warmup_decay(self):
data/raw/repos\official\legacy\image_classification,learning_rate_test.py,def test_cosine_decay_with_warmup(self):
data/raw/repos\official\legacy\image_classification,mnist_main.py,def build_model():
data/raw/repos\official\legacy\image_classification,mnist_main.py,"def decode_image(example, feature):"
data/raw/repos\official\legacy\image_classification,mnist_main.py,"def run(flags_obj, datasets_override=None, strategy_override=None):"
data/raw/repos\official\legacy\image_classification,mnist_main.py,def define_mnist_flags():
data/raw/repos\official\legacy\image_classification,mnist_main.py,def main(_):
data/raw/repos\official\legacy\image_classification,mnist_test.py,def eager_strategy_combinations():
data/raw/repos\official\legacy\image_classification,mnist_test.py,def setUpClass(cls):
data/raw/repos\official\legacy\image_classification,mnist_test.py,def tearDown(self):
data/raw/repos\official\legacy\image_classification,mnist_test.py,"def test_end_to_end(self, distribution):"
data/raw/repos\official\legacy\image_classification,optimizer_factory.py,"def _create_slots(self, var_list):"
data/raw/repos\official\legacy\image_classification,optimizer_factory.py,def _create_hypers(self):
data/raw/repos\official\legacy\image_classification,optimizer_factory.py,"def _prepare(self, var_list):"
data/raw/repos\official\legacy\image_classification,optimizer_factory.py,"def _look_ahead_op(self, var):"
data/raw/repos\official\legacy\image_classification,optimizer_factory.py,def weights(self):
data/raw/repos\official\legacy\image_classification,optimizer_factory.py,"def _resource_apply_dense(self, grad, var):"
data/raw/repos\official\legacy\image_classification,optimizer_factory.py,"def _resource_apply_sparse(self, grad, var, indices):"
data/raw/repos\official\legacy\image_classification,optimizer_factory.py,def get_config(self):
data/raw/repos\official\legacy\image_classification,optimizer_factory.py,def learning_rate(self):
data/raw/repos\official\legacy\image_classification,optimizer_factory.py,"def learning_rate(self, value):"
data/raw/repos\official\legacy\image_classification,optimizer_factory.py,def lr(self):
data/raw/repos\official\legacy\image_classification,optimizer_factory.py,"def lr(self, lr):"
data/raw/repos\official\legacy\image_classification,optimizer_factory.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\legacy\image_classification,optimizer_factory_test.py,"def test_optimizer(self, optimizer_name, moving_average_decay, lookahead):"
data/raw/repos\official\legacy\image_classification,optimizer_factory_test.py,def test_unknown_optimizer(self):
data/raw/repos\official\legacy\image_classification,optimizer_factory_test.py,def test_learning_rate_without_decay_or_warmups(self):
data/raw/repos\official\legacy\image_classification,optimizer_factory_test.py,"def test_learning_rate_with_decay_and_warmup(self, lr_decay_type):"
data/raw/repos\official\legacy\image_classification,test_utils.py,def trivial_model(num_classes):
data/raw/repos\official\legacy\image_classification\efficientnet,common_modules.py,"def __init__(self, fused: Optional[bool] = False, **kwargs):"
data/raw/repos\official\legacy\image_classification\efficientnet,common_modules.py,"def _cross_replica_average(self, t: tf.Tensor, num_shards_per_group: int):"
data/raw/repos\official\legacy\image_classification\efficientnet,common_modules.py,"def _moments(self, inputs: tf.Tensor, reduction_axes: int, keep_dims: int):"
data/raw/repos\official\legacy\image_classification\efficientnet,common_modules.py,"def count_params(model, trainable_only=True):"
data/raw/repos\official\legacy\image_classification\efficientnet,efficientnet_model.py,"def efficientnet(image_input: tf_keras.layers.Input, config: ModelConfig):"
data/raw/repos\official\legacy\image_classification\efficientnet,tfhub_export.py,"def export_tfhub(model_path, hub_destination, model_name):"
data/raw/repos\official\legacy\image_classification\efficientnet,tfhub_export.py,def main(argv):
data/raw/repos\official\legacy\image_classification\resnet,common.py,"def __call__(self, step):"
data/raw/repos\official\legacy\image_classification\resnet,common.py,"def _get_learning_rate(self, step):"
data/raw/repos\official\legacy\image_classification\resnet,common.py,def warmup_lr(step):
data/raw/repos\official\legacy\image_classification\resnet,common.py,def piecewise_lr(step):
data/raw/repos\official\legacy\image_classification\resnet,common.py,def get_config(self):
data/raw/repos\official\legacy\image_classification\resnet,common.py,"def get_optimizer(learning_rate=0.1, use_legacy_optimizer=True):"
data/raw/repos\official\legacy\image_classification\resnet,common.py,"def build_stats(history, eval_output, callbacks):"
data/raw/repos\official\legacy\image_classification\resnet,common.py,"def get_synth_data(height, width, num_channels, num_classes, dtype):"
data/raw/repos\official\legacy\image_classification\resnet,common.py,def define_pruning_flags():
data/raw/repos\official\legacy\image_classification\resnet,common.py,def define_clustering_flags():
data/raw/repos\official\legacy\image_classification\resnet,common.py,"def input_fn(is_training, data_dir, batch_size, *args, **kwargs):"
data/raw/repos\official\legacy\image_classification\resnet,common.py,def set_cudnn_batchnorm_mode():
data/raw/repos\official\legacy\image_classification\resnet,imagenet_preprocessing.py,"def get_filenames(is_training, data_dir):"
data/raw/repos\official\legacy\image_classification\resnet,imagenet_preprocessing.py,def parse_example_proto(example_serialized):
data/raw/repos\official\legacy\image_classification\resnet,imagenet_preprocessing.py,"def parse_record(raw_record, is_training, dtype):"
data/raw/repos\official\legacy\image_classification\resnet,imagenet_preprocessing.py,def get_parse_record_fn(use_keras_image_data_format=False):
data/raw/repos\official\legacy\image_classification\resnet,imagenet_preprocessing.py,"def parse_record_fn(raw_record, is_training, dtype):"
data/raw/repos\official\legacy\image_classification\resnet,imagenet_preprocessing.py,"def _decode_crop_and_flip(image_buffer, bbox, num_channels):"
data/raw/repos\official\legacy\image_classification\resnet,imagenet_preprocessing.py,"def _central_crop(image, crop_height, crop_width):"
data/raw/repos\official\legacy\image_classification\resnet,imagenet_preprocessing.py,"def _mean_image_subtraction(image, means, num_channels):"
data/raw/repos\official\legacy\image_classification\resnet,imagenet_preprocessing.py,"def _smallest_size_at_least(height, width, resize_min):"
data/raw/repos\official\legacy\image_classification\resnet,imagenet_preprocessing.py,"def _aspect_preserving_resize(image, resize_min):"
data/raw/repos\official\legacy\image_classification\resnet,imagenet_preprocessing.py,"def _resize_image(image, height, width):"
data/raw/repos\official\legacy\image_classification\resnet,resnet_ctl_imagenet_main.py,"def build_stats(runnable, time_callback):"
data/raw/repos\official\legacy\image_classification\resnet,resnet_ctl_imagenet_main.py,def get_num_train_iterations(flags_obj):
data/raw/repos\official\legacy\image_classification\resnet,resnet_ctl_imagenet_main.py,def run(flags_obj):
data/raw/repos\official\legacy\image_classification\resnet,resnet_ctl_imagenet_main.py,def main(_):
data/raw/repos\official\legacy\image_classification\resnet,resnet_model.py,"def _gen_l2_regularizer(use_l2_regularizer=True, l2_weight_decay=1e-4):"
data/raw/repos\official\legacy\image_classification\resnet,resnet_runnable.py,"def __init__(self, flags_obj, time_callback, epoch_steps):"
data/raw/repos\official\legacy\image_classification\resnet,resnet_runnable.py,def train_loop_begin(self):
data/raw/repos\official\legacy\image_classification\resnet,resnet_runnable.py,"def train_step(self, iterator):"
data/raw/repos\official\legacy\image_classification\resnet,resnet_runnable.py,def step_fn(inputs):
data/raw/repos\official\legacy\image_classification\resnet,resnet_runnable.py,def train_loop_end(self):
data/raw/repos\official\legacy\image_classification\resnet,resnet_runnable.py,def eval_begin(self):
data/raw/repos\official\legacy\image_classification\resnet,resnet_runnable.py,"def eval_step(self, iterator):"
data/raw/repos\official\legacy\image_classification\resnet,resnet_runnable.py,def step_fn(inputs):
data/raw/repos\official\legacy\image_classification\resnet,resnet_runnable.py,def eval_end(self):
data/raw/repos\official\legacy\image_classification\resnet,resnet_runnable.py,def _epoch_begin(self):
data/raw/repos\official\legacy\image_classification\resnet,resnet_runnable.py,def _epoch_end(self):
data/raw/repos\official\legacy\image_classification\resnet,tfhub_export.py,"def export_tfhub(model_path, hub_destination):"
data/raw/repos\official\legacy\image_classification\resnet,tfhub_export.py,def main(argv):
data/raw/repos\official\legacy\image_classification\vgg,vgg_model.py,"def _gen_l2_regularizer(use_l2_regularizer=True, l2_weight_decay=1e-4):"
data/raw/repos\official\legacy\transformer,attention_layer.py,"def __init__(self, hidden_size, num_heads, attention_dropout):"
data/raw/repos\official\legacy\transformer,attention_layer.py,"def build(self, input_shape):"
data/raw/repos\official\legacy\transformer,attention_layer.py,"def _glorot_initializer(fan_in, fan_out):"
data/raw/repos\official\legacy\transformer,attention_layer.py,def get_config(self):
data/raw/repos\official\legacy\transformer,beam_search_v1.py,"def _process_finished_state(self, finished_state):"
data/raw/repos\official\legacy\transformer,compute_bleu.py,def __init__(self):
data/raw/repos\official\legacy\transformer,compute_bleu.py,"def property_chars(self, prefix):"
data/raw/repos\official\legacy\transformer,compute_bleu.py,def bleu_tokenize(string):
data/raw/repos\official\legacy\transformer,compute_bleu.py,"def bleu_wrapper(ref_filename, hyp_filename, case_sensitive=False):"
data/raw/repos\official\legacy\transformer,compute_bleu.py,"def bleu_on_list(ref_lines, hyp_lines, case_sensitive=False):"
data/raw/repos\official\legacy\transformer,compute_bleu.py,def main(unused_argv):
data/raw/repos\official\legacy\transformer,compute_bleu.py,def define_compute_bleu_flags():
data/raw/repos\official\legacy\transformer,compute_bleu_test.py,"def _create_temp_file(self, text):"
data/raw/repos\official\legacy\transformer,compute_bleu_test.py,def test_bleu_same(self):
data/raw/repos\official\legacy\transformer,compute_bleu_test.py,def test_bleu_same_different_case(self):
data/raw/repos\official\legacy\transformer,compute_bleu_test.py,def test_bleu_different(self):
data/raw/repos\official\legacy\transformer,compute_bleu_test.py,def test_bleu_tokenize(self):
data/raw/repos\official\legacy\transformer,compute_bleu_test.py,def test_bleu_list(self):
data/raw/repos\official\legacy\transformer,data_download.py,"def find_file(path, filename, max_depth=5):"
data/raw/repos\official\legacy\transformer,data_download.py,"def get_raw_files(raw_dir, data_source):"
data/raw/repos\official\legacy\transformer,data_download.py,"def download_report_hook(count, block_size, total_size):"
data/raw/repos\official\legacy\transformer,data_download.py,"def download_from_url(path, url):"
data/raw/repos\official\legacy\transformer,data_download.py,"def download_and_extract(path, url, input_filename, target_filename):"
data/raw/repos\official\legacy\transformer,data_download.py,def txt_line_iterator(path):
data/raw/repos\official\legacy\transformer,data_download.py,"def compile_files(raw_dir, raw_files, tag):"
data/raw/repos\official\legacy\transformer,data_download.py,"def write_file(writer, filename):"
data/raw/repos\official\legacy\transformer,data_download.py,"def encode_and_save_files(subtokenizer, data_dir, raw_files, tag, total_shards):"
data/raw/repos\official\legacy\transformer,data_download.py,"def shard_filename(path, tag, shard_num, total_shards):"
data/raw/repos\official\legacy\transformer,data_download.py,def shuffle_records(fname):
data/raw/repos\official\legacy\transformer,data_download.py,def dict_to_example(dictionary):
data/raw/repos\official\legacy\transformer,data_download.py,def all_exist(filepaths):
data/raw/repos\official\legacy\transformer,data_download.py,def make_dir(path):
data/raw/repos\official\legacy\transformer,data_download.py,def main(unused_argv):
data/raw/repos\official\legacy\transformer,data_download.py,def define_data_download_flags():
data/raw/repos\official\legacy\transformer,data_pipeline.py,def _load_records(filename):
data/raw/repos\official\legacy\transformer,data_pipeline.py,def _parse_example(serialized_example):
data/raw/repos\official\legacy\transformer,data_pipeline.py,"def _filter_max_length(example, max_length=256):"
data/raw/repos\official\legacy\transformer,data_pipeline.py,def _get_example_length(example):
data/raw/repos\official\legacy\transformer,data_pipeline.py,"def _batch_examples(dataset, batch_size, max_length):"
data/raw/repos\official\legacy\transformer,data_pipeline.py,"def example_to_bucket_id(example_input, example_target):"
data/raw/repos\official\legacy\transformer,data_pipeline.py,def window_size_fn(bucket_id):
data/raw/repos\official\legacy\transformer,data_pipeline.py,"def batching_fn(bucket_id, grouped_dataset):"
data/raw/repos\official\legacy\transformer,data_pipeline.py,def _generate_synthetic_data(params):
data/raw/repos\official\legacy\transformer,data_pipeline.py,"def train_input_fn(params, ctx=None):"
data/raw/repos\official\legacy\transformer,data_pipeline.py,"def eval_input_fn(params, ctx=None):"
data/raw/repos\official\legacy\transformer,data_pipeline.py,"def map_data_for_transformer_fn(x, y):"
data/raw/repos\official\legacy\transformer,embedding_layer.py,"def __init__(self, vocab_size, hidden_size):"
data/raw/repos\official\legacy\transformer,embedding_layer.py,"def build(self, input_shape):"
data/raw/repos\official\legacy\transformer,embedding_layer.py,def get_config(self):
data/raw/repos\official\legacy\transformer,embedding_layer.py,"def call(self, inputs, mode=""embedding""):"
data/raw/repos\official\legacy\transformer,embedding_layer.py,"def _embedding(self, inputs):"
data/raw/repos\official\legacy\transformer,embedding_layer.py,"def _linear(self, inputs):"
data/raw/repos\official\legacy\transformer,ffn_layer.py,"def __init__(self, hidden_size, filter_size, relu_dropout):"
data/raw/repos\official\legacy\transformer,ffn_layer.py,"def build(self, input_shape):"
data/raw/repos\official\legacy\transformer,ffn_layer.py,def get_config(self):
data/raw/repos\official\legacy\transformer,ffn_layer.py,"def call(self, x, training):"
data/raw/repos\official\legacy\transformer,metrics.py,"def _pad_tensors_to_same_length(x, y):"
data/raw/repos\official\legacy\transformer,metrics.py,"def padded_cross_entropy_loss(logits, labels, smoothing, vocab_size):"
data/raw/repos\official\legacy\transformer,metrics.py,"def padded_accuracy(logits, labels):"
data/raw/repos\official\legacy\transformer,metrics.py,"def padded_accuracy_topk(logits, labels, k):"
data/raw/repos\official\legacy\transformer,metrics.py,"def padded_accuracy_top5(logits, labels):"
data/raw/repos\official\legacy\transformer,metrics.py,"def padded_sequence_accuracy(logits, labels):"
data/raw/repos\official\legacy\transformer,metrics.py,"def padded_neg_log_perplexity(logits, labels, vocab_size):"
data/raw/repos\official\legacy\transformer,metrics.py,"def __init__(self, vocab_size):"
data/raw/repos\official\legacy\transformer,metrics.py,"def build(self, input_shape):"
data/raw/repos\official\legacy\transformer,metrics.py,def get_config(self):
data/raw/repos\official\legacy\transformer,metrics.py,"def call(self, inputs):"
data/raw/repos\official\legacy\transformer,metrics.py,"def transformer_loss(logits, labels, smoothing, vocab_size):"
data/raw/repos\official\legacy\transformer,misc.py,"def get_model_params(param_set, num_gpus):"
data/raw/repos\official\legacy\transformer,misc.py,def define_transformer_flags():
data/raw/repos\official\legacy\transformer,misc.py,def _check_bleu_files(flags_dict):
data/raw/repos\official\legacy\transformer,misc.py,def _check_bleu_vocab_file(flags_dict):
data/raw/repos\official\legacy\transformer,misc.py,def get_callbacks():
data/raw/repos\official\legacy\transformer,misc.py,"def update_stats(history, stats, callbacks):"
data/raw/repos\official\legacy\transformer,model_utils.py,"def get_decoder_self_attention_bias(length, dtype=tf.float32):"
data/raw/repos\official\legacy\transformer,model_utils.py,"def get_padding(x, padding_value=0, dtype=tf.float32):"
data/raw/repos\official\legacy\transformer,model_utils.py,"def get_padding_bias(x, padding_value=0, dtype=tf.float32):"
data/raw/repos\official\legacy\transformer,model_utils_test.py,def test_get_padding(self):
data/raw/repos\official\legacy\transformer,model_utils_test.py,def test_get_padding_bias(self):
data/raw/repos\official\legacy\transformer,model_utils_test.py,def test_get_decoder_self_attention_bias(self):
data/raw/repos\official\legacy\transformer,optimizer.py,"def __init__(self, initial_learning_rate, hidden_size, warmup_steps):"
data/raw/repos\official\legacy\transformer,optimizer.py,"def __call__(self, global_step):"
data/raw/repos\official\legacy\transformer,optimizer.py,def get_config(self):
data/raw/repos\official\legacy\transformer,transformer.py,"def create_model(params, is_train):"
data/raw/repos\official\legacy\transformer,transformer.py,"def __init__(self, params, name=None):"
data/raw/repos\official\legacy\transformer,transformer.py,def get_config(self):
data/raw/repos\official\legacy\transformer,transformer.py,"def call(self, inputs, training):"
data/raw/repos\official\legacy\transformer,transformer.py,"def encode(self, inputs, attention_bias, training):"
data/raw/repos\official\legacy\transformer,transformer.py,"def decode(self, targets, encoder_outputs, attention_bias, training):"
data/raw/repos\official\legacy\transformer,transformer.py,"def _get_symbols_to_logits_fn(self, max_decode_length, training):"
data/raw/repos\official\legacy\transformer,transformer.py,"def symbols_to_logits_fn(ids, i, cache):"
data/raw/repos\official\legacy\transformer,transformer.py,"def predict(self, encoder_outputs, encoder_decoder_attention_bias, training):"
data/raw/repos\official\legacy\transformer,transformer.py,"def __init__(self, layer, params):"
data/raw/repos\official\legacy\transformer,transformer.py,"def build(self, input_shape):"
data/raw/repos\official\legacy\transformer,transformer.py,def get_config(self):
data/raw/repos\official\legacy\transformer,transformer.py,"def call(self, x, *args, **kwargs):"
data/raw/repos\official\legacy\transformer,transformer.py,"def __init__(self, params):"
data/raw/repos\official\legacy\transformer,transformer.py,"def build(self, input_shape):"
data/raw/repos\official\legacy\transformer,transformer.py,def get_config(self):
data/raw/repos\official\legacy\transformer,transformer.py,"def call(self, encoder_inputs, attention_bias, inputs_padding, training):"
data/raw/repos\official\legacy\transformer,transformer.py,"def __init__(self, params):"
data/raw/repos\official\legacy\transformer,transformer.py,"def build(self, input_shape):"
data/raw/repos\official\legacy\transformer,transformer.py,def get_config(self):
data/raw/repos\official\legacy\transformer,transformer_forward_test.py,"def _count_params(layer, trainable_only=True):"
data/raw/repos\official\legacy\transformer,transformer_forward_test.py,"def _create_model(params, is_train):"
data/raw/repos\official\legacy\transformer,transformer_forward_test.py,def setUp(self):
data/raw/repos\official\legacy\transformer,transformer_forward_test.py,def test_forward_pass_train(self):
data/raw/repos\official\legacy\transformer,transformer_forward_test.py,def test_forward_pass_not_train(self):
data/raw/repos\official\legacy\transformer,transformer_layers_test.py,def test_attention_layer(self):
data/raw/repos\official\legacy\transformer,transformer_layers_test.py,def test_embedding_shared_weights(self):
data/raw/repos\official\legacy\transformer,transformer_layers_test.py,def test_feed_forward_network(self):
data/raw/repos\official\legacy\transformer,transformer_layers_test.py,def test_metric_layer(self):
data/raw/repos\official\legacy\transformer,transformer_main.py,"def __init__(self, flags_obj):"
data/raw/repos\official\legacy\transformer,transformer_main.py,def use_tpu(self):
data/raw/repos\official\legacy\transformer,transformer_main.py,def train(self):
data/raw/repos\official\legacy\transformer,transformer_main.py,"def train_steps(iterator, steps):"
data/raw/repos\official\legacy\transformer,transformer_main.py,def _step_fn(inputs):
data/raw/repos\official\legacy\transformer,transformer_main.py,def eval(self):
data/raw/repos\official\legacy\transformer,transformer_main.py,def predict(self):
data/raw/repos\official\legacy\transformer,transformer_main.py,"def _create_callbacks(self, cur_log_dir, params):"
data/raw/repos\official\legacy\transformer,transformer_main.py,"def _load_weights_if_possible(self, model, init_weight_path=None):"
data/raw/repos\official\legacy\transformer,transformer_main.py,def _create_optimizer(self):
data/raw/repos\official\legacy\transformer,transformer_main.py,def _ensure_dir(log_dir):
data/raw/repos\official\legacy\transformer,transformer_main.py,def main(_):
data/raw/repos\official\legacy\transformer,transformer_main_test.py,"def _generate_file(filepath, lines):"
data/raw/repos\official\legacy\transformer,transformer_main_test.py,def setUp(self):
data/raw/repos\official\legacy\transformer,transformer_main_test.py,def tearDown(self):
data/raw/repos\official\legacy\transformer,transformer_main_test.py,"def _assert_exists(self, filepath):"
data/raw/repos\official\legacy\transformer,transformer_main_test.py,def test_train_no_dist_strat(self):
data/raw/repos\official\legacy\transformer,transformer_main_test.py,def test_train_save_full_model(self):
data/raw/repos\official\legacy\transformer,transformer_main_test.py,def test_train_static_batch(self):
data/raw/repos\official\legacy\transformer,transformer_main_test.py,def test_train_1_gpu_with_dist_strat(self):
data/raw/repos\official\legacy\transformer,transformer_main_test.py,def test_train_fp16(self):
data/raw/repos\official\legacy\transformer,transformer_main_test.py,def test_train_2_gpu(self):
data/raw/repos\official\legacy\transformer,transformer_main_test.py,def test_train_2_gpu_fp16(self):
data/raw/repos\official\legacy\transformer,transformer_main_test.py,"def _prepare_files_and_flags(self, *extra_flags):"
data/raw/repos\official\legacy\transformer,transformer_main_test.py,def test_predict(self):
data/raw/repos\official\legacy\transformer,transformer_main_test.py,def test_predict_fp16(self):
data/raw/repos\official\legacy\transformer,transformer_main_test.py,def test_eval(self):
data/raw/repos\official\legacy\transformer,transformer_test.py,def setUp(self):
data/raw/repos\official\legacy\transformer,transformer_test.py,def test_create_model_train(self):
data/raw/repos\official\legacy\transformer,transformer_test.py,def test_create_model_not_train(self):
data/raw/repos\official\legacy\transformer,transformer_test.py,def test_export(self):
data/raw/repos\official\legacy\transformer,transformer_test.py,"def __init__(self, model):"
data/raw/repos\official\legacy\transformer,transformer_test.py,"def serve(self, x):"
data/raw/repos\official\legacy\transformer,translate.py,def _get_sorted_inputs(filename):
data/raw/repos\official\legacy\transformer,translate.py,"def _encode_and_add_eos(line, subtokenizer):"
data/raw/repos\official\legacy\transformer,translate.py,"def _trim_and_decode(ids, subtokenizer):"
data/raw/repos\official\legacy\transformer,translate.py,def input_generator():
data/raw/repos\official\legacy\transformer,translate.py,def predict_step(inputs):
data/raw/repos\official\legacy\transformer,translate.py,def _step_fn(inputs):
data/raw/repos\official\legacy\transformer,translate.py,def text_as_per_replica():
data/raw/repos\official\legacy\transformer,translate.py,"def translate_from_text(model, subtokenizer, txt):"
data/raw/repos\official\legacy\transformer,translate.py,"def translate_from_input(outputs, subtokenizer):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def _pad_tensors_to_same_length(x, y):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def padded_cross_entropy_loss(logits, labels, smoothing, vocab_size):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,def _convert_to_eval_metric(metric_fn):
data/raw/repos\official\legacy\transformer\utils,metrics.py,def problem_metric_fn(*args):
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def get_eval_metrics(logits, labels, params):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def padded_accuracy(logits, labels):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def padded_accuracy_topk(logits, labels, k):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def padded_accuracy_top5(logits, labels):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def padded_sequence_accuracy(logits, labels):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def padded_neg_log_perplexity(logits, labels, vocab_size):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def bleu_score(logits, labels):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def _get_ngrams_with_counter(segment, max_order):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def rouge_2_fscore(logits, labels):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def _get_ngrams(n, text):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def rouge_n(eval_sentences, ref_sentences, n=2):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def rouge_l_fscore(predictions, labels):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def rouge_l_sentence_level(eval_sentences, ref_sentences):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def _len_lcs(x, y):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def _lcs(x, y):"
data/raw/repos\official\legacy\transformer\utils,metrics.py,"def _f_lcs(llcs, m, n):"
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,def alphanumeric_char_set():
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,"def __init__(self, vocab_file, reserved_tokens=None, master_char_set=None):"
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,"def encode(self, raw_string, add_eos=False):"
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,"def _token_to_subtoken_ids(self, token):"
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,"def decode(self, subtokens):"
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,"def _subtoken_ids_to_tokens(self, subtokens):"
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,"def _save_vocab_file(vocab_file, subtoken_list):"
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,"def _load_vocab_file(vocab_file, reserved_tokens=None):"
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,def native_to_unicode(s):
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,def _unicode_to_native(s):
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,"def _split_string_to_tokens(text, master_char_set):"
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,"def _join_tokens_to_string(tokens, master_char_set):"
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,"def _escape_token(token, alphabet):"
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,def _unescape_token(token):
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,def match(m):
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,def _list_to_index_dict(lst):
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,"def _split_token_to_subtokens(token, subtoken_dict, max_subtoken_length):"
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,"def bisect(min_val, max_val):"
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,"def _generate_alphabet_dict(iterable, reserved_tokens=None):"
data/raw/repos\official\legacy\transformer\utils,tokenizer.py,"def _filter_and_bucket_subtokens(subtoken_counts, min_count):"
data/raw/repos\official\legacy\transformer\utils,tokenizer_test.py,"def _init_subtokenizer(self, vocab_list):"
data/raw/repos\official\legacy\transformer\utils,tokenizer_test.py,def test_encode(self):
data/raw/repos\official\legacy\transformer\utils,tokenizer_test.py,def test_decode(self):
data/raw/repos\official\legacy\transformer\utils,tokenizer_test.py,def test_subtoken_ids_to_tokens(self):
data/raw/repos\official\legacy\transformer\utils,tokenizer_test.py,def test_split_string_to_tokens(self):
data/raw/repos\official\legacy\transformer\utils,tokenizer_test.py,def test_join_tokens_to_string(self):
data/raw/repos\official\legacy\transformer\utils,tokenizer_test.py,def test_escape_token(self):
data/raw/repos\official\legacy\transformer\utils,tokenizer_test.py,def test_unescape_token(self):
data/raw/repos\official\legacy\transformer\utils,tokenizer_test.py,def test_list_to_index_dict(self):
data/raw/repos\official\legacy\transformer\utils,tokenizer_test.py,def test_split_token_to_subtokens(self):
data/raw/repos\official\legacy\transformer\utils,tokenizer_test.py,def test_generate_alphabet_dict(self):
data/raw/repos\official\legacy\transformer\utils,tokenizer_test.py,def test_count_and_gen_subtokens(self):
data/raw/repos\official\legacy\transformer\utils,tokenizer_test.py,def test_filter_and_bucket_subtokens(self):
data/raw/repos\official\legacy\transformer\utils,tokenizer_test.py,def test_gen_new_subtoken_list(self):
data/raw/repos\official\legacy\transformer\utils,tokenizer_test.py,def test_generate_subtokens(self):
data/raw/repos\official\legacy\xlnet,classifier_utils.py,"def _truncate_seq_pair(tokens_a, tokens_b, max_length):"
data/raw/repos\official\legacy\xlnet,data_utils.py,"def _decode_record(record, name_to_features):"
data/raw/repos\official\legacy\xlnet,data_utils.py,def input_fn():
data/raw/repos\official\legacy\xlnet,data_utils.py,"def create_squad_dataset(file_path, seq_length, batch_size, is_training):"
data/raw/repos\official\legacy\xlnet,data_utils.py,"def get_input_iterator(input_fn, strategy):"
data/raw/repos\official\legacy\xlnet,data_utils.py,def _dataset_fn(ctx=None):
data/raw/repos\official\legacy\xlnet,data_utils.py,def _dataset_fn(ctx=None):
data/raw/repos\official\legacy\xlnet,data_utils.py,"def _idx_pair_to_mask(beg_indices, end_indices, inputs, tgt_len, num_predict):"
data/raw/repos\official\legacy\xlnet,data_utils.py,"def _whole_word_mask(inputs, tgt_len, num_predict, boundary):"
data/raw/repos\official\legacy\xlnet,data_utils.py,"def _single_token_mask(inputs, tgt_len, num_predict):"
data/raw/repos\official\legacy\xlnet,data_utils.py,def parser(record):
data/raw/repos\official\legacy\xlnet,data_utils.py,def _get_num_batch(info):
data/raw/repos\official\legacy\xlnet,data_utils.py,def _dataset_fn(ctx=None):
data/raw/repos\official\legacy\xlnet,data_utils.py,"def _local_perm(inputs, is_masked, perm_size, seq_len, leak_ratio):"
data/raw/repos\official\legacy\xlnet,optimization.py,"def __call__(self, step):"
data/raw/repos\official\legacy\xlnet,optimization.py,def get_config(self):
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,"def __init__(self, guid, text_a, text_b=None, label=None):"
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,"def get_train_examples(self, data_dir):"
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,"def get_dev_examples(self, data_dir):"
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,"def get_test_examples(self, data_dir):"
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,def get_labels(self):
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,"def _read_tsv(cls, input_file, quotechar=None):"
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,def __init__(self):
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,"def get_train_examples(self, data_dir):"
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,"def get_dev_examples(self, data_dir):"
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,"def get_test_examples(self, data_dir):"
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,def get_labels(self):
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,"def _create_examples(self, lines, set_type):"
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,"def get_train_examples(self, data_dir):"
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,"def get_dev_examples(self, data_dir):"
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,def get_labels(self):
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,"def _create_examples(self, input_file):"
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,def get_labels(self):
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,"def get_train_examples(self, data_dir):"
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,"def get_dev_examples(self, data_dir):"
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,"def _create_examples(self, data_dir):"
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,def __init__(self):
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,def get_labels(self):
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,def __init__(self):
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,def __init__(self):
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,def get_labels(self):
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,"def _create_examples(self, lines, set_type):"
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,def create_int_feature(values):
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,def create_float_feature(values):
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,def main(_):
data/raw/repos\official\legacy\xlnet,preprocess_classification_data.py,def tokenize_fn(text):
data/raw/repos\official\legacy\xlnet,preprocess_pretrain_data.py,def _int64_feature(values):
data/raw/repos\official\legacy\xlnet,preprocess_pretrain_data.py,def _float_feature(values):
data/raw/repos\official\legacy\xlnet,preprocess_pretrain_data.py,"def _create_data(idx, input_paths):"
data/raw/repos\official\legacy\xlnet,preprocess_pretrain_data.py,def create_data(_):
data/raw/repos\official\legacy\xlnet,preprocess_pretrain_data.py,"def batchify(data, bsz_per_host, sent_ids=None):"
data/raw/repos\official\legacy\xlnet,preprocess_pretrain_data.py,"def _split_a_and_b(data, sent_ids, begin_idx, tot_len, extend_target=False):"
data/raw/repos\official\legacy\xlnet,preprocess_pretrain_data.py,def _is_start_piece(piece):
data/raw/repos\official\legacy\xlnet,preprocess_pretrain_data.py,"def _sample_mask(sp, seg, reverse=False, max_gram=5, goal_num_predict=None):"
data/raw/repos\official\legacy\xlnet,preprocess_pretrain_data.py,"def _convert_example(example, use_bfloat16):"
data/raw/repos\official\legacy\xlnet,preprocess_pretrain_data.py,"def _local_perm(inputs, targets, is_masked, perm_size, seq_len):"
data/raw/repos\official\legacy\xlnet,preprocess_pretrain_data.py,def parser(record):
data/raw/repos\official\legacy\xlnet,preprocess_pretrain_data.py,def input_fn(params):
data/raw/repos\official\legacy\xlnet,preprocess_pretrain_data.py,def define_flags():
data/raw/repos\official\legacy\xlnet,preprocess_squad_data.py,def preprocess():
data/raw/repos\official\legacy\xlnet,preprocess_squad_data.py,def main(_):
data/raw/repos\official\legacy\xlnet,preprocess_utils.py,def printable_text(text):
data/raw/repos\official\legacy\xlnet,preprocess_utils.py,def print_(*args):
data/raw/repos\official\legacy\xlnet,preprocess_utils.py,"def preprocess_text(inputs, lower=False, remove_space=True, keep_accents=False):"
data/raw/repos\official\legacy\xlnet,preprocess_utils.py,"def encode_pieces(sp_model, text, return_unicode=True, sample=False):"
data/raw/repos\official\legacy\xlnet,preprocess_utils.py,"def encode_ids(sp_model, text, sample=False):"
data/raw/repos\official\legacy\xlnet,run_classifier.py,def _test_step_fn(inputs):
data/raw/repos\official\legacy\xlnet,run_classifier.py,def _run_evaluation(test_iterator):
data/raw/repos\official\legacy\xlnet,run_classifier.py,def get_metric_fn():
data/raw/repos\official\legacy\xlnet,run_classifier.py,def main(unused_argv):
data/raw/repos\official\legacy\xlnet,run_pretrain.py,"def get_pretrainxlnet_model(model_config, run_config):"
data/raw/repos\official\legacy\xlnet,run_pretrain.py,def main(unused_argv):
data/raw/repos\official\legacy\xlnet,run_squad.py,def _test_step_fn(inputs):
data/raw/repos\official\legacy\xlnet,run_squad.py,def _run_evaluation(test_iterator):
data/raw/repos\official\legacy\xlnet,run_squad.py,"def get_qaxlnet_model(model_config, run_config, start_n_top, end_n_top):"
data/raw/repos\official\legacy\xlnet,run_squad.py,def main(unused_argv):
data/raw/repos\official\legacy\xlnet,squad_utils.py,def make_qid_to_has_ans(dataset):
data/raw/repos\official\legacy\xlnet,squad_utils.py,"def get_raw_scores(dataset, preds):"
data/raw/repos\official\legacy\xlnet,squad_utils.py,def normalize_answer(s):
data/raw/repos\official\legacy\xlnet,squad_utils.py,def remove_articles(text):
data/raw/repos\official\legacy\xlnet,squad_utils.py,def white_space_fix(text):
data/raw/repos\official\legacy\xlnet,squad_utils.py,def remove_punc(text):
data/raw/repos\official\legacy\xlnet,squad_utils.py,def lower(text):
data/raw/repos\official\legacy\xlnet,squad_utils.py,"def compute_exact(a_gold, a_pred):"
data/raw/repos\official\legacy\xlnet,squad_utils.py,def get_tokens(s):
data/raw/repos\official\legacy\xlnet,squad_utils.py,"def compute_f1(a_gold, a_pred):"
data/raw/repos\official\legacy\xlnet,squad_utils.py,"def find_best_thresh(preds, scores, na_probs, qid_to_has_ans):"
data/raw/repos\official\legacy\xlnet,squad_utils.py,def _compute_softmax(scores):
data/raw/repos\official\legacy\xlnet,squad_utils.py,def __str__(self):
data/raw/repos\official\legacy\xlnet,squad_utils.py,def __repr__(self):
data/raw/repos\official\legacy\xlnet,squad_utils.py,"def read_squad_examples(input_file, is_training):"
data/raw/repos\official\legacy\xlnet,squad_utils.py,"def _convert_index(index, pos, M=None, is_start=True):"
data/raw/repos\official\legacy\xlnet,squad_utils.py,def _lcs_match(max_dist):
data/raw/repos\official\legacy\xlnet,squad_utils.py,def _piece_to_id(x):
data/raw/repos\official\legacy\xlnet,squad_utils.py,"def _check_is_max_context(doc_spans, cur_span_index, position):"
data/raw/repos\official\legacy\xlnet,squad_utils.py,"def __init__(self, filename, is_training):"
data/raw/repos\official\legacy\xlnet,squad_utils.py,"def process_feature(self, feature):"
data/raw/repos\official\legacy\xlnet,squad_utils.py,def create_int_feature(values):
data/raw/repos\official\legacy\xlnet,squad_utils.py,def create_float_feature(values):
data/raw/repos\official\legacy\xlnet,squad_utils.py,def close(self):
data/raw/repos\official\legacy\xlnet,squad_utils.py,def append_feature(feature):
data/raw/repos\official\legacy\xlnet,training_utils.py,"def _save_checkpoint(checkpoint, model_dir, checkpoint_prefix):"
data/raw/repos\official\legacy\xlnet,training_utils.py,def _float_metric_value(metric):
data/raw/repos\official\legacy\xlnet,training_utils.py,"def _replicated_step(inputs, mem=None):"
data/raw/repos\official\legacy\xlnet,training_utils.py,"def train_steps(iterator, steps):"
data/raw/repos\official\legacy\xlnet,training_utils.py,def cache_fn():
data/raw/repos\official\legacy\xlnet,xlnet_config.py,"def create_run_config(is_training, is_finetune, flags):"
data/raw/repos\official\legacy\xlnet,xlnet_config.py,"def __init__(self, FLAGS=None, json_path=None, args_dict=None):"
data/raw/repos\official\legacy\xlnet,xlnet_config.py,"def init_from_dict(self, args_dict):"
data/raw/repos\official\legacy\xlnet,xlnet_config.py,"def init_from_flags(self, flags):"
data/raw/repos\official\legacy\xlnet,xlnet_config.py,"def init_from_json(self, json_path):"
data/raw/repos\official\legacy\xlnet,xlnet_config.py,"def to_json(self, json_path):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,def gelu(x):
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,def _get_initializer(flags):
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def rel_shift(x, klen=-1):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def _create_mask(qlen, mlen, dtype=tf.float32, same_length=False):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def _cache_mem(curr_out, prev_mem, mem_len, reuse_len=None):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,def is_special_none_tensor(tensor):
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def __init__(self, hidden_size, **kwargs):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def call(self, pos_seq, batch_size=None):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def __init__(self, dropout_att, scale):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def build(self, unused_input_shapes):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def build(self, unused_input_shapes):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def call(self, inp):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def __init__(self, n_token, d_embed, initializer, **kwargs):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def build(self, unused_input_shapes):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def call(self, inputs):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def build(self, unused_input_shapes):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def build(self, unused_input_shapes):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def call(self, inputs):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def call(self, features):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def call(self, features):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def build(self, unused_input_shapes):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def call(self, hidden, target, lookup_table, target_mask):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def build(self, unused_input_shapes):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def call(self, inputs):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def __init__(self, n_class, initializer, **kwargs):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def build(self, unused_input_shapes):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def call(self, hidden, labels):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def call(self, features, training=False):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def build(self, unused_input_shapes):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def __call__(self, hidden, p_mask, cls_index, **kwargs):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def call(self, inputs, training=False):"
data/raw/repos\official\legacy\xlnet,xlnet_modeling.py,"def compute_loss(log_probs, positions):"
data/raw/repos\official\modeling,grad_utils.py,def _filter_grads(grads_and_vars):
data/raw/repos\official\modeling,grad_utils.py,"def _run_callbacks(callbacks, grads_and_vars):"
data/raw/repos\official\modeling,grad_utils_test.py,def test_minimize(self):
data/raw/repos\official\modeling,grad_utils_test.py,def test_minimize_fp16(self):
data/raw/repos\official\modeling,grad_utils_test.py,def _clip_by_global_norm(grads_and_vars):
data/raw/repos\official\modeling,grad_utils_test.py,def test_set_mixed_precision_policy(self):
data/raw/repos\official\modeling,performance.py,"def set_mixed_precision_policy(dtype, loss_scale=None):"
data/raw/repos\official\modeling,tf_utils.py,def pack_inputs(inputs):
data/raw/repos\official\modeling,tf_utils.py,def unpack_inputs(inputs):
data/raw/repos\official\modeling,tf_utils.py,def is_special_none_tensor(tensor):
data/raw/repos\official\modeling,tf_utils.py,"def get_activation(identifier, use_keras_layer=False, **kwargs):"
data/raw/repos\official\modeling,tf_utils.py,"def get_shape_list(tensor, expected_rank=None, name=None):"
data/raw/repos\official\modeling,tf_utils.py,"def assert_rank(tensor, expected_rank, name=None):"
data/raw/repos\official\modeling,tf_utils.py,def safe_mean(losses):
data/raw/repos\official\modeling,tf_utils.py,def get_replica_id():
data/raw/repos\official\modeling,tf_utils.py,"def cross_replica_concat(value, axis, name=""cross_replica_concat""):"
data/raw/repos\official\modeling,tf_utils.py,def clone_initializer(initializer):
data/raw/repos\official\modeling,tf_utils.py,def serialize_keras_object(obj):
data/raw/repos\official\modeling,tf_utils.py,"def serialize_layer(layer, use_legacy_format=False):"
data/raw/repos\official\modeling,tf_utils.py,"def serialize_initializer(initializer, use_legacy_format=False):"
data/raw/repos\official\modeling,tf_utils.py,"def serialize_regularizer(regularizer, use_legacy_format=False):"
data/raw/repos\official\modeling,tf_utils.py,"def serialize_constraint(constraint, use_legacy_format=False):"
data/raw/repos\official\modeling,tf_utils.py,"def serialize_activation(activation, use_legacy_format=False):"
data/raw/repos\official\modeling,tf_utils_test.py,def all_strategy_combinations():
data/raw/repos\official\modeling,tf_utils_test.py,"def test_cross_replica_concat(self, strategy):"
data/raw/repos\official\modeling,tf_utils_test.py,def concat(axis):
data/raw/repos\official\modeling,tf_utils_test.py,def function():
data/raw/repos\official\modeling,tf_utils_test.py,def expected(axis):
data/raw/repos\official\modeling,tf_utils_test.py,"def test_cross_replica_concat_gradient(self, strategy):"
data/raw/repos\official\modeling,tf_utils_test.py,def function():
data/raw/repos\official\modeling,tf_utils_test.py,"def test_get_activations(self, name, use_keras_layer):"
data/raw/repos\official\modeling,tf_utils_test.py,"def test_get_leaky_relu_layer(self, strategy):"
data/raw/repos\official\modeling,tf_utils_test.py,def forward(x):
data/raw/repos\official\modeling\activations,gelu.py,def gelu(x):
data/raw/repos\official\modeling\activations,gelu_test.py,def test_gelu(self):
data/raw/repos\official\modeling\activations,mish_test.py,def test_mish(self):
data/raw/repos\official\modeling\activations,relu.py,def relu6(features):
data/raw/repos\official\modeling\activations,relu_test.py,def test_relu6(self):
data/raw/repos\official\modeling\activations,sigmoid.py,def hard_sigmoid(features):
data/raw/repos\official\modeling\activations,sigmoid_test.py,"def _hard_sigmoid_nn(self, x):"
data/raw/repos\official\modeling\activations,sigmoid_test.py,def test_hard_sigmoid(self):
data/raw/repos\official\modeling\activations,swish.py,def simple_swish(features):
data/raw/repos\official\modeling\activations,swish.py,def hard_swish(features):
data/raw/repos\official\modeling\activations,swish.py,def identity(features):
data/raw/repos\official\modeling\activations,swish_test.py,"def _hard_swish_np(self, x):"
data/raw/repos\official\modeling\activations,swish_test.py,def test_simple_swish(self):
data/raw/repos\official\modeling\activations,swish_test.py,def test_hard_swish(self):
data/raw/repos\official\modeling\fast_training\experimental,tf2_utils_2x_wide_test.py,def test_expand_vector(self):
data/raw/repos\official\modeling\fast_training\experimental,tf2_utils_2x_wide_test.py,def test_expand_matrix(self):
data/raw/repos\official\modeling\fast_training\experimental,tf2_utils_2x_wide_test.py,def test_expand_matrix_axis_0(self):
data/raw/repos\official\modeling\fast_training\experimental,tf2_utils_2x_wide_test.py,def test_expand_matrix_axis_1(self):
data/raw/repos\official\modeling\fast_training\experimental,tf2_utils_2x_wide_test.py,def test_expand_3d_tensor(self):
data/raw/repos\official\modeling\fast_training\experimental,tf2_utils_2x_wide_test.py,def test_expand_3d_tensor_axis_0(self):
data/raw/repos\official\modeling\fast_training\experimental,tf2_utils_2x_wide_test.py,def test_expand_3d_tensor_axis_2(self):
data/raw/repos\official\modeling\fast_training\experimental,tf2_utils_2x_wide_test.py,def test_relations(self):
data/raw/repos\official\modeling\fast_training\experimental,tf2_utils_2x_wide_test.py,def test_end_to_end(self):
data/raw/repos\official\modeling\fast_training\progressive,policies.py,def __init__(self):
data/raw/repos\official\modeling\fast_training\progressive,train.py,def main(_):
data/raw/repos\official\modeling\fast_training\progressive,trainer.py,def model(self):
data/raw/repos\official\modeling\fast_training\progressive,trainer.py,def optimizer(self):
data/raw/repos\official\modeling\fast_training\progressive,trainer.py,def train_dataset(self):
data/raw/repos\official\modeling\fast_training\progressive,trainer.py,"def train_dataset(self, _):"
data/raw/repos\official\modeling\fast_training\progressive,trainer.py,def eval_dataset(self):
data/raw/repos\official\modeling\fast_training\progressive,trainer.py,"def eval_dataset(self, _):"
data/raw/repos\official\modeling\fast_training\progressive,trainer.py,def train_loop_end(self):
data/raw/repos\official\modeling\fast_training\progressive,trainer.py,"def _update_pt_stage_from_ckpt(self, ckpt_file):"
data/raw/repos\official\modeling\fast_training\progressive,trainer.py,"def _maybe_export_non_progressive_checkpoint(self, export_ckpt_dir):"
data/raw/repos\official\modeling\fast_training\progressive,trainer_test.py,def all_strategy_combinations():
data/raw/repos\official\modeling\fast_training\progressive,trainer_test.py,def get_exp_config():
data/raw/repos\official\modeling\fast_training\progressive,trainer_test.py,"def __init__(self, strategy, task_config, change_train_dataset=True):"
data/raw/repos\official\modeling\fast_training\progressive,trainer_test.py,"def _build_inputs(self, stage_id):"
data/raw/repos\official\modeling\fast_training\progressive,trainer_test.py,def dummy_data(_):
data/raw/repos\official\modeling\fast_training\progressive,trainer_test.py,def setUp(self):
data/raw/repos\official\modeling\fast_training\progressive,trainer_test.py,"def create_test_trainer(self, distribution, model_dir, change_train_dataset):"
data/raw/repos\official\modeling\fast_training\progressive,trainer_test.py,"def test_checkpointing(self, distribution):"
data/raw/repos\official\modeling\fast_training\progressive,trainer_test.py,"def test_train_dataset(self, distribution):"
data/raw/repos\official\modeling\fast_training\progressive,trainer_test.py,"def test_train_dataset_no_switch(self, distribution):"
data/raw/repos\official\modeling\fast_training\progressive,trainer_test.py,def setUp(self):
data/raw/repos\official\modeling\fast_training\progressive,trainer_test.py,"def create_test_trainer(self, distribution):"
data/raw/repos\official\modeling\fast_training\progressive,trainer_test.py,"def test_trainer_train(self, distribution):"
data/raw/repos\official\modeling\fast_training\progressive,trainer_test.py,"def test_trainer_validate(self, distribution):"
data/raw/repos\official\modeling\fast_training\progressive,trainer_test.py,"def test_configure_optimizer(self, mixed_precision_dtype, loss_scale):"
data/raw/repos\official\modeling\fast_training\progressive,train_lib.py,def timeout_fn():
data/raw/repos\official\modeling\fast_training\progressive,train_lib_test.py,"def __init__(self, params: cfg.TaskConfig, logging_dir: str = None):"
data/raw/repos\official\modeling\fast_training\progressive,train_lib_test.py,def num_stages(self):
data/raw/repos\official\modeling\fast_training\progressive,train_lib_test.py,"def num_steps(self, stage_id):"
data/raw/repos\official\modeling\fast_training\progressive,train_lib_test.py,"def get_model(self, stage_id, old_model=None):"
data/raw/repos\official\modeling\fast_training\progressive,train_lib_test.py,"def get_optimizer(self, stage_id):"
data/raw/repos\official\modeling\fast_training\progressive,train_lib_test.py,"def get_train_dataset(self, stage_id):"
data/raw/repos\official\modeling\fast_training\progressive,train_lib_test.py,"def get_eval_dataset(self, stage_id):"
data/raw/repos\official\modeling\fast_training\progressive,train_lib_test.py,def setUp(self):
data/raw/repos\official\modeling\fast_training\progressive,train_lib_test.py,"def test_end_to_end(self, distribution_strategy, flag_mode, run_post_eval):"
data/raw/repos\official\modeling\fast_training\progressive,utils.py,"def __init__(self, **kwargs):"
data/raw/repos\official\modeling\fast_training\progressive,utils.py,"def reassign_trackable(self, **kwargs):"
data/raw/repos\official\modeling\fast_training\progressive,utils.py,"def __init__(self, before_load_hook, **kwargs):"
data/raw/repos\official\modeling\fast_training\progressive,utils.py,"def read(self, save_path, options=None):"
data/raw/repos\official\modeling\hyperparams,base_config.py,def bind(config_cls):
data/raw/repos\official\modeling\hyperparams,base_config.py,def decorator(builder):
data/raw/repos\official\modeling\hyperparams,base_config.py,"def _wrapper(self, *args, **kwargs):"
data/raw/repos\official\modeling\hyperparams,base_config.py,def _is_optional(field):
data/raw/repos\official\modeling\hyperparams,base_config.py,"def __post_init__(self, default_params, restrictions):"
data/raw/repos\official\modeling\hyperparams,base_config.py,def BUILDER(self):
data/raw/repos\official\modeling\hyperparams,base_config.py,def _get_annotations(cls):
data/raw/repos\official\modeling\hyperparams,base_config.py,"def _isvalidsequence(cls, v):"
data/raw/repos\official\modeling\hyperparams,base_config.py,"def _import_config(cls, v, subconfig_type):"
data/raw/repos\official\modeling\hyperparams,base_config.py,"def _export_config(cls, v):"
data/raw/repos\official\modeling\hyperparams,base_config.py,"def _set(self, k, v):"
data/raw/repos\official\modeling\hyperparams,base_config.py,def is_null(k):
data/raw/repos\official\modeling\hyperparams,base_config.py,"def __setattr__(self, k, v):"
data/raw/repos\official\modeling\hyperparams,base_config.py,"def _override(self, override_dict, is_strict=True):"
data/raw/repos\official\modeling\hyperparams,base_config.py,def as_dict(self):
data/raw/repos\official\modeling\hyperparams,base_config.py,"def replace(self, **kwargs):"
data/raw/repos\official\modeling\hyperparams,base_config.py,"def from_yaml(cls, file_path: str):"
data/raw/repos\official\modeling\hyperparams,base_config.py,"def from_json(cls, file_path: str):"
data/raw/repos\official\modeling\hyperparams,base_config.py,"def from_args(cls, *args, **kwargs):"
data/raw/repos\official\modeling\hyperparams,base_config_test.py,"def assertHasSameTypes(self, c, d, msg=''):"
data/raw/repos\official\modeling\hyperparams,base_config_test.py,"def assertImportExport(self, v):"
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_invalid_keys(self):
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_cls(self):
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def _test():
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_nested_config_types(self):
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_replace(self):
data/raw/repos\official\modeling\hyperparams,base_config_test.py,"def test_key_error(self, key, msg):"
data/raw/repos\official\modeling\hyperparams,base_config_test.py,"def test_import_export_immutable_types(self, v):"
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_override_is_strict_true(self):
data/raw/repos\official\modeling\hyperparams,base_config_test.py,"def test_import_unsupport_types(self, v, msg):"
data/raw/repos\official\modeling\hyperparams,base_config_test.py,"def test_import_export_nested_structure(self, d):"
data/raw/repos\official\modeling\hyperparams,base_config_test.py,"def test_import_export_nested_sequences(self, v):"
data/raw/repos\official\modeling\hyperparams,base_config_test.py,"def test_import_export_unsupport_sequence(self, v):"
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_construct_subtype(self):
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_import_config(self):
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_override(self):
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_override_scalar_with_dict_replaces_the_whole_value(self):
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_override_dict_with_scalar_replaces_the_whole_value(self):
data/raw/repos\official\modeling\hyperparams,base_config_test.py,"def test_config_vs_params_dict(self, v):"
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_ppformat(self):
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_with_superclass_override(self):
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_get_annotations_without_base_config_leak(self):
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_with_restrictions(self):
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_nested_tuple(self):
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_override_by_empty_sequence(self):
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_correctly_display_optional_field(self):
data/raw/repos\official\modeling\hyperparams,base_config_test.py,def test_modern_optional_syntax(self):
data/raw/repos\official\modeling\hyperparams,oneof.py,def as_dict(self):
data/raw/repos\official\modeling\hyperparams,oneof.py,def get(self):
data/raw/repos\official\modeling\hyperparams,oneof_test.py,def test_to_dict(self):
data/raw/repos\official\modeling\hyperparams,oneof_test.py,def test_get_oneof(self):
data/raw/repos\official\modeling\hyperparams,params_dict.py,"def __init__(self, default_params=None, restrictions=None):"
data/raw/repos\official\modeling\hyperparams,params_dict.py,"def _set(self, k, v):"
data/raw/repos\official\modeling\hyperparams,params_dict.py,"def __setattr__(self, k, v):"
data/raw/repos\official\modeling\hyperparams,params_dict.py,"def __getattr__(self, k):"
data/raw/repos\official\modeling\hyperparams,params_dict.py,"def __contains__(self, key):"
data/raw/repos\official\modeling\hyperparams,params_dict.py,"def get(self, key, value=None):"
data/raw/repos\official\modeling\hyperparams,params_dict.py,"def __delattr__(self, k):"
data/raw/repos\official\modeling\hyperparams,params_dict.py,"def override(self, override_params, is_strict=True):"
data/raw/repos\official\modeling\hyperparams,params_dict.py,"def _override(self, override_dict, is_strict=True):"
data/raw/repos\official\modeling\hyperparams,params_dict.py,def lock(self):
data/raw/repos\official\modeling\hyperparams,params_dict.py,def as_dict(self):
data/raw/repos\official\modeling\hyperparams,params_dict.py,def validate(self):
data/raw/repos\official\modeling\hyperparams,params_dict.py,"def _get_kv(dotted_string, params_dict):"
data/raw/repos\official\modeling\hyperparams,params_dict.py,"def _get_kvs(tokens, params_dict):"
data/raw/repos\official\modeling\hyperparams,params_dict.py,def read_yaml_to_params_dict(file_path: str):
data/raw/repos\official\modeling\hyperparams,params_dict.py,"def save_params_dict_to_yaml(params, file_path):"
data/raw/repos\official\modeling\hyperparams,params_dict.py,"def _my_list_rep(dumper, data):"
data/raw/repos\official\modeling\hyperparams,params_dict.py,def nested_csv_str_to_json_str(csv_str):
data/raw/repos\official\modeling\hyperparams,params_dict.py,"def override_params_dict(params, dict_or_string_or_yaml_file, is_strict):"
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_init_from_an_empty_dict(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_init_from_a_dict(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_init_from_a_param_dict(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_lock(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_setattr(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_getattr(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_delattr(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_contains(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_get(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_override_is_strict_true(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_override_is_strict_false(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_as_dict(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_validate(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,"def write_temp_file(self, filename, text):"
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_save_params_dict_to_yaml(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_read_yaml_to_params_dict(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_override_params_dict_using_dict(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_override_params_dict_using_yaml_string(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_override_params_dict_using_json_string(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_override_params_dict_using_csv_string(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_override_params_dict_using_yaml_file(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_basic_csv_str_to_json_str(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_basic_csv_str_load(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_basic_nested_csv_str_to_json_str(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_basic_nested_csv_str_load(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_complex_nested_csv_str_to_json_str(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_complex_nested_csv_str_load(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_int_array_param_nested_csv_str_to_json_str(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_float_array_param_nested_csv_str_to_json_str(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_incomplete_array_param_nested_csv_str_to_json_str(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_csv_str_load_supported_datatypes(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_csv_str_load_unsupported_datatypes(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_csv_str_to_json_str_spacing(self):
data/raw/repos\official\modeling\hyperparams,params_dict_test.py,def test_gcs_added_quotes(self):
data/raw/repos\official\modeling\multitask,base_model.py,"def __init__(self, **kwargs):"
data/raw/repos\official\modeling\multitask,base_model.py,def sub_tasks(self):
data/raw/repos\official\modeling\multitask,base_model.py,def initialize(self):
data/raw/repos\official\modeling\multitask,base_model.py,def build(self):
data/raw/repos\official\modeling\multitask,base_trainer.py,def train_loop_begin(self):
data/raw/repos\official\modeling\multitask,base_trainer.py,def train_loop_end(self):
data/raw/repos\official\modeling\multitask,base_trainer.py,def checkpoint(self):
data/raw/repos\official\modeling\multitask,base_trainer.py,def training_losses(self):
data/raw/repos\official\modeling\multitask,base_trainer.py,def training_metrics(self):
data/raw/repos\official\modeling\multitask,base_trainer.py,def strategy(self):
data/raw/repos\official\modeling\multitask,base_trainer.py,def multi_task(self):
data/raw/repos\official\modeling\multitask,base_trainer.py,def multi_task_model(self):
data/raw/repos\official\modeling\multitask,base_trainer.py,def optimizer(self):
data/raw/repos\official\modeling\multitask,base_trainer.py,def global_step(self):
data/raw/repos\official\modeling\multitask,base_trainer.py,"def train_step(self, iterator_map):"
data/raw/repos\official\modeling\multitask,base_trainer.py,def step_fn(inputs):
data/raw/repos\official\modeling\multitask,base_trainer_test.py,def all_strategy_combinations():
data/raw/repos\official\modeling\multitask,base_trainer_test.py,"def test_multitask_joint_trainer(self, distribution):"
data/raw/repos\official\modeling\multitask,base_trainer_test.py,def test_trainer_with_configs(self):
data/raw/repos\official\modeling\multitask,evaluator.py,"def get_function(task_name, task):"
data/raw/repos\official\modeling\multitask,evaluator.py,def step_fn(inputs):
data/raw/repos\official\modeling\multitask,evaluator.py,def eval_step_fn(iterator):
data/raw/repos\official\modeling\multitask,evaluator.py,def strategy(self):
data/raw/repos\official\modeling\multitask,evaluator.py,def tasks(self):
data/raw/repos\official\modeling\multitask,evaluator.py,def model(self):
data/raw/repos\official\modeling\multitask,evaluator.py,def global_step(self):
data/raw/repos\official\modeling\multitask,evaluator.py,def validation_losses(self):
data/raw/repos\official\modeling\multitask,evaluator.py,def validation_metrics(self):
data/raw/repos\official\modeling\multitask,evaluator.py,def checkpoint(self):
data/raw/repos\official\modeling\multitask,evaluator.py,"def evaluate(self, num_steps: tf.Tensor):"
data/raw/repos\official\modeling\multitask,evaluator_test.py,def all_strategy_combinations():
data/raw/repos\official\modeling\multitask,evaluator_test.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\modeling\multitask,evaluator_test.py,"def call(self, inputs):"
data/raw/repos\official\modeling\multitask,evaluator_test.py,"def build_metrics(self, training: bool = True):"
data/raw/repos\official\modeling\multitask,evaluator_test.py,"def build_inputs(self, params):"
data/raw/repos\official\modeling\multitask,evaluator_test.py,def generate_data(_):
data/raw/repos\official\modeling\multitask,evaluator_test.py,"def validation_step(self, inputs, model: tf_keras.Model, metrics=None):"
data/raw/repos\official\modeling\multitask,evaluator_test.py,"def aggregate_logs(self, state, step_outputs):"
data/raw/repos\official\modeling\multitask,evaluator_test.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\modeling\multitask,evaluator_test.py,"def test_multitask_evaluator(self, distribution):"
data/raw/repos\official\modeling\multitask,evaluator_test.py,"def test_multitask_evaluator_numpy_metrics(self, distribution):"
data/raw/repos\official\modeling\multitask,interleaving_trainer.py,"def _get_task_step(task_name, task):"
data/raw/repos\official\modeling\multitask,interleaving_trainer.py,def step_fn(inputs):
data/raw/repos\official\modeling\multitask,interleaving_trainer.py,"def task_step_counter(self, name):"
data/raw/repos\official\modeling\multitask,interleaving_trainer.py,"def _task_train_step(self, name):"
data/raw/repos\official\modeling\multitask,interleaving_trainer.py,def _step_fn(inputs):
data/raw/repos\official\modeling\multitask,interleaving_trainer.py,"def train_step(self, iterator_map):"
data/raw/repos\official\modeling\multitask,interleaving_trainer.py,def train_loop_end(self):
data/raw/repos\official\modeling\multitask,interleaving_trainer_test.py,def all_strategy_combinations():
data/raw/repos\official\modeling\multitask,interleaving_trainer_test.py,"def test_multitask_interleaving_trainer(self, distribution):"
data/raw/repos\official\modeling\multitask,interleaving_trainer_test.py,"def test_trainer_with_configs(self, distribution):"
data/raw/repos\official\modeling\multitask,multitask.py,"def from_config(cls, config: configs.MultiTaskConfig, logging_dir=None):"
data/raw/repos\official\modeling\multitask,multitask.py,def tasks(self):
data/raw/repos\official\modeling\multitask,multitask.py,"def task_weight(self, task_name):"
data/raw/repos\official\modeling\multitask,multitask.py,def task_weights(self):
data/raw/repos\official\modeling\multitask,task_sampler.py,"def __init__(self, task_weights: Dict[Text, Union[float, int]]):"
data/raw/repos\official\modeling\multitask,task_sampler.py,def task_weights(self):
data/raw/repos\official\modeling\multitask,task_sampler.py,"def __init__(self, task_weights: Dict[Text, Union[float, int]]):"
data/raw/repos\official\modeling\multitask,task_sampler_test.py,def setUp(self):
data/raw/repos\official\modeling\multitask,task_sampler_test.py,def test_uniform_sample_distribution(self):
data/raw/repos\official\modeling\multitask,task_sampler_test.py,def test_proportional_sample_distribution(self):
data/raw/repos\official\modeling\multitask,task_sampler_test.py,def test_annealing_sample_distribution(self):
data/raw/repos\official\modeling\multitask,test_utils.py,"def __init__(self, shared_layer, *args, **kwargs):"
data/raw/repos\official\modeling\multitask,test_utils.py,"def call(self, inputs):"
data/raw/repos\official\modeling\multitask,test_utils.py,"def __init__(self, shared_layer, *args, **kwargs):"
data/raw/repos\official\modeling\multitask,test_utils.py,"def call(self, inputs):"
data/raw/repos\official\modeling\multitask,test_utils.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\modeling\multitask,test_utils.py,def mock_data(feature_name):
data/raw/repos\official\modeling\multitask,test_utils.py,def _generate_data(_):
data/raw/repos\official\modeling\multitask,test_utils.py,"def build_metrics(self, training: bool = True):"
data/raw/repos\official\modeling\multitask,test_utils.py,"def build_inputs(self, params):"
data/raw/repos\official\modeling\multitask,test_utils.py,"def build_metrics(self, training: bool = True):"
data/raw/repos\official\modeling\multitask,test_utils.py,"def build_inputs(self, params):"
data/raw/repos\official\modeling\multitask,train_lib.py,def timeout_fn():
data/raw/repos\official\modeling\multitask,train_lib.py,def timeout_fn():
data/raw/repos\official\modeling\multitask,train_lib_test.py,def setUp(self):
data/raw/repos\official\modeling\multitask,train_lib_test.py,"def test_end_to_end(self, distribution_strategy, optimizer, flag_mode):"
data/raw/repos\official\modeling\multitask,train_lib_test.py,"def test_end_to_end_multi_eval(self, distribution_strategy, flag_mode):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def maybe_merge_call(fn, strategy, *args, **kwargs):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def shadow_copy(self, model: tf_keras.Model):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,def has_shadow_copy(self):
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def _create_slots(self, var_list):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def apply_gradients(self, grads_and_vars, name: Optional[str] = None):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def update_average(self, strategy):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def _apply_moving(average, normal):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,def swap_weights(self):
data/raw/repos\official\modeling\optimization,ema_optimizer.py,def _swap_weights(self):
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def fn_0(a, b):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def fn_1(b, a):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def fn_2(a, b):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def _swap(strategy, a_and_b):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def assign_average_vars(self, var_list: List[tf.Variable]):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,def _create_hypers(self):
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def _prepare(self, var_list):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,def iterations(self):
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def iterations(self, variable):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,def weights(self):
data/raw/repos\official\modeling\optimization,ema_optimizer.py,def variables(self):
data/raw/repos\official\modeling\optimization,ema_optimizer.py,def lr(self):
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def lr(self, lr):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,def learning_rate(self):
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def learning_rate(self, learning_rate):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def _resource_apply_dense(self, grad, var):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def _resource_apply_sparse(self, grad, var, indices):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def _resource_apply_sparse_duplicate_indices(self, grad, var, indices):"
data/raw/repos\official\modeling\optimization,ema_optimizer.py,def get_config(self):
data/raw/repos\official\modeling\optimization,ema_optimizer.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\modeling\optimization,lamb.py,"def _create_slots(self, var_list):"
data/raw/repos\official\modeling\optimization,lamb.py,"def _prepare_local(self, var_device, var_dtype, apply_state):"
data/raw/repos\official\modeling\optimization,lamb.py,"def _resource_apply_dense(self, grad, var, apply_state=None):"
data/raw/repos\official\modeling\optimization,lamb.py,"def _resource_apply_sparse(self, grad, var, indices, apply_state=None):"
data/raw/repos\official\modeling\optimization,lamb.py,def get_config(self):
data/raw/repos\official\modeling\optimization,lamb.py,"def _do_use_weight_decay(self, param_name):"
data/raw/repos\official\modeling\optimization,lamb.py,"def _do_layer_adaptation(self, param_name):"
data/raw/repos\official\modeling\optimization,lamb.py,"def _get_variable_name(self, param_name):"
data/raw/repos\official\modeling\optimization,lamb_test.py,"def get_beta_accumulators(opt, dtype):"
data/raw/repos\official\modeling\optimization,lamb_test.py,def test_sparse(self):
data/raw/repos\official\modeling\optimization,lamb_test.py,def test_basic_with_learning_rate_decay(self):
data/raw/repos\official\modeling\optimization,lamb_test.py,def test_exclude_weight_decay(self):
data/raw/repos\official\modeling\optimization,lamb_test.py,def test_exclude_layer_adaptation(self):
data/raw/repos\official\modeling\optimization,lamb_test.py,def test_serialization(self):
data/raw/repos\official\modeling\optimization,lars.py,"def _create_slots(self, var_list):"
data/raw/repos\official\modeling\optimization,lars.py,"def _resource_apply_dense(self, grad, param, apply_state=None):"
data/raw/repos\official\modeling\optimization,lars.py,"def _resource_apply_sparse(self, grad, handle, indices, apply_state):"
data/raw/repos\official\modeling\optimization,lars.py,"def _use_weight_decay(self, param_name):"
data/raw/repos\official\modeling\optimization,lars.py,"def _do_layer_adaptation(self, param_name):"
data/raw/repos\official\modeling\optimization,lars.py,def get_config(self):
data/raw/repos\official\modeling\optimization,lars.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\modeling\optimization,legacy_adamw.py,"def _prepare_local(self, var_device, var_dtype, apply_state):"
data/raw/repos\official\modeling\optimization,legacy_adamw.py,"def _decay_weights_op(self, var, learning_rate, apply_state):"
data/raw/repos\official\modeling\optimization,legacy_adamw.py,"def _get_lr(self, var_device, var_dtype, apply_state):"
data/raw/repos\official\modeling\optimization,legacy_adamw.py,"def _resource_apply_dense(self, grad, var, apply_state=None):"
data/raw/repos\official\modeling\optimization,legacy_adamw.py,"def _resource_apply_sparse(self, grad, var, indices, apply_state=None):"
data/raw/repos\official\modeling\optimization,legacy_adamw.py,def get_config(self):
data/raw/repos\official\modeling\optimization,legacy_adamw.py,"def _do_use_weight_decay(self, param_name):"
data/raw/repos\official\modeling\optimization,lr_schedule.py,"def _make_offset_wrapper(new_class_name: str, base_lr_class):"
data/raw/repos\official\modeling\optimization,lr_schedule.py,"def offset_learning_rate_init(self, offset=0, **kwargs):"
data/raw/repos\official\modeling\optimization,lr_schedule.py,"def offset_learning_rate_call(self, step):"
data/raw/repos\official\modeling\optimization,lr_schedule.py,"def __call__(self, step: int):"
data/raw/repos\official\modeling\optimization,lr_schedule.py,"def __call__(self, step):"
data/raw/repos\official\modeling\optimization,lr_schedule.py,"def __call__(self, step):"
data/raw/repos\official\modeling\optimization,lr_schedule.py,def get_config(self):
data/raw/repos\official\modeling\optimization,lr_schedule.py,"def __call__(self, step):"
data/raw/repos\official\modeling\optimization,lr_schedule.py,def get_config(self):
data/raw/repos\official\modeling\optimization,lr_schedule.py,"def __call__(self, step):"
data/raw/repos\official\modeling\optimization,lr_schedule.py,def get_config(self):
data/raw/repos\official\modeling\optimization,lr_schedule.py,"def __call__(self, global_step):"
data/raw/repos\official\modeling\optimization,lr_schedule.py,def get_config(self):
data/raw/repos\official\modeling\optimization,lr_schedule_test.py,"def test_generated_docstring(self, class_name):"
data/raw/repos\official\modeling\optimization,lr_schedule_test.py,"def test_offset(self, class_name, kwarg):"
data/raw/repos\official\modeling\optimization,optimizer_factory.py,"def __init__(self, config: opt_cfg.OptimizationConfig):"
data/raw/repos\official\modeling\optimization,optimizer_factory.py,def build_learning_rate(self):
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,"def test_optimizers(self, optimizer_type):"
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,"def test_new_optimizers(self, optimizer_type):"
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,def test_gradient_aggregator(self):
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,"def test_gradient_clipping(self, clipnorm, clipvalue):"
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,def test_missing_types(self):
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,def test_wrong_return_type(self):
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,def test_stepwise_lr_schedule(self):
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,def test_stepwise_lr_with_warmup_schedule(self):
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,def test_exponential_lr_schedule(self):
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,def test_polynomial_lr_schedule(self):
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,def test_cosine_lr_schedule(self):
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,def test_constant_lr_with_warmup_schedule(self):
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,def test_stepwise_lr_with_polynomial_warmup_schedule(self):
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,def test_power_lr_schedule(self):
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,def test_power_linear_lr_schedule(self):
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,def test_power_with_offset_lr_schedule(self):
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,def test_step_cosine_lr_schedule_with_warmup(self):
data/raw/repos\official\modeling\optimization,optimizer_factory_test.py,def test_registry(self):
data/raw/repos\official\modeling\optimization\configs,optimization_config_test.py,def test_no_optimizer(self):
data/raw/repos\official\modeling\optimization\configs,optimization_config_test.py,def test_no_lr_schedule(self):
data/raw/repos\official\modeling\optimization\configs,optimization_config_test.py,def test_no_warmup_schedule(self):
data/raw/repos\official\modeling\optimization\configs,optimization_config_test.py,def test_config(self):
data/raw/repos\official\modeling\privacy,configs_test.py,def test_clipping_norm_default(self):
data/raw/repos\official\modeling\privacy,configs_test.py,def test_noise_multiplier_default(self):
data/raw/repos\official\modeling\privacy,configs_test.py,def test_config(self):
data/raw/repos\official\modeling\privacy,ops_test.py,def test_clip_l2_norm(self):
data/raw/repos\official\modeling\privacy,ops_test.py,"def test_add_noise(self, mock_random):"
data/raw/repos\official\nlp,continuous_finetune_lib.py,def _flatten_dict(xs):
data/raw/repos\official\nlp,continuous_finetune_lib.py,"def _flatten(xs, prefix):"
data/raw/repos\official\nlp,continuous_finetune_lib.py,def timeout_fn():
data/raw/repos\official\nlp,continuous_finetune_lib_test.py,def setUp(self):
data/raw/repos\official\nlp,continuous_finetune_lib_test.py,def testContinuousFinetune(self):
data/raw/repos\official\nlp,optimization.py,"def __call__(self, step):"
data/raw/repos\official\nlp,optimization.py,def get_config(self):
data/raw/repos\official\nlp,train.py,"def _run_experiment_with_preemption_recovery(params, model_dir):"
data/raw/repos\official\nlp,train.py,def main(_):
data/raw/repos\official\nlp\configs,encoders_test.py,def test_encoder_from_yaml(self):
data/raw/repos\official\nlp\configs,encoders_test.py,def test_build_teams(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def __init__(self, process_text_fn=tokenization.convert_to_unicode):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_train_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_dev_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_test_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _read_tsv(cls, input_file, quotechar=None):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _read_jsonl(cls, input_file):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def featurize_example(self, *kargs, **kwargs):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_train_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_dev_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_test_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples_tfds(self, set_type):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_train_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_dev_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_test_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples_tfds(self, dataset, set_type):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples_tfds(self, set_type):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_train_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_dev_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_train_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_dev_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_test_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples_tfds(self, set_type):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples_tfds(self, set_type):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_train_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_dev_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_test_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples_tfds(self, set_type):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples_tfds(self, set_type):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples_tfds(self, set_type):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples_tfds(self, set_type):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def __init__(self, process_text_fn=tokenization.convert_to_unicode):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples_tfds(self, set_type):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _process_tfds_params_str(self, params_str):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_train_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_dev_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_test_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples(self, split_name, set_type):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples_tfds(self, set_type):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_train_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_dev_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_test_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_train_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_dev_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_test_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_train_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_dev_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_test_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def get_test_examples(self, data_dir):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples(self, lines, set_type):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples_tfds(self, set_type):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples_tfds(self, set_type):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples_tfds(self, set_type):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _create_examples_tfds(self, set_type):"
data/raw/repos\official\nlp\data,classifier_data_lib.py,def create_int_feature(values):
data/raw/repos\official\nlp\data,classifier_data_lib.py,def create_float_feature(values):
data/raw/repos\official\nlp\data,classifier_data_lib.py,"def _truncate_seq_pair(tokens_a, tokens_b, max_length):"
data/raw/repos\official\nlp\data,classifier_data_lib_test.py,"def decode_record(record, name_to_features):"
data/raw/repos\official\nlp\data,classifier_data_lib_test.py,def setUp(self):
data/raw/repos\official\nlp\data,classifier_data_lib_test.py,"def test_generate_dataset_from_tfds_processor(self, task_type):"
data/raw/repos\official\nlp\data,create_finetuning_data.py,def generate_classifier_dataset():
data/raw/repos\official\nlp\data,create_finetuning_data.py,def generate_regression_dataset():
data/raw/repos\official\nlp\data,create_finetuning_data.py,def generate_squad_dataset():
data/raw/repos\official\nlp\data,create_finetuning_data.py,def generate_retrieval_dataset():
data/raw/repos\official\nlp\data,create_finetuning_data.py,def generate_tagging_dataset():
data/raw/repos\official\nlp\data,create_finetuning_data.py,def main(_):
data/raw/repos\official\nlp\data,create_pretraining_data.py,def __str__(self):
data/raw/repos\official\nlp\data,create_pretraining_data.py,def __repr__(self):
data/raw/repos\official\nlp\data,create_pretraining_data.py,def create_int_feature(values):
data/raw/repos\official\nlp\data,create_pretraining_data.py,def create_float_feature(values):
data/raw/repos\official\nlp\data,create_pretraining_data.py,"def _window(iterable, size):"
data/raw/repos\official\nlp\data,create_pretraining_data.py,def _contiguous(sorted_grams):
data/raw/repos\official\nlp\data,create_pretraining_data.py,"def _masking_ngrams(grams, max_ngram_size, max_masked_tokens, rng):"
data/raw/repos\official\nlp\data,create_pretraining_data.py,def _tokens_to_grams(tokens):
data/raw/repos\official\nlp\data,create_pretraining_data.py,"def truncate_seq_pair(tokens_a, tokens_b, max_num_tokens, rng):"
data/raw/repos\official\nlp\data,create_pretraining_data.py,"def get_processor_text_fn(is_sentence_piece, do_lower_case):"
data/raw/repos\official\nlp\data,create_pretraining_data.py,def processor_text_fn(text):
data/raw/repos\official\nlp\data,create_pretraining_data.py,def main(_):
data/raw/repos\official\nlp\data,create_pretraining_data_test.py,def test_tokens_to_grams(self):
data/raw/repos\official\nlp\data,create_pretraining_data_test.py,def test_window(self):
data/raw/repos\official\nlp\data,create_pretraining_data_test.py,def test_create_masked_lm_predictions(self):
data/raw/repos\official\nlp\data,create_pretraining_data_test.py,def test_create_masked_lm_predictions_whole_word(self):
data/raw/repos\official\nlp\data,create_pretraining_data_test.py,def test_create_masked_lm_predictions_ngram(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data.py,def __str__(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data.py,def seq_to_str(seq):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data.py,def __repr__(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data.py,def truncate_and_reshape(a):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data.py,def main(_):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data_test.py,def _get_mock_tokenizer():
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data_test.py,def __init__(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data_test.py,def __init__(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data_test.py,def test_remove_extraneous_space(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data_test.py,def test_symbol_replacements(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data_test.py,def test_accent_replacements(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data_test.py,def test_lower_case(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data_test.py,def test_end_to_end(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data_test.py,def test_basic_end_to_end(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data_test.py,def test_basic_correctness(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data_test.py,def test_correctness_with_spaces_and_accents(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data_test.py,def test_basic_functionality(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data_test.py,def test_basic_functionality(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data_test.py,def test_no_cut(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data_test.py,def test_no_cut_with_probability(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data_test.py,def test_basic(self):
data/raw/repos\official\nlp\data,create_xlnet_pretraining_data_test.py,def test_basic(self):
data/raw/repos\official\nlp\data,data_loader_factory.py,def register_data_loader_cls(data_config_cls):
data/raw/repos\official\nlp\data,data_loader_factory.py,def get_data_loader(data_config):
data/raw/repos\official\nlp\data,data_loader_factory_test.py,"def __init__(self, params):"
data/raw/repos\official\nlp\data,data_loader_factory_test.py,def test_register_and_load(self):
data/raw/repos\official\nlp\data,dual_encoder_dataloader.py,"def __init__(self, params):"
data/raw/repos\official\nlp\data,dual_encoder_dataloader.py,"def _decode(self, record: tf.Tensor):"
data/raw/repos\official\nlp\data,dual_encoder_dataloader.py,"def _switch_prefix(string, old, new):"
data/raw/repos\official\nlp\data,dual_encoder_dataloader.py,"def _switch_key_prefix(d, old, new):"
data/raw/repos\official\nlp\data,dual_encoder_dataloader.py,"def load(self, input_context: Optional[tf.distribute.InputContext] = None):"
data/raw/repos\official\nlp\data,dual_encoder_dataloader_test.py,def _create_fake_dataset(output_path):
data/raw/repos\official\nlp\data,dual_encoder_dataloader_test.py,def create_str_feature(values):
data/raw/repos\official\nlp\data,dual_encoder_dataloader_test.py,"def _make_vocab_file(vocab, output_path):"
data/raw/repos\official\nlp\data,dual_encoder_dataloader_test.py,def test_load_dataset(self):
data/raw/repos\official\nlp\data,dual_encoder_dataloader_test.py,"def test_load_tfds(self, use_preprocessing_hub):"
data/raw/repos\official\nlp\data,pretrain_dataloader.py,"def __init__(self, params):"
data/raw/repos\official\nlp\data,pretrain_dataloader.py,def _name_to_features(self):
data/raw/repos\official\nlp\data,pretrain_dataloader.py,"def _decode(self, record: tf.Tensor):"
data/raw/repos\official\nlp\data,pretrain_dataloader.py,"def _parse(self, record: Mapping[str, tf.Tensor]):"
data/raw/repos\official\nlp\data,pretrain_dataloader.py,"def load(self, input_context: Optional[tf.distribute.InputContext] = None):"
data/raw/repos\official\nlp\data,pretrain_dataloader.py,"def __init__(self, params: XLNetPretrainDataConfig):"
data/raw/repos\official\nlp\data,pretrain_dataloader.py,"def _decode(self, record: tf.Tensor):"
data/raw/repos\official\nlp\data,pretrain_dataloader.py,"def _parse(self, record: Mapping[str, tf.Tensor]):"
data/raw/repos\official\nlp\data,pretrain_dataloader.py,"def _word_span_mask(self, inputs: tf.Tensor, boundary: tf.Tensor):"
data/raw/repos\official\nlp\data,pretrain_dataloader.py,"def _get_factorization(self, inputs: tf.Tensor, input_mask: tf.Tensor):"
data/raw/repos\official\nlp\data,pretrain_dataloader.py,"def load(self, input_context: Optional[tf.distribute.InputContext] = None):"
data/raw/repos\official\nlp\data,pretrain_dataloader_test.py,def create_int_feature(values):
data/raw/repos\official\nlp\data,pretrain_dataloader_test.py,def create_float_feature(values):
data/raw/repos\official\nlp\data,pretrain_dataloader_test.py,"def test_load_data(self, use_next_sentence_label, use_position_id):"
data/raw/repos\official\nlp\data,pretrain_dataloader_test.py,def test_v2_feature_names(self):
data/raw/repos\official\nlp\data,pretrain_dynamic_dataloader.py,"def __init__(self, params):"
data/raw/repos\official\nlp\data,pretrain_dynamic_dataloader.py,"def _decode(self, record: tf.Tensor):"
data/raw/repos\official\nlp\data,pretrain_dynamic_dataloader.py,"def element_length_func(example, seq_len_dim):"
data/raw/repos\official\nlp\data,pretrain_dynamic_dataloader.py,def _remove_pads_from_bucketize(features):
data/raw/repos\official\nlp\data,pretrain_dynamic_dataloader.py,"def load(self, input_context: Optional[tf.distribute.InputContext] = None):"
data/raw/repos\official\nlp\data,pretrain_dynamic_dataloader_test.py,def create_int_feature(values):
data/raw/repos\official\nlp\data,pretrain_dynamic_dataloader_test.py,def create_float_feature(values):
data/raw/repos\official\nlp\data,pretrain_dynamic_dataloader_test.py,"def test_distribution_strategy(self, distribution_strategy):"
data/raw/repos\official\nlp\data,pretrain_dynamic_dataloader_test.py,def step_fn(features):
data/raw/repos\official\nlp\data,pretrain_dynamic_dataloader_test.py,def step_fn_b(features):
data/raw/repos\official\nlp\data,pretrain_dynamic_dataloader_test.py,def test_load_dataset(self):
data/raw/repos\official\nlp\data,pretrain_dynamic_dataloader_test.py,def test_load_dataset_not_same_masks(self):
data/raw/repos\official\nlp\data,pretrain_text_dataloader.py,"def __init__(self, params):"
data/raw/repos\official\nlp\data,pretrain_text_dataloader.py,"def _tokenize(self, segments):"
data/raw/repos\official\nlp\data,pretrain_text_dataloader.py,"def _bert_preprocess(self, record: Mapping[str, tf.Tensor]):"
data/raw/repos\official\nlp\data,pretrain_text_dataloader.py,"def load(self, input_context: Optional[tf.distribute.InputContext] = None):"
data/raw/repos\official\nlp\data,pretrain_text_dataloader.py,"def _batch_docs(dataset, input_context):"
data/raw/repos\official\nlp\data,question_answering_dataloader.py,"def __init__(self, params):"
data/raw/repos\official\nlp\data,question_answering_dataloader.py,"def _decode(self, record: tf.Tensor):"
data/raw/repos\official\nlp\data,question_answering_dataloader.py,"def _parse(self, record: Mapping[str, tf.Tensor]):"
data/raw/repos\official\nlp\data,question_answering_dataloader.py,"def load(self, input_context: Optional[tf.distribute.InputContext] = None):"
data/raw/repos\official\nlp\data,question_answering_dataloader_test.py,"def _create_fake_dataset(output_path, seq_length):"
data/raw/repos\official\nlp\data,question_answering_dataloader_test.py,def create_int_feature(values):
data/raw/repos\official\nlp\data,question_answering_dataloader_test.py,def test_load_dataset(self):
data/raw/repos\official\nlp\data,sentence_prediction_dataloader.py,"def __init__(self, params):"
data/raw/repos\official\nlp\data,sentence_prediction_dataloader.py,def name_to_features_spec(self):
data/raw/repos\official\nlp\data,sentence_prediction_dataloader.py,"def _decode(self, record: tf.Tensor):"
data/raw/repos\official\nlp\data,sentence_prediction_dataloader.py,"def _parse(self, record: Mapping[str, tf.Tensor]):"
data/raw/repos\official\nlp\data,sentence_prediction_dataloader.py,"def load(self, input_context: Optional[tf.distribute.InputContext] = None):"
data/raw/repos\official\nlp\data,sentence_prediction_dataloader.py,"def __call__(self, segments):"
data/raw/repos\official\nlp\data,sentence_prediction_dataloader.py,"def __init__(self, params):"
data/raw/repos\official\nlp\data,sentence_prediction_dataloader.py,"def _bert_preprocess(self, record: Mapping[str, tf.Tensor]):"
data/raw/repos\official\nlp\data,sentence_prediction_dataloader.py,def name_to_features_spec(self):
data/raw/repos\official\nlp\data,sentence_prediction_dataloader.py,"def _decode(self, record: tf.Tensor):"
data/raw/repos\official\nlp\data,sentence_prediction_dataloader.py,"def load(self, input_context: Optional[tf.distribute.InputContext] = None):"
data/raw/repos\official\nlp\data,sentence_prediction_dataloader_test.py,"def _create_fake_preprocessed_dataset(output_path, seq_length, label_type):"
data/raw/repos\official\nlp\data,sentence_prediction_dataloader_test.py,def create_int_feature(values):
data/raw/repos\official\nlp\data,sentence_prediction_dataloader_test.py,def create_float_feature(values):
data/raw/repos\official\nlp\data,sentence_prediction_dataloader_test.py,"def _create_fake_raw_dataset(output_path, text_fields, label_type):"
data/raw/repos\official\nlp\data,sentence_prediction_dataloader_test.py,def create_str_feature(value):
data/raw/repos\official\nlp\data,sentence_prediction_dataloader_test.py,def create_int_feature(values):
data/raw/repos\official\nlp\data,sentence_prediction_dataloader_test.py,def create_float_feature(values):
data/raw/repos\official\nlp\data,sentence_prediction_dataloader_test.py,def _create_fake_sentencepiece_model(output_dir):
data/raw/repos\official\nlp\data,sentence_prediction_dataloader_test.py,def _create_fake_vocab_file(vocab_file_path):
data/raw/repos\official\nlp\data,sentence_prediction_dataloader_test.py,"def test_load_dataset(self, label_type, expected_label_type):"
data/raw/repos\official\nlp\data,sentence_prediction_dataloader_test.py,def test_load_dataset_with_label_mapping(self):
data/raw/repos\official\nlp\data,sentence_prediction_dataloader_test.py,"def test_python_wordpiece_preprocessing(self, use_tfds):"
data/raw/repos\official\nlp\data,sentence_prediction_dataloader_test.py,"def test_python_sentencepiece_preprocessing(self, use_tfds):"
data/raw/repos\official\nlp\data,sentence_prediction_dataloader_test.py,"def test_saved_model_preprocessing(self, use_tfds):"
data/raw/repos\official\nlp\data,sentence_retrieval_lib.py,"def __init__(self, process_text_fn=tokenization.convert_to_unicode):"
data/raw/repos\official\nlp\data,sentence_retrieval_lib.py,"def get_dev_examples(self, data_dir, file_pattern):"
data/raw/repos\official\nlp\data,sentence_retrieval_lib.py,"def get_test_examples(self, data_dir, file_pattern):"
data/raw/repos\official\nlp\data,sentence_retrieval_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,sentence_retrieval_lib.py,"def _create_examples(self, lines, set_type):"
data/raw/repos\official\nlp\data,sentence_retrieval_lib.py,"def __init__(self, process_text_fn=tokenization.convert_to_unicode):"
data/raw/repos\official\nlp\data,sentence_retrieval_lib.py,"def get_test_examples(self, data_dir, file_path):"
data/raw/repos\official\nlp\data,sentence_retrieval_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,sentence_retrieval_lib.py,"def _create_examples(self, lines, set_type):"
data/raw/repos\official\nlp\data,squad_lib.py,def __str__(self):
data/raw/repos\official\nlp\data,squad_lib.py,def __repr__(self):
data/raw/repos\official\nlp\data,squad_lib.py,"def __init__(self, filename, is_training):"
data/raw/repos\official\nlp\data,squad_lib.py,"def process_feature(self, feature):"
data/raw/repos\official\nlp\data,squad_lib.py,def create_int_feature(values):
data/raw/repos\official\nlp\data,squad_lib.py,def close(self):
data/raw/repos\official\nlp\data,squad_lib.py,def is_whitespace(c):
data/raw/repos\official\nlp\data,squad_lib.py,def process_query(seg_q):
data/raw/repos\official\nlp\data,squad_lib.py,def process_paragraph(seg_p):
data/raw/repos\official\nlp\data,squad_lib.py,def process_class(seg_class):
data/raw/repos\official\nlp\data,squad_lib.py,"def _check_is_max_context(doc_spans, cur_span_index, position):"
data/raw/repos\official\nlp\data,squad_lib.py,"def write_to_json_files(json_records, json_file):"
data/raw/repos\official\nlp\data,squad_lib.py,"def get_final_text(pred_text, orig_text, do_lower_case, verbose=False):"
data/raw/repos\official\nlp\data,squad_lib.py,def _strip_spaces(text):
data/raw/repos\official\nlp\data,squad_lib.py,def _compute_softmax(scores):
data/raw/repos\official\nlp\data,squad_lib_sp.py,def __str__(self):
data/raw/repos\official\nlp\data,squad_lib_sp.py,def __repr__(self):
data/raw/repos\official\nlp\data,squad_lib_sp.py,"def _convert_index(index, pos, m=None, is_start=True):"
data/raw/repos\official\nlp\data,squad_lib_sp.py,"def _lcs_match(max_dist, n=n, m=m):"
data/raw/repos\official\nlp\data,squad_lib_sp.py,def _piece_to_id(x):
data/raw/repos\official\nlp\data,squad_lib_sp.py,def process_query(seg_q):
data/raw/repos\official\nlp\data,squad_lib_sp.py,def process_paragraph(seg_p):
data/raw/repos\official\nlp\data,squad_lib_sp.py,def process_class(seg_class):
data/raw/repos\official\nlp\data,squad_lib_sp.py,"def _check_is_max_context(doc_spans, cur_span_index, position):"
data/raw/repos\official\nlp\data,squad_lib_sp.py,"def write_to_json_files(json_records, json_file):"
data/raw/repos\official\nlp\data,squad_lib_sp.py,def _compute_softmax(scores):
data/raw/repos\official\nlp\data,squad_lib_sp.py,"def __init__(self, filename, is_training):"
data/raw/repos\official\nlp\data,squad_lib_sp.py,"def process_feature(self, feature):"
data/raw/repos\official\nlp\data,squad_lib_sp.py,def create_int_feature(values):
data/raw/repos\official\nlp\data,squad_lib_sp.py,def close(self):
data/raw/repos\official\nlp\data,tagging_dataloader.py,"def __init__(self, params: TaggingDataConfig):"
data/raw/repos\official\nlp\data,tagging_dataloader.py,"def _decode(self, record: tf.Tensor):"
data/raw/repos\official\nlp\data,tagging_dataloader.py,"def _parse(self, record: Mapping[str, tf.Tensor]):"
data/raw/repos\official\nlp\data,tagging_dataloader.py,"def load(self, input_context: Optional[tf.distribute.InputContext] = None):"
data/raw/repos\official\nlp\data,tagging_dataloader_test.py,"def _create_fake_dataset(output_path, seq_length, include_sentence_id):"
data/raw/repos\official\nlp\data,tagging_dataloader_test.py,def create_int_feature(values):
data/raw/repos\official\nlp\data,tagging_dataloader_test.py,"def test_load_dataset(self, include_sentence_id):"
data/raw/repos\official\nlp\data,tagging_data_lib.py,"def add_word_and_label_id(self, word, label_id):"
data/raw/repos\official\nlp\data,tagging_data_lib.py,"def _read_one_file(file_name, label_list):"
data/raw/repos\official\nlp\data,tagging_data_lib.py,"def get_train_examples(self, data_dir):"
data/raw/repos\official\nlp\data,tagging_data_lib.py,"def get_dev_examples(self, data_dir):"
data/raw/repos\official\nlp\data,tagging_data_lib.py,"def get_test_examples(self, data_dir):"
data/raw/repos\official\nlp\data,tagging_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,tagging_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,tagging_data_lib.py,"def get_train_examples(self, data_dir):"
data/raw/repos\official\nlp\data,tagging_data_lib.py,"def get_dev_examples(self, data_dir):"
data/raw/repos\official\nlp\data,tagging_data_lib.py,"def get_test_examples(self, data_dir):"
data/raw/repos\official\nlp\data,tagging_data_lib.py,def get_labels(self):
data/raw/repos\official\nlp\data,tagging_data_lib.py,def get_processor_name():
data/raw/repos\official\nlp\data,tagging_data_lib.py,"def _tokenize_example(example, max_length, tokenizer, text_preprocessing=None):"
data/raw/repos\official\nlp\data,tagging_data_lib.py,"def _convert_single_example(example, max_seq_length, tokenizer):"
data/raw/repos\official\nlp\data,tagging_data_lib.py,def create_int_feature(values):
data/raw/repos\official\nlp\data,tagging_data_lib_test.py,"def _create_fake_file(filename, labels, is_test):"
data/raw/repos\official\nlp\data,tagging_data_lib_test.py,"def write_one_sentence(writer, length):"
data/raw/repos\official\nlp\data,tagging_data_lib_test.py,def setUp(self):
data/raw/repos\official\nlp\data,tagging_data_lib_test.py,"def test_generate_tf_record(self, task_type):"
data/raw/repos\official\nlp\data,train_sentencepiece.py,def main(argv: List[str]):
data/raw/repos\official\nlp\data,wmt_dataloader.py,def _get_example_length(example):
data/raw/repos\official\nlp\data,wmt_dataloader.py,"def _batch_examples(dataset, batch_size, max_length):"
data/raw/repos\official\nlp\data,wmt_dataloader.py,def example_to_bucket_id(example):
data/raw/repos\official\nlp\data,wmt_dataloader.py,def window_size_fn(bucket_id):
data/raw/repos\official\nlp\data,wmt_dataloader.py,"def batching_fn(bucket_id, grouped_dataset):"
data/raw/repos\official\nlp\data,wmt_dataloader.py,"def __init__(self, params: WMTDataConfig):"
data/raw/repos\official\nlp\data,wmt_dataloader.py,"def _decode(self, record: tf.Tensor):"
data/raw/repos\official\nlp\data,wmt_dataloader.py,"def _filter_max_length(self, inputs):"
data/raw/repos\official\nlp\data,wmt_dataloader.py,"def _maybe_truncate(self, inputs):"
data/raw/repos\official\nlp\data,wmt_dataloader.py,"def load(self, input_context: Optional[tf.distribute.InputContext] = None):"
data/raw/repos\official\nlp\data,wmt_dataloader_test.py,"def _generate_line_file(filepath, lines):"
data/raw/repos\official\nlp\data,wmt_dataloader_test.py,"def _generate_record_file(filepath, src_lines, tgt_lines, unique_id=False):"
data/raw/repos\official\nlp\data,wmt_dataloader_test.py,"def _train_sentencepiece(input_path, vocab_size, model_path, eos_id=1):"
data/raw/repos\official\nlp\data,wmt_dataloader_test.py,def setUp(self):
data/raw/repos\official\nlp\data,wmt_dataloader_test.py,def test_load_dataset_raise_invalid_window(self):
data/raw/repos\official\nlp\finetuning,binary_helper.py,"def get_value(key1, key2):"
data/raw/repos\official\nlp\finetuning,binary_helper.py,def get_value_or_none(key):
data/raw/repos\official\nlp\finetuning\glue,flags.py,def define_flags():
data/raw/repos\official\nlp\finetuning\glue,flags.py,"def _check_path_exists(flag_path, flag_name):"
data/raw/repos\official\nlp\finetuning\glue,flags.py,"def _validate_path(flag_path, flag_name):"
data/raw/repos\official\nlp\finetuning\glue,run_glue.py,"def _override_exp_config_by_file(exp_config, exp_config_files):"
data/raw/repos\official\nlp\finetuning\glue,run_glue.py,"def _override_exp_config_by_flags(exp_config, input_meta_data):"
data/raw/repos\official\nlp\finetuning\glue,run_glue.py,"def _get_exp_config(input_meta_data, exp_config_files):"
data/raw/repos\official\nlp\finetuning\glue,run_glue.py,"def _write_submission_file(task, seq_length):"
data/raw/repos\official\nlp\finetuning\glue,run_glue.py,def main(argv):
data/raw/repos\official\nlp\finetuning\superglue,flags.py,def define_flags():
data/raw/repos\official\nlp\finetuning\superglue,flags.py,"def _check_path_exists(flag_path, flag_name):"
data/raw/repos\official\nlp\finetuning\superglue,flags.py,"def _validate_path(flag_path, flag_name):"
data/raw/repos\official\nlp\finetuning\superglue,run_superglue.py,"def _override_exp_config_by_file(exp_config, exp_config_files):"
data/raw/repos\official\nlp\finetuning\superglue,run_superglue.py,"def _override_exp_config_by_flags(exp_config, input_meta_data):"
data/raw/repos\official\nlp\finetuning\superglue,run_superglue.py,"def _get_exp_config(input_meta_data, exp_config_files):"
data/raw/repos\official\nlp\finetuning\superglue,run_superglue.py,"def _write_submission_file(task, seq_length):"
data/raw/repos\official\nlp\finetuning\superglue,run_superglue.py,def main(argv):
data/raw/repos\official\nlp\metrics,bleu.py,def __init__(self):
data/raw/repos\official\nlp\metrics,bleu.py,"def property_chars(self, prefix):"
data/raw/repos\official\nlp\metrics,bleu.py,def bleu_tokenize(string):
data/raw/repos\official\nlp\metrics,bleu.py,"def bleu_wrapper(ref_filename, hyp_filename, case_sensitive=False):"
data/raw/repos\official\nlp\metrics,bleu.py,"def _get_ngrams_with_counter(segment, max_order):"
data/raw/repos\official\nlp\metrics,bleu.py,"def bleu_on_list(ref_lines, hyp_lines, case_sensitive=False):"
data/raw/repos\official\nlp\metrics,bleu_test.py,"def _create_temp_file(self, text):"
data/raw/repos\official\nlp\metrics,bleu_test.py,def test_bleu_same(self):
data/raw/repos\official\nlp\metrics,bleu_test.py,def test_bleu_same_different_case(self):
data/raw/repos\official\nlp\metrics,bleu_test.py,def test_bleu_different(self):
data/raw/repos\official\nlp\metrics,bleu_test.py,def test_bleu_tokenize(self):
data/raw/repos\official\nlp\metrics,bleu_test.py,def test_bleu_list(self):
data/raw/repos\official\nlp\modeling\layers,attention.py,"def _update_cache(self, key, value, cache, decode_loop_step):"
data/raw/repos\official\nlp\modeling\layers,attention_test.py,"def _create_cache(batch_size, init_decode_length, num_heads, head_size):"
data/raw/repos\official\nlp\modeling\layers,attention_test.py,def test_masked_attention(self):
data/raw/repos\official\nlp\modeling\layers,attention_test.py,def test_padded_decode(self):
data/raw/repos\official\nlp\modeling\layers,bigbird_attention.py,"def create_band_mask_from_inputs(from_blocked_mask, to_blocked_mask):"
data/raw/repos\official\nlp\modeling\layers,bigbird_attention.py,"def __init__(self, block_size, **kwargs):"
data/raw/repos\official\nlp\modeling\layers,bigbird_attention.py,"def call(self, inputs, mask):"
data/raw/repos\official\nlp\modeling\layers,bigbird_attention.py,"def _compute_attention(self, query, key, value, attention_mask=None):"
data/raw/repos\official\nlp\modeling\layers,bigbird_attention.py,"def call(self, query, value, key=None, attention_mask=None, **kwargs):"
data/raw/repos\official\nlp\modeling\layers,bigbird_attention.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,bigbird_attention_test.py,def test_attention(self):
data/raw/repos\official\nlp\modeling\layers,bigbird_attention_test.py,def test_config(self):
data/raw/repos\official\nlp\modeling\layers,block_diag_feedforward.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,block_diag_feedforward.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,block_diag_feedforward.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\layers,block_diag_feedforward_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\layers,block_diag_feedforward_test.py,"def test_layer_creation(self, num_blocks, apply_mixing, dtype):"
data/raw/repos\official\nlp\modeling\layers,block_diag_feedforward_test.py,"def test_layer_invocation(self, num_blocks, apply_mixing, dtype):"
data/raw/repos\official\nlp\modeling\layers,block_diag_feedforward_test.py,def test_get_config(self):
data/raw/repos\official\nlp\modeling\layers,block_sparse_attention.py,def _large_compatible_negative(tensor_type):
data/raw/repos\official\nlp\modeling\layers,block_sparse_attention.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,block_sparse_attention.py,"def _build_from_signature(self, query, value, key=None):"
data/raw/repos\official\nlp\modeling\layers,block_sparse_attention.py,"def _block_diagonal_mask(self, attention_mask, dtype=None):"
data/raw/repos\official\nlp\modeling\layers,block_sparse_attention.py,"def _masked_softmax(self, attention_scores, attention_mask=None):"
data/raw/repos\official\nlp\modeling\layers,block_sparse_attention_test.py,def test_non_masked_self_attention(self):
data/raw/repos\official\nlp\modeling\layers,block_sparse_attention_test.py,def test_masked_attention_with_scores(self):
data/raw/repos\official\nlp\modeling\layers,block_sparse_attention_test.py,def test_initializer(self):
data/raw/repos\official\nlp\modeling\layers,block_sparse_attention_test.py,"def test_sublayer_dtypes(self, dtype):"
data/raw/repos\official\nlp\modeling\layers,block_sparse_attention_test.py,def test_dropout(self):
data/raw/repos\official\nlp\modeling\layers,block_sparse_attention_test.py,def test_query_mask_progagation(self):
data/raw/repos\official\nlp\modeling\layers,block_sparse_attention_test.py,def test_value_mask(self):
data/raw/repos\official\nlp\modeling\layers,block_sparse_attention_test.py,def test_masks_are_cast_to_bool(self):
data/raw/repos\official\nlp\modeling\layers,cls_head.py,"def call(self, features: tf.Tensor, only_project: bool = False):"
data/raw/repos\official\nlp\modeling\layers,cls_head.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,cls_head.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\layers,cls_head.py,def checkpoint_items(self):
data/raw/repos\official\nlp\modeling\layers,cls_head.py,"def call(self, features: tf.Tensor, only_project: bool = False):"
data/raw/repos\official\nlp\modeling\layers,cls_head.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,cls_head.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\layers,cls_head.py,def checkpoint_items(self):
data/raw/repos\official\nlp\modeling\layers,cls_head.py,"def call(self, features, training=False, return_covmat=False):"
data/raw/repos\official\nlp\modeling\layers,cls_head.py,def reset_covariance_matrix(self):
data/raw/repos\official\nlp\modeling\layers,cls_head.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,cls_head.py,def extract_gp_layer_kwargs(kwargs):
data/raw/repos\official\nlp\modeling\layers,cls_head.py,def extract_spec_norm_kwargs(kwargs):
data/raw/repos\official\nlp\modeling\layers,cls_head.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,cls_head.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,cls_head.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\layers,cls_head_test.py,"def test_pooler_layer(self, inner_dim, num_weights_expected):"
data/raw/repos\official\nlp\modeling\layers,cls_head_test.py,def test_layer_invocation(self):
data/raw/repos\official\nlp\modeling\layers,cls_head_test.py,def test_layer_serialization(self):
data/raw/repos\official\nlp\modeling\layers,cls_head_test.py,"def test_pooler_layer(self, inner_dim, num_weights_expected):"
data/raw/repos\official\nlp\modeling\layers,cls_head_test.py,def test_layer_invocation(self):
data/raw/repos\official\nlp\modeling\layers,cls_head_test.py,def test_layer_serialization(self):
data/raw/repos\official\nlp\modeling\layers,cls_head_test.py,def setUp(self):
data/raw/repos\official\nlp\modeling\layers,cls_head_test.py,"def test_pooler_layer(self, inner_dim, num_weights_expected):"
data/raw/repos\official\nlp\modeling\layers,cls_head_test.py,def test_layer_invocation(self):
data/raw/repos\official\nlp\modeling\layers,cls_head_test.py,"def test_sngp_output_shape(self, use_gp_layer, return_covmat):"
data/raw/repos\official\nlp\modeling\layers,cls_head_test.py,def test_sngp_train_logits(self):
data/raw/repos\official\nlp\modeling\layers,cls_head_test.py,def test_layer_serialization(self):
data/raw/repos\official\nlp\modeling\layers,cls_head_test.py,def test_sngp_kwargs_serialization(self):
data/raw/repos\official\nlp\modeling\layers,cls_head_test.py,"def test_layer_invocation(self, num_queries, features, use_bias):"
data/raw/repos\official\nlp\modeling\layers,cls_head_test.py,def test_layer_serialization(self):
data/raw/repos\official\nlp\modeling\layers,factorized_embedding.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,factorized_embedding.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,factorized_embedding.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\layers,factorized_embedding_test.py,def test_layer_creation(self):
data/raw/repos\official\nlp\modeling\layers,factorized_embedding_test.py,def test_layer_invocation(self):
data/raw/repos\official\nlp\modeling\layers,gated_feedforward.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,gated_feedforward.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,gated_feedforward.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\layers,gated_feedforward_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\layers,gated_feedforward_test.py,"def test_layer_creation(self, use_gate, num_blocks, dropout_position, dtype):"
data/raw/repos\official\nlp\modeling\layers,gated_feedforward_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\layers,gaussian_process.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,gaussian_process.py,"def _make_random_feature_layer(self, name):"
data/raw/repos\official\nlp\modeling\layers,gaussian_process.py,def reset_covariance_matrix(self):
data/raw/repos\official\nlp\modeling\layers,gaussian_process.py,"def call(self, inputs, global_step=None, training=None):"
data/raw/repos\official\nlp\modeling\layers,gaussian_process.py,"def compute_output_shape(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,gaussian_process.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,gaussian_process.py,def reset_precision_matrix(self):
data/raw/repos\official\nlp\modeling\layers,gaussian_process.py,"def compute_predictive_covariance(self, gp_feature):"
data/raw/repos\official\nlp\modeling\layers,gaussian_process.py,"def _get_training_value(self, training=None):"
data/raw/repos\official\nlp\modeling\layers,gaussian_process.py,"def call(self, inputs, logits=None, training=None):"
data/raw/repos\official\nlp\modeling\layers,gaussian_process.py,"def mean_field_logits(logits, covariance_matrix=None, mean_field_factor=1.):"
data/raw/repos\official\nlp\modeling\layers,gaussian_process_test.py,"def exact_gaussian_kernel(x1, x2):"
data/raw/repos\official\nlp\modeling\layers,gaussian_process_test.py,"def _generate_normal_data(num_sample, num_dim, loc):"
data/raw/repos\official\nlp\modeling\layers,gaussian_process_test.py,"def _generate_rbf_data(x_data, orthogonal=True):"
data/raw/repos\official\nlp\modeling\layers,gaussian_process_test.py,"def _make_minibatch_iterator(data_numpy, batch_size, num_epoch):"
data/raw/repos\official\nlp\modeling\layers,gaussian_process_test.py,"def _compute_posterior_kernel(x_tr, x_ts, kernel_func, ridge_penalty):"
data/raw/repos\official\nlp\modeling\layers,gaussian_process_test.py,def setUp(self):
data/raw/repos\official\nlp\modeling\layers,gaussian_process_test.py,def test_layer_build(self):
data/raw/repos\official\nlp\modeling\layers,gaussian_process_test.py,"def test_laplace_covariance_minibatch(self, generate_orthogonal_data):"
data/raw/repos\official\nlp\modeling\layers,gaussian_process_test.py,def test_random_feature_prior_approximation(self):
data/raw/repos\official\nlp\modeling\layers,gaussian_process_test.py,def test_random_feature_posterior_approximation(self):
data/raw/repos\official\nlp\modeling\layers,gaussian_process_test.py,def test_random_feature_linear_kernel(self):
data/raw/repos\official\nlp\modeling\layers,gaussian_process_test.py,def test_no_matrix_update_during_test(self):
data/raw/repos\official\nlp\modeling\layers,gaussian_process_test.py,def test_state_saving_and_loading(self):
data/raw/repos\official\nlp\modeling\layers,gaussian_process_test.py,def testMeanFieldLogitsLikelihood(self):
data/raw/repos\official\nlp\modeling\layers,gaussian_process_test.py,def testMeanFieldLogitsTemperatureScaling(self):
data/raw/repos\official\nlp\modeling\layers,kernel_attention.py,"def call(self, inputs, mask):"
data/raw/repos\official\nlp\modeling\layers,kernel_attention.py,"def pad_to_chunk_length(tensor, axis, chunk_length, padding=None):"
data/raw/repos\official\nlp\modeling\layers,kernel_attention.py,"def split_tensor_into_chunks(tensor, axis, chunk_length):"
data/raw/repos\official\nlp\modeling\layers,kernel_attention.py,"def rectangular_window_sum(tensor, window_length):"
data/raw/repos\official\nlp\modeling\layers,kernel_attention.py,"def weighted_window_sum(tensor, window_length, window_weights):"
data/raw/repos\official\nlp\modeling\layers,kernel_attention.py,"def create_projection_matrix(m, d, seed=None):"
data/raw/repos\official\nlp\modeling\layers,kernel_attention.py,"def _generalized_kernel(x, y, is_query, projection_matrix, f, h):"
data/raw/repos\official\nlp\modeling\layers,kernel_attention.py,"def _build_from_signature(self, query, value, key=None):"
data/raw/repos\official\nlp\modeling\layers,kernel_attention.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,kernel_attention_test.py,"def test_attention_scale_by_length(self, seq_length):"
data/raw/repos\official\nlp\modeling\layers,kernel_attention_test.py,def test_unsupported_feature_transform(self):
data/raw/repos\official\nlp\modeling\layers,kernel_attention_test.py,def test_redraw_true_no_projection(self):
data/raw/repos\official\nlp\modeling\layers,kernel_attention_test.py,def test_config(self):
data/raw/repos\official\nlp\modeling\layers,kernel_attention_test.py,def test_rectangular_window_sum(self):
data/raw/repos\official\nlp\modeling\layers,kernel_attention_test.py,def test_weighted_window_sum(self):
data/raw/repos\official\nlp\modeling\layers,masked_lm.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,masked_lm.py,"def call(self, sequence_data, masked_positions):"
data/raw/repos\official\nlp\modeling\layers,masked_lm.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,masked_lm.py,"def _gather_indexes(self, sequence_tensor, positions):"
data/raw/repos\official\nlp\modeling\layers,masked_lm_test.py,def test_layer_creation(self):
data/raw/repos\official\nlp\modeling\layers,masked_lm_test.py,def test_layer_invocation_with_external_logits(self):
data/raw/repos\official\nlp\modeling\layers,masked_lm_test.py,"def test_layer_invocation(self, num_predictions):"
data/raw/repos\official\nlp\modeling\layers,masked_lm_test.py,def test_unknown_output_type_fails(self):
data/raw/repos\official\nlp\modeling\layers,masked_softmax.py,def _large_compatible_negative(tensor_type):
data/raw/repos\official\nlp\modeling\layers,masked_softmax.py,"def call(self, scores, mask=None):"
data/raw/repos\official\nlp\modeling\layers,masked_softmax.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,masked_softmax_test.py,def test_non_masked_softmax(self):
data/raw/repos\official\nlp\modeling\layers,masked_softmax_test.py,def test_masked_softmax(self):
data/raw/repos\official\nlp\modeling\layers,masked_softmax_test.py,def test_masked_softmax_with_none_mask(self):
data/raw/repos\official\nlp\modeling\layers,masked_softmax_test.py,def test_softmax_with_axes_expansion(self):
data/raw/repos\official\nlp\modeling\layers,masked_softmax_test.py,def test_masked_softmax_high_dims(self):
data/raw/repos\official\nlp\modeling\layers,masked_softmax_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\layers,mat_mul_with_margin.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,mat_mul_with_margin.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\layers,mat_mul_with_margin_test.py,def test_layer_invocation(self):
data/raw/repos\official\nlp\modeling\layers,mat_mul_with_margin_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\layers,mixing.py,"def __init__(self, name: str = ""mixing"", **kwargs):"
data/raw/repos\official\nlp\modeling\layers,mixing.py,"def build(self, input_shape: Tuple[int, ...]):"
data/raw/repos\official\nlp\modeling\layers,mixing.py,"def build(self, input_shape: Tuple[int, ...]):"
data/raw/repos\official\nlp\modeling\layers,mixing.py,"def build(self, input_shape: Tuple[int, ...]):"
data/raw/repos\official\nlp\modeling\layers,mixing_test.py,def test_base_mixing_layer(self):
data/raw/repos\official\nlp\modeling\layers,mixing_test.py,def test_fourier_layer(self):
data/raw/repos\official\nlp\modeling\layers,mixing_test.py,def test_hartley_layer(self):
data/raw/repos\official\nlp\modeling\layers,mixing_test.py,def test_linear_mixing_layer(self):
data/raw/repos\official\nlp\modeling\layers,mixing_test.py,def test_pick_fourier_transform(self):
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers.py,"def __init__(self, name=None):"
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers.py,"def build(self, shape):"
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers.py,"def call(self, feature):"
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers.py,"def _get_norm_layer(normalization_type='no_norm', name=None):"
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers.py,"def call(self, input_ids, token_type_ids=None):"
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers.py,"def call(self, sequence_data, masked_positions):"
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers.py,"def _gather_indexes(self, sequence_tensor, positions):"
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers_test.py,"def generate_fake_input(batch_size=1, seq_len=5, vocab_size=10000, seed=0):"
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers_test.py,def test_embedding_layer_with_token_type(self):
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers_test.py,def test_embedding_layer_without_token_type(self):
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers_test.py,def test_embedding_layer_get_config(self):
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers_test.py,def test_no_norm(self):
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers_test.py,"def test_transfomer_kq_shared_bottleneck(self, is_kq_shared):"
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers_test.py,def test_transfomer_with_mask(self):
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers_test.py,def test_transfomer_return_attention_score(self):
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers_test.py,def test_transformer_get_config(self):
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers_test.py,def test_layer_creation(self):
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers_test.py,def test_layer_invocation_with_external_logits(self):
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers_test.py,def test_layer_invocation(self):
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers_test.py,def test_unknown_output_type_fails(self):
data/raw/repos\official\nlp\modeling\layers,mobile_bert_layers_test.py,def test_hidden_size_smaller_than_embedding_width(self):
data/raw/repos\official\nlp\modeling\layers,moe.py,"def build(self, input_shape: Tuple[int, int, int]):"
data/raw/repos\official\nlp\modeling\layers,moe.py,"def build(self, input_shape: Tuple[int, int, int, int]):"
data/raw/repos\official\nlp\modeling\layers,moe_test.py,def small_config():
data/raw/repos\official\nlp\modeling\layers,moe_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\layers,moe_test.py,def test_router_z_loss_dtype(self):
data/raw/repos\official\nlp\modeling\layers,moe_test.py,def test_router_z_loss_shape(self):
data/raw/repos\official\nlp\modeling\layers,moe_test.py,def test_experts_choose_masked_router_dtype_shape(self):
data/raw/repos\official\nlp\modeling\layers,moe_test.py,def test_feed_forward_shape_and_vars(self):
data/raw/repos\official\nlp\modeling\layers,moe_test.py,def test_feed_forward_manual(self):
data/raw/repos\official\nlp\modeling\layers,moe_test.py,def test_feed_forward_experts_shape_and_vars(self):
data/raw/repos\official\nlp\modeling\layers,moe_test.py,def test_feed_forward_experts_manual(self):
data/raw/repos\official\nlp\modeling\layers,moe_test.py,def test_moe_layer(self):
data/raw/repos\official\nlp\modeling\layers,moe_test.py,def test_moe_layer_with_backbone(self):
data/raw/repos\official\nlp\modeling\layers,multi_channel_attention.py,"def build(self, unused_input_shapes):"
data/raw/repos\official\nlp\modeling\layers,multi_channel_attention.py,"def call(self, encoder_outputs, doc_attention_mask):"
data/raw/repos\official\nlp\modeling\layers,multi_channel_attention.py,"def _build_attention(self, rank):"
data/raw/repos\official\nlp\modeling\layers,multi_channel_attention_test.py,def test_doc_attention(self):
data/raw/repos\official\nlp\modeling\layers,multi_channel_attention_test.py,def test_multi_channel_attention(self):
data/raw/repos\official\nlp\modeling\layers,multi_query_attention.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,multi_query_attention_test.py,"def test_non_masked_self_attention(self, num_kv_heads):"
data/raw/repos\official\nlp\modeling\layers,multi_query_attention_test.py,"def test_attention_scores(self, num_kv_heads):"
data/raw/repos\official\nlp\modeling\layers,multi_query_attention_test.py,"def test_attention_scores_with_values(self, num_kv_heads):"
data/raw/repos\official\nlp\modeling\layers,multi_query_attention_test.py,"def test_masked_attention(self, num_kv_heads, use_bias):"
data/raw/repos\official\nlp\modeling\layers,multi_query_attention_test.py,"def test_masked_attention_with_scores(self, num_kv_heads):"
data/raw/repos\official\nlp\modeling\layers,multi_query_attention_test.py,"def test_non_masked_self_attention(self, num_kv_heads):"
data/raw/repos\official\nlp\modeling\layers,multi_query_attention_test.py,"def test_attention_scores(self, num_kv_heads):"
data/raw/repos\official\nlp\modeling\layers,multi_query_attention_test.py,"def test_attention_scores_with_values(self, num_kv_heads):"
data/raw/repos\official\nlp\modeling\layers,multi_query_attention_test.py,"def test_masked_attention(self, num_kv_heads, use_bias):"
data/raw/repos\official\nlp\modeling\layers,multi_query_attention_test.py,"def test_masked_attention_with_scores(self, num_kv_heads):"
data/raw/repos\official\nlp\modeling\layers,on_device_embedding.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,on_device_embedding.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,on_device_embedding.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\layers,on_device_embedding.py,def vocab_size(self):
data/raw/repos\official\nlp\modeling\layers,on_device_embedding.py,def embedding_width(self):
data/raw/repos\official\nlp\modeling\layers,on_device_embedding_test.py,def test_layer_creation(self):
data/raw/repos\official\nlp\modeling\layers,on_device_embedding_test.py,def test_layer_creation_with_mixed_precision(self):
data/raw/repos\official\nlp\modeling\layers,on_device_embedding_test.py,def test_layer_invocation(self):
data/raw/repos\official\nlp\modeling\layers,on_device_embedding_test.py,def test_layer_invocation_with_mixed_precision(self):
data/raw/repos\official\nlp\modeling\layers,on_device_embedding_test.py,def test_one_hot_layer_creation(self):
data/raw/repos\official\nlp\modeling\layers,on_device_embedding_test.py,def test_one_hot_layer_creation_with_mixed_precision(self):
data/raw/repos\official\nlp\modeling\layers,on_device_embedding_test.py,def test_one_hot_layer_invocation(self):
data/raw/repos\official\nlp\modeling\layers,on_device_embedding_test.py,def test_one_hot_layer_invocation_with_mixed_precision(self):
data/raw/repos\official\nlp\modeling\layers,on_device_embedding_test.py,def test_use_scale_layer_invocation(self):
data/raw/repos\official\nlp\modeling\layers,pack_optimization.py,"def __init__(self, pack_sequences: int, **kwargs):"
data/raw/repos\official\nlp\modeling\layers,pack_optimization.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\nlp\modeling\layers,pack_optimization.py,"def call(self, inputs, stride: tf.Tensor):"
data/raw/repos\official\nlp\modeling\layers,pack_optimization.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\nlp\modeling\layers,pack_optimization.py,"def call(self, inputs, stride: tf.Tensor):"
data/raw/repos\official\nlp\modeling\layers,pack_optimization.py,"def call(self, inputs, stride: tf.Tensor, training=None):"
data/raw/repos\official\nlp\modeling\layers,pack_optimization_test.py,def test_bert_embedding_packing(self):
data/raw/repos\official\nlp\modeling\layers,pack_optimization_test.py,def test_strided_transformer_encoder_block(self):
data/raw/repos\official\nlp\modeling\layers,pack_optimization_test.py,def test_strided_rezero_transformer(self):
data/raw/repos\official\nlp\modeling\layers,pack_optimization_test.py,def test_strided_scaffold(self):
data/raw/repos\official\nlp\modeling\layers,per_dim_scale_attention.py,"def _build_from_signature(self, query, value, key=None):"
data/raw/repos\official\nlp\modeling\layers,per_dim_scale_attention.py,"def _scale_query(self, query):"
data/raw/repos\official\nlp\modeling\layers,per_dim_scale_attention_test.py,def test_attention(self):
data/raw/repos\official\nlp\modeling\layers,per_dim_scale_attention_test.py,def test_config(self):
data/raw/repos\official\nlp\modeling\layers,position_embedding.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,position_embedding.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,position_embedding.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\layers,position_embedding.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,position_embedding.py,"def call(self, inputs, length=None):"
data/raw/repos\official\nlp\modeling\layers,position_embedding.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,position_embedding.py,"def call(self, query: tf.Tensor, key: tf.Tensor):"
data/raw/repos\official\nlp\modeling\layers,position_embedding_test.py,def test_static_layer_output_shape(self):
data/raw/repos\official\nlp\modeling\layers,position_embedding_test.py,def test_non_default_axis_static(self):
data/raw/repos\official\nlp\modeling\layers,position_embedding_test.py,def test_float16_dtype(self):
data/raw/repos\official\nlp\modeling\layers,position_embedding_test.py,def test_dynamic_layer_output_shape(self):
data/raw/repos\official\nlp\modeling\layers,position_embedding_test.py,def test_non_default_axis_dynamic(self):
data/raw/repos\official\nlp\modeling\layers,position_embedding_test.py,def test_dynamic_layer_slicing(self):
data/raw/repos\official\nlp\modeling\layers,position_embedding_test.py,def test_relative_tensor_input(self):
data/raw/repos\official\nlp\modeling\layers,position_embedding_test.py,def test_relative_length_input(self):
data/raw/repos\official\nlp\modeling\layers,position_embedding_test.py,"def test_relative_position_bias(self, bidirectional):"
data/raw/repos\official\nlp\modeling\layers,position_embedding_test.py,def test_relative_position_bucket(self):
data/raw/repos\official\nlp\modeling\layers,relative_attention.py,"def _build_proj_equation(free_dims, bound_dims, output_dims):"
data/raw/repos\official\nlp\modeling\layers,relative_attention.py,"def _get_output_shape(output_rank, known_last_dims):"
data/raw/repos\official\nlp\modeling\layers,relative_attention.py,"def _rel_shift(x, klen=-1):"
data/raw/repos\official\nlp\modeling\layers,relative_attention.py,"def _build_from_signature(self, query, value, key=None):"
data/raw/repos\official\nlp\modeling\layers,reuse_attention.py,"def _build_attention_equation(rank, attn_axes):"
data/raw/repos\official\nlp\modeling\layers,reuse_attention.py,"def _build_proj_equation(free_dims, bound_dims, output_dims):"
data/raw/repos\official\nlp\modeling\layers,reuse_attention.py,"def _get_output_shape(output_rank, known_last_dims):"
data/raw/repos\official\nlp\modeling\layers,reuse_attention.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,reuse_attention.py,"def from_config(cls, config):"
data/raw/repos\official\nlp\modeling\layers,reuse_attention.py,"def _build_from_signature(self, query, value, key=None):"
data/raw/repos\official\nlp\modeling\layers,reuse_attention.py,"def _build_attention(self, rank):"
data/raw/repos\official\nlp\modeling\layers,reuse_attention.py,"def _masked_softmax(self, attention_scores, attention_mask=None):"
data/raw/repos\official\nlp\modeling\layers,reuse_attention.py,"def _compute_relative_position(self, query_seq_length, key_seq_length):"
data/raw/repos\official\nlp\modeling\layers,reuse_attention_test.py,"def test_non_masked_attention(self, value_dim, output_shape, output_dims):"
data/raw/repos\official\nlp\modeling\layers,reuse_attention_test.py,def test_non_masked_self_attention(self):
data/raw/repos\official\nlp\modeling\layers,reuse_attention_test.py,def test_attention_scores(self):
data/raw/repos\official\nlp\modeling\layers,reuse_attention_test.py,def test_attention_scores_with_values(self):
data/raw/repos\official\nlp\modeling\layers,reuse_attention_test.py,"def test_masked_attention(self, use_bias, reuse_attention):"
data/raw/repos\official\nlp\modeling\layers,reuse_attention_test.py,def test_initializer(self):
data/raw/repos\official\nlp\modeling\layers,reuse_attention_test.py,def test_masked_attention_with_scores(self):
data/raw/repos\official\nlp\modeling\layers,reuse_attention_test.py,"def test_high_dim_attention(self, q_dims, v_dims, mask_dims, attention_axes):"
data/raw/repos\official\nlp\modeling\layers,reuse_attention_test.py,def test_dropout(self):
data/raw/repos\official\nlp\modeling\layers,reuse_attention_test.py,def test_non_masked_self_attention_with_reuse(self):
data/raw/repos\official\nlp\modeling\layers,reuse_transformer.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,reuse_transformer.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,reuse_transformer.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\layers,reuse_transformer_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\layers,reuse_transformer_test.py,"def test_layer_creation(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,reuse_transformer_test.py,"def test_layer_creation_with_mask(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,reuse_transformer_test.py,"def test_layer_invocation(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,reuse_transformer_test.py,"def test_layer_invocation_with_mask(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,reuse_transformer_test.py,"def test_layer_output_range(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,reuse_transformer_test.py,"def test_layer_output_range_with_relative_pe(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,reuse_transformer_test.py,"def test_layer_output_range_without_mask(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,reuse_transformer_test.py,"def test_layer_output_range_with_pre_norm(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,reuse_transformer_test.py,"def test_layer_invocation_with_float16_dtype(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,reuse_transformer_test.py,"def test_transform_with_initializer(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,reuse_transformer_test.py,"def test_dynamic_layer_sequence(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,reuse_transformer_test.py,def test_use_bias_norm_first(self):
data/raw/repos\official\nlp\modeling\layers,reuse_transformer_test.py,def test_get_config(self):
data/raw/repos\official\nlp\modeling\layers,reuse_transformer_test.py,"def test_several_attention_axes(self, attention_axes):"
data/raw/repos\official\nlp\modeling\layers,reuse_transformer_test.py,"def test_layer_invocation_with_mask(self, reuse_attention, use_relative_pe):"
data/raw/repos\official\nlp\modeling\layers,rezero_transformer.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,rezero_transformer.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,rezero_transformer.py,def reset_rezero(self):
data/raw/repos\official\nlp\modeling\layers,rezero_transformer_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\layers,rezero_transformer_test.py,"def test_layer_invocation_with_float16_dtype(self, share_rezero):"
data/raw/repos\official\nlp\modeling\layers,rezero_transformer_test.py,def test_rezero_without_layer_norm(self):
data/raw/repos\official\nlp\modeling\layers,rezero_transformer_test.py,def test_rezero_with_layer_norm(self):
data/raw/repos\official\nlp\modeling\layers,rezero_transformer_test.py,def test_layer_output_range(self):
data/raw/repos\official\nlp\modeling\layers,rezero_transformer_test.py,def test_separate_qkv(self):
data/raw/repos\official\nlp\modeling\layers,rezero_transformer_test.py,"def test_rezero_with_kv_heads(self, num_kv_heads):"
data/raw/repos\official\nlp\modeling\layers,rezero_transformer_test.py,def test_rezero_with_block_sparse_attention(self):
data/raw/repos\official\nlp\modeling\layers,routing.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,routing.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,routing.py,"def update_token_importance(self, token_ids, importance):"
data/raw/repos\official\nlp\modeling\layers,routing.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\layers,routing.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,routing.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\layers,routing_test.py,def test_token_importance(self):
data/raw/repos\official\nlp\modeling\layers,routing_test.py,def test_top_k_selection(self):
data/raw/repos\official\nlp\modeling\layers,routing_test.py,def test_random_k_selection(self):
data/raw/repos\official\nlp\modeling\layers,routing_test.py,def test_top_k_random_k(self):
data/raw/repos\official\nlp\modeling\layers,self_attention_mask.py,"def call(self, inputs, to_mask=None):"
data/raw/repos\official\nlp\modeling\layers,spectral_normalization.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,spectral_normalization.py,"def call(self, inputs, *, training=None):"
data/raw/repos\official\nlp\modeling\layers,spectral_normalization.py,"def update_weights(self, *, training=True):"
data/raw/repos\official\nlp\modeling\layers,spectral_normalization.py,def restore_weights(self):
data/raw/repos\official\nlp\modeling\layers,spectral_normalization.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,spectral_normalization.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\layers,spectral_normalization.py,def update_weights(self):
data/raw/repos\official\nlp\modeling\layers,spectral_normalization.py,def restore_weights(self):
data/raw/repos\official\nlp\modeling\layers,spectral_normalization_test.py,def _compute_spectral_norm(weight):
data/raw/repos\official\nlp\modeling\layers,spectral_normalization_test.py,def setUp(self):
data/raw/repos\official\nlp\modeling\layers,spectral_normalization_test.py,"def test_spec_norm_magnitude(self, input_shape, layer, norm_wrapper):"
data/raw/repos\official\nlp\modeling\layers,talking_heads_attention.py,"def _build_attention(self, qkv_rank):"
data/raw/repos\official\nlp\modeling\layers,talking_heads_attention_test.py,"def test_non_masked_attention(self, value_dim, output_shape, output_dims):"
data/raw/repos\official\nlp\modeling\layers,talking_heads_attention_test.py,def test_non_masked_self_attention(self):
data/raw/repos\official\nlp\modeling\layers,talking_heads_attention_test.py,def test_attention_scores(self):
data/raw/repos\official\nlp\modeling\layers,talking_heads_attention_test.py,"def test_masked_attention(self, use_bias):"
data/raw/repos\official\nlp\modeling\layers,talking_heads_attention_test.py,def test_initializer(self):
data/raw/repos\official\nlp\modeling\layers,talking_heads_attention_test.py,"def test_high_dim_attention(self, q_dims, v_dims, mask_dims, attention_axes):"
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def _check_if_tf_text_installed():
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def fn(x):
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def vocab_size(self):
data/raw/repos\official\nlp\modeling\layers,text_layers.py,"def _create_vocab_table_and_initializer(self, vocab_file):"
data/raw/repos\official\nlp\modeling\layers,text_layers.py,"def call(self, inputs: tf.Tensor):"
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def _reshape(rt):
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def get_special_tokens_dict(self):
data/raw/repos\official\nlp\modeling\layers,text_layers.py,"def _create_special_tokens_dict(self, vocab_table, vocab_file):"
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def _create_tokenizer(self):
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def vocab_size(self):
data/raw/repos\official\nlp\modeling\layers,text_layers.py,"def call(self, inputs: tf.Tensor):"
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def _reshape(rt):
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def get_special_tokens_dict(self):
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def _create_special_tokens_dict(self):
data/raw/repos\official\nlp\modeling\layers,text_layers.py,"def call(self, inputs: Union[tf.RaggedTensor, List[tf.RaggedTensor]]):"
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def _reshape(t):
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def vocab_size(self):
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def get_special_tokens_dict(self):
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def _create_special_tokens_dict(self):
data/raw/repos\official\nlp\modeling\layers,text_layers.py,"def add_special_token(key, token):"
data/raw/repos\official\nlp\modeling\layers,text_layers.py,"def _tokenize_with_offsets(self, text_input: tf.Tensor):"
data/raw/repos\official\nlp\modeling\layers,text_layers.py,"def _tokenize(self, text_input: tf.Tensor):"
data/raw/repos\official\nlp\modeling\layers,text_layers.py,"def call(self, inputs: tf.Tensor):"
data/raw/repos\official\nlp\modeling\layers,text_layers.py,def _reshape(rt):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,"def _make_vocab_file(self, vocab, filename=""vocab.txt""):"
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_uncased(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_cased(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_special_tokens_complete(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_special_tokens_partial(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_special_tokens_in_estimator(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def input_fn():
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,"def model_fn(features, labels, mode):"
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def setUp(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_uncased(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_cased(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_special_tokens(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_special_tokens_in_estimator(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def input_fn():
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,"def model_fn(features, labels, mode):"
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_strip_diacritics(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_fail_on_tokenize_with_offsets_and_strip_diacritics(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_saving(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_round_robin_correct_outputs(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_waterfall_correct_outputs(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_special_tokens_dict(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,"def _make_vocab_file(self, vocab, filename=""vocab.txt""):"
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_uncased(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_cased(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_special_tokens_complete(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_special_tokens_partial(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def test_special_tokens_in_estimator(self):
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,def input_fn():
data/raw/repos\official\nlp\modeling\layers,text_layers_test.py,"def model_fn(features, labels, mode):"
data/raw/repos\official\nlp\modeling\layers,tn_expand_condense.py,"def call(self, inputs: tf.Tensor, **kwargs):"
data/raw/repos\official\nlp\modeling\layers,tn_expand_condense_test.py,def setUp(self):
data/raw/repos\official\nlp\modeling\layers,tn_expand_condense_test.py,"def _build_model(self, data, proj_multiple=2):"
data/raw/repos\official\nlp\modeling\layers,tn_expand_condense_test.py,"def test_train(self, input_dim, proj_multiple):"
data/raw/repos\official\nlp\modeling\layers,tn_expand_condense_test.py,"def test_weights_change(self, input_dim, proj_multiple):"
data/raw/repos\official\nlp\modeling\layers,tn_expand_condense_test.py,"def test_output_shape(self, input_dim, proj_multiple):"
data/raw/repos\official\nlp\modeling\layers,tn_expand_condense_test.py,"def test_expandcondense_num_parameters(self, input_dim, proj_multiple):"
data/raw/repos\official\nlp\modeling\layers,tn_expand_condense_test.py,"def test_incorrect_sizes(self, input_dim, proj_multiple):"
data/raw/repos\official\nlp\modeling\layers,tn_expand_condense_test.py,"def test_config(self, input_dim, proj_multiple):"
data/raw/repos\official\nlp\modeling\layers,tn_expand_condense_test.py,"def test_model_save(self, input_dim, proj_multiple):"
data/raw/repos\official\nlp\modeling\layers,tn_transformer_expand_condense.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,tn_transformer_expand_condense.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,tn_transformer_expand_condense.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\layers,tn_transformer_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\layers,tn_transformer_test.py,"def test_layer_creation(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,tn_transformer_test.py,"def test_layer_creation_with_mask(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,tn_transformer_test.py,"def test_layer_creation_with_incorrect_mask_fails(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,tn_transformer_test.py,"def test_layer_invocation(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,tn_transformer_test.py,"def test_layer_invocation_with_mask(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,tn_transformer_test.py,"def test_layer_output_range(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,tn_transformer_test.py,"def test_layer_invocation_with_float16_dtype(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,tn_transformer_test.py,"def test_transform_with_initializer(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,tn_transformer_test.py,"def test_dynamic_layer_sequence(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,transformer.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,transformer.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\layers,transformer.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,transformer.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,transformer.py,def common_layers_with_encoder(self):
data/raw/repos\official\nlp\modeling\layers,transformer.py,"def call(self, inputs, cache=None, decode_loop_step=None):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block.py,"def build(self, input_shape: tf.TensorShape | Sequence[int | None]):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_layer_creation(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_layer_creation_with_mask(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_layer_creation_with_dict_inputs(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_layer_invocation(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_layer_invocation_with_mask(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_layer_invocation_with_dict_inputs(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_layer_output_range(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_layer_output_range_without_mask(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_layer_output_range_with_pre_norm(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_layer_invocation_with_float16_dtype(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_transform_with_initializer(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_dynamic_layer_sequence(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_separate_qkv(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def test_raises_invalid_arg_error_when_q_kv_dims_are_different(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_use_query_residual_false_removes_add_op(self, norm_first):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def test_use_bias_norm_first(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def test_use_rms_norm(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def test_norm_first_false_and_diff_q_kv_att_layer_norm_true_raises(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def test_diff_q_kv_att_layer_norm_is_part_of_config_1(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def test_diff_q_kv_att_layer_norm_is_part_of_config_2(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def test_use_query_residual_is_part_of_config_1(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def test_use_query_residual_is_part_of_config_2(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def test_key_dim_is_part_of_config_1(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def test_key_dim_is_part_of_config_2(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def test_value_dim_is_part_of_config_1(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def test_value_dim_is_part_of_config_2(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def test_output_last_dim_is_part_of_config_1(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def test_output_last_dim_is_part_of_config_2(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def test_get_config(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_several_attention_axes(self, attention_axes):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_return_attention_scores(self, return_attention_scores):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_attention_with_kv_heads(self, num_kv_heads):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_block_sparse_attention(self, use_sigmoid_attn, num_kv_heads=None):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_low_rank_attention(self, shared_kv_projection):"
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def test_low_rank_attention_with_constformer(self):
data/raw/repos\official\nlp\modeling\layers,transformer_encoder_block_test.py,def test_low_rank_attention_with_constformer_no_linformer(self):
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold.py,"def get_layer_instance(instance_or_cls, config, default_config):"
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold.py,"def call(self, inputs, training=None):"
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,"def __init__(self, call_list, **kwargs):"
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,"def call(self, query, value, attention_mask=None):"
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,"def __init__(self, call_list, activation, **kwargs):"
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,def test_layer_creation(self):
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,def test_layer_creation_with_feedforward_cls(self):
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,def test_layer_creation_with_mask(self):
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,def test_layer_invocation(self):
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,def test_layer_invocation_with_feedforward_cls(self):
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,def test_layer_invocation_with_mask(self):
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,def test_layer_invocation_with_float16_dtype(self):
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,def test_transform_with_initializer(self):
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,def test_layer_restoration_from_config(self):
data/raw/repos\official\nlp\modeling\layers,transformer_scaffold_test.py,def test_layer_with_feedforward_cls_restoration_from_config(self):
data/raw/repos\official\nlp\modeling\layers,transformer_test.py,"def _create_cache(batch_size, init_decode_length, num_heads, head_size):"
data/raw/repos\official\nlp\modeling\layers,transformer_test.py,def test_decoder_block_with_cache(self):
data/raw/repos\official\nlp\modeling\layers,transformer_test.py,def test_use_bias_norm_first(self):
data/raw/repos\official\nlp\modeling\layers,transformer_test.py,def test_get_config(self):
data/raw/repos\official\nlp\modeling\layers,transformer_test.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\nlp\modeling\layers,transformer_test.py,"def __call__(self, query, value, attention_mask, cache, decode_loop_step):"
data/raw/repos\official\nlp\modeling\layers,transformer_test.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\nlp\modeling\layers,transformer_test.py,"def __call__(self, query, value, attention_mask):"
data/raw/repos\official\nlp\modeling\layers,transformer_xl.py,"def _cache_memory(current_state, previous_state, memory_length, reuse_length=0):"
data/raw/repos\official\nlp\modeling\layers,transformer_xl.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\layers,transformer_xl.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,transformer_xl.py,def get_config(self):
data/raw/repos\official\nlp\modeling\layers,transformer_xl_test.py,def test_get_config(self):
data/raw/repos\official\nlp\modeling\layers,transformer_xl_test.py,def test_get_config(self):
data/raw/repos\official\nlp\modeling\layers,util.py,"def __init__(self, **kwargs):"
data/raw/repos\official\nlp\modeling\layers,util.py,"def __call__(self, func):"
data/raw/repos\official\nlp\modeling\layers,util.py,def wrapped_func(*args):
data/raw/repos\official\nlp\modeling\layers,util.py,def tf_function_if_eager(**kwargs):
data/raw/repos\official\nlp\modeling\layers,util.py,def filter_kwargs(kwargs):
data/raw/repos\official\nlp\modeling\losses,weighted_sparse_categorical_crossentropy.py,"def _adjust_labels(labels, predictions):"
data/raw/repos\official\nlp\modeling\losses,weighted_sparse_categorical_crossentropy.py,"def _validate_rank(labels, predictions, weights):"
data/raw/repos\official\nlp\modeling\losses,weighted_sparse_categorical_crossentropy.py,"def loss(labels, predictions, weights=None, from_logits=False):"
data/raw/repos\official\nlp\modeling\losses,weighted_sparse_categorical_crossentropy_test.py,def test_loss_3d_input(self):
data/raw/repos\official\nlp\modeling\losses,weighted_sparse_categorical_crossentropy_test.py,def test_loss_weights_3d_input(self):
data/raw/repos\official\nlp\modeling\losses,weighted_sparse_categorical_crossentropy_test.py,def test_mismatched_predictions_and_labels_ranks_squeezes(self):
data/raw/repos\official\nlp\modeling\losses,weighted_sparse_categorical_crossentropy_test.py,def test_mismatched_weights_and_labels_ranks_fail(self):
data/raw/repos\official\nlp\modeling\losses,weighted_sparse_categorical_crossentropy_test.py,def test_tf_tensor_inputs(self):
data/raw/repos\official\nlp\modeling\losses,weighted_sparse_categorical_crossentropy_test.py,def test_legacy_lm_loss_compatibility(self):
data/raw/repos\official\nlp\modeling\losses,weighted_sparse_categorical_crossentropy_test.py,def test_legacy_classification_loss_compatibility(self):
data/raw/repos\official\nlp\modeling\models,bert_classifier.py,def checkpoint_items(self):
data/raw/repos\official\nlp\modeling\models,bert_classifier.py,def get_config(self):
data/raw/repos\official\nlp\modeling\models,bert_classifier.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\models,bert_classifier.py,def _make_config_dict(self):
data/raw/repos\official\nlp\modeling\models,bert_classifier_test.py,"def test_bert_trainer(self, num_classes, dict_outputs):"
data/raw/repos\official\nlp\modeling\models,bert_classifier_test.py,"def test_bert_trainer_tensor_call(self, num_classes, use_custom_head):"
data/raw/repos\official\nlp\modeling\models,bert_classifier_test.py,"def test_serialize_deserialize(self, cls_head):"
data/raw/repos\official\nlp\modeling\models,bert_pretrainer.py,def get_config(self):
data/raw/repos\official\nlp\modeling\models,bert_pretrainer.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\models,bert_pretrainer.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\models,bert_pretrainer.py,def checkpoint_items(self):
data/raw/repos\official\nlp\modeling\models,bert_pretrainer.py,def get_config(self):
data/raw/repos\official\nlp\modeling\models,bert_pretrainer.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\models,bert_pretrainer_test.py,def test_bert_pretrainer(self):
data/raw/repos\official\nlp\modeling\models,bert_pretrainer_test.py,def test_bert_trainer_tensor_call(self):
data/raw/repos\official\nlp\modeling\models,bert_pretrainer_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\models,bert_pretrainer_test.py,def test_multiple_cls_outputs(self):
data/raw/repos\official\nlp\modeling\models,bert_pretrainer_test.py,def test_v2_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\models,bert_span_labeler.py,def checkpoint_items(self):
data/raw/repos\official\nlp\modeling\models,bert_span_labeler.py,def get_config(self):
data/raw/repos\official\nlp\modeling\models,bert_span_labeler.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\models,bert_span_labeler_test.py,"def test_bert_trainer(self, dict_outputs):"
data/raw/repos\official\nlp\modeling\models,bert_span_labeler_test.py,def test_bert_trainer_named_compilation(self):
data/raw/repos\official\nlp\modeling\models,bert_span_labeler_test.py,def test_bert_trainer_tensor_call(self):
data/raw/repos\official\nlp\modeling\models,bert_span_labeler_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\models,bert_token_classifier.py,def checkpoint_items(self):
data/raw/repos\official\nlp\modeling\models,bert_token_classifier.py,def get_config(self):
data/raw/repos\official\nlp\modeling\models,bert_token_classifier.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\models,bert_token_classifier_test.py,"def test_bert_trainer(self, dict_outputs, output_encoder_outputs):"
data/raw/repos\official\nlp\modeling\models,bert_token_classifier_test.py,def test_bert_trainer_tensor_call(self):
data/raw/repos\official\nlp\modeling\models,bert_token_classifier_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\models,dual_encoder.py,def get_config(self):
data/raw/repos\official\nlp\modeling\models,dual_encoder.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\models,dual_encoder.py,def checkpoint_items(self):
data/raw/repos\official\nlp\modeling\models,dual_encoder_test.py,"def test_dual_encoder(self, hidden_size, output):"
data/raw/repos\official\nlp\modeling\models,dual_encoder_test.py,"def test_dual_encoder_tensor_call(self, hidden_size, output):"
data/raw/repos\official\nlp\modeling\models,dual_encoder_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\models,electra_pretrainer.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\models,electra_pretrainer.py,"def _get_fake_data(self, inputs, mlm_logits, duplicate=True):"
data/raw/repos\official\nlp\modeling\models,electra_pretrainer.py,def checkpoint_items(self):
data/raw/repos\official\nlp\modeling\models,electra_pretrainer.py,def get_config(self):
data/raw/repos\official\nlp\modeling\models,electra_pretrainer.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\models,electra_pretrainer.py,"def scatter_update(sequence, updates, positions):"
data/raw/repos\official\nlp\modeling\models,electra_pretrainer.py,"def sample_from_softmax(logits, disallow=None):"
data/raw/repos\official\nlp\modeling\models,electra_pretrainer.py,"def unmask(inputs, duplicate):"
data/raw/repos\official\nlp\modeling\models,electra_pretrainer.py,"def get_updated_inputs(inputs, duplicate, **kwargs):"
data/raw/repos\official\nlp\modeling\models,electra_pretrainer_test.py,def test_electra_pretrainer(self):
data/raw/repos\official\nlp\modeling\models,electra_pretrainer_test.py,def test_electra_trainer_tensor_call(self):
data/raw/repos\official\nlp\modeling\models,electra_pretrainer_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer.py,def get_config(self):
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer.py,"def _embedding_linear(self, embedding_matrix, x):"
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer.py,"def _parse_inputs(self, inputs):"
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer.py,"def _get_symbols_to_logits_fn(self, max_decode_length):"
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer.py,"def symbols_to_logits_fn(ids, i, cache):"
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer.py,def get_config(self):
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer.py,"def call(self, encoder_inputs, attention_mask=None):"
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer.py,"def _select_attention_cls(attention_cls, index):"
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer.py,def get_config(self):
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer.py,def attention_initializer(hidden_size):
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer_test.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer_test.py,"def __call__(self, query, value, attention_mask, **kwargs):"
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer_test.py,def step(inputs):
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer_test.py,def _step_fn(inputs):
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer_test.py,"def test_create_savedmodel(self, padded_decode):"
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer_test.py,"def __init__(self, model):"
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer_test.py,"def serve(self, inputs):"
data/raw/repos\official\nlp\modeling\models,seq2seq_transformer_test.py,"def embedded_serve(self, embedded_inputs, input_masks):"
data/raw/repos\official\nlp\modeling\models,t5.py,"def __init__(self, dtype: tf.DType = tf.float32, name: Optional[Text] = None):"
data/raw/repos\official\nlp\modeling\models,t5.py,def dense_gradient(x: tf.Tensor):
data/raw/repos\official\nlp\modeling\models,t5.py,def grad(dy):
data/raw/repos\official\nlp\modeling\models,t5.py,"def make_causal_mask(x, dtype=tf.float32):"
data/raw/repos\official\nlp\modeling\models,t5.py,"def __call__(self, inputs: tf.Tensor, one_hot: bool = True):"
data/raw/repos\official\nlp\modeling\models,t5.py,"def attend(self, query):"
data/raw/repos\official\nlp\modeling\models,t5.py,"def __init__(self, hidden_size: int, epsilon: float = 1e-6, **kwargs):"
data/raw/repos\official\nlp\modeling\models,t5.py,"def __call__(self, x):"
data/raw/repos\official\nlp\modeling\models,t5.py,"def __init__(self, rate: float, **kwargs):"
data/raw/repos\official\nlp\modeling\models,t5.py,"def __call__(self, qlen, klen):"
data/raw/repos\official\nlp\modeling\models,t5.py,"def _update_cache(self, key, value, cache, decode_position):"
data/raw/repos\official\nlp\modeling\models,t5.py,def checkpoint_items(self):
data/raw/repos\official\nlp\modeling\models,t5_test.py,"def test_embed(self, dtype):"
data/raw/repos\official\nlp\modeling\models,t5_test.py,"def test_rms_norm(self, dtype):"
data/raw/repos\official\nlp\modeling\models,t5_test.py,"def test_linear(self, dtype):"
data/raw/repos\official\nlp\modeling\models,t5_test.py,def test_linear3d(self):
data/raw/repos\official\nlp\modeling\models,t5_test.py,def test_ffn(self):
data/raw/repos\official\nlp\modeling\models,t5_test.py,"def test_relative_position(self, dtype):"
data/raw/repos\official\nlp\modeling\models,t5_test.py,def test_masks(self):
data/raw/repos\official\nlp\modeling\models,t5_test.py,"def test_attention(self, distribution):"
data/raw/repos\official\nlp\modeling\models,t5_test.py,def step(inputs):
data/raw/repos\official\nlp\modeling\models,t5_test.py,def _step_fn(inputs):
data/raw/repos\official\nlp\modeling\models,t5_test.py,"def test_attention_layers(self, distribution):"
data/raw/repos\official\nlp\modeling\models,t5_test.py,def step(inputs):
data/raw/repos\official\nlp\modeling\models,t5_test.py,def _step_fn(inputs):
data/raw/repos\official\nlp\modeling\models,t5_test.py,def step_cross_attn(inputs):
data/raw/repos\official\nlp\modeling\models,t5_test.py,def _step_fn(inputs):
data/raw/repos\official\nlp\modeling\models,t5_test.py,def test_encoder_block(self):
data/raw/repos\official\nlp\modeling\models,t5_test.py,def test_encdec_block(self):
data/raw/repos\official\nlp\modeling\models,t5_test.py,"def test_encoder(self, dtype):"
data/raw/repos\official\nlp\modeling\models,t5_test.py,"def test_encoder_att_scores(self, return_attention_scores):"
data/raw/repos\official\nlp\modeling\models,t5_test.py,"def test_encoder_with_dense(self, dtype):"
data/raw/repos\official\nlp\modeling\models,t5_test.py,"def test_encoder_only_dense(self, dtype):"
data/raw/repos\official\nlp\modeling\models,t5_test.py,def test_decoder(self):
data/raw/repos\official\nlp\modeling\models,t5_test.py,def test_transformer_return_attn_scores(self):
data/raw/repos\official\nlp\modeling\models,xlnet.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\models,xlnet.py,"def call(self, inputs: Mapping[str, Any]):"
data/raw/repos\official\nlp\modeling\models,xlnet.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\models,xlnet.py,def checkpoint_items(self):
data/raw/repos\official\nlp\modeling\models,xlnet.py,"def call(self, inputs: Mapping[str, Any]):"
data/raw/repos\official\nlp\modeling\models,xlnet.py,def get_config(self):
data/raw/repos\official\nlp\modeling\models,xlnet.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\models,xlnet.py,def checkpoint_items(self):
data/raw/repos\official\nlp\modeling\models,xlnet.py,"def call(self, inputs: Mapping[str, Any]):"
data/raw/repos\official\nlp\modeling\models,xlnet.py,def checkpoint_items(self):
data/raw/repos\official\nlp\modeling\models,xlnet.py,def get_config(self):
data/raw/repos\official\nlp\modeling\models,xlnet.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\models,xlnet_test.py,def test_xlnet_masked_lm_head(self):
data/raw/repos\official\nlp\modeling\models,xlnet_test.py,def test_xlnet_trainer(self):
data/raw/repos\official\nlp\modeling\models,xlnet_test.py,def test_xlnet_tensor_call(self):
data/raw/repos\official\nlp\modeling\models,xlnet_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\models,xlnet_test.py,def test_xlnet_trainer(self):
data/raw/repos\official\nlp\modeling\models,xlnet_test.py,"def test_xlnet_tensor_call(self, num_classes):"
data/raw/repos\official\nlp\modeling\models,xlnet_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\models,xlnet_test.py,def test_xlnet_trainer(self):
data/raw/repos\official\nlp\modeling\models,xlnet_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\networks,albert_encoder.py,def get_embedding_table(self):
data/raw/repos\official\nlp\modeling\networks,albert_encoder.py,def get_config(self):
data/raw/repos\official\nlp\modeling\networks,albert_encoder.py,"def from_config(cls, config):"
data/raw/repos\official\nlp\modeling\networks,albert_encoder_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\networks,albert_encoder_test.py,"def test_network_creation(self, expected_dtype):"
data/raw/repos\official\nlp\modeling\networks,albert_encoder_test.py,def test_network_invocation(self):
data/raw/repos\official\nlp\modeling\networks,albert_encoder_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\networks,bert_dense_encoder_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\networks,bert_dense_encoder_test.py,def test_dict_outputs_network_creation(self):
data/raw/repos\official\nlp\modeling\networks,bert_dense_encoder_test.py,def test_dict_outputs_all_encoder_outputs_network_creation(self):
data/raw/repos\official\nlp\modeling\networks,bert_dense_encoder_test.py,def test_dict_outputs_network_creation_with_float16_dtype(self):
data/raw/repos\official\nlp\modeling\networks,bert_dense_encoder_test.py,def test_embeddings_as_inputs(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\networks,bert_encoder.py,def get_embedding_table(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder.py,def get_embedding_layer(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder.py,def get_config(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder.py,def transformer_layers(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder.py,def pooler_layer(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\networks,bert_encoder.py,def get_embedding_table(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder.py,def get_embedding_layer(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder.py,def get_config(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder.py,def transformer_layers(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder.py,def pooler_layer(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\networks,bert_encoder_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder_test.py,"def test_dict_outputs_network_creation(self, encoder_cls):"
data/raw/repos\official\nlp\modeling\networks,bert_encoder_test.py,"def test_dict_outputs_all_encoder_outputs_network_creation(self, encoder_cls):"
data/raw/repos\official\nlp\modeling\networks,bert_encoder_test.py,"def test_dict_outputs_network_creation_with_float16_dtype(self, encoder_cls):"
data/raw/repos\official\nlp\modeling\networks,bert_encoder_test.py,def test_embeddings_as_inputs(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder_test.py,def test_network_creation(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder_test.py,def test_all_encoder_outputs_network_creation(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder_test.py,def test_attention_scores_output_network_creation(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder_test.py,def test_network_creation_with_float16_dtype(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder_test.py,"def test_network_invocation(self, output_range, out_seq_len):"
data/raw/repos\official\nlp\modeling\networks,bert_encoder_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder_test.py,def test_weights_forward_compatible(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder_test.py,"def check_output_close(data, net1, net2):"
data/raw/repos\official\nlp\modeling\networks,bert_encoder_test.py,def test_checkpoint_forward_compatible(self):
data/raw/repos\official\nlp\modeling\networks,bert_encoder_test.py,def test_keras_model_checkpoint_forward_compatible(self):
data/raw/repos\official\nlp\modeling\networks,classification.py,def get_config(self):
data/raw/repos\official\nlp\modeling\networks,classification.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\networks,classification_test.py,"def test_network_creation(self, num_classes):"
data/raw/repos\official\nlp\modeling\networks,classification_test.py,"def test_network_invocation(self, num_classes):"
data/raw/repos\official\nlp\modeling\networks,classification_test.py,def test_network_invocation_with_internal_logits(self):
data/raw/repos\official\nlp\modeling\networks,classification_test.py,def test_network_invocation_with_logit_output(self):
data/raw/repos\official\nlp\modeling\networks,classification_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\networks,classification_test.py,def test_unknown_output_type_fails(self):
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold.py,def get_config(self):
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold.py,def get_embedding_table(self):
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold.py,def embedding_network(self):
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold.py,def hidden_layers(self):
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold.py,def pooler_layer(self):
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,"def __init__(self, call_list, call_class=None, **kwargs):"
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,def get_config(self):
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,"def __init__(self, call_list, call_class=None, **kwargs):"
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,"def call(self, inputs, mask):"
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,def get_config(self):
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,"def test_network_creation(self, return_all_layer_outputs):"
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,def test_network_creation_with_float16_dtype(self):
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,def test_network_invocation(self):
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,"def __init__(self, vocab_size, hidden_size):"
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,def test_network_invocation(self):
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,def test_network_invocation(self):
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,def test_hidden_cls_list(self):
data/raw/repos\official\nlp\modeling\networks,encoder_scaffold_test.py,"def test_serialize_deserialize(self, use_hidden_cls_instance):"
data/raw/repos\official\nlp\modeling\networks,fnet.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\networks,fnet.py,def get_embedding_table(self):
data/raw/repos\official\nlp\modeling\networks,fnet.py,def get_embedding_layer(self):
data/raw/repos\official\nlp\modeling\networks,fnet.py,def get_config(self):
data/raw/repos\official\nlp\modeling\networks,fnet.py,def transformer_layers(self):
data/raw/repos\official\nlp\modeling\networks,fnet.py,def pooler_layer(self):
data/raw/repos\official\nlp\modeling\networks,fnet.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\networks,fnet.py,"def _init_mixing_sublayer(self, layer: int):"
data/raw/repos\official\nlp\modeling\networks,fnet_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\networks,fnet_test.py,def test_embeddings_as_inputs(self):
data/raw/repos\official\nlp\modeling\networks,funnel_transformer.py,def _get_policy_dtype():
data/raw/repos\official\nlp\modeling\networks,funnel_transformer.py,"def _create_fractional_pool_transform(sl: int, pool_factor: float):"
data/raw/repos\official\nlp\modeling\networks,funnel_transformer.py,"def create_2d_mask(from_length, mask):"
data/raw/repos\official\nlp\modeling\networks,funnel_transformer.py,"def call(self, inputs, output_range: Optional[tf.Tensor] = None):"
data/raw/repos\official\nlp\modeling\networks,funnel_transformer.py,def get_embedding_table(self):
data/raw/repos\official\nlp\modeling\networks,funnel_transformer.py,def get_embedding_layer(self):
data/raw/repos\official\nlp\modeling\networks,funnel_transformer.py,def get_config(self):
data/raw/repos\official\nlp\modeling\networks,funnel_transformer.py,def transformer_layers(self):
data/raw/repos\official\nlp\modeling\networks,funnel_transformer.py,def pooler_layer(self):
data/raw/repos\official\nlp\modeling\networks,funnel_transformer.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\networks,funnel_transformer_test.py,"def __init__(self, layer):"
data/raw/repos\official\nlp\modeling\networks,funnel_transformer_test.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\networks,funnel_transformer_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\networks,funnel_transformer_test.py,"def test_network_creation_dense(self, append_dense_inputs):"
data/raw/repos\official\nlp\modeling\networks,funnel_transformer_test.py,"def test_fractional_pooling(self, transformer_cls):"
data/raw/repos\official\nlp\modeling\networks,funnel_transformer_test.py,def test_invalid_stride_and_num_layers(self):
data/raw/repos\official\nlp\modeling\networks,funnel_transformer_test.py,def test_embeddings_as_inputs(self):
data/raw/repos\official\nlp\modeling\networks,funnel_transformer_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\networks,mobile_bert_encoder.py,def get_config(self):
data/raw/repos\official\nlp\modeling\networks,mobile_bert_encoder.py,"def from_config(cls, config):"
data/raw/repos\official\nlp\modeling\networks,mobile_bert_encoder.py,def get_embedding_table(self):
data/raw/repos\official\nlp\modeling\networks,mobile_bert_encoder.py,def get_embedding_layer(self):
data/raw/repos\official\nlp\modeling\networks,mobile_bert_encoder.py,def transformer_layers(self):
data/raw/repos\official\nlp\modeling\networks,mobile_bert_encoder.py,def pooler_layer(self):
data/raw/repos\official\nlp\modeling\networks,mobile_bert_encoder_test.py,"def generate_fake_input(batch_size=1, seq_len=5, vocab_size=10000, seed=0):"
data/raw/repos\official\nlp\modeling\networks,mobile_bert_encoder_test.py,def test_mobilebert_encoder_return_all_layer_output(self):
data/raw/repos\official\nlp\modeling\networks,mobile_bert_encoder_test.py,"def test_mobilebert_encoder_invocation(self, input_mask_dtype):"
data/raw/repos\official\nlp\modeling\networks,mobile_bert_encoder_test.py,def test_mobilebert_encoder_invocation_with_attention_score(self):
data/raw/repos\official\nlp\modeling\networks,mobile_bert_encoder_test.py,"def test_mobilebert_encoder_for_downstream_task(self, task, prediction_shape):"
data/raw/repos\official\nlp\modeling\networks,packed_sequence_embedding.py,def get_embedding_table(self):
data/raw/repos\official\nlp\modeling\networks,packed_sequence_embedding.py,def get_config(self):
data/raw/repos\official\nlp\modeling\networks,packed_sequence_embedding.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\networks,packed_sequence_embedding.py,"def call(self, input_ids):"
data/raw/repos\official\nlp\modeling\networks,packed_sequence_embedding.py,def get_config(self):
data/raw/repos\official\nlp\modeling\networks,packed_sequence_embedding.py,"def build(self, input_shape):"
data/raw/repos\official\nlp\modeling\networks,packed_sequence_embedding.py,"def call(self, inputs, position_ids=None, sub_sequence_mask=None):"
data/raw/repos\official\nlp\modeling\networks,packed_sequence_embedding_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\networks,packed_sequence_embedding_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\networks,span_labeling.py,"def _apply_paragraph_mask(logits, paragraph_mask):"
data/raw/repos\official\nlp\modeling\networks,span_labeling.py,"def _split_output_tensor(self, tensor):"
data/raw/repos\official\nlp\modeling\networks,span_labeling.py,def get_config(self):
data/raw/repos\official\nlp\modeling\networks,span_labeling.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\networks,span_labeling.py,"def end_logits(self, inputs):"
data/raw/repos\official\nlp\modeling\networks,span_labeling.py,def get_config(self):
data/raw/repos\official\nlp\modeling\networks,span_labeling.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\networks,span_labeling_test.py,def test_network_creation(self):
data/raw/repos\official\nlp\modeling\networks,span_labeling_test.py,def test_network_invocation(self):
data/raw/repos\official\nlp\modeling\networks,span_labeling_test.py,def test_network_invocation_with_internal_logit_output(self):
data/raw/repos\official\nlp\modeling\networks,span_labeling_test.py,def test_network_invocation_with_external_logit_output(self):
data/raw/repos\official\nlp\modeling\networks,span_labeling_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\networks,span_labeling_test.py,def test_unknown_output_type_fails(self):
data/raw/repos\official\nlp\modeling\networks,span_labeling_test.py,def test_basic_invocation_train(self):
data/raw/repos\official\nlp\modeling\networks,span_labeling_test.py,def test_basic_invocation_beam_search(self):
data/raw/repos\official\nlp\modeling\networks,span_labeling_test.py,def test_subclass_invocation(self):
data/raw/repos\official\nlp\modeling\networks,span_labeling_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\nlp\modeling\networks,sparse_mixer.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\networks,sparse_mixer.py,def get_embedding_table(self):
data/raw/repos\official\nlp\modeling\networks,sparse_mixer.py,def get_embedding_layer(self):
data/raw/repos\official\nlp\modeling\networks,sparse_mixer.py,def get_config(self):
data/raw/repos\official\nlp\modeling\networks,sparse_mixer.py,def transformer_layers(self):
data/raw/repos\official\nlp\modeling\networks,sparse_mixer.py,def pooler_layer(self):
data/raw/repos\official\nlp\modeling\networks,sparse_mixer.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\nlp\modeling\networks,sparse_mixer.py,"def _init_mixing_sublayer(self, layer: int):"
data/raw/repos\official\nlp\modeling\networks,sparse_mixer_test.py,def tearDown(self):
data/raw/repos\official\nlp\modeling\networks,sparse_mixer_test.py,def test_embeddings_as_inputs(self):
data/raw/repos\official\nlp\modeling\networks,xlnet_base.py,"def _combine_masks(mask1, mask2, dtype, how=""and""):"
data/raw/repos\official\nlp\modeling\networks,xlnet_base.py,"def __init__(self, hidden_size, **kwargs):"
data/raw/repos\official\nlp\modeling\networks,xlnet_base.py,"def call(self, pos_seq, batch_size=None):"
data/raw/repos\official\nlp\modeling\networks,xlnet_base.py,def get_config(self):
data/raw/repos\official\nlp\modeling\networks,xlnet_base.py,def get_embedding_lookup_table(self):
data/raw/repos\official\nlp\modeling\networks,xlnet_base.py,"def call(self, inputs):"
data/raw/repos\official\nlp\modeling\networks,xlnet_base_test.py,def test_positional_embedding(self):
data/raw/repos\official\nlp\modeling\networks,xlnet_base_test.py,"def test_compute_position_encoding_smoke(self, attention_type, bi_data):"
data/raw/repos\official\nlp\modeling\networks,xlnet_base_test.py,def test_casual_attention_mask_with_no_memory(self):
data/raw/repos\official\nlp\modeling\networks,xlnet_base_test.py,def test_casual_attention_mask_with_memory(self):
data/raw/repos\official\nlp\modeling\networks,xlnet_base_test.py,def test_causal_attention_mask_with_same_length(self):
data/raw/repos\official\nlp\modeling\networks,xlnet_base_test.py,def test_no_input_masks(self):
data/raw/repos\official\nlp\modeling\networks,xlnet_base_test.py,def test_input_mask_no_permutation(self):
data/raw/repos\official\nlp\modeling\networks,xlnet_base_test.py,def test_permutation_mask_no_input_mask(self):
data/raw/repos\official\nlp\modeling\networks,xlnet_base_test.py,def test_permutation_and_input_mask(self):
data/raw/repos\official\nlp\modeling\networks,xlnet_base_test.py,def test_permutation_input_uni_mask(self):
data/raw/repos\official\nlp\modeling\networks,xlnet_base_test.py,def test_no_segment_ids(self):
data/raw/repos\official\nlp\modeling\networks,xlnet_base_test.py,def test_basic(self):
data/raw/repos\official\nlp\modeling\networks,xlnet_base_test.py,def test_basic_with_memory(self):
data/raw/repos\official\nlp\modeling\networks,xlnet_base_test.py,def dont_test_basic_with_class_mask(self):
data/raw/repos\official\nlp\modeling\networks,xlnet_base_test.py,def test_xlnet_model(self):
data/raw/repos\official\nlp\modeling\networks,xlnet_base_test.py,def test_get_config(self):
data/raw/repos\official\nlp\modeling\ops,beam_search.py,def inf(dtype):
data/raw/repos\official\nlp\modeling\ops,beam_search.py,"def _expand_to_same_rank(tensor, target):"
data/raw/repos\official\nlp\modeling\ops,beam_search.py,"def search(self, initial_ids, initial_cache, constraint_mask=None):"
data/raw/repos\official\nlp\modeling\ops,beam_search.py,def _grow_alive_seq(state):
data/raw/repos\official\nlp\modeling\ops,beam_search.py,def _search_step(state):
data/raw/repos\official\nlp\modeling\ops,beam_search.py,"def _process_finished_state(self, finished_state):"
data/raw/repos\official\nlp\modeling\ops,beam_search.py,"def _continue_search(self, state):"
data/raw/repos\official\nlp\modeling\ops,beam_search.py,"def _gather_beams(nested, beam_indices, batch_size, new_beam_size):"
data/raw/repos\official\nlp\modeling\ops,beam_search.py,def _log_prob_from_logits(logits):
data/raw/repos\official\nlp\modeling\ops,beam_search.py,"def _length_normalization(alpha, length, dtype=tf.float32):"
data/raw/repos\official\nlp\modeling\ops,beam_search.py,"def expand_to_beam_size(tensor, beam_size):"
data/raw/repos\official\nlp\modeling\ops,beam_search.py,def flatten_beam_dim(tensor):
data/raw/repos\official\nlp\modeling\ops,beam_search.py,def _shape_list(tensor):
data/raw/repos\official\nlp\modeling\ops,beam_search.py,def _get_shape_keep_last_dim(tensor):
data/raw/repos\official\nlp\modeling\ops,beam_search.py,"def _unflatten_beam_dim(tensor, batch_size, beam_size):"
data/raw/repos\official\nlp\modeling\ops,beam_search_test.py,def test_expand_to_beam_size(self):
data/raw/repos\official\nlp\modeling\ops,beam_search_test.py,def test_get_shape_keep_last_dim(self):
data/raw/repos\official\nlp\modeling\ops,beam_search_test.py,def test_flatten_beam_dim(self):
data/raw/repos\official\nlp\modeling\ops,beam_search_test.py,def test_unflatten_beam_dim(self):
data/raw/repos\official\nlp\modeling\ops,beam_search_test.py,def test_gather_beams(self):
data/raw/repos\official\nlp\modeling\ops,beam_search_test.py,"def test_sequence_beam_search(self, padded_decode, noise_multiplier, name):"
data/raw/repos\official\nlp\modeling\ops,beam_search_test.py,def _get_test_symbols_to_logits_fn():
data/raw/repos\official\nlp\modeling\ops,beam_search_test.py,"def symbols_to_logits_fn(_, i, cache):"
data/raw/repos\official\nlp\modeling\ops,beam_search_test.py,def _get_test_symbols_to_logits_fn():
data/raw/repos\official\nlp\modeling\ops,beam_search_test.py,"def symbols_to_logits_fn(_, i, cache):"
data/raw/repos\official\nlp\modeling\ops,beam_search_test.py,def _get_test_symbols_to_logits_fn():
data/raw/repos\official\nlp\modeling\ops,beam_search_test.py,"def symbols_to_logits_fn(_, i, cache):"
data/raw/repos\official\nlp\modeling\ops,decoding_module.py,def log_prob_from_logits(logits):
data/raw/repos\official\nlp\modeling\ops,decoding_module.py,def shape_list(tensor):
data/raw/repos\official\nlp\modeling\ops,decoding_module.py,def get_shape_keep_last_dim(tensor):
data/raw/repos\official\nlp\modeling\ops,decoding_module.py,"def expand_to_same_rank(tensor, target):"
data/raw/repos\official\nlp\modeling\ops,decoding_module.py,def _generate_step(state):
data/raw/repos\official\nlp\modeling\ops,decoding_module.py,"def update_with_cache(new_state, cache):"
data/raw/repos\official\nlp\modeling\ops,decoding_module.py,def inf(self):
data/raw/repos\official\nlp\modeling\ops,decoding_module_test.py,"def length_normalization(length, dtype):"
data/raw/repos\official\nlp\modeling\ops,decoding_module_test.py,"def _create_initial_state(self, initial_ids, initial_cache, batch_size):"
data/raw/repos\official\nlp\modeling\ops,decoding_module_test.py,"def _grow_alive_seq(self, state, batch_size):"
data/raw/repos\official\nlp\modeling\ops,decoding_module_test.py,"def _process_finished_state(self, finished_state):"
data/raw/repos\official\nlp\modeling\ops,decoding_module_test.py,"def _finished_flags(self, topk_ids, state):"
data/raw/repos\official\nlp\modeling\ops,decoding_module_test.py,"def _continue_search(self, state):"
data/raw/repos\official\nlp\modeling\ops,decoding_module_test.py,def test_get_shape_keep_last_dim(self):
data/raw/repos\official\nlp\modeling\ops,decoding_module_test.py,def test_shape_list(self):
data/raw/repos\official\nlp\modeling\ops,decoding_module_test.py,def test_inf(self):
data/raw/repos\official\nlp\modeling\ops,decoding_module_test.py,def test_length_normalization(self):
data/raw/repos\official\nlp\modeling\ops,sampling_module.py,def greedy(log_probs):
data/raw/repos\official\nlp\modeling\ops,sampling_module.py,"def sample_logits_with_temperature(logits, temperature):"
data/raw/repos\official\nlp\modeling\ops,sampling_module.py,"def sample_top_k(logits, top_k):"
data/raw/repos\official\nlp\modeling\ops,sampling_module.py,"def sample_top_p(logits, top_p):"
data/raw/repos\official\nlp\modeling\ops,sampling_module.py,"def scatter_values_on_batch_indices(values, batch_indices):"
data/raw/repos\official\nlp\modeling\ops,sampling_module.py,"def set_tensor_by_indices_to_value(input_tensor, indices, value):"
data/raw/repos\official\nlp\modeling\ops,segment_extractor.py,"def _get_random(positions, random_fn):"
data/raw/repos\official\nlp\modeling\ops,segment_extractor.py,"def _random_int_up_to(maxval, random_fn):"
data/raw/repos\official\nlp\modeling\ops,segment_extractor.py,"def _random_int_from_range(minval, maxval, random_fn):"
data/raw/repos\official\nlp\modeling\ops,segment_extractor.py,"def _sample_from_other_batch(sentences, random_fn):"
data/raw/repos\official\nlp\serving,export_savedmodel.py,def define_flags():
data/raw/repos\official\nlp\serving,export_savedmodel.py,def lookup_export_module(task: base_task.Task):
data/raw/repos\official\nlp\serving,export_savedmodel.py,def main(_):
data/raw/repos\official\nlp\serving,export_savedmodel_test.py,def test_create_export_module(self):
data/raw/repos\official\nlp\serving,export_savedmodel_test.py,def test_sentence_prediction(self):
data/raw/repos\official\nlp\serving,export_savedmodel_test.py,def test_masked_lm(self):
data/raw/repos\official\nlp\serving,export_savedmodel_test.py,"def test_tagging(self, output_encoder_outputs):"
data/raw/repos\official\nlp\serving,serving_modules.py,"def __init__(self, params, model: tf_keras.Model, inference_step=None):"
data/raw/repos\official\nlp\serving,serving_modules.py,"def get_inference_signatures(self, function_keys: Dict[Text, Text]):"
data/raw/repos\official\nlp\serving,serving_modules.py,"def __init__(self, params, model: tf_keras.Model, inference_step=None):"
data/raw/repos\official\nlp\serving,serving_modules.py,"def get_inference_signatures(self, function_keys: Dict[Text, Text]):"
data/raw/repos\official\nlp\serving,serving_modules.py,"def __init__(self, params, model: tf_keras.Model, inference_step=None):"
data/raw/repos\official\nlp\serving,serving_modules.py,"def get_inference_signatures(self, function_keys: Dict[Text, Text]):"
data/raw/repos\official\nlp\serving,serving_modules.py,"def __init__(self, params, model: tf_keras.Model, inference_step=None):"
data/raw/repos\official\nlp\serving,serving_modules.py,"def get_inference_signatures(self, function_keys: Dict[Text, Text]):"
data/raw/repos\official\nlp\serving,serving_modules.py,"def __init__(self, params, model: tf_keras.Model, inference_step=None):"
data/raw/repos\official\nlp\serving,serving_modules.py,"def get_inference_signatures(self, function_keys: Dict[Text, Text]):"
data/raw/repos\official\nlp\serving,serving_modules_test.py,def _create_fake_serialized_examples(features_dict):
data/raw/repos\official\nlp\serving,serving_modules_test.py,def create_int_feature(values):
data/raw/repos\official\nlp\serving,serving_modules_test.py,def create_str_feature(value):
data/raw/repos\official\nlp\serving,serving_modules_test.py,def _create_fake_vocab_file(vocab_file_path):
data/raw/repos\official\nlp\serving,serving_modules_test.py,"def _train_sentencepiece(input_path, vocab_size, model_path, eos_id=1):"
data/raw/repos\official\nlp\serving,serving_modules_test.py,"def _generate_line_file(filepath, lines):"
data/raw/repos\official\nlp\serving,serving_modules_test.py,def _make_sentencepeice(output_dir):
data/raw/repos\official\nlp\serving,serving_modules_test.py,"def test_sentence_prediction(self, use_v2_feature_names):"
data/raw/repos\official\nlp\serving,serving_modules_test.py,"def test_sentence_prediction_text(self, inputs_only):"
data/raw/repos\official\nlp\serving,serving_modules_test.py,"def test_masked_lm(self, use_v2_feature_names):"
data/raw/repos\official\nlp\serving,serving_modules_test.py,"def test_question_answering(self, use_v2_feature_names):"
data/raw/repos\official\nlp\serving,serving_modules_test.py,"def test_tagging(self, use_v2_feature_names, output_encoder_outputs):"
data/raw/repos\official\nlp\serving,serving_modules_test.py,"def test_translation(self, padded_decode, batch_size):"
data/raw/repos\official\nlp\tasks,dual_encoder.py,def build_model(self):
data/raw/repos\official\nlp\tasks,dual_encoder.py,def dummy_data(_):
data/raw/repos\official\nlp\tasks,dual_encoder.py,"def build_metrics(self, training=None):"
data/raw/repos\official\nlp\tasks,dual_encoder.py,"def process_metrics(self, metrics, labels, model_outputs):"
data/raw/repos\official\nlp\tasks,dual_encoder.py,"def initialize(self, model):"
data/raw/repos\official\nlp\tasks,dual_encoder_test.py,def setUp(self):
data/raw/repos\official\nlp\tasks,dual_encoder_test.py,def get_model_config(self):
data/raw/repos\official\nlp\tasks,dual_encoder_test.py,"def _run_task(self, config):"
data/raw/repos\official\nlp\tasks,dual_encoder_test.py,def test_task(self):
data/raw/repos\official\nlp\tasks,dual_encoder_test.py,def _export_bert_tfhub(self):
data/raw/repos\official\nlp\tasks,dual_encoder_test.py,def test_task_with_hub(self):
data/raw/repos\official\nlp\tasks,electra_task.py,def build_model(self):
data/raw/repos\official\nlp\tasks,electra_task.py,"def build_inputs(self, params, input_context=None):"
data/raw/repos\official\nlp\tasks,electra_task.py,def dummy_data(_):
data/raw/repos\official\nlp\tasks,electra_task.py,"def build_metrics(self, training=None):"
data/raw/repos\official\nlp\tasks,electra_task.py,"def process_metrics(self, metrics, labels, model_outputs):"
data/raw/repos\official\nlp\tasks,electra_task.py,"def validation_step(self, inputs, model: tf_keras.Model, metrics):"
data/raw/repos\official\nlp\tasks,electra_task_test.py,def test_task(self):
data/raw/repos\official\nlp\tasks,masked_lm.py,"def _build_encoder(self, encoder_cfg):"
data/raw/repos\official\nlp\tasks,masked_lm.py,"def build_model(self, params=None):"
data/raw/repos\official\nlp\tasks,masked_lm.py,"def build_inputs(self, params, input_context=None):"
data/raw/repos\official\nlp\tasks,masked_lm.py,def dummy_data(_):
data/raw/repos\official\nlp\tasks,masked_lm.py,"def build_metrics(self, training=None):"
data/raw/repos\official\nlp\tasks,masked_lm.py,"def process_metrics(self, metrics, labels, model_outputs):"
data/raw/repos\official\nlp\tasks,masked_lm.py,"def validation_step(self, inputs, model: tf_keras.Model, metrics):"
data/raw/repos\official\nlp\tasks,masked_lm_determinism_test.py,"def _build_dataset(self, params, vocab_size):"
data/raw/repos\official\nlp\tasks,masked_lm_determinism_test.py,def dummy_data(_):
data/raw/repos\official\nlp\tasks,masked_lm_determinism_test.py,"def _build_and_run_model(self, config, num_steps=5):"
data/raw/repos\official\nlp\tasks,masked_lm_determinism_test.py,def test_task_determinism(self):
data/raw/repos\official\nlp\tasks,masked_lm_test.py,def test_task(self):
data/raw/repos\official\nlp\tasks,question_answering.py,"def __init__(self, params: cfg.TaskConfig, logging_dir=None, name=None):"
data/raw/repos\official\nlp\tasks,question_answering.py,"def set_preprocessed_eval_input_path(self, eval_input_path):"
data/raw/repos\official\nlp\tasks,question_answering.py,def build_model(self):
data/raw/repos\official\nlp\tasks,question_answering.py,"def _preprocess_eval_data(self, params):"
data/raw/repos\official\nlp\tasks,question_answering.py,"def _append_feature(feature, is_padding):"
data/raw/repos\official\nlp\tasks,question_answering.py,"def _dummy_data(self, params, _):"
data/raw/repos\official\nlp\tasks,question_answering.py,"def build_inputs(self, params, input_context=None):"
data/raw/repos\official\nlp\tasks,question_answering.py,"def build_metrics(self, training=None):"
data/raw/repos\official\nlp\tasks,question_answering.py,"def process_metrics(self, metrics, labels, model_outputs):"
data/raw/repos\official\nlp\tasks,question_answering.py,"def process_compiled_metrics(self, compiled_metrics, labels, model_outputs):"
data/raw/repos\official\nlp\tasks,question_answering.py,"def validation_step(self, inputs, model: tf_keras.Model, metrics=None):"
data/raw/repos\official\nlp\tasks,question_answering.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\nlp\tasks,question_answering.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\nlp\tasks,question_answering.py,def build_model(self):
data/raw/repos\official\nlp\tasks,question_answering.py,"def process_metrics(self, metrics, labels, model_outputs):"
data/raw/repos\official\nlp\tasks,question_answering.py,"def process_compiled_metrics(self, compiled_metrics, labels, model_outputs):"
data/raw/repos\official\nlp\tasks,question_answering.py,"def _dummy_data(self, params, _):"
data/raw/repos\official\nlp\tasks,question_answering.py,"def validation_step(self, inputs, model: tf_keras.Model, metrics=None):"
data/raw/repos\official\nlp\tasks,question_answering.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\nlp\tasks,question_answering.py,def predict_step(inputs):
data/raw/repos\official\nlp\tasks,question_answering_test.py,def setUp(self):
data/raw/repos\official\nlp\tasks,question_answering_test.py,"def _get_validation_data_config(self, version_2_with_negative=False):"
data/raw/repos\official\nlp\tasks,question_answering_test.py,"def _run_task(self, config):"
data/raw/repos\official\nlp\tasks,question_answering_test.py,"def test_task(self, version_2_with_negative, tokenization):"
data/raw/repos\official\nlp\tasks,question_answering_test.py,def _export_bert_tfhub(self):
data/raw/repos\official\nlp\tasks,question_answering_test.py,def test_task_with_hub(self):
data/raw/repos\official\nlp\tasks,question_answering_test.py,"def test_predict(self, version_2_with_negative):"
data/raw/repos\official\nlp\tasks,question_answering_test.py,def setUp(self):
data/raw/repos\official\nlp\tasks,question_answering_test.py,def _get_validation_data_config(self):
data/raw/repos\official\nlp\tasks,question_answering_test.py,"def _run_task(self, config):"
data/raw/repos\official\nlp\tasks,question_answering_test.py,def test_task(self):
data/raw/repos\official\nlp\tasks,sentence_prediction.py,"def __init__(self, params: cfg.TaskConfig, logging_dir=None, name=None):"
data/raw/repos\official\nlp\tasks,sentence_prediction.py,def build_model(self):
data/raw/repos\official\nlp\tasks,sentence_prediction.py,"def build_inputs(self, params, input_context=None):"
data/raw/repos\official\nlp\tasks,sentence_prediction.py,def dummy_data(_):
data/raw/repos\official\nlp\tasks,sentence_prediction.py,"def build_metrics(self, training=None):"
data/raw/repos\official\nlp\tasks,sentence_prediction.py,"def process_metrics(self, metrics, labels, model_outputs):"
data/raw/repos\official\nlp\tasks,sentence_prediction.py,"def process_compiled_metrics(self, compiled_metrics, labels, model_outputs):"
data/raw/repos\official\nlp\tasks,sentence_prediction.py,"def validation_step(self, inputs, model: tf_keras.Model, metrics=None):"
data/raw/repos\official\nlp\tasks,sentence_prediction.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\nlp\tasks,sentence_prediction.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\nlp\tasks,sentence_prediction.py,"def initialize(self, model):"
data/raw/repos\official\nlp\tasks,sentence_prediction.py,def predict_step(inputs):
data/raw/repos\official\nlp\tasks,sentence_prediction.py,"def aggregate_fn(state, outputs):"
data/raw/repos\official\nlp\tasks,sentence_prediction_test.py,"def _create_fake_dataset(output_path, seq_length, num_classes, num_examples):"
data/raw/repos\official\nlp\tasks,sentence_prediction_test.py,def create_int_feature(values):
data/raw/repos\official\nlp\tasks,sentence_prediction_test.py,def create_float_feature(values):
data/raw/repos\official\nlp\tasks,sentence_prediction_test.py,def setUp(self):
data/raw/repos\official\nlp\tasks,sentence_prediction_test.py,"def get_model_config(self, num_classes):"
data/raw/repos\official\nlp\tasks,sentence_prediction_test.py,"def _run_task(self, config):"
data/raw/repos\official\nlp\tasks,sentence_prediction_test.py,"def test_task(self, init_cls_pooler):"
data/raw/repos\official\nlp\tasks,sentence_prediction_test.py,"def test_metrics_and_losses(self, num_classes):"
data/raw/repos\official\nlp\tasks,sentence_prediction_test.py,"def test_np_metrics(self, metric_type, num_classes):"
data/raw/repos\official\nlp\tasks,sentence_prediction_test.py,def test_np_metrics_cola_partial_batch(self):
data/raw/repos\official\nlp\tasks,sentence_prediction_test.py,def _export_bert_tfhub(self):
data/raw/repos\official\nlp\tasks,sentence_prediction_test.py,def test_task_with_hub(self):
data/raw/repos\official\nlp\tasks,sentence_prediction_test.py,"def test_prediction(self, num_classes):"
data/raw/repos\official\nlp\tasks,tagging.py,def _masked_labels_and_weights(y_true):
data/raw/repos\official\nlp\tasks,tagging.py,def build_model(self):
data/raw/repos\official\nlp\tasks,tagging.py,"def build_inputs(self, params: cfg.DataConfig, input_context=None):"
data/raw/repos\official\nlp\tasks,tagging.py,def dummy_data(_):
data/raw/repos\official\nlp\tasks,tagging.py,"def inference_step(self, inputs, model: tf_keras.Model):"
data/raw/repos\official\nlp\tasks,tagging.py,"def validation_step(self, inputs, model: tf_keras.Model, metrics=None):"
data/raw/repos\official\nlp\tasks,tagging.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\nlp\tasks,tagging.py,def id_to_class_name(batched_ids):
data/raw/repos\official\nlp\tasks,tagging.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\nlp\tasks,tagging.py,def predict_step(inputs):
data/raw/repos\official\nlp\tasks,tagging.py,"def aggregate_fn(state, outputs):"
data/raw/repos\official\nlp\tasks,tagging_test.py,"def _create_fake_dataset(output_path, seq_length, num_labels, num_examples):"
data/raw/repos\official\nlp\tasks,tagging_test.py,def create_int_feature(values):
data/raw/repos\official\nlp\tasks,tagging_test.py,def setUp(self):
data/raw/repos\official\nlp\tasks,tagging_test.py,"def _run_task(self, config):"
data/raw/repos\official\nlp\tasks,tagging_test.py,def test_task(self):
data/raw/repos\official\nlp\tasks,tagging_test.py,def _export_bert_tfhub(self):
data/raw/repos\official\nlp\tasks,tagging_test.py,def test_task_with_hub(self):
data/raw/repos\official\nlp\tasks,tagging_test.py,def test_seqeval_metrics(self):
data/raw/repos\official\nlp\tasks,tagging_test.py,def test_predict(self):
data/raw/repos\official\nlp\tasks,translation.py,"def _pad_tensors_to_same_length(x, y):"
data/raw/repos\official\nlp\tasks,translation.py,"def _padded_cross_entropy_loss(logits, labels, smoothing, vocab_size):"
data/raw/repos\official\nlp\tasks,translation.py,"def write_test_record(params, model_dir):"
data/raw/repos\official\nlp\tasks,translation.py,"def __init__(self, params: cfg.TaskConfig, logging_dir=None, name=None):"
data/raw/repos\official\nlp\tasks,translation.py,"def validation_step(self, inputs, model: tf_keras.Model, metrics=None):"
data/raw/repos\official\nlp\tasks,translation.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\nlp\tasks,translation.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\nlp\tasks,translation.py,def _decode(ids):
data/raw/repos\official\nlp\tasks,translation.py,def _trim_and_decode(ids):
data/raw/repos\official\nlp\tasks,translation_test.py,"def _generate_line_file(filepath, lines):"
data/raw/repos\official\nlp\tasks,translation_test.py,"def _generate_record_file(filepath, src_lines, tgt_lines):"
data/raw/repos\official\nlp\tasks,translation_test.py,"def _train_sentencepiece(input_path, vocab_size, model_path, eos_id=1):"
data/raw/repos\official\nlp\tasks,translation_test.py,def setUp(self):
data/raw/repos\official\nlp\tasks,translation_test.py,def test_task(self):
data/raw/repos\official\nlp\tasks,translation_test.py,def test_no_sentencepiece_path(self):
data/raw/repos\official\nlp\tasks,translation_test.py,def test_sentencepiece_no_eos(self):
data/raw/repos\official\nlp\tasks,translation_test.py,def test_evaluation(self):
data/raw/repos\official\nlp\tasks,utils.py,def predict_step(iterator):
data/raw/repos\official\nlp\tools,export_tfhub.py,def main(argv):
data/raw/repos\official\nlp\tools,export_tfhub_lib.py,def get_bert_encoder(bert_config):
data/raw/repos\official\nlp\tools,export_tfhub_lib.py,"def get_do_lower_case(do_lower_case, vocab_file=None, sp_model_file=None):"
data/raw/repos\official\nlp\tools,export_tfhub_lib.py,"def __init__(self, bert_pack_inputs: layers.BertPackInputs):"
data/raw/repos\official\nlp\tools,export_tfhub_lib.py,"def call(inputs, seq_length=default_seq_length):"
data/raw/repos\official\nlp\tools,export_tfhub_lib.py,"def _dont_assert(condition, data, summarize=None, name=""Assert""):"
data/raw/repos\official\nlp\tools,export_tfhub_lib.py,def _maybe_disable_assert(disable_assert):
data/raw/repos\official\nlp\tools,export_tfhub_lib.py,def _check_no_assert(saved_model_path):
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def _get_vocab_or_sp_model_dummy(temp_dir, use_sp_model):"
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,def _read_asset(asset: tf.saved_model.Asset):
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,def _find_lambda_layers(layer):
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def test_export_model(self, use_bert, encoder_type):"
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def _dropout_mean_stddev(training, num_runs=20):"
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,def test_copy_pooler_dense_to_encoder(self):
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def test_export_model_with_mlm(self, use_bert):"
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def _dropout_mean_stddev(training, num_runs=20):"
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def _dropout_mean_stddev_mlm(training, num_runs=20):"
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def _make_vocab_file(self, vocab, filename=""vocab.txt"", add_mask_token=False):"
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def _make_sp_model_file(self, vocab, prefix=""spm"", add_mask_token=False):"
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,def test_no_leaks(self):
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def test_exported_callables(self, use_sp_model):"
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,def fold_dim(rt):
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,def test_cased_length10(self):
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def test_shapes(self, use_sp_model):"
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def expected_bert_input_shapes(batch_size, seq_length):"
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def test_reexport(self, use_sp_model):"
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def test_preprocessing_for_mlm(self, use_bert):"
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def test_special_tokens_in_estimator(self, use_sp_model):"
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,def _get_special_tokens_dict(obj):
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,def input_fn():
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def model_fn(features, labels, mode):"
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def test_check_no_assert(self, use_sp_model):"
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def _result_shapes_in_tf_function(fn, *args, **kwargs):"
data/raw/repos\official\nlp\tools,export_tfhub_lib_test.py,"def shape_reporting_wrapper(*args, **kwargs):"
data/raw/repos\official\nlp\tools,squad_evaluate_v1_1.py,def _normalize_answer(s):
data/raw/repos\official\nlp\tools,squad_evaluate_v1_1.py,def remove_articles(text):
data/raw/repos\official\nlp\tools,squad_evaluate_v1_1.py,def white_space_fix(text):
data/raw/repos\official\nlp\tools,squad_evaluate_v1_1.py,def remove_punc(text):
data/raw/repos\official\nlp\tools,squad_evaluate_v1_1.py,def lower(text):
data/raw/repos\official\nlp\tools,squad_evaluate_v1_1.py,"def _f1_score(prediction, ground_truth):"
data/raw/repos\official\nlp\tools,squad_evaluate_v1_1.py,"def _exact_match_score(prediction, ground_truth):"
data/raw/repos\official\nlp\tools,squad_evaluate_v1_1.py,"def _metric_max_over_ground_truths(metric_fn, prediction, ground_truths):"
data/raw/repos\official\nlp\tools,squad_evaluate_v1_1.py,"def evaluate(dataset, predictions):"
data/raw/repos\official\nlp\tools,squad_evaluate_v2_0.py,def _make_qid_to_has_ans(dataset):
data/raw/repos\official\nlp\tools,squad_evaluate_v2_0.py,def _normalize_answer(s):
data/raw/repos\official\nlp\tools,squad_evaluate_v2_0.py,def remove_articles(text):
data/raw/repos\official\nlp\tools,squad_evaluate_v2_0.py,def white_space_fix(text):
data/raw/repos\official\nlp\tools,squad_evaluate_v2_0.py,def remove_punc(text):
data/raw/repos\official\nlp\tools,squad_evaluate_v2_0.py,def lower(text):
data/raw/repos\official\nlp\tools,squad_evaluate_v2_0.py,def _get_tokens(s):
data/raw/repos\official\nlp\tools,squad_evaluate_v2_0.py,"def _compute_exact(a_gold, a_pred):"
data/raw/repos\official\nlp\tools,squad_evaluate_v2_0.py,"def _compute_f1(a_gold, a_pred):"
data/raw/repos\official\nlp\tools,squad_evaluate_v2_0.py,"def _get_raw_scores(dataset, predictions):"
data/raw/repos\official\nlp\tools,squad_evaluate_v2_0.py,"def _make_eval_dict(exact_scores, f1_scores, qid_list=None):"
data/raw/repos\official\nlp\tools,squad_evaluate_v2_0.py,"def _merge_eval(main_eval, new_eval, prefix):"
data/raw/repos\official\nlp\tools,squad_evaluate_v2_0.py,"def _make_precision_recall_eval(scores, na_probs, num_true_pos, qid_to_has_ans):"
data/raw/repos\official\nlp\tools,squad_evaluate_v2_0.py,"def _find_best_thresh(predictions, scores, na_probs, qid_to_has_ans):"
data/raw/repos\official\nlp\tools,squad_evaluate_v2_0.py,"def evaluate(dataset, predictions, na_probs=None):"
data/raw/repos\official\nlp\tools,tf1_bert_checkpoint_converter_lib.py,"def _bert_name_replacement(var_name, name_replacements):"
data/raw/repos\official\nlp\tools,tf1_bert_checkpoint_converter_lib.py,"def _has_exclude_patterns(name, exclude_patterns):"
data/raw/repos\official\nlp\tools,tf1_bert_checkpoint_converter_lib.py,"def _get_permutation(name, permutations):"
data/raw/repos\official\nlp\tools,tf1_bert_checkpoint_converter_lib.py,"def _get_new_shape(name, shape, num_heads):"
data/raw/repos\official\nlp\tools,tf2_albert_encoder_checkpoint_converter.py,def _create_albert_model(cfg):
data/raw/repos\official\nlp\tools,tf2_albert_encoder_checkpoint_converter.py,def _create_pretrainer_model(cfg):
data/raw/repos\official\nlp\tools,tf2_albert_encoder_checkpoint_converter.py,def main(_):
data/raw/repos\official\nlp\tools,tf2_bert_encoder_checkpoint_converter.py,def _create_bert_model(cfg):
data/raw/repos\official\nlp\tools,tf2_bert_encoder_checkpoint_converter.py,def _create_bert_pretrainer_model(cfg):
data/raw/repos\official\nlp\tools,tf2_bert_encoder_checkpoint_converter.py,def main(argv):
data/raw/repos\official\nlp\tools,tokenization.py,"def validate_case_matches_checkpoint(do_lower_case, init_checkpoint):"
data/raw/repos\official\nlp\tools,tokenization.py,def convert_to_unicode(text):
data/raw/repos\official\nlp\tools,tokenization.py,def printable_text(text):
data/raw/repos\official\nlp\tools,tokenization.py,def load_vocab(vocab_file):
data/raw/repos\official\nlp\tools,tokenization.py,"def convert_by_vocab(vocab, items):"
data/raw/repos\official\nlp\tools,tokenization.py,"def convert_tokens_to_ids(vocab, tokens):"
data/raw/repos\official\nlp\tools,tokenization.py,"def convert_ids_to_tokens(inv_vocab, ids):"
data/raw/repos\official\nlp\tools,tokenization.py,def whitespace_tokenize(text):
data/raw/repos\official\nlp\tools,tokenization.py,"def __init__(self, vocab_file, do_lower_case=True, split_on_punc=True):"
data/raw/repos\official\nlp\tools,tokenization.py,"def tokenize(self, text):"
data/raw/repos\official\nlp\tools,tokenization.py,"def convert_tokens_to_ids(self, tokens):"
data/raw/repos\official\nlp\tools,tokenization.py,"def convert_ids_to_tokens(self, ids):"
data/raw/repos\official\nlp\tools,tokenization.py,"def __init__(self, do_lower_case=True, split_on_punc=True):"
data/raw/repos\official\nlp\tools,tokenization.py,"def tokenize(self, text):"
data/raw/repos\official\nlp\tools,tokenization.py,"def _run_strip_accents(self, text):"
data/raw/repos\official\nlp\tools,tokenization.py,"def _run_split_on_punc(self, text):"
data/raw/repos\official\nlp\tools,tokenization.py,"def _tokenize_chinese_chars(self, text):"
data/raw/repos\official\nlp\tools,tokenization.py,"def _is_chinese_char(self, cp):"
data/raw/repos\official\nlp\tools,tokenization.py,"def _clean_text(self, text):"
data/raw/repos\official\nlp\tools,tokenization.py,"def __init__(self, vocab, unk_token=""[UNK]"", max_input_chars_per_word=400):"
data/raw/repos\official\nlp\tools,tokenization.py,"def tokenize(self, text):"
data/raw/repos\official\nlp\tools,tokenization.py,def _is_whitespace(char):
data/raw/repos\official\nlp\tools,tokenization.py,def _is_control(char):
data/raw/repos\official\nlp\tools,tokenization.py,def _is_punctuation(char):
data/raw/repos\official\nlp\tools,tokenization.py,"def preprocess_text(inputs, remove_space=True, lower=False):"
data/raw/repos\official\nlp\tools,tokenization.py,"def encode_pieces(sp_model, text, sample=False):"
data/raw/repos\official\nlp\tools,tokenization.py,"def encode_ids(sp_model, text, sample=False):"
data/raw/repos\official\nlp\tools,tokenization.py,"def __init__(self, sp_model_file):"
data/raw/repos\official\nlp\tools,tokenization.py,"def tokenize(self, text):"
data/raw/repos\official\nlp\tools,tokenization.py,"def convert_tokens_to_ids(self, tokens):"
data/raw/repos\official\nlp\tools,tokenization.py,"def convert_ids_to_tokens(self, ids):"
data/raw/repos\official\nlp\tools,tokenization_test.py,def test_full_tokenizer(self):
data/raw/repos\official\nlp\tools,tokenization_test.py,def test_chinese(self):
data/raw/repos\official\nlp\tools,tokenization_test.py,def test_basic_tokenizer_lower(self):
data/raw/repos\official\nlp\tools,tokenization_test.py,def test_basic_tokenizer_no_lower(self):
data/raw/repos\official\nlp\tools,tokenization_test.py,def test_basic_tokenizer_no_split_on_punc(self):
data/raw/repos\official\nlp\tools,tokenization_test.py,def test_wordpiece_tokenizer(self):
data/raw/repos\official\nlp\tools,tokenization_test.py,def test_convert_tokens_to_ids(self):
data/raw/repos\official\nlp\tools,tokenization_test.py,def test_is_whitespace(self):
data/raw/repos\official\nlp\tools,tokenization_test.py,def test_is_control(self):
data/raw/repos\official\nlp\tools,tokenization_test.py,def test_is_punctuation(self):
data/raw/repos\official\pip_package,setup.py,def _get_requirements(is_nightly=False):
data/raw/repos\official\projects\assemblenet,train.py,def main(_):
data/raw/repos\official\projects\assemblenet,train_test.py,def setUp(self):
data/raw/repos\official\projects\assemblenet,train_test.py,def test_run(self):
data/raw/repos\official\projects\assemblenet\configs,assemblenet.py,"def flat_lists_to_blocks(model_structures, model_edge_weights):"
data/raw/repos\official\projects\assemblenet\configs,assemblenet.py,def blocks_to_flat_lists(blocks: List[BlockSpec]):
data/raw/repos\official\projects\assemblenet\configs,assemblenet_test.py,"def test_assemblenet_configs(self, config_name):"
data/raw/repos\official\projects\assemblenet\configs,assemblenet_test.py,def test_configs_conversion(self):
data/raw/repos\official\projects\assemblenet\modeling,assemblenet.py,"def fixed_padding(inputs, kernel_size):"
data/raw/repos\official\projects\assemblenet\modeling,assemblenet.py,def spatial_resize_and_concat(inputs):
data/raw/repos\official\projects\assemblenet\modeling,assemblenet.py,def get_config(self):
data/raw/repos\official\projects\assemblenet\modeling,assemblenet.py,"def build(self, input_shape: tf.TensorShape):"
data/raw/repos\official\projects\assemblenet\modeling,assemblenet.py,def _pool_and_reshape(net):
data/raw/repos\official\projects\assemblenet\modeling,assemblenet.py,def checkpoint_items(self):
data/raw/repos\official\projects\assemblenet\modeling,assemblenet.py,def backbone(self):
data/raw/repos\official\projects\assemblenet\modeling,assemblenet.py,def get_config(self):
data/raw/repos\official\projects\assemblenet\modeling,assemblenet.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\assemblenet\modeling,assemblenet_plus.py,def softmax_merge_peer_attentions(peers):
data/raw/repos\official\projects\assemblenet\modeling,assemblenet_plus.py,def get_config(self):
data/raw/repos\official\projects\assemblenet\modeling,assemblenet_plus.py,"def build(self, input_shape: tf.TensorShape):"
data/raw/repos\official\projects\assemblenet\modeling,assemblenet_plus.py,def object_conv_stem(inputs):
data/raw/repos\official\projects\assemblenet\modeling,assemblenet_plus.py,def checkpoint_items(self):
data/raw/repos\official\projects\assemblenet\modeling,assemblenet_plus.py,def backbone(self):
data/raw/repos\official\projects\assemblenet\modeling,assemblenet_plus.py,def get_config(self):
data/raw/repos\official\projects\assemblenet\modeling,assemblenet_plus.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\assemblenet\modeling,assemblenet_plus_test.py,"def test_network_creation(self, depth, use_object_input, attention_mode):"
data/raw/repos\official\projects\assemblenet\modeling,rep_flow_2d_layer.py,"def divergence(p1, p2, f_grad_x, f_grad_y, name):"
data/raw/repos\official\projects\assemblenet\modeling,rep_flow_2d_layer.py,"def forward_grad(x, f_grad_x, f_grad_y, name):"
data/raw/repos\official\projects\assemblenet\modeling,rep_flow_2d_layer.py,def norm_img(x):
data/raw/repos\official\projects\assemblenet\modeling,rep_flow_2d_layer.py,def get_config(self):
data/raw/repos\official\projects\assemblenet\modeling,rep_flow_2d_layer.py,"def build(self, input_shape: tf.TensorShape):"
data/raw/repos\official\projects\basnet\configs,basnet_test.py,"def test_basnet_configs(self, config_name):"
data/raw/repos\official\projects\basnet\evaluation,metrics.py,def __init__(self):
data/raw/repos\official\projects\basnet\evaluation,metrics.py,def name(self):
data/raw/repos\official\projects\basnet\evaluation,metrics.py,def reset_states(self):
data/raw/repos\official\projects\basnet\evaluation,metrics.py,def result(self):
data/raw/repos\official\projects\basnet\evaluation,metrics.py,def evaluate(self):
data/raw/repos\official\projects\basnet\evaluation,metrics.py,"def _mask_normalize(self, mask):"
data/raw/repos\official\projects\basnet\evaluation,metrics.py,"def _compute_mae(self, true, pred):"
data/raw/repos\official\projects\basnet\evaluation,metrics.py,"def _convert_to_numpy(self, groundtruths, predictions):"
data/raw/repos\official\projects\basnet\evaluation,metrics.py,"def update_state(self, groundtruths, predictions):"
data/raw/repos\official\projects\basnet\evaluation,metrics.py,def __init__(self):
data/raw/repos\official\projects\basnet\evaluation,metrics.py,def name(self):
data/raw/repos\official\projects\basnet\evaluation,metrics.py,def reset_states(self):
data/raw/repos\official\projects\basnet\evaluation,metrics.py,def result(self):
data/raw/repos\official\projects\basnet\evaluation,metrics.py,def evaluate(self):
data/raw/repos\official\projects\basnet\evaluation,metrics.py,"def _mask_normalize(self, mask):"
data/raw/repos\official\projects\basnet\evaluation,metrics.py,"def _compute_pre_rec(self, true, pred, mybins=np.arange(0, 256)):"
data/raw/repos\official\projects\basnet\evaluation,metrics.py,"def _convert_to_numpy(self, groundtruths, predictions):"
data/raw/repos\official\projects\basnet\evaluation,metrics.py,"def update_state(self, groundtruths, predictions):"
data/raw/repos\official\projects\basnet\evaluation,metrics.py,def __init__(self):
data/raw/repos\official\projects\basnet\evaluation,metrics.py,def name(self):
data/raw/repos\official\projects\basnet\evaluation,metrics.py,def reset_states(self):
data/raw/repos\official\projects\basnet\evaluation,metrics.py,def result(self):
data/raw/repos\official\projects\basnet\evaluation,metrics.py,def evaluate(self):
data/raw/repos\official\projects\basnet\evaluation,metrics.py,"def _mask_normalize(self, mask):"
data/raw/repos\official\projects\basnet\evaluation,metrics.py,"def _compute_erosion(self, mask, kernel):"
data/raw/repos\official\projects\basnet\evaluation,metrics.py,"def _compute_relax_pre_rec(self, true, pred, rho):"
data/raw/repos\official\projects\basnet\evaluation,metrics.py,"def _convert_to_numpy(self, groundtruths, predictions):"
data/raw/repos\official\projects\basnet\evaluation,metrics.py,"def update_state(self, groundtruths, predictions):"
data/raw/repos\official\projects\basnet\evaluation,metrics_test.py,def test_mae(self):
data/raw/repos\official\projects\basnet\evaluation,metrics_test.py,def test_max_f(self):
data/raw/repos\official\projects\basnet\losses,basnet_losses.py,def __init__(self):
data/raw/repos\official\projects\basnet\losses,basnet_losses.py,"def __call__(self, sigmoids, labels):"
data/raw/repos\official\projects\basnet\losses,basnet_losses.py,"def _iou_loss(self, sigmoids, labels):"
data/raw/repos\official\projects\basnet\modeling,basnet_model.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\basnet\modeling,basnet_model.py,def checkpoint_items(self):
data/raw/repos\official\projects\basnet\modeling,basnet_model.py,def get_config(self):
data/raw/repos\official\projects\basnet\modeling,basnet_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\basnet\modeling,basnet_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\basnet\modeling,basnet_model.py,def output_specs(self):
data/raw/repos\official\projects\basnet\modeling,basnet_model.py,"def build(self, input_shape):"
data/raw/repos\official\projects\basnet\modeling,basnet_model.py,"def call(self, backbone_output: Mapping[str, tf.Tensor]):"
data/raw/repos\official\projects\basnet\modeling,basnet_model.py,def get_config(self):
data/raw/repos\official\projects\basnet\modeling,basnet_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\basnet\modeling,basnet_model.py,def output_specs(self):
data/raw/repos\official\projects\basnet\modeling,basnet_model_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\basnet\modeling,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\basnet\modeling,nn_blocks.py,def get_config(self):
data/raw/repos\official\projects\basnet\modeling,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\basnet\modeling,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\basnet\modeling,nn_blocks.py,def get_config(self):
data/raw/repos\official\projects\basnet\modeling,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\basnet\modeling,refunet.py,"def build(self, input_shape):"
data/raw/repos\official\projects\basnet\modeling,refunet.py,"def call(self, inputs):"
data/raw/repos\official\projects\basnet\modeling,refunet.py,def get_config(self):
data/raw/repos\official\projects\basnet\modeling,refunet.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\basnet\modeling,refunet.py,def output_specs(self):
data/raw/repos\official\projects\basnet\serving,basnet.py,def _build_model(self):
data/raw/repos\official\projects\basnet\serving,basnet.py,"def serve(self, images):"
data/raw/repos\official\projects\basnet\serving,export_saved_model.py,def main(_):
data/raw/repos\official\projects\basnet\tasks,basnet.py,def build_model(self):
data/raw/repos\official\projects\basnet\tasks,basnet.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\basnet\tasks,basnet.py,"def build_losses(self, label, model_outputs, aux_losses=None):"
data/raw/repos\official\projects\basnet\tasks,basnet.py,"def build_metrics(self, training=False):"
data/raw/repos\official\projects\basnet\tasks,basnet.py,"def train_step(self, inputs, model, optimizer, metrics=None):"
data/raw/repos\official\projects\basnet\tasks,basnet.py,"def validation_step(self, inputs, model, metrics=None):"
data/raw/repos\official\projects\basnet\tasks,basnet.py,"def inference_step(self, inputs, model):"
data/raw/repos\official\projects\basnet\tasks,basnet.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\projects\basnet\tasks,basnet.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\projects\bigbird,encoder.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\bigbird,encoder.py,def f(*args):
data/raw/repos\official\projects\bigbird,encoder.py,def get_embedding_table(self):
data/raw/repos\official\projects\bigbird,encoder.py,def get_embedding_layer(self):
data/raw/repos\official\projects\bigbird,encoder.py,def get_config(self):
data/raw/repos\official\projects\bigbird,encoder.py,def transformer_layers(self):
data/raw/repos\official\projects\bigbird,encoder.py,def pooler_layer(self):
data/raw/repos\official\projects\bigbird,encoder.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\bigbird,encoder_test.py,def test_encoder(self):
data/raw/repos\official\projects\bigbird,encoder_test.py,def test_save_restore(self):
data/raw/repos\official\projects\bigbird,recompute_grad.py,def __enter__(self):
data/raw/repos\official\projects\bigbird,recompute_grad.py,"def __exit__(self, exc_type, exc_value, traceback):"
data/raw/repos\official\projects\bigbird,recompute_grad.py,def __init__(self):
data/raw/repos\official\projects\bigbird,recompute_grad.py,"def push(self, context: RecomputeContext):"
data/raw/repos\official\projects\bigbird,recompute_grad.py,"def pop(self, context: RecomputeContext):"
data/raw/repos\official\projects\bigbird,recompute_grad.py,def _first_element(x):
data/raw/repos\official\projects\bigbird,recompute_grad.py,"def recompute_grad(f, seed=None):"
data/raw/repos\official\projects\bigbird,recompute_grad.py,"def inner(*args, **kwargs):"
data/raw/repos\official\projects\bigbird,recompute_grad.py,"def grad(*dresult, **grad_kwargs):"
data/raw/repos\official\projects\bigbird,recomputing_dropout.py,"def smart_cond(pred, true_fn=None, false_fn=None, name=None):"
data/raw/repos\official\projects\bigbird,recomputing_dropout.py,"def _get_noise_shape(self, inputs):"
data/raw/repos\official\projects\bigbird,recomputing_dropout.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\bigbird,recomputing_dropout.py,def dropped_inputs():
data/raw/repos\official\projects\bigbird,recomputing_dropout.py,"def compute_output_shape(self, input_shape):"
data/raw/repos\official\projects\bigbird,recomputing_dropout.py,def get_config(self):
data/raw/repos\official\projects\centernet,train.py,def main(_):
data/raw/repos\official\projects\centernet\configs,centernet.py,def get_output_length_dict(self):
data/raw/repos\official\projects\centernet\configs,centernet_test.py,"def test_centernet_configs(self, config_name):"
data/raw/repos\official\projects\centernet\dataloaders,centernet_input.py,"def _parse_train_data(self, data):"
data/raw/repos\official\projects\centernet\dataloaders,centernet_input.py,"def _parse_eval_data(self, data):"
data/raw/repos\official\projects\centernet\losses,centernet_losses.py,"def __init__(self, alpha=2.0, beta=4.0, sigmoid_clip_value=1e-4):"
data/raw/repos\official\projects\centernet\losses,centernet_losses.py,"def __call__(self, prediction_tensor, target_tensor, weights=1.0):"
data/raw/repos\official\projects\centernet\losses,centernet_losses.py,"def __call__(self, prediction_tensor, target_tensor, weights=1.0):"
data/raw/repos\official\projects\centernet\losses,centernet_losses_test.py,def test_returns_correct_loss(self):
data/raw/repos\official\projects\centernet\losses,centernet_losses_test.py,def graph_fn():
data/raw/repos\official\projects\centernet\losses,centernet_losses_test.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\projects\centernet\losses,centernet_losses_test.py,def test_returns_correct_loss(self):
data/raw/repos\official\projects\centernet\losses,centernet_losses_test.py,"def graph_fn(prediction, target):"
data/raw/repos\official\projects\centernet\losses,centernet_losses_test.py,def test_returns_correct_loss_weighted(self):
data/raw/repos\official\projects\centernet\losses,centernet_losses_test.py,"def graph_fn(prediction, target):"
data/raw/repos\official\projects\centernet\modeling,centernet_model.py,def backbone(self):
data/raw/repos\official\projects\centernet\modeling,centernet_model.py,def detection_generator(self):
data/raw/repos\official\projects\centernet\modeling,centernet_model.py,def head(self):
data/raw/repos\official\projects\centernet\modeling,centernet_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\centernet\modeling,centernet_model_test.py,def testBuildCenterNet(self):
data/raw/repos\official\projects\centernet\modeling\backbones,hourglass.py,def get_config(self):
data/raw/repos\official\projects\centernet\modeling\backbones,hourglass.py,def num_hourglasses(self):
data/raw/repos\official\projects\centernet\modeling\backbones,hourglass.py,def output_specs(self):
data/raw/repos\official\projects\centernet\modeling\backbones,hourglass_test.py,def test_hourglass(self):
data/raw/repos\official\projects\centernet\modeling\heads,centernet_head.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\centernet\modeling\heads,centernet_head_test.py,def test_decoder_shape(self):
data/raw/repos\official\projects\centernet\modeling\layers,cn_nn_blocks.py,"def _apply_blocks(inputs, blocks):"
data/raw/repos\official\projects\centernet\modeling\layers,cn_nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\centernet\modeling\layers,cn_nn_blocks.py,"def call(self, x, training=None):"
data/raw/repos\official\projects\centernet\modeling\layers,cn_nn_blocks.py,def get_config(self):
data/raw/repos\official\projects\centernet\modeling\layers,cn_nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\centernet\modeling\layers,cn_nn_blocks.py,"def call(self, x, training=None):"
data/raw/repos\official\projects\centernet\modeling\layers,cn_nn_blocks.py,def get_config(self):
data/raw/repos\official\projects\centernet\modeling\layers,cn_nn_blocks_test.py,"def __init__(self, dims, modules, k=0, **kwargs):"
data/raw/repos\official\projects\centernet\modeling\layers,cn_nn_blocks_test.py,"def build(self, input_shape):"
data/raw/repos\official\projects\centernet\modeling\layers,cn_nn_blocks_test.py,"def call(self, x):"
data/raw/repos\official\projects\centernet\modeling\layers,cn_nn_blocks_test.py,"def make_layer(self, k, inp_dim, out_dim, modules, **kwargs):"
data/raw/repos\official\projects\centernet\modeling\layers,cn_nn_blocks_test.py,"def make_layer_revr(self, k, inp_dim, out_dim, modules, **kwargs):"
data/raw/repos\official\projects\centernet\modeling\layers,cn_nn_blocks_test.py,"def make_up_layer(self, k, inp_dim, out_dim, modules, **kwargs):"
data/raw/repos\official\projects\centernet\modeling\layers,cn_nn_blocks_test.py,"def make_low_layer(self, k, inp_dim, out_dim, modules, **kwargs):"
data/raw/repos\official\projects\centernet\modeling\layers,cn_nn_blocks_test.py,"def make_hg_layer(self, k, inp_dim, out_dim, modules, **kwargs):"
data/raw/repos\official\projects\centernet\modeling\layers,cn_nn_blocks_test.py,"def make_hg_layer_revr(self, k, inp_dim, out_dim, modules, **kwargs):"
data/raw/repos\official\projects\centernet\modeling\layers,cn_nn_blocks_test.py,def test_hourglass_block(self):
data/raw/repos\official\projects\centernet\modeling\layers,detection_generator.py,"def convert_strided_predictions_to_normalized_boxes(self, boxes: tf.Tensor):"
data/raw/repos\official\projects\centernet\modeling\layers,detection_generator.py,"def __call__(self, inputs):"
data/raw/repos\official\projects\centernet\modeling\layers,detection_generator.py,"def from_config(cls, config):"
data/raw/repos\official\projects\centernet\modeling\layers,detection_generator_test.py,"def test_squered_image_forward(self, batch_size, input_image_dims):"
data/raw/repos\official\projects\centernet\modeling\layers,detection_generator_test.py,"def test_rectangular_image_forward(self, batch_size, input_image_dims):"
data/raw/repos\official\projects\centernet\modeling\layers,detection_generator_test.py,"def test_serialize_deserialize(self, input_image_dims):"
data/raw/repos\official\projects\centernet\ops,box_list.py,def _get_dim_as_int(dim):
data/raw/repos\official\projects\centernet\ops,box_list.py,"def __init__(self, boxes):"
data/raw/repos\official\projects\centernet\ops,box_list.py,def num_boxes(self):
data/raw/repos\official\projects\centernet\ops,box_list.py,def num_boxes_static(self):
data/raw/repos\official\projects\centernet\ops,box_list.py,def get_all_fields(self):
data/raw/repos\official\projects\centernet\ops,box_list.py,def get_extra_fields(self):
data/raw/repos\official\projects\centernet\ops,box_list.py,"def add_field(self, field, field_data):"
data/raw/repos\official\projects\centernet\ops,box_list.py,"def has_field(self, field):"
data/raw/repos\official\projects\centernet\ops,box_list.py,def get(self):
data/raw/repos\official\projects\centernet\ops,box_list.py,"def set(self, boxes):"
data/raw/repos\official\projects\centernet\ops,box_list.py,"def get_field(self, field):"
data/raw/repos\official\projects\centernet\ops,box_list.py,"def set_field(self, field, value):"
data/raw/repos\official\projects\centernet\ops,box_list.py,def get_center_coordinates_and_sizes(self):
data/raw/repos\official\projects\centernet\ops,box_list.py,def transpose_coordinates(self):
data/raw/repos\official\projects\centernet\ops,box_list.py,"def as_tensor_dict(self, fields=None):"
data/raw/repos\official\projects\centernet\ops,box_list_ops.py,"def _copy_extra_fields(boxlist_to_copy_to, boxlist_to_copy_from):"
data/raw/repos\official\projects\centernet\ops,box_list_ops.py,"def scale(boxlist, y_scale, x_scale):"
data/raw/repos\official\projects\centernet\ops,box_list_ops.py,def area(boxlist):
data/raw/repos\official\projects\centernet\ops,box_list_ops.py,"def change_coordinate_frame(boxlist, window):"
data/raw/repos\official\projects\centernet\ops,box_list_ops.py,"def matmul_gather_on_zeroth_axis(params, indices):"
data/raw/repos\official\projects\centernet\ops,box_list_ops.py,"def gather(boxlist, indices, fields=None, use_static_shapes=False):"
data/raw/repos\official\projects\centernet\ops,box_list_ops.py,"def prune_completely_outside_window(boxlist, window):"
data/raw/repos\official\projects\centernet\ops,box_list_ops.py,"def clip_to_window(boxlist, window, filter_nonoverlapping=True):"
data/raw/repos\official\projects\centernet\ops,box_list_ops.py,def height_width(boxlist):
data/raw/repos\official\projects\centernet\ops,box_list_ops.py,"def prune_small_boxes(boxlist, min_side):"
data/raw/repos\official\projects\centernet\ops,box_list_ops.py,def assert_or_prune_invalid_boxes(boxes):
data/raw/repos\official\projects\centernet\ops,loss_ops.py,"def _get_shape(tensor, num_dims):"
data/raw/repos\official\projects\centernet\ops,loss_ops.py,def flatten_spatial_dimensions(batch_images):
data/raw/repos\official\projects\centernet\ops,loss_ops.py,def add_batch_to_indices(indices):
data/raw/repos\official\projects\centernet\ops,loss_ops.py,def get_num_instances_from_weights(gt_weights_list):
data/raw/repos\official\projects\centernet\ops,loss_ops.py,"def get_batch_predictions_from_indices(batch_predictions, indices):"
data/raw/repos\official\projects\centernet\ops,nms_ops.py,"def aggregated_comparative_iou(boxes1, boxes2=None, iou_type=0):"
data/raw/repos\official\projects\centernet\ops,nms_ops.py,"def sort_drop(objectness, box, classificationsi, k):"
data/raw/repos\official\projects\centernet\ops,nms_ops.py,"def segment_nms(boxes, classes, confidence, k, iou_thresh):"
data/raw/repos\official\projects\centernet\ops,preprocess_ops.py,"def _random_integer(minval, maxval, seed):"
data/raw/repos\official\projects\centernet\ops,preprocess_ops.py,"def _get_crop_border(border, size):"
data/raw/repos\official\projects\centernet\ops,preprocess_ops.py,def y_function():
data/raw/repos\official\projects\centernet\ops,preprocess_ops.py,def x_function():
data/raw/repos\official\projects\centernet\ops,preprocess_ops.py,def _resize_landscape_image(image):
data/raw/repos\official\projects\centernet\ops,preprocess_ops.py,def _resize_portrait_image(image):
data/raw/repos\official\projects\centernet\ops,preprocess_ops.py,"def _augment_only_rgb_channels(image, augment_function):"
data/raw/repos\official\projects\centernet\ops,preprocess_ops.py,def _adjust_brightness(image):
data/raw/repos\official\projects\centernet\ops,preprocess_ops.py,def _adjust_contrast(image):
data/raw/repos\official\projects\centernet\ops,preprocess_ops.py,def _adjust_hue(image):
data/raw/repos\official\projects\centernet\ops,preprocess_ops.py,def _adjust_saturation(image):
data/raw/repos\official\projects\centernet\ops,target_assigner.py,"def smallest_positive_root(a, b, c):"
data/raw/repos\official\projects\centernet\ops,target_assigner.py,"def image_shape_to_grids(height: int, width: int):"
data/raw/repos\official\projects\centernet\ops,target_assigner.py,"def max_distance_for_overlap(height, width, min_iou):"
data/raw/repos\official\projects\centernet\ops,target_assigner.py,"def compute_std_dev_from_box_size(boxes_height, boxes_width, min_overlap):"
data/raw/repos\official\projects\centernet\ops,target_assigner_test.py,def test_generate_targets_no_scale(self):
data/raw/repos\official\projects\centernet\ops,target_assigner_test.py,def test_generate_targets_stride_4(self):
data/raw/repos\official\projects\centernet\ops,target_assigner_test.py,def test_generate_targets_stride_8(self):
data/raw/repos\official\projects\centernet\ops,target_assigner_test.py,def test_batch_generate_targets(self):
data/raw/repos\official\projects\centernet\tasks,centernet.py,def build_model(self):
data/raw/repos\official\projects\centernet\tasks,centernet.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\centernet\tasks,centernet.py,"def build_metrics(self, training=True):"
data/raw/repos\official\projects\centernet\tasks,centernet.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\projects\centernet\tasks,centernet.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\projects\centernet\utils,tf2_centernet_checkpoint_converter.py,def main(_):
data/raw/repos\official\projects\centernet\utils\checkpoints,config_classes.py,def get_weights(self):
data/raw/repos\official\projects\centernet\utils\checkpoints,config_classes.py,def __post_init__(self):
data/raw/repos\official\projects\centernet\utils\checkpoints,config_classes.py,def get_weights(self):
data/raw/repos\official\projects\centernet\utils\checkpoints,config_classes.py,def __post_init__(self):
data/raw/repos\official\projects\centernet\utils\checkpoints,config_classes.py,def get_weights(self):
data/raw/repos\official\projects\centernet\utils\checkpoints,config_classes.py,def __post_init__(self):
data/raw/repos\official\projects\centernet\utils\checkpoints,config_classes.py,def get_weights(self):
data/raw/repos\official\projects\centernet\utils\checkpoints,config_classes.py,def __post_init__(self):
data/raw/repos\official\projects\centernet\utils\checkpoints,config_classes.py,def get_weights(self):
data/raw/repos\official\projects\centernet\utils\checkpoints,config_classes.py,"def generate_block_weights(self, weights_dict):"
data/raw/repos\official\projects\centernet\utils\checkpoints,config_classes.py,"def load_block_weights(self, layer, weight_dict):"
data/raw/repos\official\projects\centernet\utils\checkpoints,config_classes.py,"def load_weights(self, layer):"
data/raw/repos\official\projects\centernet\utils\checkpoints,config_data.py,"def get_cfg_list(self, name):"
data/raw/repos\official\projects\centernet\utils\checkpoints,config_data.py,"def get_cfg_list(self, name):"
data/raw/repos\official\projects\centernet\utils\checkpoints,load_weights.py,"def get_backbone_layer_cfgs(weights_dict, backbone_name):"
data/raw/repos\official\projects\centernet\utils\checkpoints,load_weights.py,"def load_weights_backbone(backbone, weights_dict, backbone_name):"
data/raw/repos\official\projects\centernet\utils\checkpoints,load_weights.py,"def get_head_layer_cfgs(weights_dict, head_name):"
data/raw/repos\official\projects\centernet\utils\checkpoints,load_weights.py,"def load_weights_head(head, weights_dict, head_name):"
data/raw/repos\official\projects\centernet\utils\checkpoints,load_weights.py,"def load_weights_model(model, weights_dict, backbone_name, head_name):"
data/raw/repos\official\projects\centernet\utils\checkpoints,read_checkpoints.py,"def update_weights_dict(weights_dict, variable_key, value):"
data/raw/repos\official\projects\centernet\utils\checkpoints,read_checkpoints.py,def get_ckpt_weights_as_dict(ckpt_path):
data/raw/repos\official\projects\centernet\utils\checkpoints,read_checkpoints.py,"def write_dict_as_tree(dictionary, filename, spaces=0):"
data/raw/repos\official\projects\centernet\utils\checkpoints,read_checkpoints.py,def print_layer_weights_and_shape(layer):
data/raw/repos\official\projects\const_cl,train.py,def main(_):
data/raw/repos\official\projects\const_cl\configs,backbones_3d_test.py,def test_conv3dy_config(self):
data/raw/repos\official\projects\const_cl\configs,const_cl_test.py,"def test_const_cl_pretrain_configs(self, config_name):"
data/raw/repos\official\projects\const_cl\configs,head_test.py,def test_mlp_head_valid(self):
data/raw/repos\official\projects\const_cl\configs,head_test.py,def test_instance_reconstructor_head_valid(self):
data/raw/repos\official\projects\const_cl\configs,head_test.py,def test_action_transformer_head_valid(self):
data/raw/repos\official\projects\const_cl\datasets,video_ssl_inputs_test.py,def fake_seq_example():
data/raw/repos\official\projects\const_cl\datasets,video_ssl_inputs_test.py,def test_video_ssl_input_pretrain(self):
data/raw/repos\official\projects\const_cl\losses,losses_test.py,def test_constrative_loss(self):
data/raw/repos\official\projects\const_cl\losses,losses_test.py,def test_instance_constrative_loss(self):
data/raw/repos\official\projects\const_cl\modeling,const_cl_model.py,def checkpoint_items(self):
data/raw/repos\official\projects\const_cl\modeling,const_cl_model.py,def backbone(self):
data/raw/repos\official\projects\const_cl\modeling,const_cl_model.py,def get_config(self):
data/raw/repos\official\projects\const_cl\modeling,const_cl_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\const_cl\modeling,const_cl_model_test.py,def test_build_const_cl_pretrain_model(self):
data/raw/repos\official\projects\const_cl\modeling\backbones,nn_blocks_3d.py,"def build(self, input_shape):"
data/raw/repos\official\projects\const_cl\modeling\backbones,resnet_3d.py,"def _build_model(self, inputs):"
data/raw/repos\official\projects\const_cl\modeling\backbones,resnet_3d.py,"def _build_stem(self, inputs, stem_type):"
data/raw/repos\official\projects\const_cl\modeling\backbones,resnet_3d.py,"def call(self, inputs: tf.Tensor, training: bool = False, mask: Any = None):"
data/raw/repos\official\projects\const_cl\modeling\backbones,resnet_3d.py,def get_config(self):
data/raw/repos\official\projects\const_cl\modeling\backbones,resnet_3d.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\const_cl\modeling\backbones,resnet_3d_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\const_cl\modeling\heads,instance_reconstructor.py,def _get_shape(x):
data/raw/repos\official\projects\const_cl\modeling\heads,instance_reconstructor.py,def _keyframe_temporal_pooling(inputs):
data/raw/repos\official\projects\const_cl\modeling\heads,instance_reconstructor_test.py,def test_instance_reconstructor_return_shapes(self):
data/raw/repos\official\projects\const_cl\modeling\heads,simple.py,"def from_config(cls, config: Mapping[str, Any]):"
data/raw/repos\official\projects\const_cl\modeling\heads,simple_test.py,def test_mlp_construction(self):
data/raw/repos\official\projects\const_cl\modeling\heads,transformer_decoder.py,def _get_shape(x: tf.Tensor):
data/raw/repos\official\projects\const_cl\modeling\heads,transformer_decoder.py,"def build(self, input_shape: Union[tf.TensorShape, List[tf.TensorShape]]):"
data/raw/repos\official\projects\const_cl\modeling\heads,transformer_decoder.py,"def from_config(cls, config: Mapping[str, Any]):"
data/raw/repos\official\projects\const_cl\modeling\heads,transformer_decoder.py,"def from_config(cls, config: Mapping[str, Any]):"
data/raw/repos\official\projects\const_cl\modeling\heads,transformer_decoder.py,"def from_config(cls, config: Mapping[str, Any]):"
data/raw/repos\official\projects\const_cl\modeling\heads,transformer_decoder_test.py,def test_decoder_unit_return_shape(self):
data/raw/repos\official\projects\const_cl\modeling\heads,transformer_decoder_test.py,def test_decoder_unit_serialize_deserialize(self):
data/raw/repos\official\projects\const_cl\modeling\heads,transformer_decoder_test.py,def test_decoder_layer_return_shape(self):
data/raw/repos\official\projects\const_cl\modeling\heads,transformer_decoder_test.py,def test_decoder_layer_serialize_deserialize(self):
data/raw/repos\official\projects\const_cl\modeling\heads,transformer_decoder_test.py,def test_decoder_return_shape(self):
data/raw/repos\official\projects\const_cl\modeling\heads,transformer_decoder_test.py,def test_decoder_serialize_deserialize(self):
data/raw/repos\official\projects\const_cl\tasks,const_cl.py,def build_model(self):
data/raw/repos\official\projects\const_cl\tasks,const_cl.py,"def build_losses(self, model_outputs, num_replicas, model):"
data/raw/repos\official\projects\const_cl\tasks,const_cl.py,"def build_metrics(self, training=True):"
data/raw/repos\official\projects\const_cl\tasks,const_cl.py,"def process_metrics(self, metrics, contrastive_metrics):"
data/raw/repos\official\projects\const_cl\tasks,const_cl.py,"def train_step(self, inputs, model, optimizer, metrics=None):"
data/raw/repos\official\projects\const_cl\tasks,const_cl.py,"def validation_step(self, inputs, model, metrics=None):"
data/raw/repos\official\projects\const_cl\tasks,const_cl.py,"def inference_step(self, features, model):"
data/raw/repos\official\projects\const_cl\tasks,const_cl_test.py,def setUp(self):
data/raw/repos\official\projects\const_cl\tasks,const_cl_test.py,def test_task(self):
data/raw/repos\official\projects\const_cl\tasks,const_cl_test.py,def test_task_factory(self):
data/raw/repos\official\projects\deepmac_maskrcnn,train.py,def main(_):
data/raw/repos\official\projects\deepmac_maskrcnn\configs,deep_mask_head_rcnn_config_test.py,def test_config(self):
data/raw/repos\official\projects\deepmac_maskrcnn\configs,deep_mask_head_rcnn_config_test.py,def test_config_spinenet(self):
data/raw/repos\official\projects\deepmac_maskrcnn\modeling,maskrcnn_model.py,"def resize_as(source, size):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling,maskrcnn_model.py,"def call_images_and_boxes(self, images, boxes):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling,maskrcnn_model_test.py,"def construct_model_and_anchors(image_size, use_gt_boxes_for_masks):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling,maskrcnn_model_test.py,"def test_forward(self, use_gt_boxes_for_masks, training, use_outer_boxes):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling,maskrcnn_model_test.py,"def test_image_and_boxes(self, batch_size, num_boxes):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,"def call(self, inputs):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,def _get_padding_for_kernel_size(kernel_size):
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,def batchnorm():
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,"def call(self, inputs):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,"def __init__(self, out_channels, stride):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,"def call(self, inputs):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,"def __init__(self, out_channels_initial_conv, out_channels_residual_block):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,"def call(self, inputs):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,"def __init__(self, out_channels_initial_conv, out_channels_residual_block):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,"def call(self, inputs):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,"def _apply_blocks(inputs, blocks):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,"def call(self, inputs):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,"def call(self, inputs):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,def out_stride(self):
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,def num_feature_outputs(self):
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,def _layer_depth(layer):
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,def _encoder_decoder_depth(network):
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,def hourglass_depth(network):
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,def hourglass_104():
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,"def hourglass_10(num_channels, initial_downsample=True):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,"def hourglass_20(num_channels, initial_downsample=True):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,"def hourglass_32(num_channels, initial_downsample=True):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,"def hourglass_52(num_channels, initial_downsample=True):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,"def hourglass_100(num_channels, initial_downsample=True):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,def hourglass_20_uniform_size(num_channels):
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,hourglass_network.py,def hourglass_20_no_shortcut(num_channels):
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,instance_heads.py,def _get_conv_op_and_kwargs(self):
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,instance_heads.py,def _get_bn_op_and_kwargs(self):
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,instance_heads.py,"def build(self, input_shape):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,instance_heads.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,instance_heads.py,def _build_convnet_variant(self):
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,instance_heads.py,"def _call_convnet_variant(self, x):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,instance_heads.py,def get_config(self):
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,instance_heads.py,"def from_config(cls, config):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,instance_heads_test.py,"def test_forward(self, upsample_factor, num_convs, use_sync_bn):"
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,instance_heads_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,instance_heads_test.py,def test_forward_class_agnostic(self):
data/raw/repos\official\projects\deepmac_maskrcnn\modeling\heads,instance_heads_test.py,def test_instance_head_hourglass(self):
data/raw/repos\official\projects\deepmac_maskrcnn\serving,detection.py,"def reverse_input_box_transformation(boxes, image_info):"
data/raw/repos\official\projects\deepmac_maskrcnn\serving,detection.py,def _build_model(self):
data/raw/repos\official\projects\deepmac_maskrcnn\serving,detection.py,"def serve_image_and_boxes(self, images: tf.Tensor, boxes: tf.Tensor):"
data/raw/repos\official\projects\deepmac_maskrcnn\serving,detection.py,"def get_inference_signatures(self, function_keys: Dict[Text, Text]):"
data/raw/repos\official\projects\deepmac_maskrcnn\serving,detection_test.py,"def _get_detection_module(self, experiment_name, image_size=(640, 640)):"
data/raw/repos\official\projects\deepmac_maskrcnn\serving,detection_test.py,"def _export_from_module(self, module, input_type, save_directory):"
data/raw/repos\official\projects\deepmac_maskrcnn\serving,detection_test.py,"def _get_dummy_input(self, input_type, batch_size, image_size):"
data/raw/repos\official\projects\deepmac_maskrcnn\serving,detection_test.py,"def test_export(self, input_type, experiment_name, image_size):"
data/raw/repos\official\projects\deepmac_maskrcnn\serving,detection_test.py,"def test_export_image_and_boxes(self, experiment_name, image_size, num_boxes):"
data/raw/repos\official\projects\deepmac_maskrcnn\serving,export_saved_model.py,def main(_):
data/raw/repos\official\projects\deepmac_maskrcnn\tasks,deep_mask_head_rcnn.py,def build_model(self):
data/raw/repos\official\projects\detr,optimization.py,"def _resource_apply_dense(self, grad, var, apply_state=None):"
data/raw/repos\official\projects\detr,optimization.py,"def _resource_apply_sparse(self, grad, var, indices, apply_state=None):"
data/raw/repos\official\projects\detr,train.py,def main(_):
data/raw/repos\official\projects\detr\configs,detr_test.py,"def test_detr_configs_tfds(self, config_name):"
data/raw/repos\official\projects\detr\configs,detr_test.py,"def test_detr_configs(self, config_name):"
data/raw/repos\official\projects\detr\dataloaders,coco.py,"def __init__(self, params: COCODataConfig):"
data/raw/repos\official\projects\detr\dataloaders,coco.py,"def preprocess(self, inputs):"
data/raw/repos\official\projects\detr\dataloaders,coco.py,"def load(self, input_context: Optional[tf.distribute.InputContext] = None):"
data/raw/repos\official\projects\detr\dataloaders,coco_test.py,def _gen_fn():
data/raw/repos\official\projects\detr\dataloaders,coco_test.py,def test_load_dataset(self):
data/raw/repos\official\projects\detr\dataloaders,coco_test.py,"def as_dataset(self, *args, **kwargs):"
data/raw/repos\official\projects\detr\dataloaders,coco_test.py,"def test_preprocess(self, is_training):"
data/raw/repos\official\projects\detr\dataloaders,detr_input.py,"def _parse_train_data(self, data):"
data/raw/repos\official\projects\detr\dataloaders,detr_input.py,"def _parse_eval_data(self, data):"
data/raw/repos\official\projects\detr\modeling,detr.py,"def build(self, input_shape=None):"
data/raw/repos\official\projects\detr\modeling,detr.py,def _build_detection_decoder(self):
data/raw/repos\official\projects\detr\modeling,detr.py,def get_config(self):
data/raw/repos\official\projects\detr\modeling,detr.py,"def from_config(cls, config):"
data/raw/repos\official\projects\detr\modeling,detr.py,"def build(self, input_shape=None):"
data/raw/repos\official\projects\detr\modeling,detr.py,def get_config(self):
data/raw/repos\official\projects\detr\modeling,detr.py,"def call(self, inputs):"
data/raw/repos\official\projects\detr\modeling,detr_test.py,def test_forward(self):
data/raw/repos\official\projects\detr\modeling,detr_test.py,def test_get_from_config_detr_transformer(self):
data/raw/repos\official\projects\detr\modeling,detr_test.py,def test_get_from_config_detr(self):
data/raw/repos\official\projects\detr\modeling,transformer.py,"def build(self, input_shape):"
data/raw/repos\official\projects\detr\modeling,transformer.py,def get_config(self):
data/raw/repos\official\projects\detr\modeling,transformer.py,"def call(self, encoder_inputs, attention_mask=None, pos_embed=None):"
data/raw/repos\official\projects\detr\modeling,transformer.py,"def build(self, input_shape):"
data/raw/repos\official\projects\detr\modeling,transformer.py,def get_config(self):
data/raw/repos\official\projects\detr\modeling,transformer.py,"def call(self, inputs):"
data/raw/repos\official\projects\detr\modeling,transformer.py,"def build(self, input_shape):"
data/raw/repos\official\projects\detr\modeling,transformer.py,def get_config(self):
data/raw/repos\official\projects\detr\modeling,transformer.py,"def build(self, input_shape):"
data/raw/repos\official\projects\detr\modeling,transformer.py,def get_config(self):
data/raw/repos\official\projects\detr\modeling,transformer.py,def common_layers_with_encoder(self):
data/raw/repos\official\projects\detr\modeling,transformer.py,"def call(self, inputs, cache=None, decode_loop_step=None):"
data/raw/repos\official\projects\detr\modeling,transformer_test.py,def test_transformer_encoder_block(self):
data/raw/repos\official\projects\detr\modeling,transformer_test.py,def test_transformer_encoder_block_get_config(self):
data/raw/repos\official\projects\detr\modeling,transformer_test.py,def test_transformer_encoder(self):
data/raw/repos\official\projects\detr\modeling,transformer_test.py,def test_transformer_encoder_get_config(self):
data/raw/repos\official\projects\detr\modeling,transformer_test.py,def test_transformer_decoder_block(self):
data/raw/repos\official\projects\detr\modeling,transformer_test.py,def test_transformer_decoder_block_get_config(self):
data/raw/repos\official\projects\detr\modeling,transformer_test.py,def test_transformer_decoder(self):
data/raw/repos\official\projects\detr\modeling,transformer_test.py,def test_transformer_decoder_get_config(self):
data/raw/repos\official\projects\detr\ops,matchers.py,def _prepare(weights):
data/raw/repos\official\projects\detr\ops,matchers.py,def _greedy_assignment(adj_matrix):
data/raw/repos\official\projects\detr\ops,matchers.py,"def _assign_row(accumulator, row_adj):"
data/raw/repos\official\projects\detr\ops,matchers.py,"def _find_augmenting_path(assignment, adj_matrix):"
data/raw/repos\official\projects\detr\ops,matchers.py,"def _has_active_workers(state, curr_workers):"
data/raw/repos\official\projects\detr\ops,matchers.py,"def _augment_step(state, curr_workers):"
data/raw/repos\official\projects\detr\ops,matchers.py,"def _improve_assignment(assignment, state):"
data/raw/repos\official\projects\detr\ops,matchers.py,"def _has_active_backtracks(flip_matrix, active, curr_job_idx):"
data/raw/repos\official\projects\detr\ops,matchers.py,"def _backtrack_one_step(flip_matrix, active, curr_job_idx):"
data/raw/repos\official\projects\detr\ops,matchers.py,"def _maximum_bipartite_matching(adj_matrix, assignment=None):"
data/raw/repos\official\projects\detr\ops,matchers.py,"def _has_new_jobs(state, assignment):"
data/raw/repos\official\projects\detr\ops,matchers.py,"def _improve_assignment_and_find_new_path(state, assignment):"
data/raw/repos\official\projects\detr\ops,matchers.py,"def _compute_cover(state, assignment):"
data/raw/repos\official\projects\detr\ops,matchers.py,"def _update_weights_using_cover(workers_cover, jobs_cover, weights):"
data/raw/repos\official\projects\detr\ops,matchers.py,"def assert_rank(tensor, expected_rank, name=None):"
data/raw/repos\official\projects\detr\ops,matchers.py,def hungarian_matching(weights):
data/raw/repos\official\projects\detr\ops,matchers.py,"def _cover_incomplete(workers_cover, jobs_cover, *args):"
data/raw/repos\official\projects\detr\ops,matchers.py,"def _update_weights_and_match(workers_cover, jobs_cover, weights, assignment):"
data/raw/repos\official\projects\detr\ops,matchers_test.py,def testLinearSumAssignment(self):
data/raw/repos\official\projects\detr\ops,matchers_test.py,def testBatchedLinearSumAssignment(self):
data/raw/repos\official\projects\detr\ops,matchers_test.py,def testMaximumBipartiteMatching(self):
data/raw/repos\official\projects\detr\ops,matchers_test.py,def testAssignmentMatchesScipy(self):
data/raw/repos\official\projects\detr\serving,export_module_test.py,"def _get_module(self, input_type):"
data/raw/repos\official\projects\detr\serving,export_module_test.py,"def _export_from_module(self, module, input_type, save_directory):"
data/raw/repos\official\projects\detr\serving,export_module_test.py,"def _get_dummy_input(self, input_type):"
data/raw/repos\official\projects\detr\serving,export_module_test.py,"def test_export(self, input_type='image_tensor'):"
data/raw/repos\official\projects\detr\serving,export_saved_model.py,def main(_):
data/raw/repos\official\projects\detr\tasks,detection.py,def build_model(self):
data/raw/repos\official\projects\detr\tasks,detection.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\detr\tasks,detection.py,"def _compute_cost(self, cls_outputs, box_outputs, cls_targets, box_targets):"
data/raw/repos\official\projects\detr\tasks,detection.py,"def build_losses(self, outputs, labels, aux_losses=None):"
data/raw/repos\official\projects\detr\tasks,detection.py,"def build_metrics(self, training=True):"
data/raw/repos\official\projects\detr\tasks,detection.py,"def train_step(self, inputs, model, optimizer, metrics=None):"
data/raw/repos\official\projects\detr\tasks,detection.py,"def validation_step(self, inputs, model, metrics=None):"
data/raw/repos\official\projects\detr\tasks,detection.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\projects\detr\tasks,detection.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\projects\detr\tasks,detection_test.py,def _gen_fn():
data/raw/repos\official\projects\detr\tasks,detection_test.py,"def _as_dataset(self, *args, **kwargs):"
data/raw/repos\official\projects\detr\tasks,detection_test.py,def test_train_step(self):
data/raw/repos\official\projects\detr\tasks,detection_test.py,def test_validation_step(self):
data/raw/repos\official\projects\detr\tasks,detection_test.py,def test_train_step(self):
data/raw/repos\official\projects\detr\tasks,detection_test.py,def test_validation_step(self):
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,"def _get_distribution_losses(teacher, student):"
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,"def _get_attention_loss(teacher_score, student_score):"
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,"def _build_sub_encoder(encoder, stage_number):"
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,def build_dataset(self):
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,def build_model(self):
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,"def build_optimizer(self, config):"
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,def build_metrics(self):
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,def build_exported_ckpt_manager(self):
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,"def calculate_loss_metrics(self, labels, outputs):"
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,"def calculate_accuracy_metrics(self, labels, outputs, metrics):"
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,def _rebuild_training_graph(self):
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,def train_loop_begin(self):
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,"def train_step(self, iterator):"
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,def step_fn(inputs):
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,def train_loop_end(self):
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,def eval_begin(self):
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,"def eval_step(self, iterator):"
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,def step_fn(inputs):
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer.py,def eval_end(self):
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer_test.py,def _dummy_dataset():
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer_test.py,def dummy_data(_):
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer_test.py,def setUp(self):
data/raw/repos\official\projects\edgetpu\nlp,mobilebert_edgetpu_trainer_test.py,def test_train_model_locally(self):
data/raw/repos\official\projects\edgetpu\nlp,run_mobilebert_edgetpu_train.py,def main(_):
data/raw/repos\official\projects\edgetpu\nlp\modeling,edgetpu_layers.py,"def _build_attention_equation(rank, attn_axes):"
data/raw/repos\official\projects\edgetpu\nlp\modeling,edgetpu_layers.py,def get_config(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,edgetpu_layers.py,"def call(self, inputs, mask=None):"
data/raw/repos\official\projects\edgetpu\nlp\modeling,edgetpu_layers.py,"def _build_attention(self, rank):"
data/raw/repos\official\projects\edgetpu\nlp\modeling,edgetpu_layers.py,"def __init__(self, **kwargs):"
data/raw/repos\official\projects\edgetpu\nlp\modeling,edgetpu_layers_test.py,"def test_non_masked_attention(self, value_dim, output_shape, output_dims):"
data/raw/repos\official\projects\edgetpu\nlp\modeling,edgetpu_layers_test.py,def test_non_masked_self_attention(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,edgetpu_layers_test.py,def test_attention_scores(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,edgetpu_layers_test.py,def test_attention_scores_with_values(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,edgetpu_layers_test.py,"def test_masked_attention(self, use_bias):"
data/raw/repos\official\projects\edgetpu\nlp\modeling,edgetpu_layers_test.py,def test_initializer(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,edgetpu_layers_test.py,def test_masked_attention_with_scores(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,edgetpu_layers_test.py,"def test_high_dim_attention(self, q_dims, v_dims, mask_dims, attention_axes):"
data/raw/repos\official\projects\edgetpu\nlp\modeling,edgetpu_layers_test.py,def test_dropout(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,encoder.py,def get_embedding_table(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,encoder.py,def get_embedding_layer(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,encoder.py,def transformer_layers(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,encoder.py,def pooler_layer(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,model_builder.py,def _get_embedding_table(encoder):
data/raw/repos\official\projects\edgetpu\nlp\modeling,model_builder_test.py,def setUp(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,model_builder_test.py,def test_default_initialization(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,model_builder_test.py,def test_initialization_with_encoder(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,model_builder_test.py,def test_initialization_with_mlm(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,pretrainer.py,def checkpoint_items(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,pretrainer.py,def get_config(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,pretrainer.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\edgetpu\nlp\modeling,pretrainer_test.py,def test_multiple_cls_outputs(self):
data/raw/repos\official\projects\edgetpu\nlp\modeling,pretrainer_test.py,def test_v2_serialize_deserialize(self):
data/raw/repos\official\projects\edgetpu\nlp\serving,export_tflite_squad.py,"def build_inputs(data_params, input_context=None):"
data/raw/repos\official\projects\edgetpu\nlp\serving,export_tflite_squad.py,def _representative_dataset():
data/raw/repos\official\projects\edgetpu\nlp\serving,export_tflite_squad_test.py,def setUp(self):
data/raw/repos\official\projects\edgetpu\nlp\serving,export_tflite_squad_test.py,def test_model_input_output(self):
data/raw/repos\official\projects\edgetpu\nlp\utils,utils.py,"def config_override(experiment_params, flags_obj):"
data/raw/repos\official\projects\edgetpu\nlp\utils,utils.py,"def get_model_dir(experiment_params, flags_obj):"
data/raw/repos\official\projects\edgetpu\nlp\utils,utils.py,"def load_checkpoint(model: tf_keras.Model, ckpt_path: str):"
data/raw/repos\official\projects\edgetpu\nlp\utils,utils_test.py,"def nested_dict_compare(dict_a, dict_b):"
data/raw/repos\official\projects\edgetpu\nlp\utils,utils_test.py,def test_config_override(self):
data/raw/repos\official\projects\edgetpu\nlp\utils,utils_test.py,def test_load_checkpoint(self):
data/raw/repos\official\projects\edgetpu\vision,train.py,def main(_):
data/raw/repos\official\projects\edgetpu\vision\configs,semantic_segmentation_config.py,def seg_deeplabv3plus_ade20k(backbone: str):
data/raw/repos\official\projects\edgetpu\vision\dataloaders,classification_input.py,"def _parse_train_image(self, decoded_tensors):"
data/raw/repos\official\projects\edgetpu\vision\dataloaders,classification_input.py,"def _parse_eval_image(self, decoded_tensors):"
data/raw/repos\official\projects\edgetpu\vision\dataloaders,classification_input_test.py,"def test_decoder(self, image_height, image_width, num_instances):"
data/raw/repos\official\projects\edgetpu\vision\modeling,common_modules.py,"def __init__(self, fused: Optional[bool] = False, **kwargs):"
data/raw/repos\official\projects\edgetpu\vision\modeling,common_modules.py,"def _cross_replica_average(self, t: tf.Tensor, num_shards_per_group: int):"
data/raw/repos\official\projects\edgetpu\vision\modeling,common_modules.py,"def count_params(model, trainable_only=True):"
data/raw/repos\official\projects\edgetpu\vision\modeling,custom_layers.py,"def from_config(cls, config):"
data/raw/repos\official\projects\edgetpu\vision\modeling,custom_layers.py,"def _nnapi_scalar(value, dtype):"
data/raw/repos\official\projects\edgetpu\vision\modeling,custom_layers.py,"def _fqop(x, min_val=-128, max_val=127):"
data/raw/repos\official\projects\edgetpu\vision\modeling,custom_layers_test.py,def _get_random_inputs(input_shape):
data/raw/repos\official\projects\edgetpu\vision\modeling,custom_layers_test.py,"def test_kernel_shapes(self, groups, input_channel, output_channel):"
data/raw/repos\official\projects\edgetpu\vision\modeling,custom_layers_test.py,"def test_output_shapes(self, groups, input_channel, output_channel):"
data/raw/repos\official\projects\edgetpu\vision\modeling,custom_layers_test.py,"def test_non_supported_data_format_raises_value_error(self, gc_type):"
data/raw/repos\official\projects\edgetpu\vision\modeling,custom_layers_test.py,"def test_invalid_batch_norm_raises_value_error(self, gc_type):"
data/raw/repos\official\projects\edgetpu\vision\modeling,custom_layers_test.py,def my_batch_norm(x):
data/raw/repos\official\projects\edgetpu\vision\modeling,custom_layers_test.py,"def test_invalid_padding_raises_value_error(self, gc_type):"
data/raw/repos\official\projects\edgetpu\vision\modeling,custom_layers_test.py,"def test_reference_match(self, shape, input_type, output_type):"
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v1_model.py,def output_specs(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v1_model_blocks.py,"def mobilenet_edgetpu(image_input: tf_keras.layers.Input, config: ModelConfig):"
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v1_model_test.py,def setUp(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v1_model_test.py,def test_bottleneck_block(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v1_model_test.py,def test_fused_bottleneck_block(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v1_model_test.py,def test_variables(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v1_model_test.py,def setUp(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v1_model_test.py,def test_create_mobilenet_edgetpu(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v1_model_test.py,def setUp(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v1_model_test.py,"def _copy_saved_model_to_local(self, model_ckpt):"
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v1_model_test.py,"def _test_prediction(self, model_name, image_size):"
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v1_model_test.py,def test_mobilenet_edgetpu_image_shape(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v1_model_test.py,def test_mobilenet_edgetpu_predict(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v2_model.py,def get_config(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v2_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v2_model.py,def output_specs(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v2_model_blocks.py,def _default_mobilenet_edgetpu_v2_topology():
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v2_model_blocks.py,def mobilenet_edgetpu_v2_s():
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v2_model_blocks.py,def mobilenet_edgetpu_v2_m():
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v2_model_blocks.py,def mobilenet_edgetpu_v2_l():
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v2_model_blocks.py,"def __call__(self, inputs: tf.Tensor, training=False):"
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v2_model_blocks_test.py,def setUp(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v2_model_blocks_test.py,def test_model_creatation(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v2_model_blocks_test.py,def test_model_with_customized_kernel_initializer(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v2_model_test.py,def setUp(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v2_model_test.py,def test_create_mobilenet_edgetpu(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v2_model_test.py,def test_export_tflite(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v2_model_test.py,def test_model_save_load(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,mobilenet_edgetpu_v2_model_test.py,def test_model_initialization_failure(self):
data/raw/repos\official\projects\edgetpu\vision\modeling,optimized_multiheadattention_layer_test.py,def test_same_output(self):
data/raw/repos\official\projects\edgetpu\vision\modeling\backbones,mobilenet_edgetpu.py,"def freeze_large_filters(model: tf_keras.Model, threshold: int):"
data/raw/repos\official\projects\edgetpu\vision\modeling\backbones,mobilenet_edgetpu_test.py,"def __init__(self, shape):"
data/raw/repos\official\projects\edgetpu\vision\modeling\backbones,mobilenet_edgetpu_test.py,"def __init__(self, model_id):"
data/raw/repos\official\projects\edgetpu\vision\modeling\backbones,mobilenet_edgetpu_test.py,def get(self):
data/raw/repos\official\projects\edgetpu\vision\modeling\backbones,mobilenet_edgetpu_test.py,"def test_mobilenet_creation(self, model_id, input_shape):"
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,"def activation_fn(features: tf.Tensor, act_type: Text):"
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,"def bifpn_config(min_level, max_level):"
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,def get_conv_op(conv_type):
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,def add_n(nodes):
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,"def resize_nearest_neighbor(data, height_scale, width_scale):"
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,"def _pool2d(self, inputs, height, width, target_height, target_width):"
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,"def _upsample2d(self, inputs, target_height, target_width, training):"
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,"def _maybe_apply_1x1(self, feat, training, num_channels):"
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,"def build(self, feat_shape):"
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,"def call(self, feat, training, all_feats):"
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,"def fuse_features(self, nodes):"
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,"def _add_wsm(self, initializer, shape=None):"
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,"def build(self, feats_shape):"
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,"def call(self, feats, training):"
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,"def call(self, new_node, training):"
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,"def call(self, feats, training):"
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,"def call(self, feats, training):"
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,def _call(feats):
data/raw/repos\official\projects\edgetpu\vision\modeling\heads,bifpn_head.py,"def call(self, inputs, backbone_feats, training):"
data/raw/repos\official\projects\edgetpu\vision\serving,export_tflite.py,def get_export_config_from_flags():
data/raw/repos\official\projects\edgetpu\vision\serving,export_tflite.py,def run_export():
data/raw/repos\official\projects\edgetpu\vision\serving,export_tflite.py,def main(_):
data/raw/repos\official\projects\edgetpu\vision\serving,export_tflite_test.py,def _build_experiment_model(experiment_type):
data/raw/repos\official\projects\edgetpu\vision\serving,export_tflite_test.py,def _build_model(config):
data/raw/repos\official\projects\edgetpu\vision\serving,export_tflite_test.py,"def _dump_tflite(model, config):"
data/raw/repos\official\projects\edgetpu\vision\serving,export_tflite_test.py,"def test_model_build_and_export_tflite(self, model_name, image_size):"
data/raw/repos\official\projects\edgetpu\vision\serving,export_tflite_test.py,"def test_model_build_and_export_saved_model(self, model_name, image_size):"
data/raw/repos\official\projects\edgetpu\vision\serving,export_tflite_test.py,"def test_segmentation_finalize_methods(self, model_name, finalize_method):"
data/raw/repos\official\projects\edgetpu\vision\serving,export_util.py,"def finalize_serving(model_output, export_config):"
data/raw/repos\official\projects\edgetpu\vision\serving,export_util.py,"def preprocess_for_quantization(image_data, image_size, crop_padding=32):"
data/raw/repos\official\projects\edgetpu\vision\serving,export_util.py,def representative_dataset_gen(export_config):
data/raw/repos\official\projects\edgetpu\vision\serving,export_util.py,"def configure_tflite_converter(export_config, converter):"
data/raw/repos\official\projects\edgetpu\vision\serving,export_util.py,def _representative_dataset_gen():
data/raw/repos\official\projects\edgetpu\vision\serving,export_util.py,def build_experiment_model(experiment_type):
data/raw/repos\official\projects\edgetpu\vision\serving,tflite_imagenet_evaluator_run.py,def main(argv: Sequence[str]):
data/raw/repos\official\projects\edgetpu\vision\serving,tflite_imagenet_evaluator_test.py,def test_evaluate_all(self):
data/raw/repos\official\projects\edgetpu\vision\tasks,image_classification.py,"def add_models(name: str, constructor: Any):"
data/raw/repos\official\projects\edgetpu\vision\tasks,image_classification.py,def build_model(self):
data/raw/repos\official\projects\edgetpu\vision\tasks,image_classification.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\edgetpu\vision\tasks,image_classification.py,"def inference_step(self, inputs: tf.Tensor, model: tf_keras.Model):"
data/raw/repos\official\projects\edgetpu\vision\tasks,image_classification_test.py,def dummy_imagenet_dataset():
data/raw/repos\official\projects\edgetpu\vision\tasks,image_classification_test.py,def dummy_data(_):
data/raw/repos\official\projects\edgetpu\vision\tasks,image_classification_test.py,"def test_task(self, config_name):"
data/raw/repos\official\projects\edgetpu\vision\tasks,semantic_segmentation.py,"def _prepare_image_and_label(self, data):"
data/raw/repos\official\projects\edgetpu\vision\tasks,semantic_segmentation.py,"def call(self, inputs, training):"
data/raw/repos\official\projects\edgetpu\vision\tasks,semantic_segmentation.py,"def add_models(name: str, constructor: Any):"
data/raw/repos\official\projects\edgetpu\vision\tasks,semantic_segmentation.py,def build_model(self):
data/raw/repos\official\projects\edgetpu\vision\tasks,semantic_segmentation_test.py,"def dummy_ade20k_dataset(image_width, image_height):"
data/raw/repos\official\projects\edgetpu\vision\tasks,semantic_segmentation_test.py,def dummy_data(_):
data/raw/repos\official\projects\edgetpu\vision\tasks,semantic_segmentation_test.py,"def test_task(self, config_name):"
data/raw/repos\official\projects\edgetpu\vision\tasks,semantic_segmentation_test.py,"def test_task(self, config_name):"
data/raw/repos\official\projects\fffner,fffner.py,def get_encoder(encoder_cfg: FFFNerEncoderConfig):
data/raw/repos\official\projects\fffner,fffner_classifier.py,def checkpoint_items(self):
data/raw/repos\official\projects\fffner,fffner_classifier.py,def get_config(self):
data/raw/repos\official\projects\fffner,fffner_classifier.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\fffner,fffner_classifier.py,def _make_config_dict(self):
data/raw/repos\official\projects\fffner,fffner_dataloader.py,"def __init__(self, params):"
data/raw/repos\official\projects\fffner,fffner_dataloader.py,def name_to_features_spec(self):
data/raw/repos\official\projects\fffner,fffner_dataloader.py,"def _decode(self, record: tf.Tensor):"
data/raw/repos\official\projects\fffner,fffner_dataloader.py,"def _parse(self, record: Mapping[str, tf.Tensor]):"
data/raw/repos\official\projects\fffner,fffner_dataloader.py,"def load(self, input_context: Optional[tf.distribute.InputContext] = None):"
data/raw/repos\official\projects\fffner,fffner_encoder.py,"def call(self, inputs):"
data/raw/repos\official\projects\fffner,fffner_encoder.py,def get_embedding_table(self):
data/raw/repos\official\projects\fffner,fffner_encoder.py,def get_embedding_layer(self):
data/raw/repos\official\projects\fffner,fffner_encoder.py,def get_config(self):
data/raw/repos\official\projects\fffner,fffner_encoder.py,def transformer_layers(self):
data/raw/repos\official\projects\fffner,fffner_encoder.py,def pooler_layer_is_entity(self):
data/raw/repos\official\projects\fffner,fffner_encoder.py,def pooler_layer_entity_type(self):
data/raw/repos\official\projects\fffner,fffner_encoder.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\fffner,fffner_encoder_test.py,def setUp(self):
data/raw/repos\official\projects\fffner,fffner_encoder_test.py,def test_encoder(self):
data/raw/repos\official\projects\fffner,fffner_prediction.py,"def __init__(self, params: cfg.TaskConfig, logging_dir=None, name=None):"
data/raw/repos\official\projects\fffner,fffner_prediction.py,def build_model(self):
data/raw/repos\official\projects\fffner,fffner_prediction.py,"def build_inputs(self, params, input_context=None):"
data/raw/repos\official\projects\fffner,fffner_prediction.py,def dummy_data(_):
data/raw/repos\official\projects\fffner,fffner_prediction.py,"def build_metrics(self, training=None):"
data/raw/repos\official\projects\fffner,fffner_prediction.py,"def process_metrics(self, metrics, labels, model_outputs):"
data/raw/repos\official\projects\fffner,fffner_prediction.py,"def process_compiled_metrics(self, compiled_metrics, labels, model_outputs):"
data/raw/repos\official\projects\fffner,fffner_prediction.py,"def validation_step(self, inputs, model: tf_keras.Model, metrics=None):"
data/raw/repos\official\projects\fffner,fffner_prediction.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\projects\fffner,fffner_prediction.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\projects\fffner,fffner_prediction.py,"def resolve(length, spans, prediction_confidence):"
data/raw/repos\official\projects\fffner,fffner_prediction.py,"def get_p_r_f(truth, pred):"
data/raw/repos\official\projects\fffner,fffner_prediction.py,def softmax(x):
data/raw/repos\official\projects\fffner,fffner_prediction.py,"def initialize(self, model):"
data/raw/repos\official\projects\fffner\utils,convert_checkpoint_huggingface.py,def _get_huggingface_bert_model_and_config(huggingface_model_name_or_path):
data/raw/repos\official\projects\fffner\utils,convert_checkpoint_huggingface.py,def _create_fffner_model(huggingface_bert_config):
data/raw/repos\official\projects\fffner\utils,convert_checkpoint_huggingface.py,"def convert(encoder, bert_model):"
data/raw/repos\official\projects\fffner\utils,convert_checkpoint_huggingface.py,"def convert_checkpoint(huggingface_model_name_or_path, output_path):"
data/raw/repos\official\projects\fffner\utils,convert_checkpoint_huggingface.py,def main(_):
data/raw/repos\official\projects\fffner\utils,convert_checkpoint_tensorflow.py,def _get_tensorflow_bert_model_and_config(tfhub_handle_encoder):
data/raw/repos\official\projects\fffner\utils,convert_checkpoint_tensorflow.py,def _create_fffner_model(bert_config):
data/raw/repos\official\projects\fffner\utils,convert_checkpoint_tensorflow.py,"def convert(encoder, bert_model):"
data/raw/repos\official\projects\fffner\utils,convert_checkpoint_tensorflow.py,"def convert_checkpoint(output_path, tfhub_handle_encoder):"
data/raw/repos\official\projects\fffner\utils,convert_checkpoint_tensorflow.py,def main(_):
data/raw/repos\official\projects\fffner\utils,create_data.py,def read_file(self):
data/raw/repos\official\projects\fffner\utils,create_data.py,"def tokenize_word(self, word):"
data/raw/repos\official\projects\fffner\utils,create_data.py,"def tokenize_word_list(self, word_list):"
data/raw/repos\official\projects\fffner\utils,create_data.py,"def process_word_list_and_spans_to_inputs(self, sid, word_list, spans):"
data/raw/repos\official\projects\fffner\utils,create_data.py,"def bio_labels_to_spans(self, bio_labels):"
data/raw/repos\official\projects\fffner\utils,create_data.py,"def collate_fn(self, batch):"
data/raw/repos\official\projects\fffner\utils,create_data.py,"def prepare(self, negative_multiplier=3.):"
data/raw/repos\official\projects\fffner\utils,create_data.py,def __len__(self):
data/raw/repos\official\projects\fffner\utils,create_data.py,"def __getitem__(self, idx):"
data/raw/repos\official\projects\fffner\utils,create_data.py,"def file_based_convert_examples_to_features(examples, output_file):"
data/raw/repos\official\projects\fffner\utils,create_data.py,def create_int_feature(values):
data/raw/repos\official\projects\labse,export_tfhub.py,"def _get_do_lower_case(do_lower_case, vocab_file):"
data/raw/repos\official\projects\labse,export_tfhub.py,def main(_):
data/raw/repos\official\projects\labse,export_tfhub_test.py,def test_export_model(self):
data/raw/repos\official\projects\labse,export_tfhub_test.py,"def _dropout_mean_stddev(training, num_runs=20):"
data/raw/repos\official\projects\longformer,longformer.py,def get_encoder(encoder_cfg: LongformerEncoderConfig):
data/raw/repos\official\projects\longformer,longformer_attention.py,"def _build_attention_equation(rank, attn_axes):"
data/raw/repos\official\projects\longformer,longformer_attention.py,"def _build_proj_equation(free_dims, bound_dims, output_dims):"
data/raw/repos\official\projects\longformer,longformer_attention.py,"def _get_output_shape(output_rank, known_last_dims):"
data/raw/repos\official\projects\longformer,longformer_attention.py,"def _build_from_signature(self, query, value, key=None):"
data/raw/repos\official\projects\longformer,longformer_attention.py,def get_config(self):
data/raw/repos\official\projects\longformer,longformer_attention.py,"def _sliding_chunks_query_key_matmul(self, query, key, window_overlap):"
data/raw/repos\official\projects\longformer,longformer_attention.py,"def _mask_invalid_locations(input_tensor, window_overlap):"
data/raw/repos\official\projects\longformer,longformer_attention.py,"def _pad_and_transpose_last_two_dims(hidden_states_padded, paddings):"
data/raw/repos\official\projects\longformer,longformer_attention.py,def _pad_and_diagonalize(chunked_hidden_states):
data/raw/repos\official\projects\longformer,longformer_attention.py,"def _chunk(hidden_states, window_overlap):"
data/raw/repos\official\projects\longformer,longformer_attention.py,"def _get_global_attn_indices(is_index_global_attn, global_attention_size):"
data/raw/repos\official\projects\longformer,longformer_attention.py,"def reshape_and_transpose(self, vector, batch_size):"
data/raw/repos\official\projects\longformer,longformer_attention_test.py,def setUp(self):
data/raw/repos\official\projects\longformer,longformer_attention_test.py,def _get_hidden_states(self):
data/raw/repos\official\projects\longformer,longformer_attention_test.py,def test_diagonalize(self):
data/raw/repos\official\projects\longformer,longformer_attention_test.py,def test_pad_and_transpose_last_two_dims(self):
data/raw/repos\official\projects\longformer,longformer_attention_test.py,def test_mask_invalid_locations(self):
data/raw/repos\official\projects\longformer,longformer_attention_test.py,def test_chunk(self):
data/raw/repos\official\projects\longformer,longformer_attention_test.py,def test_layer_local_attn(self):
data/raw/repos\official\projects\longformer,longformer_attention_test.py,def test_layer_global_attn(self):
data/raw/repos\official\projects\longformer,longformer_encoder.py,"def call(self, inputs):"
data/raw/repos\official\projects\longformer,longformer_encoder.py,def get_embedding_table(self):
data/raw/repos\official\projects\longformer,longformer_encoder.py,def get_embedding_layer(self):
data/raw/repos\official\projects\longformer,longformer_encoder.py,def get_config(self):
data/raw/repos\official\projects\longformer,longformer_encoder.py,def transformer_layers(self):
data/raw/repos\official\projects\longformer,longformer_encoder.py,def pooler_layer(self):
data/raw/repos\official\projects\longformer,longformer_encoder.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\longformer,longformer_encoder.py,def pad_embeddings():
data/raw/repos\official\projects\longformer,longformer_encoder_block.py,"def build(self, input_shape):"
data/raw/repos\official\projects\longformer,longformer_encoder_block.py,def get_config(self):
data/raw/repos\official\projects\longformer,longformer_encoder_block.py,"def call(self, inputs):"
data/raw/repos\official\projects\longformer,longformer_encoder_test.py,def setUp(self):
data/raw/repos\official\projects\longformer,longformer_encoder_test.py,"def test_encoder(self, attention_window, global_attention_size):"
data/raw/repos\official\projects\longformer,longformer_encoder_test.py,"def test_norm_first(self, norm_first, global_attention_size):"
data/raw/repos\official\projects\longformer,train.py,def main(_):
data/raw/repos\official\projects\longformer\utils,convert_pretrained_pytorch_checkpoint_to_tf.py,def _get_pytorch_longformer_model():
data/raw/repos\official\projects\longformer\utils,convert_pretrained_pytorch_checkpoint_to_tf.py,def _create_longformer_model():
data/raw/repos\official\projects\longformer\utils,convert_pretrained_pytorch_checkpoint_to_tf.py,"def convert(encoder, allenai_model):"
data/raw/repos\official\projects\longformer\utils,convert_pretrained_pytorch_checkpoint_to_tf.py,def convert_checkpoint(output_path):
data/raw/repos\official\projects\longformer\utils,convert_pretrained_pytorch_checkpoint_to_tf.py,def main(_):
data/raw/repos\official\projects\longformer\utils,longformer_tokenizer_to_tfrecord.py,def preprocess_function(examples):
data/raw/repos\official\projects\longformer\utils,longformer_tokenizer_to_tfrecord.py,"def file_based_convert_examples_to_features(examples, output_file):"
data/raw/repos\official\projects\longformer\utils,longformer_tokenizer_to_tfrecord.py,def create_int_feature(values):
data/raw/repos\official\projects\lra,exponential_moving_average.py,"def build(self, input_shape):"
data/raw/repos\official\projects\lra,exponential_moving_average.py,def _calc_coeffs(self):
data/raw/repos\official\projects\lra,exponential_moving_average.py,"def _compute_kernel(self, length: int):"
data/raw/repos\official\projects\lra,exponential_moving_average.py,def coeffs(self):
data/raw/repos\official\projects\lra,exponential_moving_average.py,"def kernel(self, length: int):"
data/raw/repos\official\projects\lra,linformer.py,def get_encoder(encoder_cfg: LinformerEncoderConfig):
data/raw/repos\official\projects\lra,linformer_encoder.py,"def call(self, inputs):"
data/raw/repos\official\projects\lra,linformer_encoder.py,def get_embedding_table(self):
data/raw/repos\official\projects\lra,linformer_encoder.py,def get_embedding_layer(self):
data/raw/repos\official\projects\lra,linformer_encoder.py,def get_config(self):
data/raw/repos\official\projects\lra,linformer_encoder.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\lra,linformer_encoder_block.py,"def build(self, input_shape):"
data/raw/repos\official\projects\lra,linformer_encoder_block.py,def get_config(self):
data/raw/repos\official\projects\lra,lra_dual_encoder.py,"def call(self, inputs):"
data/raw/repos\official\projects\lra,lra_dual_encoder.py,def get_config(self):
data/raw/repos\official\projects\lra,lra_dual_encoder.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\lra,lra_dual_encoder.py,def checkpoint_items(self):
data/raw/repos\official\projects\lra,lra_dual_encoder_dataloader.py,"def __init__(self, params):"
data/raw/repos\official\projects\lra,lra_dual_encoder_dataloader.py,def name_to_features_spec(self):
data/raw/repos\official\projects\lra,lra_dual_encoder_dataloader.py,"def _decode(self, record: tf.Tensor):"
data/raw/repos\official\projects\lra,lra_dual_encoder_dataloader.py,"def _parse(self, record: Mapping[str, tf.Tensor]):"
data/raw/repos\official\projects\lra,lra_dual_encoder_dataloader.py,"def load(self, input_context: Optional[tf.distribute.InputContext] = None):"
data/raw/repos\official\projects\lra,lra_dual_encoder_task.py,"def __init__(self, params: cfg.TaskConfig, logging_dir=None, name=None):"
data/raw/repos\official\projects\lra,lra_dual_encoder_task.py,def build_model(self):
data/raw/repos\official\projects\lra,lra_dual_encoder_task.py,"def build_inputs(self, params, input_context=None):"
data/raw/repos\official\projects\lra,lra_dual_encoder_task.py,def dummy_data(_):
data/raw/repos\official\projects\lra,lra_dual_encoder_task.py,"def build_metrics(self, training=None):"
data/raw/repos\official\projects\lra,lra_dual_encoder_task.py,"def process_metrics(self, metrics, labels, model_outputs):"
data/raw/repos\official\projects\lra,lra_dual_encoder_task.py,"def process_compiled_metrics(self, compiled_metrics, labels, model_outputs):"
data/raw/repos\official\projects\lra,lra_dual_encoder_task.py,"def validation_step(self, inputs, model: tf_keras.Model, metrics=None):"
data/raw/repos\official\projects\lra,lra_dual_encoder_task.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\projects\lra,lra_dual_encoder_task.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\projects\lra,lra_dual_encoder_task.py,"def initialize(self, model):"
data/raw/repos\official\projects\lra,lra_dual_encoder_task.py,def predict_step(inputs):
data/raw/repos\official\projects\lra,lra_dual_encoder_task.py,"def aggregate_fn(state, outputs):"
data/raw/repos\official\projects\lra,mega.py,def get_encoder(encoder_cfg: MegaEncoderConfig):
data/raw/repos\official\projects\lra,mega_encoder.py,"def call(self, inputs):"
data/raw/repos\official\projects\lra,mega_encoder.py,def get_embedding_table(self):
data/raw/repos\official\projects\lra,mega_encoder.py,def get_embedding_layer(self):
data/raw/repos\official\projects\lra,mega_encoder.py,def get_config(self):
data/raw/repos\official\projects\lra,mega_encoder.py,def transformer_layers(self):
data/raw/repos\official\projects\lra,mega_encoder.py,def pooler_layer(self):
data/raw/repos\official\projects\lra,mega_encoder.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\lra,mega_encoder_test.py,def test_encoder(self):
data/raw/repos\official\projects\lra,moving_average_gated_attention.py,def get_activation_fn(activation):
data/raw/repos\official\projects\lra,moving_average_gated_attention.py,"def __init__(self, max_positions):"
data/raw/repos\official\projects\lra,moving_average_gated_attention.py,"def build(self, input_shape):"
data/raw/repos\official\projects\lra,moving_average_gated_attention.py,"def call(self, seq_len):"
data/raw/repos\official\projects\lra,moving_average_gated_attention.py,"def build(self, input_shape):"
data/raw/repos\official\projects\lra,moving_average_gated_attention.py,def get_config(self):
data/raw/repos\official\projects\lra,moving_average_gated_attention.py,"def _softmax_attention(self, q, k):"
data/raw/repos\official\projects\lra,train.py,def main(_):
data/raw/repos\official\projects\lra,transformer.py,def get_encoder(encoder_cfg: TransformerEncoderConfig):
data/raw/repos\official\projects\lra,transformer_encoder.py,"def call(self, inputs):"
data/raw/repos\official\projects\lra,transformer_encoder.py,def get_embedding_table(self):
data/raw/repos\official\projects\lra,transformer_encoder.py,def get_embedding_layer(self):
data/raw/repos\official\projects\lra,transformer_encoder.py,def get_config(self):
data/raw/repos\official\projects\lra,transformer_encoder.py,def transformer_layers(self):
data/raw/repos\official\projects\lra,transformer_encoder.py,def pooler_layer(self):
data/raw/repos\official\projects\lra,transformer_encoder.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\mae,optimization.py,"def _resource_apply_dense(self, grad, var, apply_state=None):"
data/raw/repos\official\projects\mae,optimization.py,"def _resource_apply_sparse(self, grad, var, indices, apply_state=None):"
data/raw/repos\official\projects\mae\modeling,masked_ae.py,"def build(self, input_shape):"
data/raw/repos\official\projects\mae\modeling,masked_ae.py,"def add_position_embed(self, patch_embeds, num_rows, num_cols):"
data/raw/repos\official\projects\mae\modeling,masked_ae.py,"def call(self, inputs, training=None, masking=None):"
data/raw/repos\official\projects\mae\modeling,masked_ae.py,def checkpoint_items(self):
data/raw/repos\official\projects\mae\modeling,vit.py,"def to_patch(images, patch_height, patch_width):"
data/raw/repos\official\projects\mae\modeling,vit.py,"def __init__(self, encoder, num_classes, **kwargs):"
data/raw/repos\official\projects\mae\modeling,vit.py,"def call(self, inputs):"
data/raw/repos\official\projects\mae\modeling,vit.py,"def __init__(self, encoder, num_classes, use_sync_bn=True, **kwargs):"
data/raw/repos\official\projects\mae\modeling,vit.py,"def call(self, inputs, training=False):"
data/raw/repos\official\projects\mae\modeling,vit.py,"def build(self, input_shape):"
data/raw/repos\official\projects\mae\modeling,vit.py,"def to_embed(self, patches):"
data/raw/repos\official\projects\mae\modeling,vit.py,"def insert_cls(self, patch_embeds):"
data/raw/repos\official\projects\mae\modeling,vit.py,"def add_position_embed(self, patch_embeds):"
data/raw/repos\official\projects\mae\modeling,vit.py,"def call(self, inputs):"
data/raw/repos\official\projects\mae\tasks,image_classification.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\mae\tasks,image_classification.py,"def build_metrics(self, training=None):"
data/raw/repos\official\projects\mae\tasks,image_classification_test.py,def _gen_fn():
data/raw/repos\official\projects\mae\tasks,image_classification_test.py,"def _as_dataset(self, *args, **kwargs):"
data/raw/repos\official\projects\mae\tasks,image_classification_test.py,def test_train_step(self):
data/raw/repos\official\projects\mae\tasks,linear_probe.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\mae\tasks,linear_probe.py,"def build_metrics(self, training=None):"
data/raw/repos\official\projects\mae\tasks,linear_probe_test.py,def _gen_fn():
data/raw/repos\official\projects\mae\tasks,linear_probe_test.py,"def _as_dataset(self, *args, **kwargs):"
data/raw/repos\official\projects\mae\tasks,linear_probe_test.py,def test_train_step(self):
data/raw/repos\official\projects\mae\tasks,masked_ae.py,"def patch_and_mask(images, labels):"
data/raw/repos\official\projects\mae\tasks,masked_ae_test.py,def _gen_fn():
data/raw/repos\official\projects\mae\tasks,masked_ae_test.py,"def _as_dataset(self, *args, **kwargs):"
data/raw/repos\official\projects\mae\tasks,masked_ae_test.py,def test_train_step(self):
data/raw/repos\official\projects\maskconver\dataloaders,maskconver_segmentation_input.py,"def _prepare_image_and_label(self, data, use_augment=False):"
data/raw/repos\official\projects\maskconver\dataloaders,maskconver_segmentation_input.py,"def _parse_train_data(self, data):"
data/raw/repos\official\projects\maskconver\dataloaders,maskconver_segmentation_input.py,def get_bbox(mask):
data/raw/repos\official\projects\maskconver\dataloaders,maskconver_segmentation_input.py,"def get_stuff_class_label(stuff_class, k=self._max_num_stuff_centers):"
data/raw/repos\official\projects\maskconver\dataloaders,maskconver_segmentation_input.py,def get_bbox_and_batch_mask(island_id):
data/raw/repos\official\projects\maskconver\dataloaders,maskconver_segmentation_input.py,"def _parse_eval_data(self, data):"
data/raw/repos\official\projects\maskconver\dataloaders,multiscale_maskconver_input.py,"def decode(self, serialized_example):"
data/raw/repos\official\projects\maskconver\dataloaders,multiscale_maskconver_input.py,"def _parse_train_data(self, data):"
data/raw/repos\official\projects\maskconver\dataloaders,multiscale_maskconver_input.py,"def _process_mask(mask, ignore_label, image_info):"
data/raw/repos\official\projects\maskconver\dataloaders,multiscale_maskconver_input.py,def get_bbox(mask):
data/raw/repos\official\projects\maskconver\dataloaders,multiscale_maskconver_input.py,def get_thing_class_label(instance_id):
data/raw/repos\official\projects\maskconver\dataloaders,multiscale_maskconver_input.py,def get_stuff_class_label(stuff_class):
data/raw/repos\official\projects\maskconver\dataloaders,multiscale_maskconver_input.py,"def _parse_eval_data(self, data):"
data/raw/repos\official\projects\maskconver\dataloaders,multiscale_maskconver_input.py,"def _process_mask(mask, ignore_label, image_info):"
data/raw/repos\official\projects\maskconver\dataloaders,panoptic_maskrcnn_input.py,"def decode(self, serialized_example):"
data/raw/repos\official\projects\maskconver\dataloaders,panoptic_maskrcnn_input.py,"def _parse_train_data(self, data):"
data/raw/repos\official\projects\maskconver\dataloaders,panoptic_maskrcnn_input.py,"def _process_mask(mask, ignore_label, image_info):"
data/raw/repos\official\projects\maskconver\dataloaders,panoptic_maskrcnn_input.py,def get_bbox(mask):
data/raw/repos\official\projects\maskconver\dataloaders,panoptic_maskrcnn_input.py,def get_thing_class_label(instance_id):
data/raw/repos\official\projects\maskconver\dataloaders,panoptic_maskrcnn_input.py,"def get_stuff_class_label(stuff_class, k=self._max_num_stuff_centers):"
data/raw/repos\official\projects\maskconver\dataloaders,panoptic_maskrcnn_input.py,def get_bbox_and_batch_mask(island_id):
data/raw/repos\official\projects\maskconver\dataloaders,panoptic_maskrcnn_input.py,"def _parse_eval_data(self, data):"
data/raw/repos\official\projects\maskconver\dataloaders,panoptic_maskrcnn_input.py,"def _process_mask(mask, ignore_label, image_info):"
data/raw/repos\official\projects\maskconver\losses,maskconver_losses.py,"def __init__(self, alpha=2.0, beta=4.0, sigmoid_clip_value=1e-4):"
data/raw/repos\official\projects\maskconver\losses,maskconver_losses.py,"def __call__(self, prediction_tensor, target_tensor, weights=1.0):"
data/raw/repos\official\projects\maskconver\losses,maskconver_losses.py,"def __call__(self, embed_outputs, matched_gt_indices, matched_gt_classes):"
data/raw/repos\official\projects\maskconver\modeling,fpn.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\maskconver\modeling,maskconver_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\maskconver\modeling,multiscale_maskconver_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\maskconver\modeling\layers,copypaste.py,"def _process_image(self, sample, aug_min, aug_max, seed=None):"
data/raw/repos\official\projects\maskconver\modeling\layers,copypaste.py,"def _process_mask(mask, ignore_label, image_info):"
data/raw/repos\official\projects\maskconver\modeling\layers,copypaste.py,"def _patch(self, one, two):"
data/raw/repos\official\projects\maskconver\modeling\layers,copypaste.py,"def _copypaste(self, one, two):"
data/raw/repos\official\projects\maskconver\modeling\layers,copypaste.py,"def _apply(self, dataset):"
data/raw/repos\official\projects\maskconver\modeling\layers,copypaste.py,"def copypaste_fn(self, is_training=True):"
data/raw/repos\official\projects\maskconver\modeling\layers,maskconver_head.py,"def build(self, input_shape: Union[tf.TensorShape, List[tf.TensorShape]]):"
data/raw/repos\official\projects\maskconver\modeling\layers,maskconver_head.py,"def call(self, inputs):"
data/raw/repos\official\projects\maskconver\modeling\layers,maskconver_head.py,def get_config(self):
data/raw/repos\official\projects\maskconver\modeling\layers,maskconver_head.py,"def from_config(cls, config):"
data/raw/repos\official\projects\maskconver\modeling\layers,multiscale_maskconver_head.py,"def build(self, input_shape: Union[tf.TensorShape, List[tf.TensorShape]]):"
data/raw/repos\official\projects\maskconver\modeling\layers,multiscale_maskconver_head.py,"def call(self, inputs):"
data/raw/repos\official\projects\maskconver\modeling\layers,multiscale_maskconver_head.py,def get_config(self):
data/raw/repos\official\projects\maskconver\modeling\layers,multiscale_maskconver_head.py,"def from_config(cls, config):"
data/raw/repos\official\projects\maskconver\modeling\layers,panoptic_segmentation_generator.py,"def __call__(self, ct_heatmaps: tf.Tensor):"
data/raw/repos\official\projects\maskconver\modeling\layers,panoptic_segmentation_generator.py,"def from_config(cls, config):"
data/raw/repos\official\projects\maskconver\modeling\layers,panoptic_segmentation_generator.py,"def _resize_and_pad_masks(self, masks, images_info):"
data/raw/repos\official\projects\maskconver\modeling\layers,panoptic_segmentation_generator.py,def get_config(self):
data/raw/repos\official\projects\maskconver\modeling\layers,panoptic_segmentation_generator.py,"def from_config(cls, config):"
data/raw/repos\official\projects\maskconver\serving,export_saved_model.py,def main(_):
data/raw/repos\official\projects\maskconver\serving,maskconver.py,def _build_model(self):
data/raw/repos\official\projects\maskconver\serving,maskconver.py,"def _build_inputs(self, image):"
data/raw/repos\official\projects\maskconver\serving,maskconver.py,"def serve(self, images):"
data/raw/repos\official\projects\maskconver\tasks,maskconver.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\projects\maskconver\tasks,maskconver.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\projects\maskconver\tasks,maskconver.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\projects\maskconver\tasks,maskconver.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\projects\maxvit,train_test.py,def setUp(self):
data/raw/repos\official\projects\maxvit,train_test.py,def test_run(self):
data/raw/repos\official\projects\maxvit\configs,image_classification_test.py,def test_maxvit_build_model(self):
data/raw/repos\official\projects\maxvit\configs,rcnn_test.py,def test_maskrcnn_configs(self):
data/raw/repos\official\projects\maxvit\configs,retinanet_test.py,def test_retinanet_configs(self):
data/raw/repos\official\projects\maxvit\configs,semantic_segmentation_test.py,"def test_semantic_segmentation_configs(self, config_name):"
data/raw/repos\official\projects\maxvit\modeling,common_ops.py,"def activation_fn(features: tf.Tensor, act_fn: str):"
data/raw/repos\official\projects\maxvit\modeling,common_ops.py,def get_act_fn(act_fn):
data/raw/repos\official\projects\maxvit\modeling,common_ops.py,"def pooling_2d(inputs, pool_type, stride, **kwargs):"
data/raw/repos\official\projects\maxvit\modeling,common_ops.py,"def drop_connect(inputs, training, survival_prob):"
data/raw/repos\official\projects\maxvit\modeling,common_ops.py,"def residual_add(residual, shortcut, survival_prob, training):"
data/raw/repos\official\projects\maxvit\modeling,common_ops.py,"def maybe_reshape_to_2d(x, height=None):"
data/raw/repos\official\projects\maxvit\modeling,common_ops.py,def maybe_reshape_to_1d(x):
data/raw/repos\official\projects\maxvit\modeling,common_ops.py,"def get_shape_from_length(length: int, height: int = 1, width: int = 1):"
data/raw/repos\official\projects\maxvit\modeling,maxvit.py,"def downsample(self, inputs, name):"
data/raw/repos\official\projects\maxvit\modeling,maxvit.py,def output_specs(self):
data/raw/repos\official\projects\maxvit\modeling,maxvit_test.py,def testBuildMaxViTWithConfig(self):
data/raw/repos\official\projects\mobilebert,distillation.py,"def build_sub_encoder(encoder, target_layer_id):"
data/raw/repos\official\projects\mobilebert,distillation.py,"def _build_pretrainer(self, pretrainer_cfg: bert.PretrainerConfig, name: str):"
data/raw/repos\official\projects\mobilebert,distillation.py,def num_stages(self):
data/raw/repos\official\projects\mobilebert,distillation.py,"def get_optimizer(self, stage_id):"
data/raw/repos\official\projects\mobilebert,distillation.py,"def get_eval_dataset(self, stage_id):"
data/raw/repos\official\projects\mobilebert,distillation.py,"def build_inputs(self, params, input_context=None):"
data/raw/repos\official\projects\mobilebert,distillation.py,def dummy_data(_):
data/raw/repos\official\projects\mobilebert,distillation.py,"def _get_distribution_losses(self, teacher, student):"
data/raw/repos\official\projects\mobilebert,distillation.py,"def _get_attention_loss(self, teacher_score, student_score):"
data/raw/repos\official\projects\mobilebert,distillation.py,"def build_metrics(self, training=None):"
data/raw/repos\official\projects\mobilebert,distillation.py,"def process_metrics(self, metrics, labels, student_pretrainer_output):"
data/raw/repos\official\projects\mobilebert,distillation.py,"def validation_step(self, inputs, model: tf_keras.Model, metrics):"
data/raw/repos\official\projects\mobilebert,distillation.py,def cur_checkpoint_items(self):
data/raw/repos\official\projects\mobilebert,distillation.py,"def initialize(self, model):"
data/raw/repos\official\projects\mobilebert,export_tfhub.py,def create_mobilebert_model(bert_config):
data/raw/repos\official\projects\mobilebert,export_tfhub.py,def main(argv):
data/raw/repos\official\projects\mobilebert,model_utils.py,"def from_dict(cls, json_object):"
data/raw/repos\official\projects\mobilebert,model_utils.py,"def from_json_file(cls, json_file):"
data/raw/repos\official\projects\mobilebert,model_utils.py,def to_dict(self):
data/raw/repos\official\projects\mobilebert,model_utils.py,def to_json_string(self):
data/raw/repos\official\projects\mobilebert,model_utils.py,def create_mobilebert_pretrainer(bert_config):
data/raw/repos\official\projects\mobilebert,run_distillation.py,"def config_override(params, flags_obj):"
data/raw/repos\official\projects\mobilebert,run_distillation.py,def get_exp_config():
data/raw/repos\official\projects\mobilebert,run_distillation.py,def main(_):
data/raw/repos\official\projects\mobilebert,tf2_model_checkpoint_converter.py,"def _bert_name_replacement(var_name, name_replacements):"
data/raw/repos\official\projects\mobilebert,tf2_model_checkpoint_converter.py,"def _has_exclude_patterns(name, exclude_patterns):"
data/raw/repos\official\projects\mobilebert,tf2_model_checkpoint_converter.py,"def _get_permutation(name, permutations):"
data/raw/repos\official\projects\mobilebert,tf2_model_checkpoint_converter.py,"def _get_new_shape(name, shape, num_heads):"
data/raw/repos\official\projects\mobilebert,tf2_model_checkpoint_converter.py,"def create_v2_checkpoint(model, src_checkpoint, output_path):"
data/raw/repos\official\projects\mobilebert,tf2_model_checkpoint_converter.py,def main(argv):
data/raw/repos\official\projects\mobilebert,utils.py,"def generate_fake_input(batch_size=1, seq_len=5, vocab_size=10000, seed=0):"
data/raw/repos\official\projects\mosaic,mosaic_tasks.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\mosaic,mosaic_tasks_test.py,"def _create_test_tfrecord(self, tfrecord_file, example, num_samples):"
data/raw/repos\official\projects\mosaic,mosaic_tasks_test.py,"def test_semantic_segmentation_task(self, test_config, is_training):"
data/raw/repos\official\projects\mosaic,train.py,def main(_):
data/raw/repos\official\projects\mosaic\modeling,mosaic_blocks_test.py,def test_multi_kernel_group_conv_block(self):
data/raw/repos\official\projects\mosaic\modeling,mosaic_blocks_test.py,def test_mosaic_encoder_block(self):
data/raw/repos\official\projects\mosaic\modeling,mosaic_blocks_test.py,def test_mosaic_encoder_block_odd_input_overlap_pool(self):
data/raw/repos\official\projects\mosaic\modeling,mosaic_blocks_test.py,def test_mosaic_encoder_non_separable_block(self):
data/raw/repos\official\projects\mosaic\modeling,mosaic_blocks_test.py,def test_mosaic_decoder_concat_merge_block(self):
data/raw/repos\official\projects\mosaic\modeling,mosaic_blocks_test.py,def test_mosaic_decoder_concat_merge_block_default_output_size(self):
data/raw/repos\official\projects\mosaic\modeling,mosaic_blocks_test.py,def test_mosaic_decoder_concat_merge_block_default_output_size_4x(self):
data/raw/repos\official\projects\mosaic\modeling,mosaic_blocks_test.py,def test_mosaic_decoder_concat_merge_block_default_output_size_4x_rec(self):
data/raw/repos\official\projects\mosaic\modeling,mosaic_blocks_test.py,def test_mosaic_decoder_sum_merge_block(self):
data/raw/repos\official\projects\mosaic\modeling,mosaic_blocks_test.py,def test_mosaic_decoder_sum_merge_block_default_output_size(self):
data/raw/repos\official\projects\mosaic\modeling,mosaic_head.py,"def from_config(cls, config: Dict[str, Any]):"
data/raw/repos\official\projects\mosaic\modeling,mosaic_head_test.py,def test_mosaic_head(self):
data/raw/repos\official\projects\mosaic\modeling,mosaic_head_test.py,def test_mosaic_head_3laterals(self):
data/raw/repos\official\projects\mosaic\modeling,mosaic_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\mosaic\modeling,mosaic_model_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\mosaic\qat\configs,mosaic_config_test.py,def test_mosaic_configs(self):
data/raw/repos\official\projects\mosaic\qat\modeling\heads,mosaic_head_test.py,def test_mosaic_head(self):
data/raw/repos\official\projects\mosaic\qat\modeling\heads,mosaic_head_test.py,def test_mosaic_head_3laterals(self):
data/raw/repos\official\projects\mosaic\qat\serving,export_saved_model.py,def main(_):
data/raw/repos\official\projects\mosaic\qat\tasks,mosaic_tasks_test.py,"def _create_test_tfrecord(self, tfrecord_file, example, num_samples):"
data/raw/repos\official\projects\mosaic\qat\tasks,mosaic_tasks_test.py,"def test_semantic_segmentation_task(self, test_config, is_training):"
data/raw/repos\official\projects\movinet,train.py,def main(_):
data/raw/repos\official\projects\movinet,train_test.py,def setUp(self):
data/raw/repos\official\projects\movinet,train_test.py,def test_train_and_evaluation_pipeline_runs(self):
data/raw/repos\official\projects\movinet\configs,movinet_test.py,"def test_video_classification_configs(self, config_name):"
data/raw/repos\official\projects\movinet\modeling,movinet.py,"def divide_resolution(shape, num_downsamples):"
data/raw/repos\official\projects\movinet\modeling,movinet.py,def head_filters(self):
data/raw/repos\official\projects\movinet\modeling,movinet.py,def conv_type(self):
data/raw/repos\official\projects\movinet\modeling,movinet.py,def get_config(self):
data/raw/repos\official\projects\movinet\modeling,movinet.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,"def normalize_tuple(value: Union[int, Tuple[int, ...]], size: int, name: str):"
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,"def call(self, inputs):"
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,def get_config(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,"def call(self, inputs):"
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,def get_config(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,"def build(self, input_shape):"
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,"def call(self, inputs):"
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,def get_config(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,def get_config(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,def get_config(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,"def build(self, input_shape):"
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,def get_config(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,def get_config(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,"def call(self, inputs):"
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,def get_config(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,"def build(self, input_shape):"
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,def get_config(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,def get_config(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers.py,def get_config(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers_test.py,def test_squeeze3d(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers_test.py,def test_mobile_conv2d(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers_test.py,def test_mobile_conv2d_bn(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers_test.py,def test_mobile_conv2d_activation(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers_test.py,def test_mobile_conv2d_temporal(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers_test.py,def test_stream_buffer(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers_test.py,def test_stream_conv_block_2plus1d(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers_test.py,def test_stream_conv_block_3d_2plus1d(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers_test.py,def test_stream_conv_block(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers_test.py,def test_stream_squeeze_excitation(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers_test.py,def test_stream_squeeze_excitation_2plus3d(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers_test.py,def test_stream_movinet_block(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers_test.py,def test_stream_movinet_block_none_se(self):
data/raw/repos\official\projects\movinet\modeling,movinet_layers_test.py,def test_stream_classifier_head(self):
data/raw/repos\official\projects\movinet\modeling,movinet_model.py,def get_config(self):
data/raw/repos\official\projects\movinet\modeling,movinet_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\movinet\modeling,movinet_model_test.py,"def test_movinet_classifier_creation(self, is_training):"
data/raw/repos\official\projects\movinet\modeling,movinet_model_test.py,def test_movinet_classifier_stream(self):
data/raw/repos\official\projects\movinet\modeling,movinet_model_test.py,def test_movinet_classifier_stream_pos_enc(self):
data/raw/repos\official\projects\movinet\modeling,movinet_model_test.py,def test_movinet_classifier_stream_pos_enc_2plus1d(self):
data/raw/repos\official\projects\movinet\modeling,movinet_model_test.py,def test_movinet_classifier_mobile(self):
data/raw/repos\official\projects\movinet\modeling,movinet_model_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\movinet\modeling,movinet_model_test.py,def test_saved_model_save_load(self):
data/raw/repos\official\projects\movinet\modeling,movinet_model_test.py,"def test_movinet_models(self, model_id, expected_params_millions):"
data/raw/repos\official\projects\movinet\modeling,movinet_model_test.py,def test_movinet_a0_2plus1d(self):
data/raw/repos\official\projects\movinet\modeling,movinet_test.py,def test_network_creation(self):
data/raw/repos\official\projects\movinet\modeling,movinet_test.py,def test_network_with_states(self):
data/raw/repos\official\projects\movinet\modeling,movinet_test.py,def test_movinet_stream(self):
data/raw/repos\official\projects\movinet\modeling,movinet_test.py,def test_movinet_stream_nse(self):
data/raw/repos\official\projects\movinet\modeling,movinet_test.py,def test_movinet_2plus1d_stream(self):
data/raw/repos\official\projects\movinet\modeling,movinet_test.py,def test_movinet_3d_2plus1d_stream(self):
data/raw/repos\official\projects\movinet\modeling,movinet_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\movinet\tools,convert_3d_2plus1d_test.py,def test_convert_model(self):
data/raw/repos\official\projects\movinet\tools,export_saved_model.py,def predict(inputs):
data/raw/repos\official\projects\movinet\tools,export_saved_model_test.py,def test_movinet_export_a0_base_with_tfhub(self):
data/raw/repos\official\projects\movinet\tools,export_saved_model_test.py,def test_movinet_export_a0_stream_with_tfhub(self):
data/raw/repos\official\projects\movinet\tools,export_saved_model_test.py,def test_movinet_export_a0_stream_with_tflite(self):
data/raw/repos\official\projects\movinet\tools,quantize_movinet.py,def _bytes_feature(value):
data/raw/repos\official\projects\movinet\tools,quantize_movinet.py,def _float_feature(value):
data/raw/repos\official\projects\movinet\tools,quantize_movinet.py,def _int64_feature(value):
data/raw/repos\official\projects\movinet\tools,quantize_movinet.py,def _build_tf_example(feature):
data/raw/repos\official\projects\movinet\tools,quantize_movinet.py,def quantize_movinet(dataset_fn):
data/raw/repos\official\projects\movinet\tools,quantize_movinet.py,def main(_):
data/raw/repos\official\projects\nhnet,configs_test.py,def test_configs(self):
data/raw/repos\official\projects\nhnet,configs_test.py,def test_nhnet_config(self):
data/raw/repos\official\projects\nhnet,decoder.py,"def build(self, unused_input_shapes):"
data/raw/repos\official\projects\nhnet,decoder.py,"def call(self, inputs, cache=None, decode_loop_step=None):"
data/raw/repos\official\projects\nhnet,decoder.py,def _to_bert_self_attention_mask(matrix):
data/raw/repos\official\projects\nhnet,decoder.py,def _to_bert_encdec_attention_mask(matrix):
data/raw/repos\official\projects\nhnet,decoder.py,"def __init__(self, bias_type, **kwargs):"
data/raw/repos\official\projects\nhnet,decoder.py,"def call(self, inputs):"
data/raw/repos\official\projects\nhnet,decoder.py,"def build(self, input_shapes):"
data/raw/repos\official\projects\nhnet,decoder.py,"def __call__(self, word_embeddings, token_type_ids=None, **kwargs):"
data/raw/repos\official\projects\nhnet,decoder.py,"def call(self, inputs):"
data/raw/repos\official\projects\nhnet,decoder.py,"def __init__(self, config, embedding_lookup=None, **kwargs):"
data/raw/repos\official\projects\nhnet,decoder.py,"def build(self, unused_input_shapes):"
data/raw/repos\official\projects\nhnet,decoder.py,"def _decoding_step_time_signal(self, target_embeds, decode_loop_step):"
data/raw/repos\official\projects\nhnet,decoder_test.py,def setUp(self):
data/raw/repos\official\projects\nhnet,decoder_test.py,def test_transformer_decoder(self):
data/raw/repos\official\projects\nhnet,decoder_test.py,def test_bert_decoder(self):
data/raw/repos\official\projects\nhnet,decoder_test.py,def test_multi_doc_decoder(self):
data/raw/repos\official\projects\nhnet,evaluation.py,"def rouge_l_fscore(logits, labels):"
data/raw/repos\official\projects\nhnet,evaluation.py,"def rouge_2_fscore(logits, labels):"
data/raw/repos\official\projects\nhnet,evaluation.py,"def bleu_score(logits, labels):"
data/raw/repos\official\projects\nhnet,evaluation.py,def test_step(inputs):
data/raw/repos\official\projects\nhnet,evaluation.py,def _test_step_fn(inputs):
data/raw/repos\official\projects\nhnet,input_pipeline.py,"def decode_record(record, name_to_features):"
data/raw/repos\official\projects\nhnet,input_pipeline.py,"def process_singledoc_dataset(dataset, batch_size, params):"
data/raw/repos\official\projects\nhnet,input_pipeline.py,def _select_data_from_record(record):
data/raw/repos\official\projects\nhnet,input_pipeline.py,"def decode_sparse_record(record, name_to_features):"
data/raw/repos\official\projects\nhnet,input_pipeline.py,"def _filter_max_length(example, max_title_length=256):"
data/raw/repos\official\projects\nhnet,input_pipeline.py,"def process_singledoc_transformer_dataset(dataset, batch_size, params):"
data/raw/repos\official\projects\nhnet,input_pipeline.py,def _select_data_from_record(record):
data/raw/repos\official\projects\nhnet,input_pipeline.py,"def multidoc_parse_spec(params, training=True):"
data/raw/repos\official\projects\nhnet,input_pipeline.py,"def process_multidoc_dataset(dataset, batch_size, params):"
data/raw/repos\official\projects\nhnet,input_pipeline.py,def _select_data_from_record(record):
data/raw/repos\official\projects\nhnet,input_pipeline.py,def _dataset_fn(ctx=None):
data/raw/repos\official\projects\nhnet,models.py,"def embedding_linear(embedding_matrix, x):"
data/raw/repos\official\projects\nhnet,models.py,"def _add_sos_to_seq(seq, start_token_id):"
data/raw/repos\official\projects\nhnet,models.py,"def remove_sos_from_seq(seq, pad_token_id):"
data/raw/repos\official\projects\nhnet,models.py,"def __init__(self, params, bert_layer, decoder_layer, name=None):"
data/raw/repos\official\projects\nhnet,models.py,def get_config(self):
data/raw/repos\official\projects\nhnet,models.py,"def _get_symbols_to_logits_fn(self, max_decode_length):"
data/raw/repos\official\projects\nhnet,models.py,"def _symbols_to_logits_fn(ids, i, cache):"
data/raw/repos\official\projects\nhnet,models.py,"def train_decode(self, decode_outputs):"
data/raw/repos\official\projects\nhnet,models.py,"def predict_decode(self, start_token_ids, cache):"
data/raw/repos\official\projects\nhnet,models.py,"def _get_logits_for_decode_ids(self, decoder_inputs, top_decoded_ids):"
data/raw/repos\official\projects\nhnet,models.py,"def _init_cache(self, batch_size):"
data/raw/repos\official\projects\nhnet,models.py,"def call(self, inputs, mode=""train""):"
data/raw/repos\official\projects\nhnet,models.py,"def __init__(self, params, bert_layer, decoder_layer, name=None):"
data/raw/repos\official\projects\nhnet,models.py,"def _expand_doc_attention_probs(self, doc_attention_probs, target_length):"
data/raw/repos\official\projects\nhnet,models.py,"def _get_symbols_to_logits_fn(self, max_decode_length):"
data/raw/repos\official\projects\nhnet,models.py,"def _symbols_to_logits_fn(ids, i, cache):"
data/raw/repos\official\projects\nhnet,models.py,"def call(self, inputs, mode=""training""):"
data/raw/repos\official\projects\nhnet,models.py,def get_bert2bert_layers(params: configs.BERT2BERTConfig):
data/raw/repos\official\projects\nhnet,models.py,def get_nhnet_layers(params: configs.NHNetConfig):
data/raw/repos\official\projects\nhnet,models_test.py,def all_strategy_combinations():
data/raw/repos\official\projects\nhnet,models_test.py,def test_step(inputs):
data/raw/repos\official\projects\nhnet,models_test.py,def _test_step_fn(inputs):
data/raw/repos\official\projects\nhnet,models_test.py,"def process_decoded_ids(predictions, end_token_id):"
data/raw/repos\official\projects\nhnet,models_test.py,def setUp(self):
data/raw/repos\official\projects\nhnet,models_test.py,def test_model_creation(self):
data/raw/repos\official\projects\nhnet,models_test.py,"def test_bert2bert_train_forward(self, distribution):"
data/raw/repos\official\projects\nhnet,models_test.py,def test_bert2bert_decoding(self):
data/raw/repos\official\projects\nhnet,models_test.py,"def test_bert2bert_eval(self, distribution):"
data/raw/repos\official\projects\nhnet,models_test.py,def setUp(self):
data/raw/repos\official\projects\nhnet,models_test.py,"def _count_params(self, layer, trainable_only=True):"
data/raw/repos\official\projects\nhnet,models_test.py,def test_create_nhnet_layers(self):
data/raw/repos\official\projects\nhnet,models_test.py,def test_checkpoint_restore(self):
data/raw/repos\official\projects\nhnet,models_test.py,"def test_nhnet_train_forward(self, distribution):"
data/raw/repos\official\projects\nhnet,models_test.py,"def test_nhnet_eval(self, distribution):"
data/raw/repos\official\projects\nhnet,optimizer.py,"def __init__(self, initial_learning_rate, hidden_size, warmup_steps):"
data/raw/repos\official\projects\nhnet,optimizer.py,"def __call__(self, global_step):"
data/raw/repos\official\projects\nhnet,optimizer.py,def get_config(self):
data/raw/repos\official\projects\nhnet,optimizer.py,def create_optimizer(params: params_dict.ParamsDict):
data/raw/repos\official\projects\nhnet,raw_data_process.py,"def transform_as_tfrecords(data_processor, filename):"
data/raw/repos\official\projects\nhnet,raw_data_process.py,def main(_):
data/raw/repos\official\projects\nhnet,raw_data_processor.py,"def read_crawled_articles(self, folder_path):"
data/raw/repos\official\projects\nhnet,raw_data_processor.py,"def generate_examples(self, input_file, output_files):"
data/raw/repos\official\projects\nhnet,raw_data_processor.py,"def normalize_url(cls, url):"
data/raw/repos\official\projects\nhnet,raw_data_processor.py,"def _get_article_content_from_json(self, file_path):"
data/raw/repos\official\projects\nhnet,raw_data_processor.py,"def _write_story_partition(self, data):"
data/raw/repos\official\projects\nhnet,raw_data_processor.py,"def _get_single_story_features(self, story_headline, articles):"
data/raw/repos\official\projects\nhnet,raw_data_processor.py,def get_text_snippet(article):
data/raw/repos\official\projects\nhnet,raw_data_processor.py,"def _add_feature_with_suffix(self, feature, suffix, story_features):"
data/raw/repos\official\projects\nhnet,raw_data_processor.py,def _create_int_feature(values):
data/raw/repos\official\projects\nhnet,raw_data_processor.py,def _create_string_feature(value):
data/raw/repos\official\projects\nhnet,trainer.py,def define_flags():
data/raw/repos\official\projects\nhnet,trainer.py,"def __init__(self, model, params):"
data/raw/repos\official\projects\nhnet,trainer.py,"def call(self, inputs, mode=""train""):"
data/raw/repos\official\projects\nhnet,trainer.py,"def train_step(self, inputs):"
data/raw/repos\official\projects\nhnet,trainer.py,"def train(params, strategy, dataset=None):"
data/raw/repos\official\projects\nhnet,trainer.py,def run():
data/raw/repos\official\projects\nhnet,trainer.py,def main(_):
data/raw/repos\official\projects\nhnet,trainer_test.py,def all_strategy_combinations():
data/raw/repos\official\projects\nhnet,trainer_test.py,def setUp(self):
data/raw/repos\official\projects\nhnet,trainer_test.py,"def test_train(self, distribution):"
data/raw/repos\official\projects\nhnet,utils.py,def get_test_params(cls=nhnet_configs.BERT2BERTConfig):
data/raw/repos\official\projects\nhnet,utils.py,def encoder_common_layers(transformer_block):
data/raw/repos\official\projects\panoptic\dataloaders,panoptic_deeplab_input.py,def _compute_gaussian_from_std(sigma):
data/raw/repos\official\projects\panoptic\dataloaders,panoptic_deeplab_input.py,"def decode(self, serialized_example):"
data/raw/repos\official\projects\panoptic\dataloaders,panoptic_deeplab_input.py,"def _resize_and_crop_mask(self, mask, image_info, is_training):"
data/raw/repos\official\projects\panoptic\dataloaders,panoptic_deeplab_input.py,"def _parse_data(self, data, is_training):"
data/raw/repos\official\projects\panoptic\dataloaders,panoptic_deeplab_input.py,"def _parse_train_data(self, data):"
data/raw/repos\official\projects\panoptic\dataloaders,panoptic_deeplab_input.py,"def _parse_eval_data(self, data):"
data/raw/repos\official\projects\panoptic\dataloaders,panoptic_deeplab_input.py,"def _encode_centers_and_offets(self, instance_mask):"
data/raw/repos\official\projects\panoptic\dataloaders,panoptic_maskrcnn_input.py,"def decode_segmentation_mask(self, parsed_tensors):"
data/raw/repos\official\projects\panoptic\dataloaders,panoptic_maskrcnn_input.py,"def decode(self, serialized_example):"
data/raw/repos\official\projects\panoptic\dataloaders,panoptic_maskrcnn_input.py,"def _parse_train_data(self, data):"
data/raw/repos\official\projects\panoptic\dataloaders,panoptic_maskrcnn_input.py,"def _parse_eval_data(self, data):"
data/raw/repos\official\projects\panoptic\dataloaders,panoptic_maskrcnn_input.py,"def _process_mask(mask, ignore_label, image_info):"
data/raw/repos\official\projects\panoptic\losses,panoptic_deeplab_losses.py,"def __call__(self, logits, labels, sample_weight=None):"
data/raw/repos\official\projects\panoptic\losses,panoptic_deeplab_losses.py,"def _compute_top_k_loss(self, loss):"
data/raw/repos\official\projects\panoptic\losses,panoptic_deeplab_losses.py,def __init__(self):
data/raw/repos\official\projects\panoptic\losses,panoptic_deeplab_losses.py,"def __call__(self, logits, labels, sample_weight=None):"
data/raw/repos\official\projects\panoptic\losses,panoptic_deeplab_losses.py,def __init__(self):
data/raw/repos\official\projects\panoptic\losses,panoptic_deeplab_losses.py,"def __call__(self, logits, labels, sample_weight=None):"
data/raw/repos\official\projects\panoptic\modeling,panoptic_deeplab_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\panoptic\modeling\heads,panoptic_deeplab_heads.py,"def build(self, input_shape: Union[tf.TensorShape, List[tf.TensorShape]]):"
data/raw/repos\official\projects\panoptic\modeling\heads,panoptic_deeplab_heads.py,def get_config(self):
data/raw/repos\official\projects\panoptic\modeling\heads,panoptic_deeplab_heads.py,"def from_config(cls, config):"
data/raw/repos\official\projects\panoptic\modeling\heads,panoptic_deeplab_heads.py,"def build(self, input_shape: Union[tf.TensorShape, List[tf.TensorShape]]):"
data/raw/repos\official\projects\panoptic\modeling\heads,panoptic_deeplab_heads.py,"def build(self, input_shape: Union[tf.TensorShape, List[tf.TensorShape]]):"
data/raw/repos\official\projects\panoptic\modeling\layers,fusion_layers.py,"def build(self, input_shape: List[tf.TensorShape]):"
data/raw/repos\official\projects\panoptic\modeling\layers,fusion_layers.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\panoptic\modeling\layers,fusion_layers.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\panoptic\modeling\layers,panoptic_deeplab_merge.py,"def _resize_and_pad_masks(self, mask, image_info):"
data/raw/repos\official\projects\panoptic\modeling\layers,panoptic_deeplab_merge.py,"def _resize_and_pad_offset_mask(self, mask, image_info):"
data/raw/repos\official\projects\panoptic\modeling\layers,panoptic_deeplab_merge.py,def get_config(self):
data/raw/repos\official\projects\panoptic\modeling\layers,panoptic_deeplab_merge.py,"def from_config(cls, config):"
data/raw/repos\official\projects\panoptic\modeling\layers,panoptic_segmentation_generator.py,"def build(self, input_shape: tf.TensorShape):"
data/raw/repos\official\projects\panoptic\modeling\layers,panoptic_segmentation_generator.py,"def _resize_and_pad_masks(self, mask, image_info):"
data/raw/repos\official\projects\panoptic\modeling\layers,paste_masks.py,"def __init__(self, align_corners: bool = False, **kwargs):"
data/raw/repos\official\projects\panoptic\modeling\layers,paste_masks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\panoptic\modeling\layers,paste_masks.py,"def _valid_coordinates(self, x_coord, y_coord):"
data/raw/repos\official\projects\panoptic\modeling\layers,paste_masks.py,"def _get_pixel(self, features, x_coord, y_coord):"
data/raw/repos\official\projects\panoptic\modeling\layers,paste_masks.py,"def call(self, inputs):"
data/raw/repos\official\projects\panoptic\modeling\layers,paste_masks.py,def get_config(self):
data/raw/repos\official\projects\panoptic\modeling\layers,paste_masks.py,"def from_config(cls, config):"
data/raw/repos\official\projects\panoptic\modeling\layers,paste_masks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\panoptic\modeling\layers,paste_masks.py,"def call(self, inputs):"
data/raw/repos\official\projects\panoptic\modeling\layers,paste_masks.py,def get_config(self):
data/raw/repos\official\projects\panoptic\modeling\layers,paste_masks.py,"def from_config(cls, config):"
data/raw/repos\official\projects\panoptic\ops,mask_ops.py,"def resize_and_rescale_offsets(input_tensor: tf.Tensor, target_size):"
data/raw/repos\official\projects\panoptic\serving,export_saved_model.py,def main(_):
data/raw/repos\official\projects\panoptic\serving,panoptic_deeplab.py,def _build_model(self):
data/raw/repos\official\projects\panoptic\serving,panoptic_deeplab.py,"def serve(self, images: tf.Tensor):"
data/raw/repos\official\projects\panoptic\serving,panoptic_maskrcnn.py,"def serve(self, images: tf.Tensor):"
data/raw/repos\official\projects\panoptic\tasks,panoptic_deeplab.py,def build_model(self):
data/raw/repos\official\projects\panoptic\tasks,panoptic_deeplab.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\panoptic\tasks,panoptic_deeplab.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\projects\panoptic\tasks,panoptic_deeplab.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\projects\panoptic\tasks,panoptic_maskrcnn.py,def _get_checkpoint_path(checkpoint_dir_or_file):
data/raw/repos\official\projects\panoptic\tasks,panoptic_maskrcnn.py,"def _update_metrics(self, labels, outputs, logs):"
data/raw/repos\official\projects\panoptic\tasks,panoptic_maskrcnn.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\projects\panoptic\tasks,panoptic_maskrcnn.py,"def _reduce_semantic_metrics(self, logs: Dict[str, Any]):"
data/raw/repos\official\projects\panoptic\tasks,panoptic_maskrcnn.py,"def _reduce_panoptic_metrics(self, logs: Dict[str, Any]):"
data/raw/repos\official\projects\perceiver\configs,perceiver_test.py,def test_word_piece_pretrain_config(self):
data/raw/repos\official\projects\perceiver\configs,perceiver_test.py,def test_word_piece_fine_tune_config(self):
data/raw/repos\official\projects\perceiver\configs,perceiver_test.py,def test_perceiver_sentence_prediction_returns_valid_learning_rate(self):
data/raw/repos\official\projects\perceiver\configs,perceiver_test.py,def test_word_piece_raw_sentence_fine_tune_config(self):
data/raw/repos\official\projects\perceiver\configs,perceiver_test.py,def test_perceiver_raw_sentence_prediction_returns_valid_learning_rate(self):
data/raw/repos\official\projects\perceiver\modeling\layers,decoder.py,"def build(self, input_shape):"
data/raw/repos\official\projects\perceiver\modeling\layers,decoder.py,"def call(self, inputs, training=None, query_mask=None):"
data/raw/repos\official\projects\perceiver\modeling\layers,decoder_test.py,def test_layer_creation(self):
data/raw/repos\official\projects\perceiver\modeling\layers,decoder_test.py,def test_layer_creation_with_mask(self):
data/raw/repos\official\projects\perceiver\modeling\layers,decoder_test.py,def test_layer_invocation(self):
data/raw/repos\official\projects\perceiver\modeling\layers,encoder.py,"def build(self, input_shape):"
data/raw/repos\official\projects\perceiver\modeling\layers,encoder.py,"def call(self, inputs, input_mask=None, training=None):"
data/raw/repos\official\projects\perceiver\modeling\layers,encoder_test.py,def test_layer_creation(self):
data/raw/repos\official\projects\perceiver\modeling\layers,encoder_test.py,def test_layer_creation_with_mask(self):
data/raw/repos\official\projects\perceiver\modeling\layers,encoder_test.py,def test_layer_invocation(self):
data/raw/repos\official\projects\perceiver\modeling\layers,encoder_test.py,def test_self_attention_widening_factor(self):
data/raw/repos\official\projects\perceiver\modeling\layers,encoder_test.py,def test_cross_attention_widening_factor(self):
data/raw/repos\official\projects\perceiver\modeling\layers,encoder_test.py,def test_self_attention_num_heads(self):
data/raw/repos\official\projects\perceiver\modeling\layers,encoder_test.py,def test_cross_attention_num_heads(self):
data/raw/repos\official\projects\perceiver\modeling\layers,encoder_test.py,def test_num_self_attends_per_block(self):
data/raw/repos\official\projects\perceiver\modeling\layers,utils.py,"def make_cross_attention_mask(query_mask, kv_mask):"
data/raw/repos\official\projects\perceiver\modeling\layers,utils_test.py,def test_output_last_dim_is_same_as_input_last_dim(self):
data/raw/repos\official\projects\perceiver\modeling\layers,utils_test.py,def test_value_dim_is_same_as_input_last_dim_div_num_heads(self):
data/raw/repos\official\projects\perceiver\modeling\layers,utils_test.py,def test_1(self):
data/raw/repos\official\projects\perceiver\modeling\models,classifier.py,"def call(self, inputs):"
data/raw/repos\official\projects\perceiver\modeling\models,classifier.py,def checkpoint_items(self):
data/raw/repos\official\projects\perceiver\modeling\models,classifier.py,def get_config(self):
data/raw/repos\official\projects\perceiver\modeling\models,classifier.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\perceiver\modeling\models,classifier_test.py,"def test_perceiver_trainer(self, num_classes):"
data/raw/repos\official\projects\perceiver\modeling\models,classifier_test.py,"def test_perceiver_trainer_tensor_call(self, num_classes, use_custom_head):"
data/raw/repos\official\projects\perceiver\modeling\models,classifier_test.py,"def test_serialize_deserialize(self, cls_head):"
data/raw/repos\official\projects\perceiver\modeling\models,pretrainer.py,"def call(self, inputs):"
data/raw/repos\official\projects\perceiver\modeling\models,pretrainer.py,def checkpoint_items(self):
data/raw/repos\official\projects\perceiver\modeling\models,pretrainer.py,def get_config(self):
data/raw/repos\official\projects\perceiver\modeling\models,pretrainer.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\perceiver\modeling\models,pretrainer_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\perceiver\modeling\networks,positional_decoder.py,"def _create_decoder_query(self, position_encoding_intializer_stddev):"
data/raw/repos\official\projects\perceiver\modeling\networks,positional_decoder.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\perceiver\modeling\networks,positional_decoder_test.py,def test_dict_outputs_network_creation(self):
data/raw/repos\official\projects\perceiver\modeling\networks,positional_decoder_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\perceiver\modeling\networks,sequence_encoder_test.py,def test_dict_outputs_network_creation(self):
data/raw/repos\official\projects\perceiver\modeling\networks,sequence_encoder_test.py,def test_dict_outputs_network_invocation(self):
data/raw/repos\official\projects\perceiver\modeling\networks,sequence_encoder_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\perceiver\tasks,pretrain.py,"def build_model(self, params=None):"
data/raw/repos\official\projects\perceiver\tasks,pretrain_test.py,def _gen_fn():
data/raw/repos\official\projects\perceiver\tasks,pretrain_test.py,"def _as_dataset(self, *args, **kwargs):"
data/raw/repos\official\projects\perceiver\tasks,pretrain_test.py,"def _fake_build_inputs(self, params, input_context=None):"
data/raw/repos\official\projects\perceiver\tasks,pretrain_test.py,def dummy_data(_):
data/raw/repos\official\projects\perceiver\tasks,pretrain_test.py,def setUp(self):
data/raw/repos\official\projects\perceiver\tasks,pretrain_test.py,def test_task(self):
data/raw/repos\official\projects\perceiver\tasks,pretrain_test.py,def test_train_step(self):
data/raw/repos\official\projects\perceiver\tasks,sentence_prediction.py,def build_model(self):
data/raw/repos\official\projects\perceiver\tasks,sentence_prediction_test.py,"def _create_fake_dataset(output_path, seq_length, num_classes, num_examples):"
data/raw/repos\official\projects\perceiver\tasks,sentence_prediction_test.py,def create_int_feature(values):
data/raw/repos\official\projects\perceiver\tasks,sentence_prediction_test.py,def create_float_feature(values):
data/raw/repos\official\projects\perceiver\tasks,sentence_prediction_test.py,def setUp(self):
data/raw/repos\official\projects\perceiver\tasks,sentence_prediction_test.py,"def get_model_config(self, num_classes):"
data/raw/repos\official\projects\perceiver\tasks,sentence_prediction_test.py,"def _run_task(self, config):"
data/raw/repos\official\projects\perceiver\tasks,sentence_prediction_test.py,def test_task(self):
data/raw/repos\official\projects\perceiver\tasks,sentence_prediction_test.py,"def test_np_metrics(self, metric_type, num_classes):"
data/raw/repos\official\projects\perceiver\tasks,sentence_prediction_test.py,def test_np_metrics_cola_partial_batch(self):
data/raw/repos\official\projects\perceiver\tasks,sentence_prediction_test.py,"def test_prediction(self, num_classes):"
data/raw/repos\official\projects\pix2seq,train.py,def main(_):
data/raw/repos\official\projects\pix2seq,utils.py,"def seq_to_bbox(seq, quantization_bins, seq_format='yxyx_name'):"
data/raw/repos\official\projects\pix2seq,utils.py,"def quantize(coordinates, bins):"
data/raw/repos\official\projects\pix2seq,utils.py,"def dequantize(boxes, bins):"
data/raw/repos\official\projects\pix2seq,utils.py,def truncation_bbox(bbox):
data/raw/repos\official\projects\pix2seq,utils.py,"def jitter_bbox(bbox, min_range=0.0, max_range=0.05, truncation=True):"
data/raw/repos\official\projects\pix2seq,utils.py,"def shift_bbox(bbox, truncation=True):"
data/raw/repos\official\projects\pix2seq,utils.py,"def random_bbox(n, max_size=1.0, truncation=True):"
data/raw/repos\official\projects\pix2seq,utils.py,"def augment_bbox(bbox, bbox_label, max_jitter, n_noise_bbox, mix_rate=0.0):"
data/raw/repos\official\projects\pix2seq,utils.py,"def inject_noise_bbox(boxes, classes, max_instances_per_image):"
data/raw/repos\official\projects\pix2seq,utils.py,"def clip_or_pad_to_max_len(data, max_len, dim):"
data/raw/repos\official\projects\pix2seq,utils.py,def shape_as_list(t):
data/raw/repos\official\projects\pix2seq,utils.py,"def reorder_object_instances(boxes, classes, order):"
data/raw/repos\official\projects\pix2seq,utils.py,"def scale_points(points, scale):"
data/raw/repos\official\projects\pix2seq,utils.py,"def preserve_reserved_tokens(points, points_orig):"
data/raw/repos\official\projects\pix2seq,utils.py,"def replace_reserved_tokens(seq, ref_seq, replacements):"
data/raw/repos\official\projects\pix2seq,utils.py,def tf_float32(t):
data/raw/repos\official\projects\pix2seq\configs,pix2seq_test.py,"def test_pix2seq_configs(self, config_name):"
data/raw/repos\official\projects\pix2seq\dataloaders,pix2seq_input.py,"def _parse_train_data(self, data):"
data/raw/repos\official\projects\pix2seq\dataloaders,pix2seq_input.py,"def _parse_eval_data(self, data):"
data/raw/repos\official\projects\pix2seq\dataloaders,pix2seq_input_test.py,def _bytes_feature(value):
data/raw/repos\official\projects\pix2seq\dataloaders,pix2seq_input_test.py,def _float_feature(value):
data/raw/repos\official\projects\pix2seq\dataloaders,pix2seq_input_test.py,def _int64_feature(value):
data/raw/repos\official\projects\pix2seq\dataloaders,pix2seq_input_test.py,def fake_seq_example():
data/raw/repos\official\projects\pix2seq\dataloaders,pix2seq_input_test.py,def test_image_input_train(self):
data/raw/repos\official\projects\pix2seq\dataloaders,pix2seq_input_test.py,def test_image_input_eval(self):
data/raw/repos\official\projects\pix2seq\modeling,pix2seq_model.py,def get_shape(x):
data/raw/repos\official\projects\pix2seq\modeling,pix2seq_model.py,def get_variable_initializer(name=None):
data/raw/repos\official\projects\pix2seq\modeling,pix2seq_model.py,"def get_ar_mask(seq_len, dtype=tf.float32):"
data/raw/repos\official\projects\pix2seq\modeling,pix2seq_model.py,def get_config(self):
data/raw/repos\official\projects\pix2seq\modeling,pix2seq_model.py,"def from_config(cls, config):"
data/raw/repos\official\projects\pix2seq\modeling,pix2seq_model.py,"def cond(step, caches, tokens, logits):"
data/raw/repos\official\projects\pix2seq\modeling,pix2seq_model.py,def get_config(self):
data/raw/repos\official\projects\pix2seq\modeling,pix2seq_model.py,"def call(self, inputs: dict[str, tf.Tensor], training: bool = None):"
data/raw/repos\official\projects\pix2seq\modeling,pix2seq_model.py,"def loop_body(step, caches, tokens, logits, is_prompt=False):"
data/raw/repos\official\projects\pix2seq\modeling,pix2seq_model_test.py,"def test_forward(self, num_backbones: int):"
data/raw/repos\official\projects\pix2seq\modeling,pix2seq_model_test.py,"def test_forward_infer_teacher_forcing(self, num_backbones: int):"
data/raw/repos\official\projects\pix2seq\modeling,pix2seq_model_test.py,"def test_forward_infer(self, num_backbones: int):"
data/raw/repos\official\projects\pix2seq\modeling,pix2seq_model_test.py,def test_forward_infer_with_early_stopping(self):
data/raw/repos\official\projects\pix2seq\modeling,pix2seq_model_test.py,def test_forward_infer_with_long_prompt(self):
data/raw/repos\official\projects\pix2seq\modeling,pix2seq_model_test.py,def test_cond_fn_without_early_stopping(self):
data/raw/repos\official\projects\pix2seq\modeling,pix2seq_model_test.py,def test_cond_fn_with_early_stopping(self):
data/raw/repos\official\projects\pix2seq\modeling,pix2seq_model_test.py,def test_cond_fn_with_early_stopping_keep_inference_to_end(self):
data/raw/repos\official\projects\pix2seq\modeling,transformer.py,"def call(self, x, mask, training, ret_list=False):"
data/raw/repos\official\projects\pix2seq\modeling,transformer.py,def get_config(self):
data/raw/repos\official\projects\pix2seq\modeling,transformer.py,"def call(self, x, mask, training):"
data/raw/repos\official\projects\pix2seq\modeling,transformer.py,def get_config(self):
data/raw/repos\official\projects\pix2seq\modeling,transformer.py,def suffix_id(i):
data/raw/repos\official\projects\pix2seq\modeling,transformer.py,"def __init__(self, drop_rate=0.0, **kwargs):"
data/raw/repos\official\projects\pix2seq\modeling,transformer.py,"def call(self, x, training=False):"
data/raw/repos\official\projects\pix2seq\modeling,transformer.py,def get_config(self):
data/raw/repos\official\projects\pix2seq\modeling,transformer.py,"def call(self, x, training):"
data/raw/repos\official\projects\pix2seq\modeling,transformer.py,def get_config(self):
data/raw/repos\official\projects\pix2seq\modeling,transformer.py,"def call(self, x, training, ret_list=False):"
data/raw/repos\official\projects\pix2seq\modeling,transformer.py,def get_config(self):
data/raw/repos\official\projects\pix2seq\modeling,transformer.py,"def call(self, x, enc, cache, mask_self, mask_cross, training):"
data/raw/repos\official\projects\pix2seq\modeling,transformer.py,def get_config(self):
data/raw/repos\official\projects\pix2seq\modeling,transformer.py,"def call(self, x, enc, caches, mask_self, mask_cross, training):"
data/raw/repos\official\projects\pix2seq\modeling,transformer.py,def get_config(self):
data/raw/repos\official\projects\pix2seq\modeling,transformer_test.py,def test_transformer_encoder(self):
data/raw/repos\official\projects\pix2seq\modeling,transformer_test.py,def test_transformer_encoder_get_config(self):
data/raw/repos\official\projects\pix2seq\modeling,transformer_test.py,def test_transformer_decoder_layer(self):
data/raw/repos\official\projects\pix2seq\modeling,transformer_test.py,def test_transformer_decoder_layer_get_config(self):
data/raw/repos\official\projects\pix2seq\modeling,transformer_test.py,def test_transformer_decoder(self):
data/raw/repos\official\projects\pix2seq\modeling,transformer_test.py,def test_transformer_decoder_get_config(self):
data/raw/repos\official\projects\pix2seq\tasks,pix2seq_task.py,def build_model(self):
data/raw/repos\official\projects\pix2seq\tasks,pix2seq_task.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\pix2seq\tasks,pix2seq_task.py,"def build_losses(self, outputs, labels, aux_losses=None):"
data/raw/repos\official\projects\pix2seq\tasks,pix2seq_task.py,"def build_metrics(self, training=True):"
data/raw/repos\official\projects\pix2seq\tasks,pix2seq_task.py,"def train_step(self, inputs, model, optimizer, metrics=None):"
data/raw/repos\official\projects\pix2seq\tasks,pix2seq_task.py,"def validation_step(self, inputs, model, metrics=None):"
data/raw/repos\official\projects\pix2seq\tasks,pix2seq_task.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\projects\pix2seq\tasks,pix2seq_task.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\projects\pixel,data_loader.py,"def __init__(self, params):"
data/raw/repos\official\projects\pixel,data_loader.py,def name_to_features_spec(self):
data/raw/repos\official\projects\pixel,data_loader.py,"def _decode(self, record: tf.Tensor):"
data/raw/repos\official\projects\pixel,data_loader.py,"def _parse(self, record: Mapping[str, tf.Tensor]):"
data/raw/repos\official\projects\pixel,data_loader.py,"def load(self, input_context: Optional[tf.distribute.InputContext] = None):"
data/raw/repos\official\projects\pixel\modeling,pixel.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\pixel\modeling,pixel.py,"def build(self, input_shape):"
data/raw/repos\official\projects\pixel\modeling,pixel.py,"def to_embed(self, patches):"
data/raw/repos\official\projects\pixel\modeling,pixel.py,"def insert_cls(self, patch_embeds):"
data/raw/repos\official\projects\pixel\modeling,pixel.py,"def call(self, inputs):"
data/raw/repos\official\projects\pixel\modeling,pixel.py,"def __init__(self, encoder, num_classes, **kwargs):"
data/raw/repos\official\projects\pixel\modeling,pixel.py,"def call(self, inputs):"
data/raw/repos\official\projects\pixel\modeling,pixel.py,"def __init__(self, encoder, num_classes, num_filters, **kwargs):"
data/raw/repos\official\projects\pixel\modeling,pixel.py,"def call(self, inputs, training=False):"
data/raw/repos\official\projects\pixel\tasks,classification.py,"def build_inputs(self, params, input_context=None):"
data/raw/repos\official\projects\pixel\tasks,classification.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\pixel\tasks,classification.py,"def build_metrics(self, training=None):"
data/raw/repos\official\projects\pixel\tasks,classification.py,"def process_metrics(self, metrics, labels, model_outputs):"
data/raw/repos\official\projects\pixel\tasks,classification.py,"def process_compiled_metrics(self, compiled_metrics, labels, model_outputs):"
data/raw/repos\official\projects\pixel\tasks,classification.py,"def validation_step(self, inputs, model: tf_keras.Model, metrics=None):"
data/raw/repos\official\projects\pixel\tasks,classification.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\projects\pixel\tasks,classification.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\projects\pixel\utils,convert_numpy_weights_to_tf.py,"def convert(vit_encoder, hf_model_param_dict):"
data/raw/repos\official\projects\pointpillars,train.py,"def _check_if_resumed_job(model_dir: str, manual_checkpoint_path: str):"
data/raw/repos\official\projects\pointpillars,train.py,def main(_):
data/raw/repos\official\projects\pointpillars\configs,pointpillars.py,"def __post_init__(self, height: int, width: int):"
data/raw/repos\official\projects\pointpillars\configs,pointpillars.py,def _default_heads():
data/raw/repos\official\projects\pointpillars\configs,pointpillars_test.py,"def test_configs(self, config_name):"
data/raw/repos\official\projects\pointpillars\dataloaders,parsers_test.py,"def test_shape(self, classes, num_boxes, max_num_boxes, is_training):"
data/raw/repos\official\projects\pointpillars\modeling,backbones_test.py,"def test_network_creation(self, input_shape, min_level, max_level):"
data/raw/repos\official\projects\pointpillars\modeling,backbones_test.py,def test_serialization(self):
data/raw/repos\official\projects\pointpillars\modeling,decoders_test.py,"def test_network_creation(self, input_shape, min_level, max_level):"
data/raw/repos\official\projects\pointpillars\modeling,decoders_test.py,def test_serialization(self):
data/raw/repos\official\projects\pointpillars\modeling,factory_test.py,"def test_builder(self, train_batch_size, eval_batch_size):"
data/raw/repos\official\projects\pointpillars\modeling,featurizers.py,"def build(self, input_specs: List[tf.TensorShape]):"
data/raw/repos\official\projects\pointpillars\modeling,featurizers_test.py,def test_serialization(self):
data/raw/repos\official\projects\pointpillars\modeling,heads.py,"def build(self, input_specs: Mapping[str, tf.TensorShape]):"
data/raw/repos\official\projects\pointpillars\modeling,heads_test.py,def test_serialization(self):
data/raw/repos\official\projects\pointpillars\modeling,layers.py,"def build(self, input_shape: tf.TensorShape):"
data/raw/repos\official\projects\pointpillars\modeling,layers_test.py,def test_serialization(self):
data/raw/repos\official\projects\pointpillars\modeling,models_test.py,"def test_all(self, strategy, training):"
data/raw/repos\official\projects\pointpillars\tasks,pointpillars.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\pointpillars\tasks,pointpillars_test.py,def _mock_inputs(model_config):
data/raw/repos\official\projects\pointpillars\tasks,pointpillars_test.py,"def test_train_and_eval(self, is_training):"
data/raw/repos\official\projects\pointpillars\tools,export_model.py,def main(_):
data/raw/repos\official\projects\pointpillars\tools,process_wod.py,"def count_examples(examples: beam.PCollection, dst_path: str):"
data/raw/repos\official\projects\pointpillars\tools,process_wod.py,"def write_dataset(examples: beam.PCollection, dst_path: str):"
data/raw/repos\official\projects\pointpillars\tools,process_wod.py,def main(_):
data/raw/repos\official\projects\pointpillars\utils,model_exporter.py,"def __init__(self, params: cfg.ExperimentConfig, batch_size: int):"
data/raw/repos\official\projects\pointpillars\utils,utils.py,"def assert_shape(x: np.ndarray, shape: List[int]):"
data/raw/repos\official\projects\pointpillars\utils,utils.py,def assert_channels_last():
data/raw/repos\official\projects\pointpillars\utils,utils_test.py,"def test_pad_or_trim_to_shape(self, original_shape, expected_shape):"
data/raw/repos\official\projects\pointpillars\utils,utils_test.py,"def test_clip_boxes(self, boxes, height, width):"
data/raw/repos\official\projects\pointpillars\utils,utils_test.py,def test_get_vehicle_xy(self):
data/raw/repos\official\projects\pointpillars\utils,utils_test.py,"def test_frame_to_image_and_image_to_frame(self, frame_xy):"
data/raw/repos\official\projects\pointpillars\utils,utils_test.py,"def test_frame_to_image_boxes_and_image_to_frame_boxes(self, frame_boxes):"
data/raw/repos\official\projects\pointpillars\utils,utils_test.py,def test_generate_anchors(self):
data/raw/repos\official\projects\pointpillars\utils,wod_detection_evaluator.py,"def __init__(self, model_config, config=None):"
data/raw/repos\official\projects\pointpillars\utils,wod_detection_evaluator.py,"def _get_box(self, box2d: tf.Tensor, attributes: Mapping[str, tf.Tensor]):"
data/raw/repos\official\projects\pointpillars\utils,wod_detection_evaluator.py,"def __init__(self, image_config: Any, config: Any = None):"
data/raw/repos\official\projects\pruning\configs,image_classification_test.py,"def test_image_classification_configs(self, config_name):"
data/raw/repos\official\projects\pruning\tasks,image_classification.py,def get_prunable_weights():
data/raw/repos\official\projects\pruning\tasks,image_classification.py,def collect_prunable_layers(model):
data/raw/repos\official\projects\pruning\tasks,image_classification_test.py,"def _validate_model_pruned(self, model, config_name):"
data/raw/repos\official\projects\pruning\tasks,image_classification_test.py,"def _check_2x4_sparsity(self, model):"
data/raw/repos\official\projects\pruning\tasks,image_classification_test.py,def _is_pruned_2_by_4(weights):
data/raw/repos\official\projects\pruning\tasks,image_classification_test.py,"def _validate_metrics(self, logs, metrics):"
data/raw/repos\official\projects\pruning\tasks,image_classification_test.py,"def testTaskWithUnstructuredSparsity(self, config_name):"
data/raw/repos\official\projects\pruning\tasks,image_classification_test.py,"def testTaskWithStructuredSparsity(self, config_name):"
data/raw/repos\official\projects\qat\nlp,pretrained_checkpoint_converter.py,"def _build_model(experiment, config_file, params_override):"
data/raw/repos\official\projects\qat\nlp,pretrained_checkpoint_converter.py,"def _set_weights_to_qat(model_from, model_to):"
data/raw/repos\official\projects\qat\nlp,pretrained_checkpoint_converter.py,def main(_):
data/raw/repos\official\projects\qat\nlp,train.py,def main(_):
data/raw/repos\official\projects\qat\nlp\modeling\layers,mobile_bert_layers.py,"def _quantized_multi_head_attention(*args, **kwargs):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,mobile_bert_layers.py,"def _quantized_einsum_dense(*args, **kwargs):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,mobile_bert_layers.py,def _output_quantize(layer):
data/raw/repos\official\projects\qat\nlp\modeling\layers,mobile_bert_layers.py,"def __init__(self, name=None):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,mobile_bert_layers.py,"def build(self, shape):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,mobile_bert_layers.py,"def call(self, feature):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,mobile_bert_layers.py,"def _get_norm_layer(normalization_type='no_norm', name=None):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,mobile_bert_layers.py,"def build(self, input_shape):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,mobile_bert_layers.py,def get_config(self):
data/raw/repos\official\projects\qat\nlp\modeling\layers,mobile_bert_layers.py,"def call(self, input_ids, token_type_ids=None, training=None):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,mobile_bert_layers.py,def get_config(self):
data/raw/repos\official\projects\qat\nlp\modeling\layers,multi_head_attention.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,multi_head_attention.py,"def _build_from_signature(self, *args, **kwargs):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,transformer_encoder_block.py,"def _quantized_multi_head_attention(*args, **kwargs):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,transformer_encoder_block.py,"def _quantized_einsum_dense(*args, **kwargs):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,transformer_encoder_block.py,def _output_quantize(layer):
data/raw/repos\official\projects\qat\nlp\modeling\layers,transformer_encoder_block.py,"def build(self, input_shape):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,transformer_encoder_block.py,def get_config(self):
data/raw/repos\official\projects\qat\nlp\modeling\layers,transformer_encoder_block.py,"def call(self, inputs, output_range: Optional[tf.Tensor] = None):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,transformer_encoder_block_test.py,def tearDown(self):
data/raw/repos\official\projects\qat\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_layer_creation(self, transformer_cls):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_layer_creation_with_mask(self, transformer_cls):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_layer_invocation(self, transformer_cls):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_layer_invocation_with_mask(self, transformer_cls):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_layer_output_range(self, transformer_cls):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_layer_output_range_without_mask(self, transformer_cls):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_layer_output_range_with_pre_norm(self, transformer_cls):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_transform_with_initializer(self, transformer_cls):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_dynamic_layer_sequence(self, transformer_cls):"
data/raw/repos\official\projects\qat\nlp\modeling\layers,transformer_encoder_block_test.py,"def test_separate_qkv(self, transformer_cls):"
data/raw/repos\official\projects\qat\nlp\modeling\models,bert_span_labeler.py,def checkpoint_items(self):
data/raw/repos\official\projects\qat\nlp\modeling\models,bert_span_labeler.py,def get_config(self):
data/raw/repos\official\projects\qat\nlp\modeling\models,bert_span_labeler.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\qat\nlp\modeling\networks,span_labeling.py,"def _apply_paragraph_mask(logits, paragraph_mask):"
data/raw/repos\official\projects\qat\nlp\modeling\networks,span_labeling.py,"def _split_output_tensor(self, tensor):"
data/raw/repos\official\projects\qat\nlp\modeling\networks,span_labeling.py,def get_config(self):
data/raw/repos\official\projects\qat\nlp\modeling\networks,span_labeling.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def _add_range_weights(self, layer, name, per_axis=False, tensor_shape=None):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def __call__(self, inputs, training, weights, **kwargs):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,def get_config(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def build(self, tensor_shape, name, layer):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def __eq__(self, other):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def __ne__(self, other):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def get_weights_and_quantizers(self, layer):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def get_activations_and_quantizers(self, layer):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def set_quantize_weights(self, layer, quantize_weights):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def set_quantize_activations(self, layer, quantize_activations):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def get_output_quantizers(self, layer):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,def get_config(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,def __init__(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def _get_einsum_dense_layers(self, layer):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def get_weights_and_quantizers(self, layer):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def get_activations_and_quantizers(self, layer):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def set_quantize_weights(self, layer, quantize_weights):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def set_quantize_activations(self, layer, quantize_activations):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def get_output_quantizers(self, layer):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,def get_config(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def _assert_activation_layer(self, layer: Layer):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def get_weights_and_quantizers(self, layer):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def get_activations_and_quantizers(self, layer):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def set_quantize_weights(self, layer, quantize_weights):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def set_quantize_activations(self, layer, quantize_activations):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def get_output_quantizers(self, layer):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,def get_config(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def __init__(self, weight_attrs, activation_attrs, quantize_output):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def get_weights_and_quantizers(self, layer):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def get_activations_and_quantizers(self, layer):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def set_quantize_weights(self, layer, quantize_weights):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def set_quantize_activations(self, layer, quantize_activations):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def get_output_quantizers(self, layer):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def from_config(cls, config):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,def get_config(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def __eq__(self, other):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,"def __ne__(self, other):"
data/raw/repos\official\projects\qat\nlp\quantization,configs.py,def _types_dict():
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,"def _convert_list(self, list_of_tuples):"
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,"def _assert_weight_quantizers(self, quantizer_list):"
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,"def _assert_activation_quantizers(self, quantizer_list):"
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,"def _assert_kernel_equality(self, a, b):"
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,def _simple_dense_layer(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,def testGetsQuantizeWeightsAndQuantizers(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,def testGetsQuantizeActivationsAndQuantizers(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,def testSetsQuantizeWeights(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,def testSetsQuantizeActivations(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,def testSetsQuantizeWeights_ErrorOnWrongNumberOfWeights(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,def testSetsQuantizeWeights_ErrorOnWrongShapeOfWeight(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,def testSetsQuantizeActivations_ErrorOnWrongNumberOfActivations(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,def testGetsResultQuantizers_ReturnsQuantizer(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,def testGetsResultQuantizers_EmptyWhenFalse(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,def testSerialization(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,def _simple_dense_layer(self):
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,"def _get_quant_params(self, quantizer_type):"
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,"def _test_quantizer(self, quantizer):"
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,"def testQuantizer(self, quantizer_type):"
data/raw/repos\official\projects\qat\nlp\quantization,configs_test.py,"def testSerialization(self, quantizer_type):"
data/raw/repos\official\projects\qat\nlp\quantization,helper.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\projects\qat\nlp\quantization,helper.py,def _all_value_quantizer(self):
data/raw/repos\official\projects\qat\nlp\quantization,helper.py,def _moving_average_quantizer(self):
data/raw/repos\official\projects\qat\nlp\quantization,helper.py,"def _add_quantizer(self, name, all_value_quantizer=False):"
data/raw/repos\official\projects\qat\nlp\quantization,helper.py,"def _apply_quantizer(self, name, inputs, training, **kwargs):"
data/raw/repos\official\projects\qat\nlp\quantization,helper.py,def _build_quantizer_vars(self):
data/raw/repos\official\projects\qat\nlp\quantization,schemes.py,def __init__(self):
data/raw/repos\official\projects\qat\nlp\quantization,schemes.py,"def _is_quantization_weight_name(self, name):"
data/raw/repos\official\projects\qat\nlp\quantization,schemes.py,def __init__(self):
data/raw/repos\official\projects\qat\nlp\quantization,schemes.py,def __init__(self):
data/raw/repos\official\projects\qat\nlp\quantization,schemes.py,"def apply(self, model, layer_quantize_map):"
data/raw/repos\official\projects\qat\nlp\quantization,schemes.py,def get_layout_transformer(self):
data/raw/repos\official\projects\qat\nlp\quantization,wrappers.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\projects\qat\nlp\quantization,wrappers.py,"def build(self, input_shape):"
data/raw/repos\official\projects\qat\nlp\tasks,question_answering.py,def build_model(self):
data/raw/repos\official\projects\qat\nlp\tasks,question_answering.py,def quantize_annotate_layer(layer):
data/raw/repos\official\projects\qat\nlp\tasks,question_answering_test.py,def setUp(self):
data/raw/repos\official\projects\qat\nlp\tasks,question_answering_test.py,"def _get_validation_data_config(self, version_2_with_negative=False):"
data/raw/repos\official\projects\qat\nlp\tasks,question_answering_test.py,"def test_predict(self, version_2_with_negative):"
data/raw/repos\official\projects\qat\vision\configs,image_classification_test.py,"def test_image_classification_configs(self, config_name):"
data/raw/repos\official\projects\qat\vision\configs,retinanet_test.py,"def test_retinanet_configs(self, config_name):"
data/raw/repos\official\projects\qat\vision\configs,semantic_segmentation_test.py,"def test_semantic_segmentation_configs(self, config_name):"
data/raw/repos\official\projects\qat\vision\modeling,factory.py,def apply_quantization_to_dense(layer):
data/raw/repos\official\projects\qat\vision\modeling,factory.py,def _clone_function_for_fpn(layer):
data/raw/repos\official\projects\qat\vision\modeling,factory.py,def apply_quantization_to_layers(layer):
data/raw/repos\official\projects\qat\vision\modeling,factory_test.py,"def test_builder(self, backbone_type, model_id, input_size, weight_decay):"
data/raw/repos\official\projects\qat\vision\modeling,factory_test.py,"def test_deeplabv3_builder(self, backbone_type, input_size, weight_decay):"
data/raw/repos\official\projects\qat\vision\modeling,factory_test.py,"def test_deeplabv3plus_builder(self, backbone_type, input_size, weight_decay):"
data/raw/repos\official\projects\qat\vision\modeling,segmentation_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\qat\vision\modeling\heads,dense_prediction_heads.py,"def build(self, input_shape: Union[tf.TensorShape, List[tf.TensorShape]]):"
data/raw/repos\official\projects\qat\vision\modeling\heads,dense_prediction_heads.py,"def call(self, features: Mapping[str, tf.Tensor]):"
data/raw/repos\official\projects\qat\vision\modeling\heads,dense_prediction_heads.py,"def build_prediction_tower(atttribute_name, features, feature_level):"
data/raw/repos\official\projects\qat\vision\modeling\heads,dense_prediction_heads.py,def get_config(self):
data/raw/repos\official\projects\qat\vision\modeling\heads,dense_prediction_heads.py,"def from_config(cls, config):"
data/raw/repos\official\projects\qat\vision\modeling\heads,dense_prediction_heads_test.py,def get_attribute_heads(att_head_type):
data/raw/repos\official\projects\qat\vision\modeling\heads,dense_prediction_heads_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape: Optional[Union[Sequence[int], tf.Tensor]]):"
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape: Optional[Union[Sequence[int], tf.Tensor]]):"
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape: Optional[Union[Sequence[int], tf.Tensor]]):"
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_blocks.py,def get_config(self):
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_layers.py,def _create_gating_activation_layer(self):
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_layers.py,"def build(self, input_shape):"
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_layers.py,def get_config(self):
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_layers.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_layers.py,"def build(self, input_shape: Sequence[tf.TensorShape]):"
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_layers.py,def get_config(self):
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_layers.py,"def from_config(cls, config):"
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_layers.py,"def build(self, input_shape):"
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_layers.py,"def build(self, input_shape: Union[tf.TensorShape, List[tf.TensorShape]]):"
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_layers.py,"def call(self, inputs: tf.Tensor, training: bool = None):"
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_layers_test.py,"def test_aspp_creation(self, level, dilation_rates, num_filters):"
data/raw/repos\official\projects\qat\vision\modeling\layers,nn_layers_test.py,"def test_bnorm_wrapper_creation(self, use_sync_bn):"
data/raw/repos\official\projects\qat\vision\n_bit,configs.py,"def __init__(self, num_bits_weight: int = 8, num_bits_activation: int = 8):"
data/raw/repos\official\projects\qat\vision\n_bit,configs.py,"def __init__(self, num_bits_weight: int = 8, num_bits_activation: int = 8):"
data/raw/repos\official\projects\qat\vision\n_bit,configs.py,"def __eq__(self, other):"
data/raw/repos\official\projects\qat\vision\n_bit,configs.py,"def __ne__(self, other):"
data/raw/repos\official\projects\qat\vision\n_bit,configs.py,"def __init__(self, num_bits_weight: int = 8, num_bits_activation: int = 8):"
data/raw/repos\official\projects\qat\vision\n_bit,configs.py,"def __call__(self, inputs, training, weights, **kwargs):"
data/raw/repos\official\projects\qat\vision\n_bit,configs.py,def get_config(self):
data/raw/repos\official\projects\qat\vision\n_bit,configs.py,"def build(self, tensor_shape, name, layer):"
data/raw/repos\official\projects\qat\vision\n_bit,configs.py,"def __init__(self, num_bits_weight: int = 8, num_bits_activation: int = 8):"
data/raw/repos\official\projects\qat\vision\n_bit,configs.py,"def _assert_activation_layer(self, layer: Layer):"
data/raw/repos\official\projects\qat\vision\n_bit,configs.py,def _types_dict():
data/raw/repos\official\projects\qat\vision\n_bit,configs_test.py,"def _convert_list(self, list_of_tuples):"
data/raw/repos\official\projects\qat\vision\n_bit,configs_test.py,"def _assert_weight_quantizers(self, quantizer_list):"
data/raw/repos\official\projects\qat\vision\n_bit,configs_test.py,"def _assert_activation_quantizers(self, quantizer_list):"
data/raw/repos\official\projects\qat\vision\n_bit,configs_test.py,"def _assert_kernel_equality(self, a, b):"
data/raw/repos\official\projects\qat\vision\n_bit,configs_test.py,def _simple_dense_layer(self):
data/raw/repos\official\projects\qat\vision\n_bit,configs_test.py,def testGetsQuantizeWeightsAndQuantizers(self):
data/raw/repos\official\projects\qat\vision\n_bit,configs_test.py,def testGetsQuantizeActivationsAndQuantizers(self):
data/raw/repos\official\projects\qat\vision\n_bit,configs_test.py,def testSetsQuantizeWeights(self):
data/raw/repos\official\projects\qat\vision\n_bit,configs_test.py,def testSetsQuantizeActivations(self):
data/raw/repos\official\projects\qat\vision\n_bit,configs_test.py,def testSetsQuantizeWeights_ErrorOnWrongNumberOfWeights(self):
data/raw/repos\official\projects\qat\vision\n_bit,configs_test.py,def testSetsQuantizeWeights_ErrorOnWrongShapeOfWeight(self):
data/raw/repos\official\projects\qat\vision\n_bit,configs_test.py,def testSetsQuantizeActivations_ErrorOnWrongNumberOfActivations(self):
data/raw/repos\official\projects\qat\vision\n_bit,configs_test.py,def testGetsResultQuantizers_ReturnsQuantizer(self):
data/raw/repos\official\projects\qat\vision\n_bit,configs_test.py,def testGetsResultQuantizers_EmptyWhenFalse(self):
data/raw/repos\official\projects\qat\vision\n_bit,configs_test.py,def testSerialization(self):
data/raw/repos\official\projects\qat\vision\n_bit,nn_blocks.py,"def _quantize_wrapped_layer(cls, quantize_config):"
data/raw/repos\official\projects\qat\vision\n_bit,nn_blocks.py,"def constructor(*arg, **kwargs):"
data/raw/repos\official\projects\qat\vision\n_bit,nn_blocks.py,"def build(self, input_shape: Optional[Union[Sequence[int], tf.Tensor]]):"
data/raw/repos\official\projects\qat\vision\n_bit,nn_blocks.py,"def build(self, input_shape: Optional[Union[Sequence[int], tf.Tensor]]):"
data/raw/repos\official\projects\qat\vision\n_bit,nn_blocks.py,"def build(self, input_shape: Optional[Union[Sequence[int], tf.Tensor]]):"
data/raw/repos\official\projects\qat\vision\n_bit,nn_layers.py,"def _quantize_wrapped_layer(cls, quantize_config):"
data/raw/repos\official\projects\qat\vision\n_bit,nn_layers.py,"def constructor(*arg, **kwargs):"
data/raw/repos\official\projects\qat\vision\n_bit,nn_layers.py,"def build(self, input_shape):"
data/raw/repos\official\projects\qat\vision\n_bit,nn_layers.py,def get_config(self):
data/raw/repos\official\projects\qat\vision\n_bit,nn_layers.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\qat\vision\n_bit,schemes.py,"def _is_quantization_weight_name(self, name):"
data/raw/repos\official\projects\qat\vision\n_bit,schemes.py,"def __init__(self, num_bits_weight: int = 8, num_bits_activation: int = 8):"
data/raw/repos\official\projects\qat\vision\n_bit,schemes.py,"def apply(self, model, layer_quantize_map):"
data/raw/repos\official\projects\qat\vision\n_bit,schemes.py,"def __init__(self, num_bits_weight: int = 8, num_bits_activation: int = 8):"
data/raw/repos\official\projects\qat\vision\n_bit,schemes.py,def get_layout_transformer(self):
data/raw/repos\official\projects\qat\vision\quantization,configs.py,"def __eq__(self, other):"
data/raw/repos\official\projects\qat\vision\quantization,configs.py,"def __ne__(self, other):"
data/raw/repos\official\projects\qat\vision\quantization,configs.py,def __init__(self):
data/raw/repos\official\projects\qat\vision\quantization,configs.py,"def __call__(self, inputs, training, weights, **kwargs):"
data/raw/repos\official\projects\qat\vision\quantization,configs.py,def get_config(self):
data/raw/repos\official\projects\qat\vision\quantization,configs.py,"def build(self, tensor_shape, name, layer):"
data/raw/repos\official\projects\qat\vision\quantization,configs.py,"def _assert_activation_layer(self, layer: Layer):"
data/raw/repos\official\projects\qat\vision\quantization,configs.py,def _types_dict():
data/raw/repos\official\projects\qat\vision\quantization,configs_test.py,"def _convert_list(self, list_of_tuples):"
data/raw/repos\official\projects\qat\vision\quantization,configs_test.py,"def _assert_weight_quantizers(self, quantizer_list):"
data/raw/repos\official\projects\qat\vision\quantization,configs_test.py,"def _assert_activation_quantizers(self, quantizer_list):"
data/raw/repos\official\projects\qat\vision\quantization,configs_test.py,"def _assert_kernel_equality(self, a, b):"
data/raw/repos\official\projects\qat\vision\quantization,configs_test.py,def _simple_dense_layer(self):
data/raw/repos\official\projects\qat\vision\quantization,configs_test.py,def testGetsQuantizeWeightsAndQuantizers(self):
data/raw/repos\official\projects\qat\vision\quantization,configs_test.py,def testGetsQuantizeActivationsAndQuantizers(self):
data/raw/repos\official\projects\qat\vision\quantization,configs_test.py,def testSetsQuantizeWeights(self):
data/raw/repos\official\projects\qat\vision\quantization,configs_test.py,def testSetsQuantizeActivations(self):
data/raw/repos\official\projects\qat\vision\quantization,configs_test.py,def testSetsQuantizeWeights_ErrorOnWrongNumberOfWeights(self):
data/raw/repos\official\projects\qat\vision\quantization,configs_test.py,def testSetsQuantizeWeights_ErrorOnWrongShapeOfWeight(self):
data/raw/repos\official\projects\qat\vision\quantization,configs_test.py,def testSetsQuantizeActivations_ErrorOnWrongNumberOfActivations(self):
data/raw/repos\official\projects\qat\vision\quantization,configs_test.py,def testGetsResultQuantizers_ReturnsQuantizer(self):
data/raw/repos\official\projects\qat\vision\quantization,configs_test.py,def testGetsResultQuantizers_EmptyWhenFalse(self):
data/raw/repos\official\projects\qat\vision\quantization,configs_test.py,def testSerialization(self):
data/raw/repos\official\projects\qat\vision\quantization,helper.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\projects\qat\vision\quantization,helper.py,def _all_value_quantizer(self):
data/raw/repos\official\projects\qat\vision\quantization,helper.py,def _moving_average_quantizer(self):
data/raw/repos\official\projects\qat\vision\quantization,helper.py,"def _add_quantizer(self, name, all_value_quantizer=False):"
data/raw/repos\official\projects\qat\vision\quantization,helper.py,"def _apply_quantizer(self, name, inputs, training, **kwargs):"
data/raw/repos\official\projects\qat\vision\quantization,helper.py,def _build_quantizer_vars(self):
data/raw/repos\official\projects\qat\vision\quantization,helper.py,"def quantize_wrapped_layer(cls, quantize_config):"
data/raw/repos\official\projects\qat\vision\quantization,helper.py,"def constructor(*arg, **kwargs):"
data/raw/repos\official\projects\qat\vision\quantization,helper.py,"def norm_by_activation(activation, norm_quantized, norm_no_quantized):"
data/raw/repos\official\projects\qat\vision\quantization,helper.py,"def build(self, input_shape: Union[tf.TensorShape, List[tf.TensorShape]]):"
data/raw/repos\official\projects\qat\vision\quantization,helper_test.py,def create_simple_model(self):
data/raw/repos\official\projects\qat\vision\quantization,helper_test.py,def test_copy_original_weights_for_simple_model_with_custom_weights(self):
data/raw/repos\official\projects\qat\vision\quantization,schemes.py,"def apply(self, model, layer_quantize_map):"
data/raw/repos\official\projects\qat\vision\quantization,schemes.py,def get_layout_transformer(self):
data/raw/repos\official\projects\qat\vision\serving,export_module.py,def _build_model(self):
data/raw/repos\official\projects\qat\vision\serving,export_module.py,def _build_model(self):
data/raw/repos\official\projects\qat\vision\serving,export_module.py,def _build_model(self):
data/raw/repos\official\projects\qat\vision\serving,export_saved_model.py,def main(_):
data/raw/repos\official\projects\qat\vision\tasks,image_classification_test.py,"def _create_test_tfrecord(self, tfrecord_file, example, num_samples):"
data/raw/repos\official\projects\qat\vision\tasks,image_classification_test.py,"def test_task(self, config_name):"
data/raw/repos\official\projects\qat\vision\tasks,retinanet_test.py,"def _create_test_tfrecord(self, tfrecord_file, example, num_samples):"
data/raw/repos\official\projects\qat\vision\tasks,retinanet_test.py,"def test_retinanet_task(self, test_config, is_training):"
data/raw/repos\official\projects\roformer,roformer.py,def get_encoder(encoder_cfg: RoformerEncoderConfig):
data/raw/repos\official\projects\roformer,roformer_attention.py,"def _build_trig_vector(length, key_dim):"
data/raw/repos\official\projects\roformer,roformer_attention.py,"def roformer_recompute_qkv(self, q, k, v):"
data/raw/repos\official\projects\roformer,roformer_attention_test.py,def setUp(self):
data/raw/repos\official\projects\roformer,roformer_attention_test.py,"def test_trig_vector(self, length, key_dim):"
data/raw/repos\official\projects\roformer,roformer_attention_test.py,"def test_attention_scores(self, value_dim, mask):"
data/raw/repos\official\projects\roformer,roformer_encoder.py,def get_embedding_table(self):
data/raw/repos\official\projects\roformer,roformer_encoder.py,def get_embedding_layer(self):
data/raw/repos\official\projects\roformer,roformer_encoder.py,def get_config(self):
data/raw/repos\official\projects\roformer,roformer_encoder.py,def transformer_layers(self):
data/raw/repos\official\projects\roformer,roformer_encoder.py,def pooler_layer(self):
data/raw/repos\official\projects\roformer,roformer_encoder.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\roformer,roformer_encoder_block.py,"def build(self, input_shape):"
data/raw/repos\official\projects\roformer,roformer_encoder_block.py,def get_config(self):
data/raw/repos\official\projects\roformer,roformer_encoder_block.py,"def call(self, inputs):"
data/raw/repos\official\projects\roformer,roformer_encoder_block_test.py,def tearDown(self):
data/raw/repos\official\projects\roformer,roformer_encoder_block_test.py,"def test_layer_creation(self, transformer_cls):"
data/raw/repos\official\projects\roformer,roformer_encoder_block_test.py,"def test_layer_creation_with_mask(self, transformer_cls):"
data/raw/repos\official\projects\roformer,roformer_encoder_block_test.py,"def test_layer_invocation(self, transformer_cls):"
data/raw/repos\official\projects\roformer,roformer_encoder_block_test.py,"def test_layer_invocation_with_mask(self, transformer_cls):"
data/raw/repos\official\projects\roformer,roformer_encoder_block_test.py,"def test_layer_output_range(self, transformer_cls):"
data/raw/repos\official\projects\roformer,roformer_encoder_block_test.py,"def test_layer_output_range_without_mask(self, transformer_cls):"
data/raw/repos\official\projects\roformer,roformer_encoder_block_test.py,"def test_layer_output_range_with_pre_norm(self, transformer_cls):"
data/raw/repos\official\projects\roformer,roformer_encoder_block_test.py,"def test_layer_invocation_with_float16_dtype(self, transformer_cls):"
data/raw/repos\official\projects\roformer,roformer_encoder_block_test.py,"def test_transform_with_initializer(self, transformer_cls):"
data/raw/repos\official\projects\roformer,roformer_encoder_block_test.py,"def test_separate_qkv(self, transformer_cls):"
data/raw/repos\official\projects\roformer,roformer_encoder_block_test.py,def test_raises(self):
data/raw/repos\official\projects\roformer,roformer_encoder_block_test.py,def test_use_bias_norm_first(self):
data/raw/repos\official\projects\roformer,roformer_encoder_block_test.py,def test_get_config(self):
data/raw/repos\official\projects\roformer,roformer_encoder_block_test.py,"def test_several_attention_axes(self, attention_axes):"
data/raw/repos\official\projects\roformer,roformer_encoder_test.py,def tearDown(self):
data/raw/repos\official\projects\roformer,roformer_encoder_test.py,def test_network_creation(self):
data/raw/repos\official\projects\roformer,roformer_encoder_test.py,def test_all_encoder_outputs_network_creation(self):
data/raw/repos\official\projects\roformer,roformer_encoder_test.py,def test_network_creation_with_float16_dtype(self):
data/raw/repos\official\projects\roformer,roformer_encoder_test.py,"def test_network_invocation(self, output_range, out_seq_len):"
data/raw/repos\official\projects\roformer,roformer_encoder_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\roformer,train.py,def main(_):
data/raw/repos\official\projects\s3d\modeling,inception_utils.py,def _build_branch_params(self):
data/raw/repos\official\projects\s3d\modeling,inception_utils.py,"def build(self, input_shape):"
data/raw/repos\official\projects\s3d\modeling,inception_utils.py,"def call(self, inputs):"
data/raw/repos\official\projects\s3d\modeling,net_utils.py,"def _build_conv_layer_params(self, input_shape):"
data/raw/repos\official\projects\s3d\modeling,net_utils.py,"def _build_norm_layer_params(self, conv_param):"
data/raw/repos\official\projects\s3d\modeling,net_utils.py,"def _build_activation_layer_params(self, conv_param):"
data/raw/repos\official\projects\s3d\modeling,net_utils.py,"def _append_conv_layer(self, param):"
data/raw/repos\official\projects\s3d\modeling,net_utils.py,"def build(self, input_shape):"
data/raw/repos\official\projects\s3d\modeling,net_utils.py,"def call(self, inputs):"
data/raw/repos\official\projects\s3d\modeling,s3d.py,def get_config(self):
data/raw/repos\official\projects\s3d\modeling,s3d.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\s3d\modeling,s3d.py,def output_specs(self):
data/raw/repos\official\projects\s3d\modeling,s3d.py,def _get_inception_v1_cell_layer_impl(self):
data/raw/repos\official\projects\s3d\modeling,s3d.py,def _get_parameterized_conv_layer_impl(self):
data/raw/repos\official\projects\s3d\modeling,s3d.py,def _get_layer_naming_fn(self):
data/raw/repos\official\projects\s3d\modeling,s3d.py,def checkpoint_items(self):
data/raw/repos\official\projects\s3d\modeling,s3d.py,def backbone(self):
data/raw/repos\official\projects\s3d\modeling,s3d.py,def get_config(self):
data/raw/repos\official\projects\s3d\modeling,s3d.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\s3d\modeling,s3d.py,def _build_dense_layer_params(self):
data/raw/repos\official\projects\s3d\modeling,s3d_test.py,"def test_build(self, num_frames, height, width, first_temporal_kernel_size):"
data/raw/repos\official\projects\s3d\modeling,s3d_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\simclr,multitask_train.py,def main(_):
data/raw/repos\official\projects\simclr,train.py,def main(_):
data/raw/repos\official\projects\simclr\configs,multitask_config_test.py,def test_simclr_configs(self):
data/raw/repos\official\projects\simclr\configs,simclr_test.py,"def test_simclr_configs(self, config_name):"
data/raw/repos\official\projects\simclr\dataloaders,preprocess_ops.py,"def random_apply(func, p, x):"
data/raw/repos\official\projects\simclr\dataloaders,preprocess_ops.py,"def random_brightness(image, max_delta, impl='simclrv2'):"
data/raw/repos\official\projects\simclr\dataloaders,preprocess_ops.py,"def to_grayscale(image, keep_channels=True):"
data/raw/repos\official\projects\simclr\dataloaders,preprocess_ops.py,"def apply_transform(i, x, brightness, contrast, saturation, hue):"
data/raw/repos\official\projects\simclr\dataloaders,preprocess_ops.py,"def apply_transform(i, x):"
data/raw/repos\official\projects\simclr\dataloaders,preprocess_ops.py,def brightness_foo():
data/raw/repos\official\projects\simclr\dataloaders,preprocess_ops.py,def contrast_foo():
data/raw/repos\official\projects\simclr\dataloaders,preprocess_ops.py,def saturation_foo():
data/raw/repos\official\projects\simclr\dataloaders,preprocess_ops.py,def hue_foo():
data/raw/repos\official\projects\simclr\dataloaders,preprocess_ops.py,"def color_jitter(image, strength, random_order=True, impl='simclrv2'):"
data/raw/repos\official\projects\simclr\dataloaders,preprocess_ops.py,def _transform(image):
data/raw/repos\official\projects\simclr\dataloaders,preprocess_ops.py,"def gaussian_blur(image, kernel_size, sigma, padding='SAME'):"
data/raw/repos\official\projects\simclr\dataloaders,preprocess_ops.py,"def random_blur(image, height, width, p=0.5):"
data/raw/repos\official\projects\simclr\dataloaders,preprocess_ops.py,def _transform(image):
data/raw/repos\official\projects\simclr\dataloaders,preprocess_ops.py,"def crop_and_resize(image, height, width):"
data/raw/repos\official\projects\simclr\dataloaders,preprocess_ops.py,"def random_crop_with_resize(image, height, width, p=1.0):"
data/raw/repos\official\projects\simclr\dataloaders,preprocess_ops.py,def _transform(image):
data/raw/repos\official\projects\simclr\dataloaders,simclr_input.py,"def __init__(self, decode_label=True):"
data/raw/repos\official\projects\simclr\dataloaders,simclr_input.py,"def decode(self, serialized_example):"
data/raw/repos\official\projects\simclr\dataloaders,simclr_input.py,"def __init__(self, decode_label=True):"
data/raw/repos\official\projects\simclr\dataloaders,simclr_input.py,"def decode(self, serialized_example):"
data/raw/repos\official\projects\simclr\dataloaders,simclr_input.py,"def _parse_one_train_image(self, image_bytes):"
data/raw/repos\official\projects\simclr\dataloaders,simclr_input.py,"def _parse_train_data(self, decoded_tensors):"
data/raw/repos\official\projects\simclr\dataloaders,simclr_input.py,"def _parse_eval_data(self, decoded_tensors):"
data/raw/repos\official\projects\simclr\heads,simclr_head.py,def get_config(self):
data/raw/repos\official\projects\simclr\heads,simclr_head.py,"def build(self, input_shape):"
data/raw/repos\official\projects\simclr\heads,simclr_head.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\simclr\heads,simclr_head.py,def get_config(self):
data/raw/repos\official\projects\simclr\heads,simclr_head.py,"def build(self, input_shape):"
data/raw/repos\official\projects\simclr\heads,simclr_head.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\simclr\heads,simclr_head_test.py,"def test_head_creation(self, num_proj_layers, proj_output_dim):"
data/raw/repos\official\projects\simclr\heads,simclr_head_test.py,"def test_outputs(self, num_proj_layers, proj_output_dim, ft_proj_idx):"
data/raw/repos\official\projects\simclr\heads,simclr_head_test.py,"def test_head_creation(self, num_classes):"
data/raw/repos\official\projects\simclr\losses,contrastive_losses.py,"def __init__(self, projection_norm: bool = True, temperature: float = 1.0):"
data/raw/repos\official\projects\simclr\losses,contrastive_losses.py,"def __call__(self, projection1: tf.Tensor, projection2: tf.Tensor):"
data/raw/repos\official\projects\simclr\losses,contrastive_losses.py,def get_config(self):
data/raw/repos\official\projects\simclr\losses,contrastive_losses_test.py,"def test_contrastive_loss_computation(self, temperature):"
data/raw/repos\official\projects\simclr\losses,contrastive_losses_test.py,"def _exp_sim(p1, p2):"
data/raw/repos\official\projects\simclr\modeling,multitask_model.py,def initialize(self):
data/raw/repos\official\projects\simclr\modeling,multitask_model.py,def checkpoint_items(self):
data/raw/repos\official\projects\simclr\modeling,multitask_model_test.py,def test_initialize_model_success(self):
data/raw/repos\official\projects\simclr\modeling,simclr_model.py,"def call(self, inputs, training=None, **kwargs):"
data/raw/repos\official\projects\simclr\modeling,simclr_model.py,def checkpoint_items(self):
data/raw/repos\official\projects\simclr\modeling,simclr_model.py,def backbone(self):
data/raw/repos\official\projects\simclr\modeling,simclr_model.py,def projection_head(self):
data/raw/repos\official\projects\simclr\modeling,simclr_model.py,def supervised_head(self):
data/raw/repos\official\projects\simclr\modeling,simclr_model.py,def mode(self):
data/raw/repos\official\projects\simclr\modeling,simclr_model.py,"def mode(self, value):"
data/raw/repos\official\projects\simclr\modeling,simclr_model.py,def backbone_trainable(self):
data/raw/repos\official\projects\simclr\modeling,simclr_model.py,"def backbone_trainable(self, value):"
data/raw/repos\official\projects\simclr\modeling,simclr_model.py,def get_config(self):
data/raw/repos\official\projects\simclr\modeling,simclr_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\simclr\modeling,simclr_model_test.py,"def test_model_creation(self, project_dim, num_proj_layers, ft_proj_idx):"
data/raw/repos\official\projects\simclr\modeling\layers,nn_blocks.py,def get_config(self):
data/raw/repos\official\projects\simclr\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\simclr\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\simclr\modeling\layers,nn_blocks_test.py,"def test_pass_through(self, output_dim, use_bias, use_normalization):"
data/raw/repos\official\projects\simclr\tasks,simclr.py,def build_model(self):
data/raw/repos\official\projects\simclr\tasks,simclr.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\simclr\tasks,simclr.py,"def build_inputs(self, params, input_context=None):"
data/raw/repos\official\projects\simclr\tasks,simclr.py,"def build_metrics(self, training=True):"
data/raw/repos\official\projects\simclr\tasks,simclr.py,"def train_step(self, inputs, model, optimizer, metrics=None):"
data/raw/repos\official\projects\simclr\tasks,simclr.py,"def validation_step(self, inputs, model, metrics=None):"
data/raw/repos\official\projects\simclr\tasks,simclr.py,def build_model(self):
data/raw/repos\official\projects\simclr\tasks,simclr.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\simclr\tasks,simclr.py,"def build_inputs(self, params, input_context=None):"
data/raw/repos\official\projects\simclr\tasks,simclr.py,"def build_losses(self, labels, model_outputs, aux_losses=None):"
data/raw/repos\official\projects\simclr\tasks,simclr.py,"def build_metrics(self, training=True):"
data/raw/repos\official\projects\simclr\tasks,simclr.py,"def train_step(self, inputs, model, optimizer, metrics=None):"
data/raw/repos\official\projects\simclr\tasks,simclr.py,"def validation_step(self, inputs, model, metrics=None):"
data/raw/repos\official\projects\teams,teams_pretrainer.py,"def call(self, sequence_data, input_mask):"
data/raw/repos\official\projects\teams,teams_pretrainer.py,"def call(self, sequence_data, masked_positions, candidate_sets):"
data/raw/repos\official\projects\teams,teams_pretrainer.py,"def _gather_indexes(self, sequence_tensor, positions):"
data/raw/repos\official\projects\teams,teams_pretrainer.py,"def call(self, inputs):"
data/raw/repos\official\projects\teams,teams_pretrainer.py,"def _get_fake_data(self, inputs, mlm_logits):"
data/raw/repos\official\projects\teams,teams_pretrainer.py,def checkpoint_items(self):
data/raw/repos\official\projects\teams,teams_pretrainer.py,def get_config(self):
data/raw/repos\official\projects\teams,teams_pretrainer.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\teams,teams_pretrainer.py,"def sample_k_from_softmax(logits, k, disallow=None, use_topk=False):"
data/raw/repos\official\projects\teams,teams_pretrainer_test.py,"def _get_network(self, vocab_size):"
data/raw/repos\official\projects\teams,teams_pretrainer_test.py,def test_teams_pretrainer(self):
data/raw/repos\official\projects\teams,teams_pretrainer_test.py,def test_teams_trainer_tensor_call(self):
data/raw/repos\official\projects\teams,teams_pretrainer_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\teams,teams_task.py,def build_model(self):
data/raw/repos\official\projects\teams,teams_task.py,"def build_inputs(self, params, input_context=None):"
data/raw/repos\official\projects\teams,teams_task.py,def dummy_data(_):
data/raw/repos\official\projects\teams,teams_task.py,"def build_metrics(self, training=None):"
data/raw/repos\official\projects\teams,teams_task.py,"def process_metrics(self, metrics, labels, model_outputs):"
data/raw/repos\official\projects\teams,teams_task.py,"def validation_step(self, inputs, model: tf_keras.Model, metrics):"
data/raw/repos\official\projects\text_classification_example,classification_data_loader.py,"def __init__(self, params):"
data/raw/repos\official\projects\text_classification_example,classification_example.py,def id_to_class_name(batched_ids):
data/raw/repos\official\projects\text_classification_example,classification_example_test.py,def get_model_config(self):
data/raw/repos\official\projects\text_classification_example,classification_example_test.py,"def get_dummy_dataset(self, params: cfg.DataConfig):"
data/raw/repos\official\projects\text_classification_example,classification_example_test.py,def dummy_data(_):
data/raw/repos\official\projects\text_classification_example,classification_example_test.py,def test_task_with_dummy_data(self):
data/raw/repos\official\projects\text_classification_example,train.py,def main(_):
data/raw/repos\official\projects\token_dropping,encoder.py,"def call(self, inputs, output_range: Optional[tf.Tensor] = None):"
data/raw/repos\official\projects\token_dropping,encoder.py,"def record_mlm_loss(self, mlm_ids: tf.Tensor, mlm_losses: tf.Tensor):"
data/raw/repos\official\projects\token_dropping,encoder.py,def get_embedding_table(self):
data/raw/repos\official\projects\token_dropping,encoder.py,def get_embedding_layer(self):
data/raw/repos\official\projects\token_dropping,encoder.py,def get_config(self):
data/raw/repos\official\projects\token_dropping,encoder.py,def transformer_layers(self):
data/raw/repos\official\projects\token_dropping,encoder.py,def pooler_layer(self):
data/raw/repos\official\projects\token_dropping,encoder.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\token_dropping,encoder_config.py,def get_encoder(encoder_cfg: TokenDropBertEncoderConfig):
data/raw/repos\official\projects\token_dropping,encoder_test.py,def tearDown(self):
data/raw/repos\official\projects\token_dropping,encoder_test.py,def test_dict_outputs_network_creation(self):
data/raw/repos\official\projects\token_dropping,encoder_test.py,def test_dict_outputs_all_encoder_outputs_network_creation(self):
data/raw/repos\official\projects\token_dropping,encoder_test.py,def test_dict_outputs_network_creation_with_float16_dtype(self):
data/raw/repos\official\projects\token_dropping,encoder_test.py,def test_network_creation(self):
data/raw/repos\official\projects\token_dropping,encoder_test.py,def test_all_encoder_outputs_network_creation(self):
data/raw/repos\official\projects\token_dropping,encoder_test.py,def test_network_creation_with_float16_dtype(self):
data/raw/repos\official\projects\token_dropping,encoder_test.py,"def test_network_invocation(self, output_range, out_seq_len):"
data/raw/repos\official\projects\token_dropping,encoder_test.py,def tearDown(self):
data/raw/repos\official\projects\token_dropping,encoder_test.py,def test_checkpoint_forward_compatible(self):
data/raw/repos\official\projects\token_dropping,encoder_test.py,def test_keras_model_checkpoint_forward_compatible(self):
data/raw/repos\official\projects\token_dropping,masked_lm.py,"def validation_step(self, inputs, model: tf_keras.Model, metrics):"
data/raw/repos\official\projects\token_dropping,masked_lm_test.py,def test_task(self):
data/raw/repos\official\projects\token_dropping,train.py,def main(_):
data/raw/repos\official\projects\triviaqa,dataset.py,def _web_evidence_dir(tmp_dir):
data/raw/repos\official\projects\triviaqa,dataset.py,def _wiki_evidence_dir(tmp_dir):
data/raw/repos\official\projects\triviaqa,dataset.py,"def __init__(self, *, unfiltered=False, exclude_context=False, **kwargs):"
data/raw/repos\official\projects\triviaqa,dataset.py,"def __init__(self, **kwargs):"
data/raw/repos\official\projects\triviaqa,dataset.py,def validate(self):
data/raw/repos\official\projects\triviaqa,dataset.py,def filter_files_for_big_bird(files):
data/raw/repos\official\projects\triviaqa,dataset.py,def _info(self):
data/raw/repos\official\projects\triviaqa,dataset.py,"def _split_generators(self, dl_manager):"
data/raw/repos\official\projects\triviaqa,dataset.py,"def _build_pcollection(self, pipeline, files, web_dir, wiki_dir, answer):"
data/raw/repos\official\projects\triviaqa,dataset.py,"def process(self, file):"
data/raw/repos\official\projects\triviaqa,dataset.py,"def parse_example(exclude_context, web_dir, wiki_dir, article):"
data/raw/repos\official\projects\triviaqa,dataset.py,def _strip(collection):
data/raw/repos\official\projects\triviaqa,dataset.py,"def _add_context(collection, context_field, file_dir):"
data/raw/repos\official\projects\triviaqa,dataset.py,def _strip_if_str(v):
data/raw/repos\official\projects\triviaqa,dataset.py,"def _transpose_and_strip_dicts(dicts, field_names):"
data/raw/repos\official\projects\triviaqa,download_and_prepare.py,def main(argv):
data/raw/repos\official\projects\triviaqa,evaluate.py,def main(argv):
data/raw/repos\official\projects\triviaqa,evaluation.py,def normalize_answer(s):
data/raw/repos\official\projects\triviaqa,evaluation.py,def remove_articles(text):
data/raw/repos\official\projects\triviaqa,evaluation.py,def white_space_fix(text):
data/raw/repos\official\projects\triviaqa,evaluation.py,def handle_punc(text):
data/raw/repos\official\projects\triviaqa,evaluation.py,def lower(text):
data/raw/repos\official\projects\triviaqa,evaluation.py,def replace_underscore(text):
data/raw/repos\official\projects\triviaqa,evaluation.py,"def f1_score(prediction, ground_truth):"
data/raw/repos\official\projects\triviaqa,evaluation.py,"def exact_match_score(prediction, ground_truth):"
data/raw/repos\official\projects\triviaqa,evaluation.py,"def metric_max_over_ground_truths(metric_fn, prediction, ground_truths):"
data/raw/repos\official\projects\triviaqa,evaluation.py,"def is_exact_match(answer_object, prediction):"
data/raw/repos\official\projects\triviaqa,evaluation.py,"def has_exact_match(ground_truths, candidates):"
data/raw/repos\official\projects\triviaqa,evaluation.py,def get_ground_truths(answer):
data/raw/repos\official\projects\triviaqa,inputs.py,"def __init__(self, max_distance: int, ignore_direction: bool = False):"
data/raw/repos\official\projects\triviaqa,inputs.py,"def scatter_labels(labels, batch_size, sequence_length):"
data/raw/repos\official\projects\triviaqa,inputs.py,"def labels_map_fn(token_ids, labels, sequence_length):"
data/raw/repos\official\projects\triviaqa,modeling.py,"def build(self, input_shape):"
data/raw/repos\official\projects\triviaqa,modeling.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\triviaqa,modeling.py,def encoder(self):
data/raw/repos\official\projects\triviaqa,modeling.py,"def call(self, y_true, y_pred):"
data/raw/repos\official\projects\triviaqa,modeling.py,"def smooth_labels(label_smoothing, labels, question_lengths, token_ids):"
data/raw/repos\official\projects\triviaqa,predict.py,def worker_context():
data/raw/repos\official\projects\triviaqa,predict.py,def read_sentencepiece_model(path):
data/raw/repos\official\projects\triviaqa,predict.py,def main(argv):
data/raw/repos\official\projects\triviaqa,prediction.py,"def split_and_pad(strategy, batch_size, x):"
data/raw/repos\official\projects\triviaqa,prediction.py,"def slice_fn(x, i):"
data/raw/repos\official\projects\triviaqa,prediction.py,"def decode_logits(top_k, max_size, logits, default):"
data/raw/repos\official\projects\triviaqa,prediction.py,"def decode_answer(context, begin, end, token_offsets, end_limit):"
data/raw/repos\official\projects\triviaqa,prediction.py,"def distributed_logits_fn(model, x):"
data/raw/repos\official\projects\triviaqa,preprocess.py,"def alias_answer(answer: Text, include=None):"
data/raw/repos\official\projects\triviaqa,preprocess.py,def read_sentencepiece_model(path):
data/raw/repos\official\projects\triviaqa,preprocess.py,"def __init__(self, wikipedia_dir: Text, web_dir: Text):"
data/raw/repos\official\projects\triviaqa,preprocess.py,def setup(self):
data/raw/repos\official\projects\triviaqa,preprocess.py,"def __init__(self, sentencepiece_model_path: Text):"
data/raw/repos\official\projects\triviaqa,preprocess.py,def setup(self):
data/raw/repos\official\projects\triviaqa,train.py,def worker_context():
data/raw/repos\official\projects\triviaqa,train.py,def read_sentencepiece_model(path):
data/raw/repos\official\projects\triviaqa,train.py,def init_fn(init_checkpoint_path):
data/raw/repos\official\projects\triviaqa,train.py,"def update_loss(y, logits):"
data/raw/repos\official\projects\triviaqa,train.py,def main(argv):
data/raw/repos\official\projects\triviaqa,train.py,"def train_map_fn(x, y):"
data/raw/repos\official\projects\unified_detector,train.py,def main(_):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def policy_v0():
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def policy_vtest():
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def solarize(image, threshold=128):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def solarize_add(image, addition=0, threshold=128):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def color(image, factor):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def contrast(image, factor):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def brightness(image, factor):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def posterize(image, bits):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def rotate(image, degrees, replace):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def translate_x(image, pixels, replace):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def translate_y(image, pixels, replace):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def autocontrast(image):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def scale_channel(image):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def scale_values(im):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def sharpness(image, factor):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def equalize(image):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def scale_channel(im, c):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def build_lut(histo, step):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def invert(image):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def _randomly_negate_tensor(tensor):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def _rotate_level_to_arg(level):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def _shrink_level_to_arg(level):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def _enhance_level_to_arg(level):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def _enhance_increasing_level_to_arg(level):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def _shear_level_to_arg(level):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def _translate_level_to_arg(level, translate_const):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def _posterize_level_to_arg(level):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def _posterize_increase_level_to_arg(level):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def _solarize_level_to_arg(level):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def _solarize_increase_level_to_arg(level):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def _solarize_add_level_to_arg(level):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def _cutout_arg(level, cutout_size):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def level_to_arg(hparams):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def _parse_policy_info(name, prob, level, replace_value, augmentation_hparams):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def _apply_func_with_prob(func, image, args, prob):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def select_and_apply_random_policy(policies, image):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def build_and_apply_nas_policy(policies, image, augmentation_hparams):"
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def make_final_policy(tf_policy_):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,def final_policy(image_):
data/raw/repos\official\projects\unified_detector\data_loaders,autoaugment.py,"def distort_image_with_autoaugment(image, augmentation_name):"
data/raw/repos\official\projects\unified_detector\data_loaders,input_reader.py,def batch_size(self):
data/raw/repos\official\projects\unified_detector\data_loaders,tf_example_decoder.py,def decode_png_mask(image_buffer):
data/raw/repos\official\projects\unified_detector\data_loaders,tf_example_decoder.py,def _decode_png_mask(png_bytes):
data/raw/repos\official\projects\unified_detector\data_loaders,tf_example_decoder.py,"def decode(self, tf_example_string_tensor: tf.string):"
data/raw/repos\official\projects\unified_detector\data_loaders,universal_detection_parser.py,def _rotate():
data/raw/repos\official\projects\unified_detector\data_loaders,universal_detection_parser.py,"def _define_shapes(self, features: TensorDict, labels: TensorDict):"
data/raw/repos\official\projects\unified_detector\modeling,universal_detector.py,def get_max_deep_lab_backbone(num_slots: int = 128):
data/raw/repos\official\projects\unified_detector\modeling,universal_detector.py,"def _preprocess_labels(self, labels: typing.TensorDict):"
data/raw/repos\official\projects\unified_detector\modeling,universal_detector.py,"def _postprocess(self, outputs: typing.NestedTensorDict):"
data/raw/repos\official\projects\unified_detector\modeling,universal_detector.py,"def __init__(self, extra_fc: bool):"
data/raw/repos\official\projects\unified_detector\utils,utilities.py,def _new_size(dim):
data/raw/repos\official\projects\unified_detector\utils,utilities.py,def _truncate():
data/raw/repos\official\projects\unified_detector\utils,utilities.py,def _pad():
data/raw/repos\official\projects\unified_detector\utils,utilities.py,"def __init__(self, num_elements: int):"
data/raw/repos\official\projects\videoglue,train.py,def main(_):
data/raw/repos\official\projects\videoglue\configs,spatiotemporal_action_localization.py,def _get_vit_layers(num_tx_layers: int = 12):
data/raw/repos\official\projects\videoglue\configs,spatiotemporal_action_localization.py,def _get_clip_layers(num_tx_layers: int = 12):
data/raw/repos\official\projects\videoglue\datasets,dataset_factory.py,"def __init__(self, params: cfg.DataConfig, dataset_config: Mapping[str, Any]):"
data/raw/repos\official\projects\videoglue\datasets,dataset_factory.py,def dataset_fn():
data/raw/repos\official\projects\videoglue\datasets,video_classification.py,def mixup_and_cutmix_fn(inputs):
data/raw/repos\official\projects\videoglue\datasets,video_classification.py,def tables(self):
data/raw/repos\official\projects\videoglue\datasets\common,processors.py,def resize_fn():
data/raw/repos\official\projects\videoglue\datasets\common,processors.py,def resize_fn():
data/raw/repos\official\projects\videoglue\datasets\common,processors.py,"def _random_integer(minval, maxval, seed):"
data/raw/repos\official\projects\videoglue\datasets\common,processors.py,"def _get_crop_border(border, size):"
data/raw/repos\official\projects\videoglue\datasets\common,processors.py,def color_jitter_fn(video):
data/raw/repos\official\projects\videoglue\datasets\common,processors.py,def color_drop_fn(video):
data/raw/repos\official\projects\videoglue\datasets\common,processors.py,def solarize_fn(image):
data/raw/repos\official\projects\videoglue\datasets\common,utils.py,"def pad_or_clip_nd(tensor: tf.Tensor, output_shape: list[int]):"
data/raw/repos\official\projects\videoglue\datasets\common,utils.py,"def _assert_shape_equal_along_first_dimension(shape_a, shape_b):"
data/raw/repos\official\projects\videoglue\datasets\common,utils.py,"def _assert_box_normalized(boxes, maximum_normalized_coordinate=1.1):"
data/raw/repos\official\projects\videoglue\datasets\common,utils.py,def map_box_encodings(i):
data/raw/repos\official\projects\videoglue\datasets\common,utils.py,"def sample_sequence_fn(x, state):"
data/raw/repos\official\projects\videoglue\datasets\common,utils.py,"def random_crop_resize_fn(x, state=None):"
data/raw/repos\official\projects\videoglue\datasets\common,utils.py,"def resize_and_crop_fn(x, state):"
data/raw/repos\official\projects\videoglue\datasets\common,utils.py,"def random_square_crop_by_scale_fn(x, state=None):"
data/raw/repos\official\projects\videoglue\datasets\common,utils.py,"def resize_and_pad_fn(x, state=None):"
data/raw/repos\official\projects\videoglue\datasets\common,utils.py,"def random_flip_left_right_fn(x, state=None):"
data/raw/repos\official\projects\videoglue\datasets\common,utils.py,"def resize_and_pad_fn(x, state=None):"
data/raw/repos\official\projects\videoglue\datasets\common,utils.py,"def resize_and_crop_fn(x, state=None):"
data/raw/repos\official\projects\videoglue\datasets\common,utils.py,def reshape_fn(x):
data/raw/repos\official\projects\videoglue\datasets\common,utils.py,"def sample_sequence_fn(x, state=None):"
data/raw/repos\official\projects\videoglue\datasets\common,utils.py,"def false_fn(box, label, weight, num_classes=num_classes):"
data/raw/repos\official\projects\videoglue\datasets\common,utils.py,"def sample_sequence_fn(x, state=None):"
data/raw/repos\official\projects\videoglue\datasets\common,utils.py,"def _resize_and_crop(boxes, image_info, is_flip=None):"
data/raw/repos\official\projects\videoglue\evaluation,spatiotemporal_action_localization_evaluator.py,"def __init__(self, iou_threshold: float = 0.5):"
data/raw/repos\official\projects\videoglue\evaluation,spatiotemporal_action_localization_evaluator.py,def name(self):
data/raw/repos\official\projects\videoglue\evaluation,spatiotemporal_action_localization_evaluator.py,"def _maybe_convert_to_numpy(self, outputs):"
data/raw/repos\official\projects\videoglue\evaluation,spatiotemporal_action_localization_evaluator.py,"def update_state(self, step_outputs: Mapping[str, tf.Tensor]):"
data/raw/repos\official\projects\videoglue\evaluation,spatiotemporal_action_localization_evaluator.py,def reset_states(self):
data/raw/repos\official\projects\videoglue\evaluation,spatiotemporal_action_localization_evaluator.py,def result(self):
data/raw/repos\official\projects\videoglue\modeling,video_classification_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\videoglue\modeling\backbones,vit_3d.py,"def build(self, inputs_shape):"
data/raw/repos\official\projects\videoglue\modeling\backbones,vit_3d.py,"def _tokenize(self, inputs: tf.Tensor):"
data/raw/repos\official\projects\videoglue\modeling\backbones,vit_3d.py,"def _mae_tokenize(self, inputs: tf.Tensor):"
data/raw/repos\official\projects\videoglue\modeling\heads,action_transformer.py,def _get_shape(x: tf.Tensor):
data/raw/repos\official\projects\videoglue\modeling\heads,action_transformer.py,"def _add_positional_embedding(self, inputs):"
data/raw/repos\official\projects\videoglue\modeling\heads,simple.py,"def from_config(cls, config: Mapping[str, Any]):"
data/raw/repos\official\projects\videoglue\modeling\heads,transformer_decoder.py,def _get_shape(x: tf.Tensor):
data/raw/repos\official\projects\videoglue\modeling\heads,transformer_decoder.py,"def build(self, input_shape: Union[tf.TensorShape, List[tf.TensorShape]]):"
data/raw/repos\official\projects\videoglue\tasks,multihead_video_classification.py,def _is_multihead(self):
data/raw/repos\official\projects\videoglue\tasks,multihead_video_classification.py,def _get_label_names(self):
data/raw/repos\official\projects\videoglue\tasks,multihead_video_classification.py,"def build_inputs(self, params: exp_cfg.DataConfig, input_context=None):"
data/raw/repos\official\projects\videoglue\tasks,multihead_video_classification.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\videoglue\tasks,multihead_video_classification.py,"def build_metrics(self, training: bool = True):"
data/raw/repos\official\projects\videoglue\tasks,multihead_video_classification.py,"def joint_accuracy_fn(y_true: List[tf.Tensor], y_pred: List[tf.Tensor]):"
data/raw/repos\official\projects\videoglue\tasks,spatiotemporal_action_localization.py,def _is_multilabel(self):
data/raw/repos\official\projects\videoglue\tasks,spatiotemporal_action_localization.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\videoglue\tasks,spatiotemporal_action_localization.py,"def build_metrics(self, training: bool = True):"
data/raw/repos\official\projects\videoglue\tasks,spatiotemporal_action_localization.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\projects\videoglue\tasks,spatiotemporal_action_localization.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\projects\videoglue\tools,checkpoint_loader.py,"def _load_checkpoint(self, model: tf_keras.Model, ckpt_dir_or_file: str):"
data/raw/repos\official\projects\videoglue\tools,checkpoint_loader.py,"def _maybe_transpose_pytorch_weight(self, ckpt_weight):"
data/raw/repos\official\projects\videoglue\tools,checkpoint_loader.py,"def _load_checkpoint(self, model: tf_keras.Model, ckpt_dir_or_file: str):"
data/raw/repos\official\projects\video_ssl,train.py,def main(_):
data/raw/repos\official\projects\video_ssl\configs,video_ssl_test.py,"def test_video_ssl_pretrain_configs(self, config_name):"
data/raw/repos\official\projects\video_ssl\configs,video_ssl_test.py,"def test_video_ssl_linear_eval_configs(self, config_name):"
data/raw/repos\official\projects\video_ssl\dataloaders,video_ssl_input.py,"def parse_fn(self, is_training):"
data/raw/repos\official\projects\video_ssl\dataloaders,video_ssl_input.py,def parse(decoded_tensors):
data/raw/repos\official\projects\video_ssl\dataloaders,video_ssl_input.py,"def __init__(self, input_params: exp_cfg.DataConfig):"
data/raw/repos\official\projects\video_ssl\dataloaders,video_ssl_input_test.py,def fake_seq_example():
data/raw/repos\official\projects\video_ssl\dataloaders,video_ssl_input_test.py,def test_video_ssl_input_pretrain(self):
data/raw/repos\official\projects\video_ssl\dataloaders,video_ssl_input_test.py,def test_video_ssl_input_linear_train(self):
data/raw/repos\official\projects\video_ssl\dataloaders,video_ssl_input_test.py,def test_video_ssl_input_linear_eval(self):
data/raw/repos\official\projects\video_ssl\losses,losses.py,"def tpu_cross_replica_concat(tensor, num_replicas):"
data/raw/repos\official\projects\video_ssl\modeling,video_ssl_model.py,def checkpoint_items(self):
data/raw/repos\official\projects\video_ssl\modeling,video_ssl_model.py,def backbone(self):
data/raw/repos\official\projects\video_ssl\modeling,video_ssl_model.py,def get_config(self):
data/raw/repos\official\projects\video_ssl\modeling,video_ssl_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,"def random_apply(func, p, x):"
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,"def random_brightness(image, max_delta):"
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,"def random_solarization(image, p=0.2):"
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,def _transform(image):
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,"def to_grayscale(image, keep_channels=True):"
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,"def color_jitter(image, strength, random_order=True):"
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,"def apply_transform(i, x, brightness, contrast, saturation, hue):"
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,"def apply_transform(i, x):"
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,def brightness_transform():
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,def contrast_transform():
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,def saturation_transform():
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,def hue_transform():
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,def random_color_jitter_3d(frames):
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,"def random_color_jitter(image, p=1.0):"
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,def _transform(image):
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,"def gaussian_blur(image, kernel_size, sigma, padding='SAME'):"
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,"def random_blur(image, height, width, p=1.0):"
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,def _transform(image):
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,"def random_blur_3d(frames, height, width, blur_probability=0.5):"
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,"def generate_selector(p, bsz):"
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops.py,"def cdf(k, power=1.0):"
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops_test.py,def setUp(self):
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops_test.py,def test_sample_ssl_sequence(self):
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops_test.py,def test_random_color_jitter_3d(self):
data/raw/repos\official\projects\video_ssl\ops,video_ssl_preprocess_ops_test.py,def test_random_blur_3d(self):
data/raw/repos\official\projects\video_ssl\tasks,linear_eval.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\video_ssl\tasks,pretrain.py,def build_model(self):
data/raw/repos\official\projects\video_ssl\tasks,pretrain.py,"def _get_decoder_fn(self, params):"
data/raw/repos\official\projects\video_ssl\tasks,pretrain.py,"def build_inputs(self, params: exp_cfg.DataConfig, input_context=None):"
data/raw/repos\official\projects\video_ssl\tasks,pretrain.py,"def build_losses(self, model_outputs, num_replicas, model):"
data/raw/repos\official\projects\video_ssl\tasks,pretrain.py,"def build_metrics(self, training=True):"
data/raw/repos\official\projects\video_ssl\tasks,pretrain.py,"def process_metrics(self, metrics, contrastive_metrics):"
data/raw/repos\official\projects\video_ssl\tasks,pretrain.py,"def train_step(self, inputs, model, optimizer, metrics=None):"
data/raw/repos\official\projects\video_ssl\tasks,pretrain.py,"def validation_step(self, inputs, model, metrics=None):"
data/raw/repos\official\projects\video_ssl\tasks,pretrain.py,"def inference_step(self, features, model):"
data/raw/repos\official\projects\video_ssl\tasks,pretrain_test.py,def setUp(self):
data/raw/repos\official\projects\video_ssl\tasks,pretrain_test.py,def test_task(self):
data/raw/repos\official\projects\video_ssl\tasks,pretrain_test.py,def test_task_factory(self):
data/raw/repos\official\projects\volumetric_models,train.py,def main(_):
data/raw/repos\official\projects\volumetric_models,train_test.py,def setUp(self):
data/raw/repos\official\projects\volumetric_models,train_test.py,def test_run(self):
data/raw/repos\official\projects\volumetric_models\configs,semantic_segmentation_3d_test.py,"def test_semantic_segmentation_configs(self, config_name):"
data/raw/repos\official\projects\volumetric_models\dataloaders,segmentation_input_3d_test.py,def setUp(self):
data/raw/repos\official\projects\volumetric_models\evaluation,segmentation_metrics.py,"def update_state(self, y_true: tf.Tensor, y_pred: tf.Tensor):"
data/raw/repos\official\projects\volumetric_models\evaluation,segmentation_metrics.py,def reset_states(self):
data/raw/repos\official\projects\volumetric_models\evaluation,segmentation_metrics_test.py,def test_num_classes_not_equal(self):
data/raw/repos\official\projects\volumetric_models\losses,segmentation_losses_test.py,"def test_supported_loss(self, metric_type, output, expected_score):"
data/raw/repos\official\projects\volumetric_models\modeling,factory_test.py,"def test_unet3d_builder(self, input_size, weight_decay, use_bn):"
data/raw/repos\official\projects\volumetric_models\modeling,nn_blocks_3d.py,"def build(self, input_shape: tf.TensorShape):"
data/raw/repos\official\projects\volumetric_models\modeling,nn_blocks_3d.py,def get_config(self):
data/raw/repos\official\projects\volumetric_models\modeling,nn_blocks_3d.py,"def build(self, input_shape):"
data/raw/repos\official\projects\volumetric_models\modeling,nn_blocks_3d.py,def get_config(self):
data/raw/repos\official\projects\volumetric_models\modeling,nn_blocks_3d.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\volumetric_models\modeling,nn_blocks_3d.py,"def build(self, input_shape):"
data/raw/repos\official\projects\volumetric_models\modeling,nn_blocks_3d.py,def get_config(self):
data/raw/repos\official\projects\volumetric_models\modeling,nn_blocks_3d.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\volumetric_models\modeling,segmentation_model_test.py,"def test_segmentation_network_unet3d_creation(self, input_size, depth):"
data/raw/repos\official\projects\volumetric_models\modeling,segmentation_model_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\volumetric_models\modeling\backbones,unet_3d.py,"def from_config(cls, config: Mapping[str, Any], custom_objects=None):"
data/raw/repos\official\projects\volumetric_models\modeling\backbones,unet_3d_test.py,"def test_network_creation(self, input_size, model_id):"
data/raw/repos\official\projects\volumetric_models\modeling\backbones,unet_3d_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\volumetric_models\modeling\decoders,factory.py,def build_my_decoder():
data/raw/repos\official\projects\volumetric_models\modeling\decoders,factory.py,def register_decoder_builder(key: str):
data/raw/repos\official\projects\volumetric_models\modeling\decoders,factory.py,"def builder(input_specs, config, l2_reg):"
data/raw/repos\official\projects\volumetric_models\modeling\decoders,factory_test.py,"def test_unet_3d_decoder_creation(self, model_id):"
data/raw/repos\official\projects\volumetric_models\modeling\decoders,factory_test.py,def test_identity_creation(self):
data/raw/repos\official\projects\volumetric_models\modeling\decoders,unet_3d_decoder.py,"def from_config(cls, config: Mapping[str, Any], custom_objects=None):"
data/raw/repos\official\projects\volumetric_models\modeling\decoders,unet_3d_decoder_test.py,"def test_network_creation(self, input_size, model_id):"
data/raw/repos\official\projects\volumetric_models\modeling\decoders,unet_3d_decoder_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\volumetric_models\modeling\heads,segmentation_heads_3d.py,"def build(self, input_shape: Union[tf.TensorShape, Sequence[tf.TensorShape]]):"
data/raw/repos\official\projects\volumetric_models\modeling\heads,segmentation_heads_3d.py,"def from_config(cls, config: Mapping[str, Any]):"
data/raw/repos\official\projects\volumetric_models\modeling\heads,segmentation_heads_3d_test.py,"def test_forward(self, level, num_convs, use_bn):"
data/raw/repos\official\projects\volumetric_models\modeling\heads,segmentation_heads_3d_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\volumetric_models\serving,export_saved_model.py,def main(_):
data/raw/repos\official\projects\volumetric_models\serving,semantic_segmentation_3d_test.py,def setUp(self):
data/raw/repos\official\projects\volumetric_models\serving,semantic_segmentation_3d_test.py,def _get_segmentation_module(self):
data/raw/repos\official\projects\volumetric_models\serving,semantic_segmentation_3d_test.py,"def _export_from_module(self, module, input_type: str, save_directory: str):"
data/raw/repos\official\projects\volumetric_models\serving,semantic_segmentation_3d_test.py,"def _get_dummy_input(self, input_type):"
data/raw/repos\official\projects\volumetric_models\serving,semantic_segmentation_3d_test.py,"def test_export(self, input_type: str = 'image_tensor'):"
data/raw/repos\official\projects\volumetric_models\tasks,semantic_segmentation_3d.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\volumetric_models\tasks,semantic_segmentation_3d_test.py,def setUp(self):
data/raw/repos\official\projects\volumetric_models\tasks,semantic_segmentation_3d_test.py,"def test_task(self, config_name):"
data/raw/repos\official\projects\waste_identification_ml\data_generation,utils.py,def plot_image(image: np.ndarray):
data/raw/repos\official\projects\waste_identification_ml\data_generation,utils.py,"def _show_anns(anns: list[dict[str, Any]]):"
data/raw/repos\official\projects\waste_identification_ml\data_generation,utils.py,"def plot_grid(images: list[np.ndarray], n_cols: int):"
data/raw/repos\official\projects\waste_identification_ml\data_generation,utils_test.py,"def compare_elements(elem_list1, elem_list2):"
data/raw/repos\official\projects\waste_identification_ml\data_generation,utils_test.py,def test_convert_coordinates(self):
data/raw/repos\official\projects\waste_identification_ml\data_generation,utils_test.py,def test_area_key(self):
data/raw/repos\official\projects\waste_identification_ml\data_generation,utils_test.py,def test_square_bbox(self):
data/raw/repos\official\projects\waste_identification_ml\data_generation,utils_test.py,def test_same_size_masks(self):
data/raw/repos\official\projects\waste_identification_ml\data_generation,utils_test.py,def test_different_size_masks_error(self):
data/raw/repos\official\projects\waste_identification_ml\data_generation,utils_test.py,def setUp(self):
data/raw/repos\official\projects\waste_identification_ml\data_generation,utils_test.py,def test_same_size_masks(self):
data/raw/repos\official\projects\waste_identification_ml\data_generation,utils_test.py,def test_nested_masks(self):
data/raw/repos\official\projects\waste_identification_ml\data_generation,utils_test.py,def setUp(self):
data/raw/repos\official\projects\waste_identification_ml\data_generation,utils_test.py,def test_generate_coco_json(self):
data/raw/repos\official\projects\waste_identification_ml\docker_solution\prediction_api,app.py,def startup_event():
data/raw/repos\official\projects\waste_identification_ml\docker_solution\prediction_api,app_utils.py,def __init__(self):
data/raw/repos\official\projects\waste_identification_ml\docker_solution\prediction_api,app_utils.py,def load_all_models(self):
data/raw/repos\official\projects\waste_identification_ml\docker_solution\prediction_pipeline,prediction_postprocessing_test.py,def setUp(self):
data/raw/repos\official\projects\waste_identification_ml\docker_solution\prediction_pipeline,prediction_postprocessing_test.py,def test_merge_predictions(self):
data/raw/repos\official\projects\waste_identification_ml\docker_solution\prediction_pipeline,prediction_postprocessing_test.py,def test_merge_predictions_with_empty_results(self):
data/raw/repos\official\projects\waste_identification_ml\docker_solution\prediction_pipeline,prediction_postprocessing_test.py,def test_merge_predictions_with_invalid_category_indices(self):
data/raw/repos\official\projects\waste_identification_ml\docker_solution\prediction_pipeline,prediction_postprocessing_test.py,def test_transform_bounding_boxes(self):
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,inference_utils_test.py,def setUp(self):
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,inference_utils_test.py,def tearDown(self):
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,inference_utils_test.py,def test_plot_prediction_runs_without_error(self):
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,inference_utils_test.py,def test_get_prediction_details(self):
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,inference_utils_test.py,def test_process_image_output(self):
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,inference_utils_test.py,def test_transform_output(self):
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,inference_utils_test.py,"def test_feature_dim_and_freezing(self, mock_torch_load):"
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,inference_utils_test.py,def test_load_vit_classifier_freezing_and_dims(self):
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,inference_utils_test.py,"def test_confusion_matrix_dataframe(self, mock_heatmap):"
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,training_with_callbacks.py,"def check(self, val_loss: float, model: torch.nn.Module, epoch: int):"
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,training_with_callbacks.py,"def save_checkpoint(self, model: torch.nn.Module, epoch: int):"
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,training_with_callbacks_test.py,"def __init__(self, input_size, output_size):"
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,training_with_callbacks_test.py,"def forward(self, x):"
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,training_with_callbacks_test.py,def setUp(self):
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,training_with_callbacks_test.py,def test_train_step(self):
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,training_with_callbacks_test.py,def test_test_step(self):
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,training_with_callbacks_test.py,def test_train_function(self):
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,training_with_callbacks_test.py,def test_train_function_with_early_stopping(self):
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,training_with_callbacks_test.py,def check_side_effect(**kwargs):
data/raw/repos\official\projects\waste_identification_ml\fine_tuning\Pytorch_Image_Classifier,training_with_callbacks_test.py,def test_train_step_calculates_loss_and_accuracy_correctly(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,batched_io.py,"def __init__(self, output_dir: str):"
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,batched_io.py,"def __exit__(self, exc_type, exc_val, exc_tb):"
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,batched_io_test.py,def test_extract_masked_object(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,batched_io_test.py,def test_save_masked_objects_saves_files(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,batched_io_test.py,def test_batched_mask_writer_queues_saves(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,coco_annotation_writer.py,"def __init__(self, category_name: str):"
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,coco_annotation_writer_test.py,def test_add_image_returns_correct_id(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,coco_annotation_writer_test.py,def test_add_image_increments_counter(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,coco_annotation_writer_test.py,def test_add_image_extracts_basename(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,coco_annotation_writer_test.py,def test_add_image_appends_to_list(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,coco_annotation_writer_test.py,def test_add_annotations_returns_count(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,coco_annotation_writer_test.py,def test_add_annotations_multiple_objects(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,coco_annotation_writer_test.py,def test_add_annotations_links_to_image_id(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,coco_annotation_writer_test.py,def test_save_preserves_data(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,coco_annotation_writer_test.py,def test_get_statistics_returns_correct_image_count(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,coco_annotation_writer_test.py,def test_get_statistics_returns_correct_annotation_count(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,coco_annotation_writer_test.py,def test_get_statistics_initial_state(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,models_utils_test.py,def test_filter_boxes_keep_smaller_on_given_data(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,models_utils_test.py,def test_initialize_coco_output_with_category_name(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,models_utils_test.py,def test_simple_rectangle_mask(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,models_utils_test.py,def test_empty_mask(self):
data/raw/repos\official\projects\waste_identification_ml\llm_applications\milk_pouch_detection\src,models_utils_test.py,def test_basic_bbox_calculation(self):
data/raw/repos\official\projects\waste_identification_ml\model_inference,color_and_property_extractor_test.py,def test_extract_properties_and_object_masks(self):
data/raw/repos\official\projects\waste_identification_ml\model_inference,color_and_property_extractor_test.py,def test_find_dominant_color(self):
data/raw/repos\official\projects\waste_identification_ml\model_inference,color_and_property_extractor_test.py,def test_find_dominant_color_black(self):
data/raw/repos\official\projects\waste_identification_ml\model_inference,color_and_property_extractor_test.py,def test_est_color(self):
data/raw/repos\official\projects\waste_identification_ml\model_inference,color_and_property_extractor_test.py,def test_generic_color(self):
data/raw/repos\official\projects\waste_identification_ml\model_inference,download_and_unzip_models.py,"def __init__(self, cmd, returncode, stderr):"
data/raw/repos\official\projects\waste_identification_ml\model_inference,labels_test.py,def test_read_csv_to_list(self):
data/raw/repos\official\projects\waste_identification_ml\model_inference,labels_test.py,def test_categories_dictionary(self):
data/raw/repos\official\projects\waste_identification_ml\model_inference,labels_test.py,def test_load_labels(self):
data/raw/repos\official\projects\waste_identification_ml\model_inference,postprocessing.py,def reframe_box_masks_to_image_masks_default():
data/raw/repos\official\projects\waste_identification_ml\model_inference,postprocessing_test.py,def test_reframe_image_corners_relative_to_boxes(self):
data/raw/repos\official\projects\waste_identification_ml\model_inference,preprocessing_test.py,def test_normalize_image(self):
data/raw/repos\official\projects\waste_identification_ml\model_inference,preprocessing_test.py,def test_normalize_scaled_float_image(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,big_query_ops_test.py,def test_schema_definition(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,feature_extraction_test.py,def test_extract_properties(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,feature_extraction_test.py,def test_extract_properties_empty_masks(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,ffmpeg_ops.py,def get_image_creation_time(image_path):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,ffmpeg_ops_test.py,"def test_find_creation_time(self, mock_ffprobe):"
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,ffmpeg_ops_test.py,"def test_get_image_creation_time_exif(self, mock_open):"
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,ffmpeg_ops_test.py,"def test_get_image_creation_time_no_exif(self, mock_open, mock_getmtime):"
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,ffmpeg_ops_test.py,"def test_get_image_creation_time_file_not_found(self, mock_image_open):"
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,ffmpeg_ops_test.py,"def test_get_image_creation_time_unidentified_image(self, mock_image_open):"
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,mask_bbox_saver_test.py,def setUp(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,mask_bbox_saver_test.py,def test_dataframe_validity(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,mask_bbox_saver_test.py,"def test_visualize_tracking_function_runs(self, mock_imwrite):"
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,mask_bbox_saver_test.py,def test_dataframe_is_valid(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,mask_bbox_saver_test.py,"def mock_resize_bbox(bbox, old_size, new_size):"
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,mask_bbox_saver_test.py,"def test_empty_dataframe_returns_early(self, mock_makedirs):"
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,mask_bbox_saver_test.py,"def mock_resize_bbox(bbox, old_size, new_size):"
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,object_tracking_postprocessing_test.py,def test_particle_grouping(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,object_tracking_postprocessing_test.py,def test_single_class_selection(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,object_tracking_postprocessing_test.py,def test_modal_class_selection(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,object_tracking_postprocessing_test.py,def test_single_class_selection_with_tie(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,object_tracking_postprocessing_test.py,def test_tie_multiple_class_selection(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,object_tracking_test.py,def test_object_tracking_retains_columns(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,object_tracking_test.py,def test_object_tracking_drops_columns(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,triton_server_inference_test.py,"def test_input_conversion_to_rgb(self, mock_imread):"
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,triton_server_inference_test.py,"def test_input_image_resized(self, mock_imread):"
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,triton_server_inference_test.py,"def test_batch_dimension_prepended_to_triton_input(self, mock_imread):"
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,triton_server_inference_test.py,"def test_image_converted_to_infer_input(self, mock_imread):"
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,triton_server_inference_test.py,"def test_infer_input_set(self, mock_imread, mock_set_data_from_numpy):"
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,triton_server_inference_test.py,"def test_inference_output_converted_to_dict(self, mock_query_model):"
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils.py,def reframe_box_masks_to_image_masks_default():
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils.py,def files_paths(folder_path):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils.py,def shutdown_system():
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils_test.py,def test_load_labels(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils_test.py,def test_files_paths_with_images(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils_test.py,def test_files_paths_with_no_images(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils_test.py,def test_files_paths_empty_folder(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils_test.py,def test_resize_multiple_masks(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils_test.py,def test_keeps_biggest_mask(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils_test.py,def test_filter_with_boolean_indices(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils_test.py,def test_filter_with_integer_indices(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils_test.py,def test_both_dimensions_below_min_size(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils_test.py,def test_height_below_min_size(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils_test.py,def test_width_below_min_size(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils_test.py,def test_both_dimensions_above_min_size(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils_test.py,def test_exact_min_size(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils_test.py,def test_extract_and_resize_single_object(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils_test.py,def test_resize_bbox_scaling(self):
data/raw/repos\official\projects\waste_identification_ml\Triton_TF_Cloud_Deployment\client,utils_test.py,def test_resize_bbox_no_scaling(self):
data/raw/repos\official\projects\yolo\configs,yolo.py,"def _build_dict(min_level, max_level, value):"
data/raw/repos\official\projects\yolo\configs,yolo.py,"def _build_path_scales(min_level, max_level):"
data/raw/repos\official\projects\yolo\configs,yolo.py,def get(self):
data/raw/repos\official\projects\yolo\configs,yolo.py,"def get(self, min_level, max_level):"
data/raw/repos\official\projects\yolo\configs,yolo.py,"def set_boxes(self, boxes):"
data/raw/repos\official\projects\yolo\configs,yolov7.py,"def _build_dict(min_level, max_level, value):"
data/raw/repos\official\projects\yolo\configs,yolov7.py,"def _build_path_scales(min_level, max_level):"
data/raw/repos\official\projects\yolo\dataloaders,classification_input.py,"def _parse_train_image(self, decoded_tensors):"
data/raw/repos\official\projects\yolo\dataloaders,classification_input.py,"def _parse_eval_image(self, decoded_tensors):"
data/raw/repos\official\projects\yolo\dataloaders,tf_example_decoder.py,"def _coco91_to_80(classif, box, areas, iscrowds):"
data/raw/repos\official\projects\yolo\dataloaders,tf_example_decoder.py,"def decode(self, serialized_example):"
data/raw/repos\official\projects\yolo\dataloaders,yolo_input.py,"def _pad_infos_object(self, image):"
data/raw/repos\official\projects\yolo\dataloaders,yolo_input.py,"def _parse_train_data(self, data):"
data/raw/repos\official\projects\yolo\dataloaders,yolo_input.py,"def _parse_eval_data(self, data):"
data/raw/repos\official\projects\yolo\dataloaders,yolo_input.py,"def set_shape(self, values, pad_axis=0, pad_value=0, inds=None):"
data/raw/repos\official\projects\yolo\losses,yolov7_loss.py,def smooth_bce_targets(eps=0.1):
data/raw/repos\official\projects\yolo\losses,yolov7_loss.py,def merge_labels(labels):
data/raw/repos\official\projects\yolo\losses,yolov7_loss.py,"def call(self, labels, predictions):"
data/raw/repos\official\projects\yolo\losses,yolov7_loss.py,"def _build_targets(self, labels, predictions):"
data/raw/repos\official\projects\yolo\losses,yolov7_loss.py,def report_separate_losses(self):
data/raw/repos\official\projects\yolo\losses,yolov7_loss.py,def report_stats(self):
data/raw/repos\official\projects\yolo\losses,yolov7_loss.py,def get_config(self):
data/raw/repos\official\projects\yolo\losses,yolov7_loss.py,"def call(self, labels, predictions):"
data/raw/repos\official\projects\yolo\losses,yolov7_loss.py,"def _build_targets(self, labels, predictions, image_info):"
data/raw/repos\official\projects\yolo\losses,yolov7_loss.py,"def _find_three_positives(self, labels, predictions):"
data/raw/repos\official\projects\yolo\losses,yolov7_loss.py,def report_stats(self):
data/raw/repos\official\projects\yolo\losses,yolov7_loss.py,def report_separate_losses(self):
data/raw/repos\official\projects\yolo\losses,yolov7_loss.py,def get_config(self):
data/raw/repos\official\projects\yolo\losses,yolov7_loss_test.py,def build_labels():
data/raw/repos\official\projects\yolo\losses,yolov7_loss_test.py,def build_predictions():
data/raw/repos\official\projects\yolo\losses,yolov7_loss_test.py,def setUp(self):
data/raw/repos\official\projects\yolo\losses,yolov7_loss_test.py,"def test_loss(self, gamma, label_smoothing, auto_balance):"
data/raw/repos\official\projects\yolo\losses,yolov7_loss_test.py,"def test_loss_ota(self, gamma, label_smoothing, auto_balance):"
data/raw/repos\official\projects\yolo\losses,yolo_loss.py,"def box_loss(self, true_box, pred_box, darknet=False):"
data/raw/repos\official\projects\yolo\losses,yolo_loss.py,"def __call__(self, true_counts, inds, y_true, boxes, classes, y_pred):"
data/raw/repos\official\projects\yolo\losses,yolo_loss.py,def _build_per_path_attributes(self):
data/raw/repos\official\projects\yolo\losses,yolo_loss.py,"def _compute_loss(self, true_counts, inds, y_true, boxes, classes, y_pred):"
data/raw/repos\official\projects\yolo\losses,yolo_loss.py,"def cross_replica_aggregation(self, loss, num_replicas_in_sync):"
data/raw/repos\official\projects\yolo\losses,yolo_loss.py,def grad_sigmoid(values):
data/raw/repos\official\projects\yolo\losses,yolo_loss.py,def delta(dy):
data/raw/repos\official\projects\yolo\losses,yolo_loss.py,def _build_per_path_attributes(self):
data/raw/repos\official\projects\yolo\losses,yolo_loss.py,"def _compute_loss(self, true_counts, inds, y_true, boxes, classes, y_pred):"
data/raw/repos\official\projects\yolo\losses,yolo_loss.py,"def cross_replica_aggregation(self, loss, num_replicas_in_sync):"
data/raw/repos\official\projects\yolo\losses,yolo_loss.py,def _build_per_path_attributes(self):
data/raw/repos\official\projects\yolo\losses,yolo_loss.py,"def _compute_loss(self, true_counts, inds, y_true, boxes, classes, y_pred):"
data/raw/repos\official\projects\yolo\losses,yolo_loss.py,"def cross_replica_aggregation(self, loss, num_replicas_in_sync):"
data/raw/repos\official\projects\yolo\losses,yolo_loss.py,"def __call__(self, ground_truth, predictions):"
data/raw/repos\official\projects\yolo\losses,yolo_loss_test.py,"def test_loss_init(self, scaled):"
data/raw/repos\official\projects\yolo\losses,yolo_loss_test.py,"def inpdict(input_shape, dtype=tf.float32):"
data/raw/repos\official\projects\yolo\modeling,factory.py,"def build_yolo_detection_generator(model_config: yolo.Yolo, anchor_boxes):"
data/raw/repos\official\projects\yolo\modeling,factory.py,"def build_yolo_head(input_specs, model_config: yolo.Yolo, l2_regularization):"
data/raw/repos\official\projects\yolo\modeling,factory.py,"def build_yolo(input_specs, model_config, l2_regularization):"
data/raw/repos\official\projects\yolo\modeling,factory.py,"def build_yolov7_detection_generator(model_config: yolo.Yolo, anchor_boxes):"
data/raw/repos\official\projects\yolo\modeling,factory.py,"def build_yolov7(input_specs, model_config, l2_regularization):"
data/raw/repos\official\projects\yolo\modeling,factory_test.py,def test_yolo_builder(self):
data/raw/repos\official\projects\yolo\modeling,factory_test.py,def test_yolov7_builder(self):
data/raw/repos\official\projects\yolo\modeling,yolov7_model.py,"def __init__(self, backbone, decoder, head, detection_generator, **kwargs):"
data/raw/repos\official\projects\yolo\modeling,yolov7_model.py,def backbone(self):
data/raw/repos\official\projects\yolo\modeling,yolov7_model.py,def decoder(self):
data/raw/repos\official\projects\yolo\modeling,yolov7_model.py,def head(self):
data/raw/repos\official\projects\yolo\modeling,yolov7_model.py,def detection_generator(self):
data/raw/repos\official\projects\yolo\modeling,yolov7_model.py,def get_config(self):
data/raw/repos\official\projects\yolo\modeling,yolov7_model.py,"def from_config(cls, config):"
data/raw/repos\official\projects\yolo\modeling,yolov7_model.py,def fuse(self):
data/raw/repos\official\projects\yolo\modeling,yolo_model.py,def backbone(self):
data/raw/repos\official\projects\yolo\modeling,yolo_model.py,def decoder(self):
data/raw/repos\official\projects\yolo\modeling,yolo_model.py,def head(self):
data/raw/repos\official\projects\yolo\modeling,yolo_model.py,def detection_generator(self):
data/raw/repos\official\projects\yolo\modeling,yolo_model.py,def get_config(self):
data/raw/repos\official\projects\yolo\modeling,yolo_model.py,"def from_config(cls, config):"
data/raw/repos\official\projects\yolo\modeling,yolo_model.py,def fuse(self):
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,def build_block_specs(config):
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,def __init__(self):
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,"def conv_bn_config_todict(self, config, kwargs):"
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,"def darktiny_config_todict(self, config, kwargs):"
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,"def maxpool_config_todict(self, config, kwargs):"
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,"def __call__(self, config, kwargs):"
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,def output_specs(self):
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,def splits(self):
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,"def _build_struct(self, net, inputs):"
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,"def _get_activation(self, activation):"
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,"def _csp_stack(self, inputs, config, name):"
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,"def _csp_tiny_stack(self, inputs, config, name):"
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,"def _tiny_stack(self, inputs, config, name):"
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,"def _residual_stack(self, inputs, config, name):"
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,"def _build_block(self, inputs, config, name):"
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,def get_model_config(name):
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,def model_id(self):
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\yolo\modeling\backbones,darknet.py,def get_config(self):
data/raw/repos\official\projects\yolo\modeling\backbones,darknet_test.py,"def test_sync_bn_multiple_devices(self, strategy, use_sync_bn):"
data/raw/repos\official\projects\yolo\modeling\backbones,darknet_test.py,"def test_input_specs(self, input_dim):"
data/raw/repos\official\projects\yolo\modeling\backbones,darknet_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\yolo\modeling\backbones,yolov7.py,def get_config(self):
data/raw/repos\official\projects\yolo\modeling\backbones,yolov7.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\yolo\modeling\backbones,yolov7.py,def output_specs(self):
data/raw/repos\official\projects\yolo\modeling\backbones,yolov7_test.py,"def test_network_creation(self, model_id):"
data/raw/repos\official\projects\yolo\modeling\backbones,yolov7_test.py,"def test_sync_bn_multiple_devices(self, strategy):"
data/raw/repos\official\projects\yolo\modeling\backbones,yolov7_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\yolo\modeling\decoders,yolov7.py,"def _generate_inputs(self, input_specs):"
data/raw/repos\official\projects\yolo\modeling\decoders,yolov7.py,"def _group_layer_inputs(self, from_index, inputs, outputs):"
data/raw/repos\official\projects\yolo\modeling\decoders,yolov7.py,def get_config(self):
data/raw/repos\official\projects\yolo\modeling\decoders,yolov7.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\yolo\modeling\decoders,yolov7.py,def output_specs(self):
data/raw/repos\official\projects\yolo\modeling\decoders,yolov7_test.py,"def test_network_creation(self, model_id):"
data/raw/repos\official\projects\yolo\modeling\decoders,yolov7_test.py,"def test_sync_bn_multiple_devices(self, strategy):"
data/raw/repos\official\projects\yolo\modeling\decoders,yolov7_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\yolo\modeling\decoders,yolo_decoder.py,"def call(self, inputs):"
data/raw/repos\official\projects\yolo\modeling\decoders,yolo_decoder.py,"def get_raw_depths(self, minimum_depth, inputs):"
data/raw/repos\official\projects\yolo\modeling\decoders,yolo_decoder.py,"def build(self, inputs):"
data/raw/repos\official\projects\yolo\modeling\decoders,yolo_decoder.py,"def call(self, inputs):"
data/raw/repos\official\projects\yolo\modeling\decoders,yolo_decoder.py,"def build(self, inputs):"
data/raw/repos\official\projects\yolo\modeling\decoders,yolo_decoder.py,"def get_raw_depths(self, minimum_depth, inputs):"
data/raw/repos\official\projects\yolo\modeling\decoders,yolo_decoder.py,"def call(self, inputs):"
data/raw/repos\official\projects\yolo\modeling\decoders,yolo_decoder.py,def use_fpn(self):
data/raw/repos\official\projects\yolo\modeling\decoders,yolo_decoder.py,def output_specs(self):
data/raw/repos\official\projects\yolo\modeling\decoders,yolo_decoder.py,def get_config(self):
data/raw/repos\official\projects\yolo\modeling\decoders,yolo_decoder.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\yolo\modeling\decoders,yolo_decoder_test.py,"def _build_yolo_decoder(self, input_specs, name='1'):"
data/raw/repos\official\projects\yolo\modeling\decoders,yolo_decoder_test.py,"def test_network_creation(self, version):"
data/raw/repos\official\projects\yolo\modeling\decoders,yolo_decoder_test.py,"def test_sync_bn_multiple_devices(self, strategy, use_sync_bn):"
data/raw/repos\official\projects\yolo\modeling\decoders,yolo_decoder_test.py,"def test_input_specs(self, input_dim):"
data/raw/repos\official\projects\yolo\modeling\decoders,yolo_decoder_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\yolo\modeling\heads,yolov7_head.py,"def _bias_init(self, scale, in_channels, isize=640, no_per_conf=8):"
data/raw/repos\official\projects\yolo\modeling\heads,yolov7_head.py,"def bias(shape, dtype):"
data/raw/repos\official\projects\yolo\modeling\heads,yolov7_head.py,"def build(self, input_shape):"
data/raw/repos\official\projects\yolo\modeling\heads,yolov7_head.py,"def call(self, inputs, training=False):"
data/raw/repos\official\projects\yolo\modeling\heads,yolov7_head.py,def get_config(self):
data/raw/repos\official\projects\yolo\modeling\heads,yolov7_head.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\yolo\modeling\heads,yolov7_head_test.py,"def test_network_creation(self, model_id):"
data/raw/repos\official\projects\yolo\modeling\heads,yolov7_head_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\yolo\modeling\heads,yolo_head.py,"def bias_init(self, scale, inshape, isize=640, no_per_conf=8):"
data/raw/repos\official\projects\yolo\modeling\heads,yolo_head.py,"def bias(shape, dtype):"
data/raw/repos\official\projects\yolo\modeling\heads,yolo_head.py,"def build(self, input_shape):"
data/raw/repos\official\projects\yolo\modeling\heads,yolo_head.py,"def call(self, inputs):"
data/raw/repos\official\projects\yolo\modeling\heads,yolo_head.py,def output_depth(self):
data/raw/repos\official\projects\yolo\modeling\heads,yolo_head.py,def num_boxes(self):
data/raw/repos\official\projects\yolo\modeling\heads,yolo_head.py,def num_heads(self):
data/raw/repos\official\projects\yolo\modeling\heads,yolo_head.py,def get_config(self):
data/raw/repos\official\projects\yolo\modeling\heads,yolo_head.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\projects\yolo\modeling\heads,yolo_head_test.py,def test_network_creation(self):
data/raw/repos\official\projects\yolo\modeling\heads,yolo_head_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\yolo\modeling\layers,detection_generator.py,"def parse_prediction_path(self, key, inputs):"
data/raw/repos\official\projects\yolo\modeling\layers,detection_generator.py,"def __call__(self, inputs):"
data/raw/repos\official\projects\yolo\modeling\layers,detection_generator.py,def get_losses(self):
data/raw/repos\official\projects\yolo\modeling\layers,detection_generator.py,def get_config(self):
data/raw/repos\official\projects\yolo\modeling\layers,detection_generator_test.py,"def test_network_creation(self, nms_version, use_class_agnostic_nms):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def call(self, inputs):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def call(self, x):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,def fuse(self):
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,def get_config(self):
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,def get_config(self):
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def _build_regular(self, input_shape, kwargs):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def _build_reversed(self, input_shape, kwargs):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def _call_regular(self, inputs, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def _call_reversed(self, inputs, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def __init__(self, sizes, **kwargs):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,def get_config(self):
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,def _get_base_layers(self):
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def _insert_spp(self, layer_list):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def _convert_csp(self, layer_list, outputs, csp_stack_size):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def _insert_sam(self, layer_list, outputs):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def _conv1(self, filters, kwargs, csp=False):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def _conv2(self, filters, kwargs, csp=False):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def _csp_route(self, filters, kwargs):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def _csp_connect(self, filters, kwargs):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def _spp(self, filters, kwargs):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def _sam(self, filters, kwargs):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def _call_regular(self, inputs, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def _call_csp(self, inputs, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def call(self, x, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,def get_config(self):
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks.py,def fuse(self):
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks_test.py,"def test_pass_through(self, width, height, filters, mod):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks_test.py,"def test_gradient_pass_though(self, filters, width, height, mod):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks_test.py,"def test_pass_through(self, width, height, filters, mod):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks_test.py,"def test_gradient_pass_though(self, filters, width, height, mod):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks_test.py,"def test_pass_through(self, kernel_size, padding, strides):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks_test.py,"def test_gradient_pass_though(self, filters):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks_test.py,"def test_pass_through(self, width, height, filters, downsample):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks_test.py,"def test_gradient_pass_though(self, filters, width, height, downsample):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks_test.py,"def test_pass_through(self, width, height, channels, sizes):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks_test.py,"def test_gradient_pass_though(self, width, height, channels, sizes):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks_test.py,"def test_pass_through(self, width, height, filters, repetitions, spp):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks_test.py,"def test_gradient_pass_though(self, width, height, filters, repetitions, spp):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks_test.py,"def test_pass_through(self, width, height, filters, pool_sizes, scale):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks_test.py,"def test_pass_through(self, width, height, filters, strides):"
data/raw/repos\official\projects\yolo\modeling\layers,nn_blocks_test.py,"def test_gradient_pass_though(self, width, height, filters, strides):"
data/raw/repos\official\projects\yolo\ops,anchor.py,def _get_mask(self):
data/raw/repos\official\projects\yolo\ops,anchor.py,"def _get_level_limits(self, level_limits):"
data/raw/repos\official\projects\yolo\ops,anchor.py,"def _tie_breaking_search(self, anchors, mask, boxes, classes):"
data/raw/repos\official\projects\yolo\ops,anchor.py,"def _get_centers(self, boxes, classes, anchors, width, height, scale_xy):"
data/raw/repos\official\projects\yolo\ops,anchor.py,"def __call__(self, boxes, classes, width, height):"
data/raw/repos\official\projects\yolo\ops,box_ops.py,def yxyx_to_xcycwh(box: tf.Tensor):
data/raw/repos\official\projects\yolo\ops,box_ops.py,def xcycwh_to_yxyx(box: tf.Tensor):
data/raw/repos\official\projects\yolo\ops,box_ops.py,"def intersect_and_union(box1, box2, yxyx=False):"
data/raw/repos\official\projects\yolo\ops,box_ops.py,"def smallest_encompassing_box(box1, box2, yxyx=False, clip=False):"
data/raw/repos\official\projects\yolo\ops,box_ops.py,"def compute_iou(box1, box2, yxyx=False):"
data/raw/repos\official\projects\yolo\ops,box_ops.py,"def compute_giou(box1, box2, yxyx=False):"
data/raw/repos\official\projects\yolo\ops,box_ops.py,"def compute_diou(box1, box2, beta=1.0, yxyx=False):"
data/raw/repos\official\projects\yolo\ops,box_ops.py,"def compute_ciou(box1, box2, yxyx=False, darknet=False):"
data/raw/repos\official\projects\yolo\ops,box_ops.py,"def aggregated_comparitive_iou(boxes1, boxes2=None, iou_type=0, beta=0.6):"
data/raw/repos\official\projects\yolo\ops,box_ops_test.py,"def test_box_conversions(self, num_boxes):"
data/raw/repos\official\projects\yolo\ops,box_ops_test.py,"def test_ious(self, num_boxes):"
data/raw/repos\official\projects\yolo\ops,initializer_ops.py,def pytorch_kernel_initializer(kernel_initializer):
data/raw/repos\official\projects\yolo\ops,kmeans_anchors.py,"def _iou(x, centroids_x, iou_type=""iou""):"
data/raw/repos\official\projects\yolo\ops,kmeans_anchors.py,def boxes(self):
data/raw/repos\official\projects\yolo\ops,kmeans_anchors.py,"def get_box_from_dataset(self, dataset, num_samples=-1):"
data/raw/repos\official\projects\yolo\ops,kmeans_anchors.py,"def get_init_centroids(self, boxes, k):"
data/raw/repos\official\projects\yolo\ops,kmeans_anchors.py,"def iou(self, boxes, clusters):"
data/raw/repos\official\projects\yolo\ops,kmeans_anchors.py,"def maximization(self, boxes, clusters, assignments):"
data/raw/repos\official\projects\yolo\ops,kmeans_anchors.py,"def _kmeans(self, boxes, clusters, k, max_iters=1000):"
data/raw/repos\official\projects\yolo\ops,kmeans_anchors.py,"def run_kmeans(self, k, boxes, clusters=None):"
data/raw/repos\official\projects\yolo\ops,kmeans_anchors.py,"def _avg_iou(self, boxes, clusters, assignments):"
data/raw/repos\official\projects\yolo\ops,kmeans_anchors.py,"def avg_iou_total(self, boxes, clusters):"
data/raw/repos\official\projects\yolo\ops,kmeans_anchors.py,"def get_boxes(self, boxes_, clusters, assignments=None):"
data/raw/repos\official\projects\yolo\ops,kmeans_anchors_test.py,"def test_kmeans(self, k, anchors_per_scale, samples):"
data/raw/repos\official\projects\yolo\ops,loss_utils.py,"def sigmoid_bce(y, x_prime, label_smoothing):"
data/raw/repos\official\projects\yolo\ops,loss_utils.py,def delta(dpass):
data/raw/repos\official\projects\yolo\ops,loss_utils.py,"def apply_mask(mask, x, value=0):"
data/raw/repos\official\projects\yolo\ops,loss_utils.py,"def build_grid(indexes, truths, preds, ind_mask, update=False, grid=None):"
data/raw/repos\official\projects\yolo\ops,loss_utils.py,"def __init__(self, anchors, scale_anchors=None):"
data/raw/repos\official\projects\yolo\ops,loss_utils.py,"def _build_grid_points(self, lheight, lwidth, anchors, dtype):"
data/raw/repos\official\projects\yolo\ops,loss_utils.py,"def _build_anchor_grid(self, height, width, anchors, dtype):"
data/raw/repos\official\projects\yolo\ops,loss_utils.py,"def _extend_batch(self, grid, batch_size):"
data/raw/repos\official\projects\yolo\ops,loss_utils.py,"def __call__(self, height, width, batch_size, dtype=None):"
data/raw/repos\official\projects\yolo\ops,loss_utils.py,"def box_iou(self, true_box, pred_box):"
data/raw/repos\official\projects\yolo\ops,loss_utils.py,def average_iou(iou):
data/raw/repos\official\projects\yolo\ops,loss_utils.py,"def delta(unused_dy_scaler, dy_scaled, dy):"
data/raw/repos\official\projects\yolo\ops,loss_utils.py,"def delta(unused_dy_scaler, dy_scaled, dy):"
data/raw/repos\official\projects\yolo\ops,math_ops.py,"def rm_nan_inf(x, val=0.0):"
data/raw/repos\official\projects\yolo\ops,math_ops.py,"def rm_nan(x, val=0.0):"
data/raw/repos\official\projects\yolo\ops,math_ops.py,"def divide_no_nan(a, b):"
data/raw/repos\official\projects\yolo\ops,mosaic.py,"def _generate_cut(self, num_tiles, mosaic_center):"
data/raw/repos\official\projects\yolo\ops,mosaic.py,"def scale_boxes(self, patch, ishape, boxes, x_offset, y_offset):"
data/raw/repos\official\projects\yolo\ops,mosaic.py,"def _select_ind(self, inds, *args):"
data/raw/repos\official\projects\yolo\ops,mosaic.py,"def _process_image(self, sample, shiftx, shifty, cut, letter_box):"
data/raw/repos\official\projects\yolo\ops,mosaic.py,"def _patch(self, patches, ishape, num_rows, num_cols, mosaic_center):"
data/raw/repos\official\projects\yolo\ops,mosaic.py,"def _mosaic(self, *patch_samples):"
data/raw/repos\official\projects\yolo\ops,mosaic.py,"def _mosaic4(self, *samples):"
data/raw/repos\official\projects\yolo\ops,mosaic.py,"def _mosaic9(self, *samples):"
data/raw/repos\official\projects\yolo\ops,mosaic.py,"def _beta(self, alpha, beta):"
data/raw/repos\official\projects\yolo\ops,mosaic.py,"def _mixup(self, one, two):"
data/raw/repos\official\projects\yolo\ops,mosaic.py,"def _add_param(self, sample):"
data/raw/repos\official\projects\yolo\ops,mosaic.py,"def _apply(self, dataset):"
data/raw/repos\official\projects\yolo\ops,mosaic.py,"def _skip(self, dataset):"
data/raw/repos\official\projects\yolo\ops,mosaic.py,"def mosaic_fn(self, is_training=True):"
data/raw/repos\official\projects\yolo\ops,preprocessing_ops.py,def set_random_seeds(seed=0):
data/raw/repos\official\projects\yolo\ops,preprocessing_ops.py,"def random_scale(val, dtype=tf.float32, seed=None):"
data/raw/repos\official\projects\yolo\ops,preprocessing_ops.py,"def pad_max_instances(value, instances, pad_value=0, pad_axis=0):"
data/raw/repos\official\projects\yolo\ops,preprocessing_ops.py,def get_image_shape(image):
data/raw/repos\official\projects\yolo\ops,preprocessing_ops.py,"def _augment_hsv_darknet(image, rh, rs, rv, seed=None):"
data/raw/repos\official\projects\yolo\ops,preprocessing_ops.py,"def _augment_hsv_torch(image, rh, rs, rv, seed=None):"
data/raw/repos\official\projects\yolo\ops,preprocessing_ops.py,"def image_rand_hsv(image, rh, rs, rv, seed=None, darknet=False):"
data/raw/repos\official\projects\yolo\ops,preprocessing_ops.py,"def cast(values, dtype):"
data/raw/repos\official\projects\yolo\ops,preprocessing_ops.py,"def intersection(a, b):"
data/raw/repos\official\projects\yolo\ops,preprocessing_ops.py,"def cast(values, dtype):"
data/raw/repos\official\projects\yolo\ops,preprocessing_ops.py,"def affine_warp_boxes(affine, boxes, output_size, box_history):"
data/raw/repos\official\projects\yolo\ops,preprocessing_ops.py,def _get_corners(box):
data/raw/repos\official\projects\yolo\ops,preprocessing_ops.py,def _corners_to_boxes(corner):
data/raw/repos\official\projects\yolo\ops,preprocessing_ops.py,"def _aug_boxes(affine_matrix, box):"
data/raw/repos\official\projects\yolo\ops,preprocessing_ops.py,"def resize_and_crop_boxes(boxes, image_scale, output_size, offset, box_history):"
data/raw/repos\official\projects\yolo\ops,preprocessing_ops.py,def get_valid_boxes(boxes):
data/raw/repos\official\projects\yolo\ops,preprocessing_ops_test.py,"def testPadMaxInstances(self, input_shape, instances, pad_axis):"
data/raw/repos\official\projects\yolo\ops,preprocessing_ops_test.py,"def testGetImageShape(self, image_height, image_width):"
data/raw/repos\official\projects\yolo\ops,preprocessing_ops_test.py,"def testResizeAndJitterImage(self, image_height, image_width, desired_size):"
data/raw/repos\official\projects\yolo\ops,preprocessing_ops_test.py,"def testAffineWarpBoxes(self, affine, num_boxes):"
data/raw/repos\official\projects\yolo\ops,preprocessing_ops_test.py,"def testBoxCandidates(self, output_size, boxes):"
data/raw/repos\official\projects\yolo\ops,preprocessing_ops_test.py,"def testResizeAndCropBoxes(self, num_boxes, image_scale, output_size, offset):"
data/raw/repos\official\projects\yolo\optimization,optimizer_factory.py,"def get_bias_lr_schedule(self, bias_lr):"
data/raw/repos\official\projects\yolo\optimization,optimizer_factory.py,"def add_ema(self, optimizer):"
data/raw/repos\official\projects\yolo\optimization,sgd_torch.py,def _var_key(var):
data/raw/repos\official\projects\yolo\optimization,sgd_torch.py,"def set_bias_lr(self, lr):"
data/raw/repos\official\projects\yolo\optimization,sgd_torch.py,"def set_other_lr(self, lr):"
data/raw/repos\official\projects\yolo\optimization,sgd_torch.py,"def _search(self, var, keys):"
data/raw/repos\official\projects\yolo\optimization,sgd_torch.py,"def search_and_set_variable_groups(self, variables):"
data/raw/repos\official\projects\yolo\optimization,sgd_torch.py,"def _set_variable_groups(self, weights, biases, others):"
data/raw/repos\official\projects\yolo\optimization,sgd_torch.py,"def _get_variable_group(self, var, coefficients):"
data/raw/repos\official\projects\yolo\optimization,sgd_torch.py,"def _create_slots(self, var_list):"
data/raw/repos\official\projects\yolo\optimization,sgd_torch.py,"def _get_momentum(self, iteration):"
data/raw/repos\official\projects\yolo\optimization,sgd_torch.py,"def _prepare_local(self, var_device, var_dtype, apply_state):"
data/raw/repos\official\projects\yolo\optimization,sgd_torch.py,"def _apply(self, grad, var, weight_decay, momentum, lr):"
data/raw/repos\official\projects\yolo\optimization,sgd_torch.py,"def _run_sgd(self, grad, var, apply_state=None):"
data/raw/repos\official\projects\yolo\optimization,sgd_torch.py,"def _resource_apply_dense(self, grad, var, apply_state=None):"
data/raw/repos\official\projects\yolo\optimization,sgd_torch.py,"def _resource_apply_sparse(self, grad, var, indices, apply_state=None):"
data/raw/repos\official\projects\yolo\optimization,sgd_torch.py,def get_config(self):
data/raw/repos\official\projects\yolo\optimization,sgd_torch.py,def learning_rate(self):
data/raw/repos\official\projects\yolo\serving,export_module_factory.py,def preprocess_fn(inputs):
data/raw/repos\official\projects\yolo\serving,export_module_factory.py,def preprocess_image_fn(inputs):
data/raw/repos\official\projects\yolo\serving,export_module_factory.py,def postprocess_fn(logits):
data/raw/repos\official\projects\yolo\serving,export_module_factory.py,def preprocess_fn(inputs):
data/raw/repos\official\projects\yolo\serving,export_module_factory.py,def normalize_image_fn(inputs):
data/raw/repos\official\projects\yolo\serving,export_module_factory.py,def preprocess_image_fn(inputs):
data/raw/repos\official\projects\yolo\serving,export_module_factory.py,"def inference_steps(inputs, model):"
data/raw/repos\official\projects\yolo\serving,export_saved_model.py,def main(_):
data/raw/repos\official\projects\yolo\tasks,image_classification.py,"def build_inputs(self, params, input_context=None):"
data/raw/repos\official\projects\yolo\tasks,task_utils.py,"def __init__(self, metric_names, name=""ListMetrics""):"
data/raw/repos\official\projects\yolo\tasks,task_utils.py,def build_metric(self):
data/raw/repos\official\projects\yolo\tasks,task_utils.py,"def update_state(self, loss_metrics):"
data/raw/repos\official\projects\yolo\tasks,task_utils.py,def result(self):
data/raw/repos\official\projects\yolo\tasks,task_utils.py,def reset_states(self):
data/raw/repos\official\projects\yolo\tasks,yolo.py,"def __init__(self, params, logging_dir: Optional[str] = None):"
data/raw/repos\official\projects\yolo\tasks,yolo.py,def generate_anchors(self):
data/raw/repos\official\projects\yolo\tasks,yolo.py,def build_model(self):
data/raw/repos\official\projects\yolo\tasks,yolo.py,"def _get_data_decoder(self, params):"
data/raw/repos\official\projects\yolo\tasks,yolo.py,"def build_inputs(self, params, input_context=None):"
data/raw/repos\official\projects\yolo\tasks,yolo.py,"def build_metrics(self, training=True):"
data/raw/repos\official\projects\yolo\tasks,yolo.py,"def build_losses(self, outputs, labels, aux_losses=None):"
data/raw/repos\official\projects\yolo\tasks,yolo.py,"def train_step(self, inputs, model, optimizer, metrics=None):"
data/raw/repos\official\projects\yolo\tasks,yolo.py,"def _reorg_boxes(self, boxes, info, num_detections):"
data/raw/repos\official\projects\yolo\tasks,yolo.py,"def validation_step(self, inputs, model, metrics=None):"
data/raw/repos\official\projects\yolo\tasks,yolo.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\projects\yolo\tasks,yolo.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\projects\yolo\tasks,yolo.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\yolo\tasks,yolov7.py,"def __init__(self, params, logging_dir: Optional[str] = None):"
data/raw/repos\official\projects\yolo\tasks,yolov7.py,def generate_anchors(self):
data/raw/repos\official\projects\yolo\tasks,yolov7.py,def build_model(self):
data/raw/repos\official\projects\yolo\tasks,yolov7.py,"def _get_data_decoder(self, params):"
data/raw/repos\official\projects\yolo\tasks,yolov7.py,"def build_inputs(self, params, input_context=None):"
data/raw/repos\official\projects\yolo\tasks,yolov7.py,"def build_metrics(self, training=True):"
data/raw/repos\official\projects\yolo\tasks,yolov7.py,"def build_losses(self, outputs, labels, aux_losses=None):"
data/raw/repos\official\projects\yolo\tasks,yolov7.py,"def train_step(self, inputs, model, optimizer, metrics=None):"
data/raw/repos\official\projects\yolo\tasks,yolov7.py,"def _reorg_boxes(self, boxes, info, num_detections):"
data/raw/repos\official\projects\yolo\tasks,yolov7.py,"def validation_step(self, inputs, model, metrics=None):"
data/raw/repos\official\projects\yolo\tasks,yolov7.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\projects\yolo\tasks,yolov7.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\projects\yolo\tasks,yolov7.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\projects\yt8m,train_test.py,def setUp(self):
data/raw/repos\official\projects\yt8m\configs,yt8m.py,def yt8m(is_training):
data/raw/repos\official\projects\yt8m\configs,yt8m_test.py,"def test_yt8m_configs(self, config_name):"
data/raw/repos\official\projects\yt8m\dataloaders,utils.py,"def dequantize(feat_vector, max_quantized_value=2, min_quantized_value=-2):"
data/raw/repos\official\projects\yt8m\dataloaders,utils.py,"def make_summary(name, value):"
data/raw/repos\official\projects\yt8m\dataloaders,utils.py,"def get_list_of_feature_names_and_sizes(feature_names, feature_sizes):"
data/raw/repos\official\projects\yt8m\dataloaders,utils.py,"def sample_random_sequence(batch_video_matrix, num_frames, num_samples):"
data/raw/repos\official\projects\yt8m\dataloaders,utils.py,"def sample_random_frames(batch_video_matrix, num_frames, num_samples):"
data/raw/repos\official\projects\yt8m\dataloaders,yt8m_input.py,"def resize_axis(tensor, axis, new_size, fill_value=0):"
data/raw/repos\official\projects\yt8m\dataloaders,yt8m_input.py,def _add_labels_specification(self):
data/raw/repos\official\projects\yt8m\dataloaders,yt8m_input.py,"def _parse_train_data(self, decoded_tensors):"
data/raw/repos\official\projects\yt8m\dataloaders,yt8m_input.py,"def _parse_eval_data(self, decoded_tensors):"
data/raw/repos\official\projects\yt8m\dataloaders,yt8m_input.py,"def _process_label(self, video_matrix, num_frames, contexts):"
data/raw/repos\official\projects\yt8m\dataloaders,yt8m_input.py,"def parse_fn(self, is_training):"
data/raw/repos\official\projects\yt8m\dataloaders,yt8m_input.py,def parse(decoded_tensors):
data/raw/repos\official\projects\yt8m\dataloaders,yt8m_input.py,"def __init__(self, input_params: exp_cfg.DataConfig):"
data/raw/repos\official\projects\yt8m\dataloaders,yt8m_input.py,"def batch_fn(self, dataset, input_context):"
data/raw/repos\official\projects\yt8m\dataloaders,yt8m_input.py,"def __init__(self, input_params: exp_cfg.DataConfig):"
data/raw/repos\official\projects\yt8m\dataloaders,yt8m_input_test.py,def setUp(self):
data/raw/repos\official\projects\yt8m\dataloaders,yt8m_input_test.py,"def create_input_reader(self, params):"
data/raw/repos\official\projects\yt8m\dataloaders,yt8m_input_test.py,"def test_read_video_level_input(self, include_video_id, num_sample_frames):"
data/raw/repos\official\projects\yt8m\dataloaders,yt8m_input_test.py,"def test_read_segment_level_input(self, include_video_id, num_sample_frames):"
data/raw/repos\official\projects\yt8m\eval_utils,average_precision_calculator.py,"def __init__(self, top_n=None):"
data/raw/repos\official\projects\yt8m\eval_utils,average_precision_calculator.py,def heap_size(self):
data/raw/repos\official\projects\yt8m\eval_utils,average_precision_calculator.py,def num_accumulated_positives(self):
data/raw/repos\official\projects\yt8m\eval_utils,average_precision_calculator.py,"def accumulate(self, predictions, actuals, num_positives=None):"
data/raw/repos\official\projects\yt8m\eval_utils,average_precision_calculator.py,def clear(self):
data/raw/repos\official\projects\yt8m\eval_utils,average_precision_calculator.py,def peek_ap_at_n(self):
data/raw/repos\official\projects\yt8m\eval_utils,average_precision_calculator.py,"def ap(predictions, actuals):"
data/raw/repos\official\projects\yt8m\eval_utils,average_precision_calculator.py,"def ap_at_n(predictions, actuals, n=20, total_num_positives=None):"
data/raw/repos\official\projects\yt8m\eval_utils,average_precision_calculator.py,"def _shuffle(predictions, actuals):"
data/raw/repos\official\projects\yt8m\eval_utils,average_precision_calculator.py,"def _zero_one_normalize(predictions, epsilon=1e-7):"
data/raw/repos\official\projects\yt8m\eval_utils,eval_util.py,def flatten(l):
data/raw/repos\official\projects\yt8m\eval_utils,eval_util.py,"def calculate_hit_at_one(predictions, actuals):"
data/raw/repos\official\projects\yt8m\eval_utils,eval_util.py,"def calculate_precision_at_equal_recall_rate(predictions, actuals):"
data/raw/repos\official\projects\yt8m\eval_utils,eval_util.py,"def calculate_gap(predictions, actuals, top_k=20):"
data/raw/repos\official\projects\yt8m\eval_utils,eval_util.py,"def top_k_by_class(predictions, labels, k=20):"
data/raw/repos\official\projects\yt8m\eval_utils,eval_util.py,"def top_k_triplets(predictions, labels, k=20):"
data/raw/repos\official\projects\yt8m\eval_utils,eval_util.py,"def __init__(self, num_class, top_k, top_n):"
data/raw/repos\official\projects\yt8m\eval_utils,eval_util.py,"def accumulate(self, predictions, labels):"
data/raw/repos\official\projects\yt8m\eval_utils,eval_util.py,"def get(self, return_per_class_ap=False):"
data/raw/repos\official\projects\yt8m\eval_utils,eval_util.py,def clear(self):
data/raw/repos\official\projects\yt8m\eval_utils,eval_util.py,def name(self):
data/raw/repos\official\projects\yt8m\eval_utils,eval_util.py,"def _convert_to_numpy(self, groundtruths, predictions):"
data/raw/repos\official\projects\yt8m\eval_utils,eval_util_test.py,def setUp(self):
data/raw/repos\official\projects\yt8m\eval_utils,eval_util_test.py,def test_ap_calculator_ap(self):
data/raw/repos\official\projects\yt8m\eval_utils,eval_util_test.py,def test_ap_calculator_zero_one_normalize(self):
data/raw/repos\official\projects\yt8m\eval_utils,eval_util_test.py,"def test_ap_calculator_ap_at_n(self, n):"
data/raw/repos\official\projects\yt8m\eval_utils,mean_average_precision_calculator.py,"def __init__(self, num_class, filter_empty_classes=True, top_n=None):"
data/raw/repos\official\projects\yt8m\eval_utils,mean_average_precision_calculator.py,"def accumulate(self, predictions, actuals, num_positives=None):"
data/raw/repos\official\projects\yt8m\eval_utils,mean_average_precision_calculator.py,def clear(self):
data/raw/repos\official\projects\yt8m\eval_utils,mean_average_precision_calculator.py,def is_empty(self):
data/raw/repos\official\projects\yt8m\eval_utils,mean_average_precision_calculator.py,def peek_map_at_n(self):
data/raw/repos\official\projects\yt8m\eval_utils,mean_average_precision_calculator.py,def peek_log_weighted_map_at_n(self):
data/raw/repos\official\projects\yt8m\modeling,nn_layers.py,"def build(self, input_shape):"
data/raw/repos\official\projects\yt8m\modeling,nn_layers.py,"def call(self, inputs: tf.Tensor):"
data/raw/repos\official\projects\yt8m\modeling,yt8m_model.py,def build_head(self):
data/raw/repos\official\projects\yt8m\modeling,yt8m_model.py,def get_config(self):
data/raw/repos\official\projects\yt8m\modeling,yt8m_model.py,"def from_config(cls, config):"
data/raw/repos\official\projects\yt8m\modeling,yt8m_model_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\projects\yt8m\modeling,yt8m_model_utils.py,def _large_compatible_negative(tensor_type):
data/raw/repos\official\projects\yt8m\modeling,yt8m_model_utils.py,"def weighted_average_pooling(features, weights, axis):"
data/raw/repos\official\projects\yt8m\modeling,yt8m_model_utils.py,"def frame_pooling(frames, method=""average"", num_frames=None):"
data/raw/repos\official\projects\yt8m\modeling,yt8m_model_utils_test.py,"def test_frame_pooling(self, frame_pooling, use_frame_mask):"
data/raw/repos\official\projects\yt8m\tasks,yt8m_task.py,def build_model(self):
data/raw/repos\official\projects\yt8m\tasks,yt8m_task.py,"def build_inputs(self, params: yt8m_cfg.DataConfig, input_context=None):"
data/raw/repos\official\projects\yt8m\tasks,yt8m_task.py,"def build_metrics(self, training=True):"
data/raw/repos\official\projects\yt8m\tasks,yt8m_task.py,"def train_step(self, inputs, model, optimizer, metrics=None):"
data/raw/repos\official\projects\yt8m\tasks,yt8m_task.py,"def validation_step(self, inputs, model, metrics=None):"
data/raw/repos\official\projects\yt8m\tasks,yt8m_task.py,"def inference_step(self, model, inputs, require_num_frames=True):"
data/raw/repos\official\projects\yt8m\tasks,yt8m_task.py,"def aggregate_logs(self, state=None, step_logs=None):"
data/raw/repos\official\projects\yt8m\tasks,yt8m_task.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\recommendation,create_ncf_data.py,def prepare_raw_data(flag_obj):
data/raw/repos\official\recommendation,create_ncf_data.py,def generate_data():
data/raw/repos\official\recommendation,create_ncf_data.py,def main(_):
data/raw/repos\official\recommendation,data_pipeline.py,def current_data_root(self):
data/raw/repos\official\recommendation,data_pipeline.py,def buffer_reached(self):
data/raw/repos\official\recommendation,data_pipeline.py,def serialize(data):
data/raw/repos\official\recommendation,data_pipeline.py,def create_int_feature(values):
data/raw/repos\official\recommendation,data_pipeline.py,"def deserialize(serialized_data, batch_size=None, is_training=True):"
data/raw/repos\official\recommendation,data_pipeline.py,"def _get_feature_map(batch_size, is_training=True):"
data/raw/repos\official\recommendation,data_pipeline.py,"def put(self, index, data):"
data/raw/repos\official\recommendation,data_pipeline.py,def start_construction(self):
data/raw/repos\official\recommendation,data_pipeline.py,def end_construction(self):
data/raw/repos\official\recommendation,data_pipeline.py,"def data_generator(self, epochs_between_evals):"
data/raw/repos\official\recommendation,data_pipeline.py,def increment_request_epoch(self):
data/raw/repos\official\recommendation,data_pipeline.py,"def get_dataset(self, batch_size, epochs_between_evals):"
data/raw/repos\official\recommendation,data_pipeline.py,"def make_input_fn(self, batch_size):"
data/raw/repos\official\recommendation,data_pipeline.py,def input_fn(params):
data/raw/repos\official\recommendation,data_pipeline.py,def __str__(self):
data/raw/repos\official\recommendation,data_pipeline.py,"def _count_batches(example_count, batch_size, batches_per_step):"
data/raw/repos\official\recommendation,data_pipeline.py,def stop_loop(self):
data/raw/repos\official\recommendation,data_pipeline.py,def construct_lookup_variables(self):
data/raw/repos\official\recommendation,data_pipeline.py,"def lookup_negative_items(self, **kwargs):"
data/raw/repos\official\recommendation,data_pipeline.py,def _run(self):
data/raw/repos\official\recommendation,data_pipeline.py,def run(self):
data/raw/repos\official\recommendation,data_pipeline.py,def _start_shuffle_iterator(self):
data/raw/repos\official\recommendation,data_pipeline.py,"def _get_training_batch(self, i):"
data/raw/repos\official\recommendation,data_pipeline.py,def _wait_to_construct_train_epoch(self):
data/raw/repos\official\recommendation,data_pipeline.py,def _construct_training_epoch(self):
data/raw/repos\official\recommendation,data_pipeline.py,"def _get_eval_batch(self, i):"
data/raw/repos\official\recommendation,data_pipeline.py,def _construct_eval_epoch(self):
data/raw/repos\official\recommendation,data_pipeline.py,"def make_input_fn(self, is_training):"
data/raw/repos\official\recommendation,data_pipeline.py,def increment_request_epoch(self):
data/raw/repos\official\recommendation,data_pipeline.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\recommendation,data_pipeline.py,def run(self):
data/raw/repos\official\recommendation,data_pipeline.py,def stop_loop(self):
data/raw/repos\official\recommendation,data_pipeline.py,def increment_request_epoch(self):
data/raw/repos\official\recommendation,data_pipeline.py,def make_input_fn(is_training):
data/raw/repos\official\recommendation,data_pipeline.py,def input_fn(params):
data/raw/repos\official\recommendation,data_pipeline.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\recommendation,data_pipeline.py,def construct_lookup_variables(self):
data/raw/repos\official\recommendation,data_pipeline.py,"def lookup_negative_items(self, negative_users, **kwargs):"
data/raw/repos\official\recommendation,data_pipeline.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\recommendation,data_pipeline.py,"def _index_segment(self, user):"
data/raw/repos\official\recommendation,data_pipeline.py,def construct_lookup_variables(self):
data/raw/repos\official\recommendation,data_pipeline.py,"def lookup_negative_items(self, negative_users, **kwargs):"
data/raw/repos\official\recommendation,data_pipeline.py,def get_constructor(name):
data/raw/repos\official\recommendation,data_test.py,"def mock_download(*args, **kwargs):"
data/raw/repos\official\recommendation,data_test.py,def setUp(self):
data/raw/repos\official\recommendation,data_test.py,"def make_params(self, train_epochs=1):"
data/raw/repos\official\recommendation,data_test.py,def test_preprocessing(self):
data/raw/repos\official\recommendation,data_test.py,"def drain_dataset(self, dataset, g):"
data/raw/repos\official\recommendation,data_test.py,"def _test_end_to_end(self, constructor_type):"
data/raw/repos\official\recommendation,data_test.py,"def _test_fresh_randomness(self, constructor_type):"
data/raw/repos\official\recommendation,data_test.py,def test_end_to_end_materialized(self):
data/raw/repos\official\recommendation,data_test.py,def test_end_to_end_bisection(self):
data/raw/repos\official\recommendation,data_test.py,def test_fresh_randomness_materialized(self):
data/raw/repos\official\recommendation,data_test.py,def test_fresh_randomness_bisection(self):
data/raw/repos\official\recommendation,movielens.py,"def _download_and_clean(dataset, data_dir):"
data/raw/repos\official\recommendation,movielens.py,"def _transform_csv(input_path, output_path, names, skip_first, separator="",""):"
data/raw/repos\official\recommendation,movielens.py,def _regularize_1m_dataset(temp_dir):
data/raw/repos\official\recommendation,movielens.py,def _regularize_20m_dataset(temp_dir):
data/raw/repos\official\recommendation,movielens.py,"def download(dataset, data_dir):"
data/raw/repos\official\recommendation,movielens.py,"def ratings_csv_to_dataframe(data_dir, dataset):"
data/raw/repos\official\recommendation,movielens.py,"def csv_to_joint_dataframe(data_dir, dataset):"
data/raw/repos\official\recommendation,movielens.py,def integerize_genres(dataframe):
data/raw/repos\official\recommendation,movielens.py,def _map_fn(entry):
data/raw/repos\official\recommendation,movielens.py,def define_flags():
data/raw/repos\official\recommendation,movielens.py,def define_data_download_flags():
data/raw/repos\official\recommendation,movielens.py,def main(_):
data/raw/repos\official\recommendation,ncf_common.py,def get_inputs(params):
data/raw/repos\official\recommendation,ncf_common.py,def parse_flags(flags_obj):
data/raw/repos\official\recommendation,ncf_common.py,def get_v1_distribution_strategy(params):
data/raw/repos\official\recommendation,ncf_common.py,def define_ncf_flags():
data/raw/repos\official\recommendation,ncf_common.py,def eval_size_check(eval_batch_size):
data/raw/repos\official\recommendation,ncf_common.py,def convert_to_softmax_logits(logits):
data/raw/repos\official\recommendation,ncf_input_pipeline.py,"def create_dataset_from_data_producer(producer, params):"
data/raw/repos\official\recommendation,ncf_input_pipeline.py,"def preprocess_train_input(features, labels):"
data/raw/repos\official\recommendation,ncf_input_pipeline.py,def preprocess_eval_input(features):
data/raw/repos\official\recommendation,ncf_keras_main.py,"def metric_fn(logits, dup_mask, match_mlperf):"
data/raw/repos\official\recommendation,ncf_keras_main.py,"def __init__(self, match_mlperf):"
data/raw/repos\official\recommendation,ncf_keras_main.py,def get_config(self):
data/raw/repos\official\recommendation,ncf_keras_main.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\recommendation,ncf_keras_main.py,"def call(self, inputs, training=False):"
data/raw/repos\official\recommendation,ncf_keras_main.py,"def __init__(self, loss_normalization_factor):"
data/raw/repos\official\recommendation,ncf_keras_main.py,def get_config(self):
data/raw/repos\official\recommendation,ncf_keras_main.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\recommendation,ncf_keras_main.py,"def call(self, inputs):"
data/raw/repos\official\recommendation,ncf_keras_main.py,"def __init__(self, producer):"
data/raw/repos\official\recommendation,ncf_keras_main.py,"def on_epoch_begin(self, epoch, logs=None):"
data/raw/repos\official\recommendation,ncf_keras_main.py,"def __init__(self, monitor, desired_value):"
data/raw/repos\official\recommendation,ncf_keras_main.py,"def on_epoch_end(self, epoch, logs=None):"
data/raw/repos\official\recommendation,ncf_keras_main.py,"def on_train_end(self, logs=None):"
data/raw/repos\official\recommendation,ncf_keras_main.py,"def get_monitor_value(self, logs):"
data/raw/repos\official\recommendation,ncf_keras_main.py,def _get_keras_model(params):
data/raw/repos\official\recommendation,ncf_keras_main.py,def run_ncf(_):
data/raw/repos\official\recommendation,ncf_keras_main.py,def train_step(train_iterator):
data/raw/repos\official\recommendation,ncf_keras_main.py,def step_fn(features):
data/raw/repos\official\recommendation,ncf_keras_main.py,def eval_step(eval_iterator):
data/raw/repos\official\recommendation,ncf_keras_main.py,def step_fn(features):
data/raw/repos\official\recommendation,ncf_keras_main.py,"def build_stats(loss, eval_result, time_callback):"
data/raw/repos\official\recommendation,ncf_keras_main.py,def main(_):
data/raw/repos\official\recommendation,ncf_test.py,def setUpClass(cls):
data/raw/repos\official\recommendation,ncf_test.py,def setUp(self):
data/raw/repos\official\recommendation,ncf_test.py,def tearDown(self):
data/raw/repos\official\recommendation,ncf_test.py,def test_end_to_end_keras_no_dist_strat(self):
data/raw/repos\official\recommendation,ncf_test.py,def test_end_to_end_keras_dist_strat(self):
data/raw/repos\official\recommendation,ncf_test.py,def test_end_to_end_keras_dist_strat_ctl(self):
data/raw/repos\official\recommendation,ncf_test.py,def test_end_to_end_keras_1_gpu_dist_strat_fp16(self):
data/raw/repos\official\recommendation,ncf_test.py,def test_end_to_end_keras_1_gpu_dist_strat_ctl_fp16(self):
data/raw/repos\official\recommendation,ncf_test.py,def test_end_to_end_keras_2_gpu_fp16(self):
data/raw/repos\official\recommendation,neumf_model.py,def sparse_to_dense_grads(grads_and_vars):
data/raw/repos\official\recommendation,neumf_model.py,"def neumf_model_fn(features, labels, mode, params):"
data/raw/repos\official\recommendation,neumf_model.py,"def _strip_first_and_last_dimension(x, batch_size):"
data/raw/repos\official\recommendation,neumf_model.py,def mf_slice_fn(x):
data/raw/repos\official\recommendation,neumf_model.py,def mlp_slice_fn(x):
data/raw/repos\official\recommendation,neumf_model.py,"def metric_fn(top_k_tensor, ndcg_tensor, weight_tensor):"
data/raw/repos\official\recommendation,popen_helper.py,"def get_forkpool(num_workers, init_worker=None, closing=True):"
data/raw/repos\official\recommendation,popen_helper.py,"def get_threadpool(num_workers, init_worker=None, closing=True):"
data/raw/repos\official\recommendation,popen_helper.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\recommendation,popen_helper.py,"def map(self, func, iterable, chunksize=None):"
data/raw/repos\official\recommendation,popen_helper.py,"def imap(self, func, iterable, chunksize=1):"
data/raw/repos\official\recommendation,popen_helper.py,def close(self):
data/raw/repos\official\recommendation,popen_helper.py,def terminate(self):
data/raw/repos\official\recommendation,popen_helper.py,def join(self):
data/raw/repos\official\recommendation,popen_helper.py,"def get_fauxpool(num_workers, init_worker=None, closing=True):"
data/raw/repos\official\recommendation,popen_helper.py,def worker_job():
data/raw/repos\official\recommendation,stat_utils.py,def random_int32():
data/raw/repos\official\recommendation,stat_utils.py,def permutation(args):
data/raw/repos\official\recommendation,stat_utils.py,def very_slightly_biased_randint(max_val_vector):
data/raw/repos\official\recommendation,stat_utils.py,"def mask_duplicates(x, axis=1):"
data/raw/repos\official\recommendation\ranking,common.py,"def __call__(self, step):"
data/raw/repos\official\recommendation\ranking,common.py,def get_config(self):
data/raw/repos\official\recommendation\ranking,task.py,"def build_inputs(self, params, input_context=None):"
data/raw/repos\official\recommendation\ranking,task_test.py,"def test_task(self, config_name, is_training, use_multi_hot):"
data/raw/repos\official\recommendation\ranking,train.py,def get_dataset_fn(params):
data/raw/repos\official\recommendation\ranking,train_test.py,def setUp(self):
data/raw/repos\official\recommendation\ranking,train_test.py,def tearDown(self):
data/raw/repos\official\recommendation\ranking\configs,config_test.py,def test_configs(self):
data/raw/repos\official\recommendation\ranking\data,data_pipeline.py,def _parse_fn(example: tf.Tensor):
data/raw/repos\official\recommendation\ranking\data,data_pipeline.py,def make_dataset(shard_index):
data/raw/repos\official\recommendation\ranking\data,data_pipeline_multi_hot.py,def _parse_fn(example: tf.Tensor):
data/raw/repos\official\recommendation\ranking\data,data_pipeline_multi_hot.py,def make_dataset(shard_index):
data/raw/repos\official\recommendation\ranking\data,data_pipeline_multi_hot.py,"def __call__(self, ctx: tf.distribute.InputContext):"
data/raw/repos\official\recommendation\ranking\data,data_pipeline_multi_hot.py,def _get_feature_spec():
data/raw/repos\official\recommendation\ranking\data,data_pipeline_multi_hot.py,def _parse_fn(serialized_example):
data/raw/repos\official\recommendation\ranking\data,data_pipeline_multi_hot.py,def make_dataset(shard_index):
data/raw/repos\official\recommendation\ranking\data,data_pipeline_multi_hot_test.py,"def testSyntheticDataPipeline(self, is_training, use_cached_data):"
data/raw/repos\official\recommendation\ranking\data,data_pipeline_test.py,"def testSyntheticDataPipeline(self, is_training, use_cached_data):"
data/raw/repos\official\recommendation\ranking\preprocessing,criteo_preprocess.py,def apply_vocab_fn(inputs):
data/raw/repos\official\recommendation\ranking\preprocessing,criteo_preprocess.py,def compute_vocab_fn(inputs):
data/raw/repos\official\recommendation\ranking\preprocessing,criteo_preprocess.py,"def process(self, element):"
data/raw/repos\official\recommendation\ranking\preprocessing,criteo_preprocess.py,"def process(self, element):"
data/raw/repos\official\recommendation\ranking\preprocessing,criteo_preprocess.py,"def process(self, element):"
data/raw/repos\official\recommendation\ranking\preprocessing,criteo_preprocess.py,"def transform_data(data_path, output_path):"
data/raw/repos\official\recommendation\ranking\preprocessing,shard_rebalancer.py,def rebalance_data_shards():
data/raw/repos\official\recommendation\ranking\preprocessing,shard_rebalancer.py,def csv_pipeline(pipeline: beam.Pipeline):
data/raw/repos\official\recommendation\ranking\preprocessing,shard_rebalancer.py,def tfrecord_pipeline(pipeline: beam.Pipeline):
data/raw/repos\official\recommendation\uplift,keras_test_case.py,"def assertNestedEqual(self, data1, data2):"
data/raw/repos\official\recommendation\uplift,keras_test_case.py,"def assertLayerStable(self, inputs, layer, **kwargs):"
data/raw/repos\official\recommendation\uplift,keras_test_case.py,"def toKerasInputs(self, inputs):"
data/raw/repos\official\recommendation\uplift,keras_test_case.py,def map_to_keras_input(x):
data/raw/repos\official\recommendation\uplift,keras_test_case.py,"def _make_model(inputs, layer, keras_inputs):"
data/raw/repos\official\recommendation\uplift,utils_test.py,"def test_expand_to_match_rank(self, a, b, expected_output):"
data/raw/repos\official\recommendation\uplift,utils_test.py,def test_shape_mismatch(self):
data/raw/repos\official\recommendation\uplift\layers\encoders,concat_features.py,"def __init__(self, feature_names: Sequence[str], **kwargs):"
data/raw/repos\official\recommendation\uplift\layers\encoders,concat_features.py,def get_config(self):
data/raw/repos\official\recommendation\uplift\layers\encoders,concat_features_test.py,"def test_layer_correctness(self, feature_names, inputs, expected_output):"
data/raw/repos\official\recommendation\uplift\layers\encoders,concat_features_test.py,"def test_layer_correctness_keras_inputs(self, inputs, expected_shape):"
data/raw/repos\official\recommendation\uplift\layers\encoders,concat_features_test.py,def test_layer_stability(self):
data/raw/repos\official\recommendation\uplift\layers\encoders,concat_features_test.py,def test_layer_savable(self):
data/raw/repos\official\recommendation\uplift\layers\encoders,concat_features_test.py,def test_missing_input_features(self):
data/raw/repos\official\recommendation\uplift\layers\encoders,concat_features_test.py,def test_unsupported_tensor_type(self):
data/raw/repos\official\recommendation\uplift\layers\encoders,concat_features_test.py,def test_empty_feature_names_list(self):
data/raw/repos\official\recommendation\uplift\layers\encoders,concat_features_test.py,def test_non_string_feature_name(self):
data/raw/repos\official\recommendation\uplift\layers\encoders,concat_features_test.py,"def test_shape_mismatch(self, inputs):"
data/raw/repos\official\recommendation\uplift\layers\encoders,concat_features_test.py,"def test_rank_mismatch(self, inputs):"
data/raw/repos\official\recommendation\uplift\layers\encoders,concat_features_test.py,def test_layer_config(self):
data/raw/repos\official\recommendation\uplift\layers\heads,two_tower_logits_head.py,"def build(self, input_shapes: tuple[tf.TensorShape, tf.TensorShape]):"
data/raw/repos\official\recommendation\uplift\layers\heads,two_tower_logits_head_test.py,"def test_layer_stable(self, layering_method):"
data/raw/repos\official\recommendation\uplift\layers\heads,two_tower_logits_head_test.py,"def test_layer_savable(self, layering_method):"
data/raw/repos\official\recommendation\uplift\layers\heads,two_tower_logits_head_test.py,"def test_stop_gradient_does_not_update_control_tower(self, layering_method):"
data/raw/repos\official\recommendation\uplift\layers\heads,two_tower_logits_head_test.py,def _get_kernel(name: str):
data/raw/repos\official\recommendation\uplift\layers\heads,two_tower_logits_head_test.py,"def test_layer_configurable(self, layering_method):"
data/raw/repos\official\recommendation\uplift\layers\heads,two_tower_logits_head_test.py,def test_different_logit_shapes_raises_error(self):
data/raw/repos\official\recommendation\uplift\layers\uplift_networks,two_tower_output_head_test.py,"def call(self, inputs, training=None, mask=None):"
data/raw/repos\official\recommendation\uplift\layers\uplift_networks,two_tower_output_head_test.py,"def _get_layer(self, inverse_link_fn=None):"
data/raw/repos\official\recommendation\uplift\layers\uplift_networks,two_tower_output_head_test.py,def test_true_logits_correspond_to_control_and_treatment_logits(self):
data/raw/repos\official\recommendation\uplift\layers\uplift_networks,two_tower_output_head_test.py,def test_true_preds_correspond_to_control_and_treatment_preds(self):
data/raw/repos\official\recommendation\uplift\layers\uplift_networks,two_tower_output_head_test.py,def test_is_treatment_tensor_gets_converted_to_boolean_tensor(self):
data/raw/repos\official\recommendation\uplift\layers\uplift_networks,two_tower_output_head_test.py,def test_true_logits_correctness_with_logits_rank_mismatch(self):
data/raw/repos\official\recommendation\uplift\layers\uplift_networks,two_tower_output_head_test.py,"def test_layer_saving_succeeds(self, is_treatment, inverse_link_fn):"
data/raw/repos\official\recommendation\uplift\layers\uplift_networks,two_tower_uplift_network_test.py,"def _get_full_layer(self, **kwargs):"
data/raw/repos\official\recommendation\uplift\layers\uplift_networks,two_tower_uplift_network_test.py,def _get_full_layer_inputs(self):
data/raw/repos\official\recommendation\uplift\layers\uplift_networks,two_tower_uplift_network_test.py,def test_forward_pass_no_control_or_treatment_encoders(self):
data/raw/repos\official\recommendation\uplift\layers\uplift_networks,two_tower_uplift_network_test.py,def test_forward_pass_only_control_encoder(self):
data/raw/repos\official\recommendation\uplift\layers\uplift_networks,two_tower_uplift_network_test.py,def test_forward_pass_only_treatment_encoder(self):
data/raw/repos\official\recommendation\uplift\layers\uplift_networks,two_tower_uplift_network_test.py,def test_forward_pass_both_control_and_treatment_encoders(self):
data/raw/repos\official\recommendation\uplift\layers\uplift_networks,two_tower_uplift_network_test.py,def test_multiple_layer_calls_with_same_input_returns_same_output(self):
data/raw/repos\official\recommendation\uplift\layers\uplift_networks,two_tower_uplift_network_test.py,def test_layer_saving_succeeds(self):
data/raw/repos\official\recommendation\uplift\layers\uplift_networks,two_tower_uplift_network_test.py,def test_from_config_layer_returns_same_output_as_original_layer(self):
data/raw/repos\official\recommendation\uplift\losses,true_logits_loss_test.py,"def _get_y_pred(self, **kwargs):"
data/raw/repos\official\recommendation\uplift\metrics,label_mean.py,"def __init__(self, name: str = ""label/mean"", **kwargs):"
data/raw/repos\official\recommendation\uplift\metrics,label_mean_test.py,def test_multiple_batches(self):
data/raw/repos\official\recommendation\uplift\metrics,label_mean_test.py,def test_metric_states(self):
data/raw/repos\official\recommendation\uplift\metrics,label_mean_test.py,def test_metric_config(self):
data/raw/repos\official\recommendation\uplift\metrics,label_mean_test.py,def test_invalid_prediction_tensor_type(self):
data/raw/repos\official\recommendation\uplift\metrics,label_variance.py,"def __init__(self, name: str = ""label/variance"", **kwargs):"
data/raw/repos\official\recommendation\uplift\metrics,label_variance_test.py,"def _weighted_var(values, weights):"
data/raw/repos\official\recommendation\uplift\metrics,label_variance_test.py,def test_multiple_update_batches_returns_aggregated_label_variances(self):
data/raw/repos\official\recommendation\uplift\metrics,label_variance_test.py,def test_initial_and_reset_state_return_zero_label_variances(self):
data/raw/repos\official\recommendation\uplift\metrics,label_variance_test.py,def test_metric_config_is_serializable(self):
data/raw/repos\official\recommendation\uplift\metrics,label_variance_test.py,def test_invalid_prediction_tensor_type_raises_type_error(self):
data/raw/repos\official\recommendation\uplift\metrics,loss_metric.py,def reset_state(self):
data/raw/repos\official\recommendation\uplift\metrics,loss_metric_test.py,def test_metric_with_y_pred_tensor(self):
data/raw/repos\official\recommendation\uplift\metrics,loss_metric_test.py,def test_multiple_update_batches_returns_aggregated_sliced_losses(self):
data/raw/repos\official\recommendation\uplift\metrics,loss_metric_test.py,def test_initial_and_reset_state_return_zero_losses(self):
data/raw/repos\official\recommendation\uplift\metrics,loss_metric_test.py,def test_invalid_prediction_tensor_type_raises_type_error(self):
data/raw/repos\official\recommendation\uplift\metrics,loss_metric_test.py,def test_slice_by_treatment_with_y_pred_tensor_raises_error(self):
data/raw/repos\official\recommendation\uplift\metrics,loss_metric_test.py,def test_passing_loss_object_raises_error(self):
data/raw/repos\official\recommendation\uplift\metrics,loss_metric_test.py,def test_conflicting_from_logits_values_raises_error(self):
data/raw/repos\official\recommendation\uplift\metrics,poisson_metrics_test.py,def test_negative_label_returns_nan_loss(self):
data/raw/repos\official\recommendation\uplift\metrics,poisson_metrics_test.py,def test_metric_is_configurable(self):
data/raw/repos\official\recommendation\uplift\metrics,poisson_metrics_test.py,def test_negative_label_returns_nan_loss(self):
data/raw/repos\official\recommendation\uplift\metrics,poisson_metrics_test.py,def test_metric_is_configurable(self):
data/raw/repos\official\recommendation\uplift\metrics,poisson_metrics_test.py,def test_slicing_raises_error_when_input_is_tensor(self):
data/raw/repos\official\recommendation\uplift\metrics,poisson_metrics_test.py,"def test_metric_is_configurable(self, from_logits: bool):"
data/raw/repos\official\recommendation\uplift\metrics,sliced_metric.py,def reset_state(self):
data/raw/repos\official\recommendation\uplift\metrics,sliced_metric.py,def get_config(self):
data/raw/repos\official\recommendation\uplift\metrics,sliced_metric.py,"def from_config(cls, config):"
data/raw/repos\official\recommendation\uplift\metrics,sliced_metric_test.py,def result(self):
data/raw/repos\official\recommendation\uplift\metrics,sliced_metric_test.py,"def test_invalid_inputs(self, slicing_spec):"
data/raw/repos\official\recommendation\uplift\metrics,sliced_metric_test.py,"def test_invalid_update(self, slicing_spec, slicing_feature):"
data/raw/repos\official\recommendation\uplift\metrics,sliced_metric_test.py,def test_batched_inputs(self):
data/raw/repos\official\recommendation\uplift\metrics,sliced_metric_test.py,def test_reset_state(self):
data/raw/repos\official\recommendation\uplift\metrics,sliced_metric_test.py,def test_metric_config(self):
data/raw/repos\official\recommendation\uplift\metrics,treatment_fraction.py,"def __init__(self, **kwargs):"
data/raw/repos\official\recommendation\uplift\metrics,treatment_fraction_test.py,def test_multiple_update_batches_returns_aggregated_treatment_fractions(self):
data/raw/repos\official\recommendation\uplift\metrics,treatment_fraction_test.py,def test_initial_and_reset_state_return_zero_treatment_fraction(self):
data/raw/repos\official\recommendation\uplift\metrics,treatment_fraction_test.py,def test_metric_config_is_serializable(self):
data/raw/repos\official\recommendation\uplift\metrics,treatment_fraction_test.py,def test_invalid_prediction_tensor_type_raises_type_error(self):
data/raw/repos\official\recommendation\uplift\metrics,treatment_sliced_metric.py,"def __init__(self, metric: tf_keras.metrics.Metric):"
data/raw/repos\official\recommendation\uplift\metrics,treatment_sliced_metric.py,def get_config(self):
data/raw/repos\official\recommendation\uplift\metrics,treatment_sliced_metric.py,"def from_config(cls, config):"
data/raw/repos\official\recommendation\uplift\metrics,treatment_sliced_metric_test.py,def result(self):
data/raw/repos\official\recommendation\uplift\metrics,treatment_sliced_metric_test.py,def test_multiple_batches(self):
data/raw/repos\official\recommendation\uplift\metrics,treatment_sliced_metric_test.py,def test_metric_states(self):
data/raw/repos\official\recommendation\uplift\metrics,treatment_sliced_metric_test.py,def test_metric_config(self):
data/raw/repos\official\recommendation\uplift\metrics,treatment_sliced_metric_test.py,def test_multi_output_result(self):
data/raw/repos\official\recommendation\uplift\metrics,uplift_mean.py,"def __init__(self, name: str = ""uplift/mean"", **kwargs):"
data/raw/repos\official\recommendation\uplift\metrics,uplift_mean_test.py,def test_multiple_update_batches_returns_aggregated_uplift_means(self):
data/raw/repos\official\recommendation\uplift\metrics,uplift_mean_test.py,def test_initial_and_reset_state_return_zero_uplift_means(self):
data/raw/repos\official\recommendation\uplift\metrics,uplift_mean_test.py,def test_metric_config_is_serializable(self):
data/raw/repos\official\recommendation\uplift\metrics,uplift_mean_test.py,def test_invalid_prediction_tensor_type_raises_type_error(self):
data/raw/repos\official\recommendation\uplift\metrics,variance.py,"def __init__(self, name: str = ""variance"", dtype: Optional[tf.DType] = None):"
data/raw/repos\official\recommendation\uplift\metrics,variance_test.py,"def test_single_batch_correctness(self, values, sample_weight):"
data/raw/repos\official\recommendation\uplift\metrics,variance_test.py,"def test_float_sample_weight(self, values, sample_weight, expected_variance):"
data/raw/repos\official\recommendation\uplift\metrics,variance_test.py,def test_empty_input(self):
data/raw/repos\official\recommendation\uplift\metrics,variance_test.py,def test_initial_state(self):
data/raw/repos\official\recommendation\uplift\metrics,variance_test.py,def test_dtype_correctness(self):
data/raw/repos\official\recommendation\uplift\metrics,variance_test.py,def test_invalid_dtype(self):
data/raw/repos\official\recommendation\uplift\metrics,variance_test.py,"def test_invalid_weight_shape(self, values, weights):"
data/raw/repos\official\recommendation\uplift\metrics,variance_test.py,def test_name(self):
data/raw/repos\official\recommendation\uplift\metrics,variance_test.py,def test_multiple_result_calls(self):
data/raw/repos\official\recommendation\uplift\metrics,variance_test.py,def test_reset_state(self):
data/raw/repos\official\recommendation\uplift\metrics,variance_test.py,def test_numpy_correctness(self):
data/raw/repos\official\recommendation\uplift\metrics,variance_test.py,def test_metric_config(self):
data/raw/repos\official\recommendation\uplift\models,two_tower_uplift_model.py,"def _assert_treatment_indicator_in_data(self, data):"
data/raw/repos\official\recommendation\uplift\models,two_tower_uplift_model_test.py,"def _get_uplift_network(self, **kwargs):"
data/raw/repos\official\recommendation\uplift\models,two_tower_uplift_model_test.py,"def _get_compiled_model(self, **kwargs):"
data/raw/repos\official\recommendation\uplift\models,two_tower_uplift_model_test.py,def _get_inputs(self):
data/raw/repos\official\recommendation\uplift\models,two_tower_uplift_model_test.py,def test_model_training_and_inference(self):
data/raw/repos\official\recommendation\uplift\models,two_tower_uplift_model_test.py,def test_classification_model_trains(self):
data/raw/repos\official\recommendation\uplift\models,two_tower_uplift_model_test.py,"def test_predict_step(self, inverse_link_fn, expected_predictions):"
data/raw/repos\official\recommendation\uplift\models,two_tower_uplift_model_test.py,def test_model_is_stable(self):
data/raw/repos\official\recommendation\uplift\models,two_tower_uplift_model_test.py,def test_model_is_savable(self):
data/raw/repos\official\recommendation\uplift\models,two_tower_uplift_model_test.py,def test_layer_configurable(self):
data/raw/repos\official\utils,hyperparams_flags.py,def define_gin_flags():
data/raw/repos\official\utils,hyperparams_flags.py,def define_common_hparams_flags():
data/raw/repos\official\utils,hyperparams_flags.py,def initialize_common_flags():
data/raw/repos\official\utils,hyperparams_flags.py,def strategy_flags_dict():
data/raw/repos\official\utils,hyperparams_flags.py,def hparam_flags_dict():
data/raw/repos\official\utils\docs,build_orbit_api_docs.py,def hide_module_model_and_layer_methods():
data/raw/repos\official\utils\docs,build_orbit_api_docs.py,def main(argv):
data/raw/repos\official\utils\docs,build_tfm_api_docs.py,def collect_docs(self):
data/raw/repos\official\utils\docs,build_tfm_api_docs.py,def make_factory_options_table(self):
data/raw/repos\official\utils\docs,build_tfm_api_docs.py,def hide_module_model_and_layer_methods():
data/raw/repos\official\utils\docs,build_tfm_api_docs.py,"def custom_filter(path, parent, children):"
data/raw/repos\official\utils\docs,build_tfm_api_docs.py,def main(argv):
data/raw/repos\official\utils\flags,core.py,def set_defaults(**kwargs):
data/raw/repos\official\utils\flags,core.py,def parse_flags(argv=None):
data/raw/repos\official\utils\flags,core.py,def register_key_flags_in_core(f):
data/raw/repos\official\utils\flags,core.py,"def core_fn(*args, **kwargs):"
data/raw/repos\official\utils\flags,core.py,def _get_nondefault_flags_as_dict():
data/raw/repos\official\utils\flags,core.py,def get_nondefault_flags_as_str():
data/raw/repos\official\utils\flags,flags_test.py,def define_flags():
data/raw/repos\official\utils\flags,flags_test.py,def setUpClass(cls):
data/raw/repos\official\utils\flags,flags_test.py,def test_default_setting(self):
data/raw/repos\official\utils\flags,flags_test.py,def test_benchmark_setting(self):
data/raw/repos\official\utils\flags,flags_test.py,def test_booleans(self):
data/raw/repos\official\utils\flags,flags_test.py,def test_parse_dtype_info(self):
data/raw/repos\official\utils\flags,flags_test.py,def test_get_nondefault_flags_as_str(self):
data/raw/repos\official\utils\flags,_base.py,def get_num_gpus(flags_obj):
data/raw/repos\official\utils\flags,_benchmark.py,def define_log_steps():
data/raw/repos\official\utils\flags,_benchmark.py,"def define_benchmark(benchmark_log_dir=True, bigquery_uploader=True):"
data/raw/repos\official\utils\flags,_benchmark.py,def _check_benchmark_log_dir(flags_dict):
data/raw/repos\official\utils\flags,_conventions.py,def _stdout_utf8():
data/raw/repos\official\utils\flags,_conventions.py,"def help_wrap(text, *args, **kwargs):"
data/raw/repos\official\utils\flags,_device.py,def require_cloud_storage(flag_names):
data/raw/repos\official\utils\flags,_device.py,def _path_check(flag_values):
data/raw/repos\official\utils\flags,_device.py,def define_device(tpu=True):
data/raw/repos\official\utils\flags,_distribution.py,"def define_distribution(worker_hosts=True, task_index=True):"
data/raw/repos\official\utils\flags,_misc.py,def define_image(data_format=True):
data/raw/repos\official\utils\flags,_performance.py,def get_tf_dtype(flags_obj):
data/raw/repos\official\utils\flags,_performance.py,"def get_loss_scale(flags_obj, default_for_fp16):"
data/raw/repos\official\utils\flags,_performance.py,def _check_loss_scale(loss_scale):
data/raw/repos\official\utils\flags,_performance.py,def _check_fp16_implementation(flags_dict):
data/raw/repos\official\utils\misc,keras_utils.py,"def __init__(self, batch_index, timestamp):"
data/raw/repos\official\utils\misc,keras_utils.py,def __repr__(self):
data/raw/repos\official\utils\misc,keras_utils.py,"def __init__(self, batch_size, log_steps, initial_step=0, logdir=None):"
data/raw/repos\official\utils\misc,keras_utils.py,def global_steps(self):
data/raw/repos\official\utils\misc,keras_utils.py,def average_steps_per_second(self):
data/raw/repos\official\utils\misc,keras_utils.py,def average_examples_per_second(self):
data/raw/repos\official\utils\misc,keras_utils.py,"def get_examples_per_sec(self, warmup=1):"
data/raw/repos\official\utils\misc,keras_utils.py,"def get_startup_time(self, start_time_sec):"
data/raw/repos\official\utils\misc,keras_utils.py,"def on_train_end(self, logs=None):"
data/raw/repos\official\utils\misc,keras_utils.py,"def on_epoch_begin(self, epoch, logs=None):"
data/raw/repos\official\utils\misc,keras_utils.py,"def on_batch_begin(self, batch, logs=None):"
data/raw/repos\official\utils\misc,keras_utils.py,"def on_batch_end(self, batch, logs=None):"
data/raw/repos\official\utils\misc,keras_utils.py,"def on_epoch_end(self, epoch, logs=None):"
data/raw/repos\official\utils\misc,keras_utils.py,"def __init__(self, checkpoint_manager):"
data/raw/repos\official\utils\misc,keras_utils.py,"def on_epoch_end(self, epoch, logs=None):"
data/raw/repos\official\utils\misc,keras_utils.py,def set_session_config(enable_xla=False):
data/raw/repos\official\utils\misc,model_helpers.py,"def past_stop_threshold(stop_threshold, eval_metric):"
data/raw/repos\official\utils\misc,model_helpers.py,def apply_clean(flags_obj):
data/raw/repos\official\utils\misc,model_helpers_test.py,def setUp(self):
data/raw/repos\official\utils\misc,model_helpers_test.py,def test_past_stop_threshold(self):
data/raw/repos\official\utils\misc,model_helpers_test.py,def test_past_stop_threshold_none_false(self):
data/raw/repos\official\utils\misc,model_helpers_test.py,def test_past_stop_threshold_not_number(self):
data/raw/repos\official\utils\misc,model_helpers_test.py,def test_generate_synethetic_data(self):
data/raw/repos\official\utils\misc,model_helpers_test.py,def test_generate_only_input_data(self):
data/raw/repos\official\utils\misc,model_helpers_test.py,def test_generate_nested_data(self):
data/raw/repos\official\utils\testing,mock_task.py,"def __init__(self, network):"
data/raw/repos\official\utils\testing,mock_task.py,"def call(self, inputs):"
data/raw/repos\official\utils\testing,mock_task.py,"def __init__(self, params=None, logging_dir=None, name=None):"
data/raw/repos\official\utils\testing,mock_task.py,"def build_model(self, *arg, **kwargs):"
data/raw/repos\official\utils\testing,mock_task.py,"def build_metrics(self, training: bool = True):"
data/raw/repos\official\utils\testing,mock_task.py,"def validation_step(self, inputs, model: tf_keras.Model, metrics=None):"
data/raw/repos\official\utils\testing,mock_task.py,"def build_inputs(self, params):"
data/raw/repos\official\utils\testing,mock_task.py,def generate_data(_):
data/raw/repos\official\utils\testing,mock_task.py,"def aggregate_logs(self, state, step_outputs):"
data/raw/repos\official\utils\testing,mock_task.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\vision,train.py,"def _run_experiment_with_preemption_recovery(params, model_dir):"
data/raw/repos\official\vision,train.py,def main(_):
data/raw/repos\official\vision,train_spatial_partitioning.py,def main(_):
data/raw/repos\official\vision\configs,image_classification_test.py,"def test_image_classification_configs(self, config_name):"
data/raw/repos\official\vision\configs,maskrcnn.py,"def __post_init__(self, *args, **kwargs):"
data/raw/repos\official\vision\configs,maskrcnn_test.py,"def test_maskrcnn_configs(self, config_name):"
data/raw/repos\official\vision\configs,retinanet_test.py,"def test_retinanet_configs(self, config_name):"
data/raw/repos\official\vision\configs,semantic_segmentation_test.py,"def test_semantic_segmentation_configs(self, config_name):"
data/raw/repos\official\vision\configs,video_classification.py,def kinetics400(is_training):
data/raw/repos\official\vision\configs,video_classification.py,def kinetics600(is_training):
data/raw/repos\official\vision\configs,video_classification.py,def kinetics700(is_training):
data/raw/repos\official\vision\configs,video_classification.py,def kinetics700_2020(is_training):
data/raw/repos\official\vision\configs,video_classification_test.py,"def test_video_classification_configs(self, config_name):"
data/raw/repos\official\vision\data,create_coco_tf_record.py,"def coco_segmentation_to_mask_png(segmentation, height, width, is_crowd):"
data/raw/repos\official\vision\data,create_coco_tf_record.py,def encode_caption_annotations(caption_annotations):
data/raw/repos\official\vision\data,create_coco_tf_record.py,def _load_object_annotations(object_annotations_file):
data/raw/repos\official\vision\data,create_coco_tf_record.py,def _load_caption_annotations(caption_annotations_file):
data/raw/repos\official\vision\data,create_coco_tf_record.py,def _load_panoptic_annotations(panoptic_annotations_file):
data/raw/repos\official\vision\data,create_coco_tf_record.py,def _load_images_info(images_info_file):
data/raw/repos\official\vision\data,create_coco_tf_record.py,def main(_):
data/raw/repos\official\vision\data,image_utils_test.py,def test_encode_image_raise_error_with_invalid_image_format(self):
data/raw/repos\official\vision\data,image_utils_test.py,"def test_decode_image_raise_error_with_invalid_image_format(self, _):"
data/raw/repos\official\vision\data,process_coco_few_shot_json_files.py,def main(unused_argv):
data/raw/repos\official\vision\data,tfrecord_lib.py,"def convert_to_feature(value, value_type=None):"
data/raw/repos\official\vision\data,tfrecord_lib.py,def read_image(image_path):
data/raw/repos\official\vision\data,tfrecord_lib.py,def encode_mask_as_png(mask):
data/raw/repos\official\vision\data,tfrecord_lib.py,def check_and_make_dir(directory):
data/raw/repos\official\vision\data,tfrecord_lib_test.py,def process_sample(x):
data/raw/repos\official\vision\data,tfrecord_lib_test.py,def parse_function(example_proto):
data/raw/repos\official\vision\data,tfrecord_lib_test.py,def test_write_tf_record_dataset(self):
data/raw/repos\official\vision\data,tfrecord_lib_test.py,def test_convert_to_feature_float(self):
data/raw/repos\official\vision\data,tfrecord_lib_test.py,def test_convert_to_feature_int(self):
data/raw/repos\official\vision\data,tfrecord_lib_test.py,def test_convert_to_feature_bytes(self):
data/raw/repos\official\vision\data,tfrecord_lib_test.py,def test_convert_to_feature_float_list(self):
data/raw/repos\official\vision\data,tfrecord_lib_test.py,def test_convert_to_feature_int_list(self):
data/raw/repos\official\vision\data,tfrecord_lib_test.py,def test_convert_to_feature_bytes_list(self):
data/raw/repos\official\vision\data,tfrecord_lib_test.py,def test_obj_annotation_tf_example(self):
data/raw/repos\official\vision\data,tf_example_builder_test.py,def test_add_image_matrix_feature_with_feature_prefix_success(self):
data/raw/repos\official\vision\data,tf_example_builder_test.py,def test_add_encoded_raw_image_feature_success(self):
data/raw/repos\official\vision\data,tf_example_builder_test.py,def test_add_encoded_raw_image_feature_valueerror(self):
data/raw/repos\official\vision\data,tf_example_builder_test.py,"def test_add_normalized_boxes_feature(self, num_boxes):"
data/raw/repos\official\vision\data,tf_example_builder_test.py,"def test_add_box_pixels_feature(self, num_boxes):"
data/raw/repos\official\vision\data,tf_example_builder_test.py,"def test_add_encoded_instance_masks_feature_success(self, has_mask_areas):"
data/raw/repos\official\vision\data,tf_example_builder_test.py,def test_add_panoptic_mask_matrices_feature_success(self):
data/raw/repos\official\vision\data,tf_example_builder_test.py,def test_add_encoded_panoptic_mask_feature_success(self):
data/raw/repos\official\vision\dataloaders,classification_input.py,"def decode(self, serialized_example):"
data/raw/repos\official\vision\dataloaders,classification_input.py,"def _parse_train_data(self, decoded_tensors):"
data/raw/repos\official\vision\dataloaders,classification_input.py,"def _parse_eval_data(self, decoded_tensors):"
data/raw/repos\official\vision\dataloaders,classification_input.py,"def _parse_train_image(self, decoded_tensors):"
data/raw/repos\official\vision\dataloaders,classification_input.py,"def _parse_eval_image(self, decoded_tensors):"
data/raw/repos\official\vision\dataloaders,decoder.py,"def decode(self, serialized_example):"
data/raw/repos\official\vision\dataloaders,input_reader.py,"def concat_fn(d1, d2):"
data/raw/repos\official\vision\dataloaders,input_reader.py,"def maybe_map_fn(dataset, fn):"
data/raw/repos\official\vision\dataloaders,maskrcnn_input.py,"def _parse_train_data(self, data):"
data/raw/repos\official\vision\dataloaders,maskrcnn_input.py,"def _parse_eval_data(self, data):"
data/raw/repos\official\vision\dataloaders,parser.py,"def _parse_train_data(self, decoded_tensors):"
data/raw/repos\official\vision\dataloaders,parser.py,"def _parse_eval_data(self, decoded_tensors):"
data/raw/repos\official\vision\dataloaders,parser.py,"def parse_fn(self, is_training):"
data/raw/repos\official\vision\dataloaders,parser.py,def parse(decoded_tensors):
data/raw/repos\official\vision\dataloaders,parser.py,"def inference_fn(cls, inputs):"
data/raw/repos\official\vision\dataloaders,retinanet_input.py,"def _resize_and_crop_image_and_boxes(self, image, boxes, pad=True):"
data/raw/repos\official\vision\dataloaders,retinanet_input.py,"def _parse_train_data(self, data, anchor_labeler=None, input_anchor=None):"
data/raw/repos\official\vision\dataloaders,retinanet_input.py,"def _parse_eval_data(self, data, anchor_labeler=None, input_anchor=None):"
data/raw/repos\official\vision\dataloaders,segmentation_input.py,"def decode(self, serialized_example):"
data/raw/repos\official\vision\dataloaders,segmentation_input.py,"def _prepare_image_and_label(self, data):"
data/raw/repos\official\vision\dataloaders,segmentation_input.py,"def _parse_train_data(self, data):"
data/raw/repos\official\vision\dataloaders,segmentation_input.py,"def _parse_eval_data(self, data):"
data/raw/repos\official\vision\dataloaders,tfds_classification_decoders.py,"def decode(self, serialized_example):"
data/raw/repos\official\vision\dataloaders,tfds_detection_decoders.py,"def decode(self, serialized_example):"
data/raw/repos\official\vision\dataloaders,tfds_factory_test.py,def _create_test_example(self):
data/raw/repos\official\vision\dataloaders,tfds_factory_test.py,"def test_classification_decoder(self, tfds_name):"
data/raw/repos\official\vision\dataloaders,tfds_factory_test.py,"def test_doesnt_exit_classification_decoder(self, tfds_name):"
data/raw/repos\official\vision\dataloaders,tfds_factory_test.py,"def test_detection_decoder(self, tfds_name):"
data/raw/repos\official\vision\dataloaders,tfds_factory_test.py,"def test_doesnt_exit_detection_decoder(self, tfds_name):"
data/raw/repos\official\vision\dataloaders,tfds_factory_test.py,"def test_segmentation_decoder(self, tfds_name):"
data/raw/repos\official\vision\dataloaders,tfds_factory_test.py,"def test_doesnt_exit_segmentation_decoder(self, tfds_name):"
data/raw/repos\official\vision\dataloaders,tfds_segmentation_decoders.py,def __init__(self):
data/raw/repos\official\vision\dataloaders,tfds_segmentation_decoders.py,"def decode(self, serialized_example):"
data/raw/repos\official\vision\dataloaders,tfexample_utils.py,def setUp(self):
data/raw/repos\official\vision\dataloaders,tfexample_utils.py,def test_foo(self):
data/raw/repos\official\vision\dataloaders,tf_example_decoder.py,def _generate_source_id(image_bytes):
data/raw/repos\official\vision\dataloaders,tf_example_decoder.py,"def _decode_image(self, parsed_tensors):"
data/raw/repos\official\vision\dataloaders,tf_example_decoder.py,"def _decode_boxes(self, parsed_tensors):"
data/raw/repos\official\vision\dataloaders,tf_example_decoder.py,"def _decode_classes(self, parsed_tensors):"
data/raw/repos\official\vision\dataloaders,tf_example_decoder.py,"def _decode_attributes(self, parsed_tensors):"
data/raw/repos\official\vision\dataloaders,tf_example_decoder.py,"def _decode_areas(self, parsed_tensors):"
data/raw/repos\official\vision\dataloaders,tf_example_decoder.py,"def _decode_masks(self, parsed_tensors):"
data/raw/repos\official\vision\dataloaders,tf_example_decoder.py,def _decode_png_mask(png_bytes):
data/raw/repos\official\vision\dataloaders,tf_example_decoder.py,"def decode(self, serialized_example):"
data/raw/repos\official\vision\dataloaders,tf_example_decoder_test.py,def test_result_content(self):
data/raw/repos\official\vision\dataloaders,tf_example_decoder_test.py,def test_handling_missing_fields(self):
data/raw/repos\official\vision\dataloaders,tf_example_label_map_decoder.py,"def _process_label_map(self, label_map):"
data/raw/repos\official\vision\dataloaders,tf_example_label_map_decoder.py,"def _process_csv(self, label_map):"
data/raw/repos\official\vision\dataloaders,tf_example_label_map_decoder.py,"def _decode_classes(self, parsed_tensors):"
data/raw/repos\official\vision\dataloaders,tf_example_label_map_decoder_test.py,"def test_result_shape(self, image_height, image_width, num_instances):"
data/raw/repos\official\vision\dataloaders,tf_example_label_map_decoder_test.py,def test_result_content(self):
data/raw/repos\official\vision\dataloaders,utils_test.py,def test_process_empty_source_id(self):
data/raw/repos\official\vision\dataloaders,utils_test.py,"def test_process_source_id(self, source_id, expected_result):"
data/raw/repos\official\vision\dataloaders,video_input.py,"def __init__(self, image_key: str = IMAGE_KEY, label_key: str = LABEL_KEY):"
data/raw/repos\official\vision\dataloaders,video_input.py,"def decode(self, serialized_example):"
data/raw/repos\official\vision\dataloaders,video_input.py,"def __init__(self, image_key: str = IMAGE_KEY, label_key: str = LABEL_KEY):"
data/raw/repos\official\vision\dataloaders,video_input.py,"def decode(self, features):"
data/raw/repos\official\vision\dataloaders,video_input.py,"def __init__(self, input_params: exp_cfg.DataConfig):"
data/raw/repos\official\vision\dataloaders,video_input_test.py,def fake_seq_example():
data/raw/repos\official\vision\dataloaders,video_input_test.py,def test_decoder(self):
data/raw/repos\official\vision\dataloaders,video_input_test.py,def test_decode_audio(self):
data/raw/repos\official\vision\dataloaders,video_input_test.py,def test_tfds_decode(self):
data/raw/repos\official\vision\dataloaders,video_input_test.py,def test_video_input(self):
data/raw/repos\official\vision\dataloaders,video_input_test.py,def test_video_audio_input(self):
data/raw/repos\official\vision\dataloaders,video_input_test.py,def test_video_input_random_stride(self):
data/raw/repos\official\vision\dataloaders,video_input_test.py,def test_video_input_augmentation_returns_shape(self):
data/raw/repos\official\vision\dataloaders,video_input_test.py,def test_video_input_image_shape_label_type(self):
data/raw/repos\official\vision\evaluation,coco_evaluator.py,def name(self):
data/raw/repos\official\vision\evaluation,coco_evaluator.py,def reset_states(self):
data/raw/repos\official\vision\evaluation,coco_evaluator.py,def result(self):
data/raw/repos\official\vision\evaluation,coco_evaluator.py,def evaluate(self):
data/raw/repos\official\vision\evaluation,coco_evaluator.py,"def _retrieve_per_category_metrics(self, coco_eval, prefix=''):"
data/raw/repos\official\vision\evaluation,coco_evaluator.py,"def _process_bbox_predictions(self, predictions):"
data/raw/repos\official\vision\evaluation,coco_evaluator.py,"def _process_keypoints_predictions(self, predictions):"
data/raw/repos\official\vision\evaluation,coco_evaluator.py,"def _convert_to_numpy(self, groundtruths, predictions):"
data/raw/repos\official\vision\evaluation,coco_evaluator.py,"def update_state(self, groundtruths, predictions):"
data/raw/repos\official\vision\evaluation,coco_utils.py,"def __init__(self, eval_type='box', annotation_file=None, gt_dataset=None):"
data/raw/repos\official\vision\evaluation,coco_utils.py,"def loadRes(self, predictions):"
data/raw/repos\official\vision\evaluation,coco_utils.py,def convert_predictions_to_coco_annotations(predictions):
data/raw/repos\official\vision\evaluation,coco_utils.py,"def convert_groundtruths_to_coco_dataset(groundtruths, label_map=None):"
data/raw/repos\official\vision\evaluation,coco_utils.py,"def _parse_single_example(self, example):"
data/raw/repos\official\vision\evaluation,coco_utils.py,def _build_pipeline(self):
data/raw/repos\official\vision\evaluation,coco_utils.py,def __call__(self):
data/raw/repos\official\vision\evaluation,coco_utils_test.py,def test_scan_and_generator_annotation_file(self):
data/raw/repos\official\vision\evaluation,coco_utils_test.py,def test_convert_keypoint_predictions_to_coco_annotations(self):
data/raw/repos\official\vision\evaluation,instance_metrics.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\vision\evaluation,instance_metrics.py,"def call(self, precisions, recalls):"
data/raw/repos\official\vision\evaluation,instance_metrics.py,"def __init__(self, recalls_desc: bool = False):"
data/raw/repos\official\vision\evaluation,instance_metrics.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\official\vision\evaluation,instance_metrics.py,"def __init__(self, iou_thresholds: Tuple[float, ...]):"
data/raw/repos\official\vision\evaluation,instance_metrics.py,def reset_state(self):
data/raw/repos\official\vision\evaluation,instance_metrics.py,def get_average_precision_metrics_keys(self):
data/raw/repos\official\vision\evaluation,instance_metrics_test.py,def test_compute_coco_ap(self):
data/raw/repos\official\vision\evaluation,instance_metrics_test.py,def test_compute_voc10_ap(self):
data/raw/repos\official\vision\evaluation,instance_metrics_test.py,def test_match_detections_to_gts(self):
data/raw/repos\official\vision\evaluation,instance_metrics_test.py,def test_shift_and_rescale_boxes(self):
data/raw/repos\official\vision\evaluation,instance_metrics_test.py,def test_count_detection_type(self):
data/raw/repos\official\vision\evaluation,instance_metrics_test.py,"def test_instance_metrics(self, use_mask):"
data/raw/repos\official\vision\evaluation,instance_metrics_test.py,def test_mask_metrics_with_instance_rescaled(self):
data/raw/repos\official\vision\evaluation,instance_metrics_test.py,"def test_instance_metrics_with_crowd(self, use_mask):"
data/raw/repos\official\vision\evaluation,iou.py,def result(self):
data/raw/repos\official\vision\evaluation,iou.py,def reset_state(self):
data/raw/repos\official\vision\evaluation,iou.py,"def update_state(self, y_true: tf.Tensor, y_pred: tf.Tensor):"
data/raw/repos\official\vision\evaluation,iou_test.py,def test_config(self):
data/raw/repos\official\vision\evaluation,iou_test.py,def test_unweighted(self):
data/raw/repos\official\vision\evaluation,iou_test.py,def test_weighted(self):
data/raw/repos\official\vision\evaluation,iou_test.py,def test_multi_dim_input(self):
data/raw/repos\official\vision\evaluation,iou_test.py,def test_zero_valid_entries(self):
data/raw/repos\official\vision\evaluation,iou_test.py,def test_zero_and_non_zero_entries(self):
data/raw/repos\official\vision\evaluation,iou_test.py,def test_update_state_and_result(self):
data/raw/repos\official\vision\evaluation,iou_test.py,def test_per_class_iou_v2(self):
data/raw/repos\official\vision\evaluation,iou_test.py,def test_per_class_iou_v2_sparse_input(self):
data/raw/repos\official\vision\evaluation,iou_test.py,def test_per_class_iou_v2_keep_tailing_dims(self):
data/raw/repos\official\vision\evaluation,panoptic_quality.py,"def realdiv_maybe_zero(x, y):"
data/raw/repos\official\vision\evaluation,panoptic_quality.py,def _ids_to_counts(id_array):
data/raw/repos\official\vision\evaluation,panoptic_quality.py,"def _naively_combine_labels(self, category_mask, instance_mask):"
data/raw/repos\official\vision\evaluation,panoptic_quality.py,"def compare_and_accumulate(self, groundtruths, predictions):"
data/raw/repos\official\vision\evaluation,panoptic_quality.py,def prediction_void_overlap(pred_segment_id):
data/raw/repos\official\vision\evaluation,panoptic_quality.py,def prediction_ignored_overlap(pred_segment_id):
data/raw/repos\official\vision\evaluation,panoptic_quality.py,def _valid_categories(self):
data/raw/repos\official\vision\evaluation,panoptic_quality.py,def result_per_category(self):
data/raw/repos\official\vision\evaluation,panoptic_quality.py,"def result(self, is_thing=None):"
data/raw/repos\official\vision\evaluation,panoptic_quality.py,def reset(self):
data/raw/repos\official\vision\evaluation,panoptic_quality.py,def reset_state(self):
data/raw/repos\official\vision\evaluation,panoptic_quality_evaluator.py,"def _crop_padding(mask, image_info):"
data/raw/repos\official\vision\evaluation,panoptic_quality_evaluator.py,def name(self):
data/raw/repos\official\vision\evaluation,panoptic_quality_evaluator.py,def reset_states(self):
data/raw/repos\official\vision\evaluation,panoptic_quality_evaluator.py,def result(self):
data/raw/repos\official\vision\evaluation,panoptic_quality_evaluator.py,"def _convert_to_numpy(self, groundtruths, predictions):"
data/raw/repos\official\vision\evaluation,panoptic_quality_evaluator.py,"def update_state(self, groundtruths, predictions):"
data/raw/repos\official\vision\evaluation,panoptic_quality_evaluator_test.py,def test_multiple_batches(self):
data/raw/repos\official\vision\evaluation,panoptic_quality_test.py,def test_perfect_match(self):
data/raw/repos\official\vision\evaluation,panoptic_quality_test.py,def test_totally_wrong(self):
data/raw/repos\official\vision\evaluation,panoptic_quality_test.py,def test_matches_by_iou(self):
data/raw/repos\official\vision\evaluation,panoptic_quality_test.py,def test_wrong_instances(self):
data/raw/repos\official\vision\evaluation,panoptic_quality_test.py,def test_instance_order_is_arbitrary(self):
data/raw/repos\official\vision\evaluation,panoptic_quality_test.py,def test_perfect_match(self):
data/raw/repos\official\vision\evaluation,panoptic_quality_test.py,def test_totally_wrong(self):
data/raw/repos\official\vision\evaluation,panoptic_quality_test.py,def test_matches_by_iou(self):
data/raw/repos\official\vision\evaluation,panoptic_quality_test.py,def test_thing_and_stuff(self):
data/raw/repos\official\vision\evaluation,segmentation_metrics.py,"def update_state(self, y_true, y_pred):"
data/raw/repos\official\vision\evaluation,segmentation_metrics.py,def result(self):
data/raw/repos\official\vision\evaluation,segmentation_metrics.py,"def update_state(self, y_true: tf.Tensor, y_pred: tf.Tensor):"
data/raw/repos\official\vision\evaluation,segmentation_metrics_test.py,def _create_test_data(self):
data/raw/repos\official\vision\evaluation,segmentation_metrics_test.py,"def test_mean_iou_metric(self, rescale_predictions, use_v2):"
data/raw/repos\official\vision\evaluation,segmentation_metrics_test.py,"def test_per_class_mean_iou_metric(self, rescale_predictions, use_v2):"
data/raw/repos\official\vision\evaluation,segmentation_metrics_test.py,def test_mean_iou_metric_v2_target_class_ids(self):
data/raw/repos\official\vision\evaluation,wod_detection_evaluator.py,def get_2d_detection_default_config():
data/raw/repos\official\vision\evaluation,wod_detection_evaluator.py,"def __init__(self, config=None):"
data/raw/repos\official\vision\evaluation,wod_detection_evaluator.py,"def _remove_padding(self, tensor_dict, num_valid):"
data/raw/repos\official\vision\evaluation,wod_detection_evaluator.py,"def update_state(self, groundtruths, predictions):"
data/raw/repos\official\vision\evaluation,wod_detection_evaluator.py,def evaluate(self):
data/raw/repos\official\vision\examples\starter,example_input.py,def __init__(self):
data/raw/repos\official\vision\examples\starter,example_input.py,"def __init__(self, output_size: List[int], num_classes: float):"
data/raw/repos\official\vision\examples\starter,example_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\losses,focal_loss.py,"def call(self, y_true, y_pred):"
data/raw/repos\official\vision\losses,focal_loss.py,def get_config(self):
data/raw/repos\official\vision\losses,loss_utils.py,"def multi_level_flatten(multi_level_inputs, last_dim=None):"
data/raw/repos\official\vision\losses,maskrcnn_losses.py,"def __init__(self, rpn_batch_size_per_im):"
data/raw/repos\official\vision\losses,maskrcnn_losses.py,"def __call__(self, score_outputs, labels):"
data/raw/repos\official\vision\losses,maskrcnn_losses.py,"def _rpn_score_loss(self, score_outputs, score_targets, normalizer=1.0):"
data/raw/repos\official\vision\losses,maskrcnn_losses.py,"def __init__(self, huber_loss_delta: float):"
data/raw/repos\official\vision\losses,maskrcnn_losses.py,"def __call__(self, box_outputs, labels):"
data/raw/repos\official\vision\losses,maskrcnn_losses.py,"def _rpn_box_loss(self, box_outputs, box_targets, normalizer=1.0):"
data/raw/repos\official\vision\losses,maskrcnn_losses.py,"def __call__(self, class_outputs, class_targets, class_weights=None):"
data/raw/repos\official\vision\losses,maskrcnn_losses.py,"def aggregate_loss_top_k(self, loss, num_valid_values=None):"
data/raw/repos\official\vision\losses,maskrcnn_losses.py,"def __call__(self, box_outputs, class_targets, box_targets):"
data/raw/repos\official\vision\losses,maskrcnn_losses.py,"def _assign_class_targets(self, box_outputs, class_targets):"
data/raw/repos\official\vision\losses,maskrcnn_losses.py,def __init__(self):
data/raw/repos\official\vision\losses,maskrcnn_losses.py,"def __call__(self, mask_outputs, mask_targets, select_class_targets):"
data/raw/repos\official\vision\losses,maskrcnn_losses_test.py,def testRpnScoreLoss(self):
data/raw/repos\official\vision\losses,maskrcnn_losses_test.py,def testRpnBoxLoss(self):
data/raw/repos\official\vision\losses,maskrcnn_losses_test.py,def testRpnBoxLossValidBox(self):
data/raw/repos\official\vision\losses,maskrcnn_losses_test.py,def testRpnBoxLossInvalidBox(self):
data/raw/repos\official\vision\losses,maskrcnn_losses_test.py,"def testFastrcnnClassLoss(self, use_binary_cross_entropy):"
data/raw/repos\official\vision\losses,maskrcnn_losses_test.py,def testFastrcnnClassLossTopK(self):
data/raw/repos\official\vision\losses,maskrcnn_losses_test.py,def testFastrcnnBoxLoss(self):
data/raw/repos\official\vision\losses,maskrcnn_losses_test.py,def testMaskrcnnLoss(self):
data/raw/repos\official\vision\losses,retinanet_losses.py,"def focal_loss(logits, targets, alpha, gamma):"
data/raw/repos\official\vision\losses,retinanet_losses.py,"def call(self, y_true, y_pred):"
data/raw/repos\official\vision\losses,retinanet_losses.py,def get_config(self):
data/raw/repos\official\vision\losses,retinanet_losses.py,"def call(self, y_true, y_pred):"
data/raw/repos\official\vision\losses,retinanet_losses.py,def get_config(self):
data/raw/repos\official\vision\losses,segmentation_losses.py,"def __call__(self, logits, labels, **kwargs):"
data/raw/repos\official\vision\losses,segmentation_losses.py,"def get_labels_with_prob(self, logits, labels, valid_mask, **unused_kwargs):"
data/raw/repos\official\vision\losses,segmentation_losses.py,"def aggregate_loss_top_k(self, pixelwise_loss, num_valid_pixels=None):"
data/raw/repos\official\vision\losses,segmentation_losses.py,"def get_actual_mask_scores(logits, labels, ignore_label):"
data/raw/repos\official\vision\losses,segmentation_losses.py,"def __init__(self, ignore_label):"
data/raw/repos\official\vision\losses,segmentation_losses.py,"def __call__(self, predicted_scores, logits, labels):"
data/raw/repos\official\vision\losses,segmentation_losses_test.py,def testSegmentationLossTopK(self):
data/raw/repos\official\vision\losses,segmentation_losses_test.py,def testSegmentationLossTopKWithIgnoreLabel(self):
data/raw/repos\official\vision\losses,segmentation_losses_test.py,def testSegmentationLossGroundTruthIsMattingMap(self):
data/raw/repos\official\vision\modeling,classification_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling,classification_model_test.py,def test_revnet_network_creation(self):
data/raw/repos\official\vision\modeling,classification_model_test.py,"def test_sync_bn_multiple_devices(self, strategy, use_sync_bn):"
data/raw/repos\official\vision\modeling,classification_model_test.py,"def test_data_format_gpu(self, strategy, data_format, input_dim):"
data/raw/repos\official\vision\modeling,classification_model_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling,factory_3d.py,def register_model_builder(key: str):
data/raw/repos\official\vision\modeling,factory_3d.py,"def builder(input_specs, config, l2_reg):"
data/raw/repos\official\vision\modeling,factory_test.py,"def test_builder(self, backbone_type, input_size, weight_decay):"
data/raw/repos\official\vision\modeling,factory_test.py,"def test_builder(self, backbone_type, input_size):"
data/raw/repos\official\vision\modeling,factory_test.py,"def test_builder(self, backbone_type, input_size, has_att_heads):"
data/raw/repos\official\vision\modeling,factory_test.py,def test_build_model_with_custom_anchors_can_run(self):
data/raw/repos\official\vision\modeling,factory_test.py,"def test_builder(self, backbone_type, input_size, weight_decay):"
data/raw/repos\official\vision\modeling,maskrcnn_model.py,"def _get_backbone_and_decoder_features(self, images):"
data/raw/repos\official\vision\modeling,maskrcnn_model.py,"def _features_to_mask_outputs(self, features, rois, roi_classes):"
data/raw/repos\official\vision\modeling,maskrcnn_model.py,"def from_config(cls, config):"
data/raw/repos\official\vision\modeling,maskrcnn_model_test.py,"def test_serialize_deserialize(self, include_mask):"
data/raw/repos\official\vision\modeling,maskrcnn_model_test.py,"def test_checkpoint(self, include_mask):"
data/raw/repos\official\vision\modeling,retinanet_model.py,def _update_decoded_results():
data/raw/repos\official\vision\modeling,retinanet_model.py,"def from_config(cls, config):"
data/raw/repos\official\vision\modeling,retinanet_model_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling,segmentation_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling,segmentation_model_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling,video_classification_model.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling,video_classification_model_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\backbones,efficientnet.py,def get_config(self):
data/raw/repos\official\vision\modeling\backbones,efficientnet.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling\backbones,efficientnet.py,def output_specs(self):
data/raw/repos\official\vision\modeling\backbones,efficientnet_test.py,"def test_network_creation(self, input_size):"
data/raw/repos\official\vision\modeling\backbones,efficientnet_test.py,"def test_network_scaling(self, model_id):"
data/raw/repos\official\vision\modeling\backbones,efficientnet_test.py,"def test_input_specs(self, input_dim):"
data/raw/repos\official\vision\modeling\backbones,efficientnet_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\backbones,factory.py,def build_my_backbone():
data/raw/repos\official\vision\modeling\backbones,factory.py,def register_backbone_builder(key: str):
data/raw/repos\official\vision\modeling\backbones,factory.py,"def builder(input_specs, config, l2_reg):"
data/raw/repos\official\vision\modeling\backbones,factory_test.py,"def test_resnet_creation(self, model_id):"
data/raw/repos\official\vision\modeling\backbones,factory_test.py,"def test_efficientnet_creation(self, model_id, se_ratio):"
data/raw/repos\official\vision\modeling\backbones,factory_test.py,"def test_mobilenet_creation(self, model_id, filter_size_scale):"
data/raw/repos\official\vision\modeling\backbones,factory_test.py,"def test_spinenet_creation(self, model_id):"
data/raw/repos\official\vision\modeling\backbones,factory_test.py,"def test_revnet_creation(self, model_id):"
data/raw/repos\official\vision\modeling\backbones,factory_test.py,"def test_resnet_3d_creation(self, model_type):"
data/raw/repos\official\vision\modeling\backbones,factory_test.py,"def test_mobiledet_creation(self, model_id, filter_size_scale):"
data/raw/repos\official\vision\modeling\backbones,mobiledet.py,def _get_divisible_by(self):
data/raw/repos\official\vision\modeling\backbones,mobiledet.py,def get_config(self):
data/raw/repos\official\vision\modeling\backbones,mobiledet.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling\backbones,mobiledet.py,def output_specs(self):
data/raw/repos\official\vision\modeling\backbones,mobiledet_test.py,"def test_serialize_deserialize(self, model_id):"
data/raw/repos\official\vision\modeling\backbones,mobiledet_test.py,"def test_input_specs(self, input_dim, model_id):"
data/raw/repos\official\vision\modeling\backbones,mobiledet_test.py,"def test_mobiledet_creation(self, model_id, input_size):"
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,def get_config(self):
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,"def call(self, inputs, training=None):"
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,def _mnv4_conv_medium_block_specs():
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,"def convbn(kernel_size, strides, filters):"
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,"def fused_ib(kernel_size, strides, filters, output=False):"
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,def _mnv4_conv_medium_seg_block_specs():
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,"def convbn(kernel_size, strides, filters, output=False):"
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,"def fused_ib(kernel_size, strides, filters, output=False):"
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,def _mnv4_hybrid_medium_block_specs():
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,"def convbn(kernel_size, strides, filters):"
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,"def fused_ib(kernel_size, strides, filters, output=False):"
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,def mhsa_24px():
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,def mhsa_12px():
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,def _mnv4_hybrid_large_block_specs():
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,"def convbn(kernel_size, strides, filters):"
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,"def fused_ib(kernel_size, strides, filters, output=False):"
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,def mhsa_24px():
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,def mhsa_12px():
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,def _get_divisible_by(self):
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,def get_config(self):
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling\backbones,mobilenet.py,def output_specs(self):
data/raw/repos\official\vision\modeling\backbones,mobilenet_test.py,"def test_serialize_deserialize(self, model_id):"
data/raw/repos\official\vision\modeling\backbones,mobilenet_test.py,"def test_input_specs(self, input_dim, model_id):"
data/raw/repos\official\vision\modeling\backbones,mobilenet_test.py,"def test_mobilenet_intermediate_layers(self, model_id, input_size):"
data/raw/repos\official\vision\modeling\backbones,mobilenet_test.py,"def test_mobilenet_output_stride(self, model_id, output_stride):"
data/raw/repos\official\vision\modeling\backbones,resnet.py,"def _stem(self, inputs):"
data/raw/repos\official\vision\modeling\backbones,resnet.py,def get_config(self):
data/raw/repos\official\vision\modeling\backbones,resnet.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling\backbones,resnet.py,def output_specs(self):
data/raw/repos\official\vision\modeling\backbones,resnet_3d.py,"def _build_model(self, inputs):"
data/raw/repos\official\vision\modeling\backbones,resnet_3d.py,"def _build_stem(self, inputs, stem_type):"
data/raw/repos\official\vision\modeling\backbones,resnet_3d.py,def get_config(self):
data/raw/repos\official\vision\modeling\backbones,resnet_3d.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling\backbones,resnet_3d.py,def output_specs(self):
data/raw/repos\official\vision\modeling\backbones,resnet_3d_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\backbones,resnet_deeplab.py,def get_config(self):
data/raw/repos\official\vision\modeling\backbones,resnet_deeplab.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling\backbones,resnet_deeplab.py,def output_specs(self):
data/raw/repos\official\vision\modeling\backbones,resnet_deeplab_test.py,"def test_sync_bn_multiple_devices(self, strategy, use_sync_bn):"
data/raw/repos\official\vision\modeling\backbones,resnet_deeplab_test.py,"def test_input_specs(self, input_dim):"
data/raw/repos\official\vision\modeling\backbones,resnet_deeplab_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\backbones,resnet_test.py,"def test_sync_bn_multiple_devices(self, strategy, use_sync_bn):"
data/raw/repos\official\vision\modeling\backbones,resnet_test.py,"def test_input_specs(self, input_dim):"
data/raw/repos\official\vision\modeling\backbones,resnet_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\backbones,resnet_unet.py,"def conv_2d(*args, **kwargs):"
data/raw/repos\official\vision\modeling\backbones,resnet_unet.py,"def dense(*args, **kwargs):"
data/raw/repos\official\vision\modeling\backbones,resnet_unet.py,"def call(self, x, training=None):"
data/raw/repos\official\vision\modeling\backbones,resnet_unet.py,def get_config(self):
data/raw/repos\official\vision\modeling\backbones,resnet_unet.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling\backbones,resnet_unet.py,def output_specs(self):
data/raw/repos\official\vision\modeling\backbones,resnet_unet_test.py,"def test_network_creation(self, input_size, model_id, endpoint_filter_scale):"
data/raw/repos\official\vision\modeling\backbones,resnet_unet_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\backbones,revnet_test.py,"def test_input_specs(self, input_dim):"
data/raw/repos\official\vision\modeling\backbones,revnet_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\backbones,spinenet.py,"def _set_activation_fn(self, activation):"
data/raw/repos\official\vision\modeling\backbones,spinenet.py,"def _build_stem(self, inputs):"
data/raw/repos\official\vision\modeling\backbones,spinenet.py,"def _build_endpoints(self, net):"
data/raw/repos\official\vision\modeling\backbones,spinenet.py,def get_config(self):
data/raw/repos\official\vision\modeling\backbones,spinenet.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling\backbones,spinenet.py,def output_specs(self):
data/raw/repos\official\vision\modeling\backbones,spinenet_mobile.py,"def _build_stem(self, inputs):"
data/raw/repos\official\vision\modeling\backbones,spinenet_mobile.py,"def _build_endpoints(self, net):"
data/raw/repos\official\vision\modeling\backbones,spinenet_mobile.py,def get_config(self):
data/raw/repos\official\vision\modeling\backbones,spinenet_mobile.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling\backbones,spinenet_mobile.py,def output_specs(self):
data/raw/repos\official\vision\modeling\backbones,spinenet_mobile_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\backbones,spinenet_test.py,"def test_load_from_different_input_specs(self, input_size_1, input_size_2):"
data/raw/repos\official\vision\modeling\backbones,spinenet_test.py,def build_spinenet(input_size):
data/raw/repos\official\vision\modeling\backbones,spinenet_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\backbones,spinenet_test.py,"def test_activation(self, activation, activation_fn):"
data/raw/repos\official\vision\modeling\backbones,spinenet_test.py,def test_invalid_activation_raises_valurerror(self):
data/raw/repos\official\vision\modeling\backbones,vit.py,"def build(self, inputs_shape):"
data/raw/repos\official\vision\modeling\backbones,vit.py,"def call(self, inputs, inputs_positions=None):"
data/raw/repos\official\vision\modeling\backbones,vit.py,"def build(self, inputs_shape):"
data/raw/repos\official\vision\modeling\backbones,vit.py,"def call(self, inputs):"
data/raw/repos\official\vision\modeling\backbones,vit.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\backbones,vit.py,"def call(self, inputs, training=None):"
data/raw/repos\official\vision\modeling\backbones,vit.py,def get_config(self):
data/raw/repos\official\vision\modeling\backbones,vit.py,def output_specs(self):
data/raw/repos\official\vision\modeling\backbones,vit_test.py,"def test_network_creation(self, input_size, params_count):"
data/raw/repos\official\vision\modeling\backbones,vit_test.py,def test_posembedding_interpolation(self):
data/raw/repos\official\vision\modeling\backbones,vit_test.py,def test_attention_scores(self):
data/raw/repos\official\vision\modeling\decoders,aspp.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\decoders,aspp.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling\decoders,aspp_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\decoders,factory.py,def build_my_decoder():
data/raw/repos\official\vision\modeling\decoders,factory.py,"def builder(input_specs, config, l2_reg):"
data/raw/repos\official\vision\modeling\decoders,factory_test.py,"def test_fpn_decoder_creation(self, num_filters, use_separable_conv):"
data/raw/repos\official\vision\modeling\decoders,factory_test.py,"def test_aspp_decoder_creation(self, level, dilation_rates, num_filters):"
data/raw/repos\official\vision\modeling\decoders,factory_test.py,def test_identity_decoder_creation(self):
data/raw/repos\official\vision\modeling\decoders,fpn.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling\decoders,fpn_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\decoders,nasfpn.py,def _conv_kwargs(self):
data/raw/repos\official\vision\modeling\decoders,nasfpn.py,"def _global_attention(self, feat0, feat1):"
data/raw/repos\official\vision\modeling\decoders,nasfpn.py,"def _build_feature_pyramid(self, feats):"
data/raw/repos\official\vision\modeling\decoders,nasfpn.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling\heads,dense_prediction_heads.py,"def _conv_kwargs_new_kernel_init(self, conv_kwargs):"
data/raw/repos\official\vision\modeling\heads,dense_prediction_heads.py,def _init_attribute_kwargs(self):
data/raw/repos\official\vision\modeling\heads,dense_prediction_heads.py,"def _build_attribute_net(self, conv_op, bn_op):"
data/raw/repos\official\vision\modeling\heads,dense_prediction_heads.py,"def build(self, input_shape: Union[tf.TensorShape, List[tf.TensorShape]]):"
data/raw/repos\official\vision\modeling\heads,dense_prediction_heads.py,"def call(self, features: Mapping[str, tf.Tensor]):"
data/raw/repos\official\vision\modeling\heads,dense_prediction_heads.py,def get_config(self):
data/raw/repos\official\vision\modeling\heads,dense_prediction_heads.py,"def from_config(cls, config):"
data/raw/repos\official\vision\modeling\heads,dense_prediction_heads.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\heads,dense_prediction_heads.py,"def call(self, features: Mapping[str, tf.Tensor]):"
data/raw/repos\official\vision\modeling\heads,dense_prediction_heads.py,def get_config(self):
data/raw/repos\official\vision\modeling\heads,dense_prediction_heads.py,"def from_config(cls, config):"
data/raw/repos\official\vision\modeling\heads,dense_prediction_heads_test.py,def get_attribute_heads(att_head_type):
data/raw/repos\official\vision\modeling\heads,dense_prediction_heads_test.py,def test_forward_with_num_anchors_per_location_by_level(self):
data/raw/repos\official\vision\modeling\heads,dense_prediction_heads_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\heads,dense_prediction_heads_test.py,"def test_forward(self, use_separable_conv, use_sync_bn):"
data/raw/repos\official\vision\modeling\heads,dense_prediction_heads_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\heads,instance_heads.py,"def build(self, input_shape: Union[tf.TensorShape, List[tf.TensorShape]]):"
data/raw/repos\official\vision\modeling\heads,instance_heads.py,"def call(self, inputs: tf.Tensor, training: bool = None):"
data/raw/repos\official\vision\modeling\heads,instance_heads.py,def get_config(self):
data/raw/repos\official\vision\modeling\heads,instance_heads.py,"def from_config(cls, config):"
data/raw/repos\official\vision\modeling\heads,instance_heads.py,"def build(self, input_shape: Union[tf.TensorShape, List[tf.TensorShape]]):"
data/raw/repos\official\vision\modeling\heads,instance_heads.py,"def call(self, inputs: List[tf.Tensor], training: bool = None):"
data/raw/repos\official\vision\modeling\heads,instance_heads.py,def get_config(self):
data/raw/repos\official\vision\modeling\heads,instance_heads.py,"def from_config(cls, config):"
data/raw/repos\official\vision\modeling\heads,instance_heads_test.py,"def test_forward(self, num_convs, num_fcs, use_separable_conv, use_sync_bn):"
data/raw/repos\official\vision\modeling\heads,instance_heads_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\heads,instance_heads_test.py,"def test_forward(self, upsample_factor, num_convs, use_sync_bn):"
data/raw/repos\official\vision\modeling\heads,instance_heads_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\heads,instance_heads_test.py,def test_forward_class_agnostic(self):
data/raw/repos\official\vision\modeling\heads,segmentation_heads.py,"def build(self, input_shape: Union[tf.TensorShape, List[tf.TensorShape]]):"
data/raw/repos\official\vision\modeling\heads,segmentation_heads.py,"def call(self, inputs: tf.Tensor, training: bool = None):"
data/raw/repos\official\vision\modeling\heads,segmentation_heads.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling\heads,segmentation_heads.py,"def build(self, input_shape: Union[tf.TensorShape, List[tf.TensorShape]]):"
data/raw/repos\official\vision\modeling\heads,segmentation_heads.py,def get_config(self):
data/raw/repos\official\vision\modeling\heads,segmentation_heads.py,"def from_config(cls, config):"
data/raw/repos\official\vision\modeling\heads,segmentation_heads_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\heads,segmentation_heads_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\layers,box_sampler.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,box_sampler.py,"def from_config(cls, config):"
data/raw/repos\official\vision\modeling\layers,deeplab.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,deeplab.py,"def call(self, inputs, training=None):"
data/raw/repos\official\vision\modeling\layers,deeplab.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,deeplab_test.py,"def test_aspp(self, pool_kernel_size):"
data/raw/repos\official\vision\modeling\layers,deeplab_test.py,def test_aspp_invalid_shape(self):
data/raw/repos\official\vision\modeling\layers,deeplab_test.py,def test_config_with_custom_name(self):
data/raw/repos\official\vision\modeling\layers,detection_generator.py,"def _select_top_k_scores(scores_in: tf.Tensor, pre_nms_num_detections: int):"
data/raw/repos\official\vision\modeling\layers,detection_generator.py,"def dummy_post_processing(input_boxes, input_scores, input_anchors):"
data/raw/repos\official\vision\modeling\layers,detection_generator.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,detection_generator.py,"def from_config(cls, config):"
data/raw/repos\official\vision\modeling\layers,detection_generator.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,detection_generator.py,"def from_config(cls, config):"
data/raw/repos\official\vision\modeling\layers,detection_generator_test.py,def testSelectTopKScores(self):
data/raw/repos\official\vision\modeling\layers,detection_generator_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\layers,detection_generator_test.py,def test_decode_multilevel_outputs_and_pre_nms_top_k(self):
data/raw/repos\official\vision\modeling\layers,detection_generator_test.py,def test_decode_multilevel_with_tflite_nms(self):
data/raw/repos\official\vision\modeling\layers,detection_generator_test.py,def test_decode_multilevel_tflite_nms_error_on_wrong_boxes_shape(self):
data/raw/repos\official\vision\modeling\layers,detection_generator_test.py,def test_decode_multilevel_tflite_nms_error_on_wrong_scores_shape(self):
data/raw/repos\official\vision\modeling\layers,detection_generator_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\layers,edgetpu.py,"def _tensor_sum_vectors(a, b):"
data/raw/repos\official\vision\modeling\layers,edgetpu.py,def _tensor_product_iou(boxes):
data/raw/repos\official\vision\modeling\layers,edgetpu.py,def _greater(x):
data/raw/repos\official\vision\modeling\layers,edgetpu.py,def _same(x):
data/raw/repos\official\vision\modeling\layers,edgetpu_test.py,def random_boxes(shape):
data/raw/repos\official\vision\modeling\layers,edgetpu_test.py,def _maximum_activation_size(model):
data/raw/repos\official\vision\modeling\layers,edgetpu_test.py,"def _deviation_and_margin(reference, valid, optimized):"
data/raw/repos\official\vision\modeling\layers,edgetpu_test.py,def setUp(self):
data/raw/repos\official\vision\modeling\layers,edgetpu_test.py,def test_refinement_sample(self):
data/raw/repos\official\vision\modeling\layers,edgetpu_test.py,"def test_reference_match(self, n, top, runs, max_devs):"
data/raw/repos\official\vision\modeling\layers,edgetpu_test.py,"def test_sharded_match(self, shape: list[int], top: int):"
data/raw/repos\official\vision\modeling\layers,edgetpu_test.py,def test_shard_tensors(self):
data/raw/repos\official\vision\modeling\layers,edgetpu_test.py,def test_top_k_sharded_fusion_arguments_validation(self):
data/raw/repos\official\vision\modeling\layers,edgetpu_test.py,"def test_top_k_sharded_fusion_vs_top_k_unsharded(self, axis: int):"
data/raw/repos\official\vision\modeling\layers,mask_sampler.py,"def __init__(self, mask_target_size: int, num_sampled_masks: int, **kwargs):"
data/raw/repos\official\vision\modeling\layers,mask_sampler.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,mask_sampler.py,"def from_config(cls, config):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def __init__(self, num_heads, key_dim, value_dim, dropout=0):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def _reshape_input(self, t):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def call(self, inputs, optimize_einsum=False):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def __init__(self, num_heads, key_dim, value_dim, dropout=0):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def _reshape_input(self, t):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def call(self, inputs):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def _reshape_input(self, t):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def _reshape_projected_query(self, t, num_heads, h_px, w_px, key_dim):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def _get_pixels(self, t):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def _reshape_output(self, t, num_heads, h_px, w_px):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def call(self, inputs):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def call(self, inputs):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape: tf.TensorShape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape: tf.TensorShape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,def _ckpt_non_trainable_vars(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,def _load_ckpt_non_trainable_vars(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def call(self, inputs, training=None):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def __init__(self, init_values: float, **kwargs):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def build(self, inputs_shape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def call(self, inputs, inputs_positions=None):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def __init__(self, init_value: float, **kwargs):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def build(self, inputs_shape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def call(self, x, training=None):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def call(self, inputs, output_range=None, training=None):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,"def build(self, input_shape: Union[tf.TensorShape, List[int]]):"
data/raw/repos\official\vision\modeling\layers,nn_blocks.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks_3d.py,"def __init__(self, filters, **kwargs):"
data/raw/repos\official\vision\modeling\layers,nn_blocks_3d.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks_3d.py,"def call(self, inputs):"
data/raw/repos\official\vision\modeling\layers,nn_blocks_3d.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks_3d.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks_3d.py,"def call(self, inputs, training=None):"
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def test_layerscale_call(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def test_layerscale_training(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,"def test_shape(self, distribution):"
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,"def test_shape(self, distribution):"
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,"def test_shape(self, distribution):"
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,"def test_downsampling_non_reversible_step(self, distribution):"
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def step_fn():
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,"def test_reversible_step(self, distribution):"
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def step_fn():
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def fwd():
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,"def test_manual_gradients_correctness(self, distribution):"
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def manual_fn():
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def auto_fn():
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,"def __init__(self, call_list, **kwargs):"
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,"def __init__(self, call_list, activation, **kwargs):"
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,"def call(self, inputs):"
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def tearDown(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,"def test_layer_creation(self, max_attention_inference_parallelism):"
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def test_layer_creation_with_feedforward_cls(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def test_layer_creation_with_mask(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,"def test_layer_invocation(self, max_attention_inference_parallelism):"
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def test_layer_invocation_with_feedforward_cls(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def test_layer_invocation_with_mask(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def test_layer_invocation_with_float16_dtype(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def test_transform_with_initializer(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def test_layer_restoration_from_config(self):
data/raw/repos\official\vision\modeling\layers,nn_blocks_test.py,def test_layer_with_feedforward_cls_restoration_from_config(self):
data/raw/repos\official\vision\modeling\layers,nn_layers.py,def get_padding_for_kernel_size(kernel_size):
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def call(self, inputs):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def get_stochastic_depth_rate(init_rate, i, n):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def __init__(self, stochastic_depth_drop_rate, **kwargs):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def call(self, inputs, training=None):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def pyramid_feature_fusion(inputs, target_level):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def call(self, inputs):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def call(self, inputs):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def __init__(self, keepdims: bool = False, **kwargs):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def call(self, inputs, states=None, output_states: bool = False):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def use_buffered_input(self, variable: bool):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,def _causal_validate_init(self):
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def _buffered_spatial_output_shape(self, spatial_output_shape: List[int]):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def __init__(self, *args, use_buffered_input=False, **kwargs):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def _compute_causal_padding(self, inputs):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,def _validate_init(self):
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def _spatial_output_shape(self, spatial_input_shape: List[int]):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def __init__(self, *args, use_buffered_input=False, **kwargs):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def call(self, inputs):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def _compute_causal_padding(self, inputs):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,def _validate_init(self):
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def _spatial_output_shape(self, spatial_input_shape: List[int]):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def __init__(self, *args, use_buffered_input=False, **kwargs):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def call(self, inputs):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def _compute_causal_padding(self, inputs):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,def _validate_init(self):
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def _spatial_output_shape(self, spatial_input_shape: List[int]):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,"def build(self, input_shape):"
data/raw/repos\official\vision\modeling\layers,nn_layers.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_layers.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,nn_layers.py,def _compute_fn(x):
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,def test_scale(self):
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,def test_temporal_softmax_pool(self):
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,def test_positional_encoding(self):
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,def test_positional_encoding_bfloat16(self):
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,def test_global_average_pool_basic(self):
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,def test_positional_encoding_stream(self):
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,def test_global_average_pool_keras(self):
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,def test_stream_global_average_pool(self):
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,def test_causal_stream_global_average_pool(self):
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,def test_spatial_average_pool(self):
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,def test_conv2d_causal(self):
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,def test_depthwise_conv2d_causal(self):
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,def test_conv3d_causal(self):
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,def test_depthwise_conv3d_causal(self):
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,def test_conv3d_causal_padding_2d(self):
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,def test_conv3d_causal_padding_1d(self):
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,"def test_aspp(self, pool_kernel_size, dilation_rates):"
data/raw/repos\official\vision\modeling\layers,nn_layers_test.py,"def test_multi_head_attention(self, max_inference_parallelism):"
data/raw/repos\official\vision\modeling\layers,roi_aligner.py,"def __init__(self, crop_size: int = 7, sample_offset: float = 0.5, **kwargs):"
data/raw/repos\official\vision\modeling\layers,roi_aligner.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,roi_aligner.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling\layers,roi_aligner_test.py,def test_serialize_deserialize(self):
data/raw/repos\official\vision\modeling\layers,roi_generator.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,roi_generator.py,"def from_config(cls, config, custom_objects=None):"
data/raw/repos\official\vision\modeling\layers,roi_sampler.py,def get_config(self):
data/raw/repos\official\vision\modeling\layers,roi_sampler.py,"def from_config(cls, config):"
data/raw/repos\official\vision\ops,anchor.py,"def _get_rpn_samples(self, match_results):"
data/raw/repos\official\vision\ops,anchor.py,"def __call__(self, image_size):"
data/raw/repos\official\vision\ops,anchor_generator.py,"def __call__(self, image_size):"
data/raw/repos\official\vision\ops,anchor_generator.py,"def __call__(self, image_size):"
data/raw/repos\official\vision\ops,anchor_generator.py,"def maybe_map_structure_for_anchor(params, anchor_sizes):"
data/raw/repos\official\vision\ops,anchor_generator_test.py,"def testAnchorGeneration(self, level, aspect_ratios, expected_boxes):"
data/raw/repos\official\vision\ops,anchor_generator_test.py,"def testAnchorGenerationClipped(self, level, aspect_ratios, expected_boxes):"
data/raw/repos\official\vision\ops,augment.py,"def _get_gaussian_kernel(sigma, filter_shape):"
data/raw/repos\official\vision\ops,augment.py,"def _get_gaussian_kernel_2d(gaussian_filter_x, gaussian_filter_y):"
data/raw/repos\official\vision\ops,augment.py,"def _normalize_tuple(value, n, name):"
data/raw/repos\official\vision\ops,augment.py,def scale_values(im):
data/raw/repos\official\vision\ops,augment.py,"def scale_channel(im, c):"
data/raw/repos\official\vision\ops,augment.py,"def build_lut(histo, step):"
data/raw/repos\official\vision\ops,augment.py,def _scale_bbox_only_op_probability(prob):
data/raw/repos\official\vision\ops,augment.py,"def _apply_bbox_augmentation(image, bbox, augmentation_func, *args):"
data/raw/repos\official\vision\ops,augment.py,"def _concat_bbox(bbox, bboxes):"
data/raw/repos\official\vision\ops,augment.py,"def _clip_bbox(min_y, min_x, max_y, max_x):"
data/raw/repos\official\vision\ops,augment.py,"def _check_bbox_area(min_y, min_x, max_y, max_x, delta=0.05):"
data/raw/repos\official\vision\ops,augment.py,"def _adjust_bbox_boundaries(min_coord, max_coord):"
data/raw/repos\official\vision\ops,augment.py,"def _rotate_bbox(bbox, image_height, image_width, degrees):"
data/raw/repos\official\vision\ops,augment.py,"def rotate_with_bboxes(image, bboxes, degrees, replace):"
data/raw/repos\official\vision\ops,augment.py,"def _shear_bbox(bbox, image_height, image_width, level, shear_horizontal):"
data/raw/repos\official\vision\ops,augment.py,"def shear_with_bboxes(image, bboxes, level, replace, shear_horizontal):"
data/raw/repos\official\vision\ops,augment.py,"def _shift_bbox(bbox, image_height, image_width, pixels, shift_horizontal):"
data/raw/repos\official\vision\ops,augment.py,"def translate_bbox(image, bboxes, pixels, replace, shift_horizontal):"
data/raw/repos\official\vision\ops,augment.py,def _randomly_negate_tensor(tensor):
data/raw/repos\official\vision\ops,augment.py,def _rotate_level_to_arg(level: float):
data/raw/repos\official\vision\ops,augment.py,def _shrink_level_to_arg(level: float):
data/raw/repos\official\vision\ops,augment.py,def _enhance_level_to_arg(level: float):
data/raw/repos\official\vision\ops,augment.py,def _shear_level_to_arg(level: float):
data/raw/repos\official\vision\ops,augment.py,"def _translate_level_to_arg(level: float, translate_const: float):"
data/raw/repos\official\vision\ops,augment.py,"def _gaussian_noise_level_to_arg(level: float, translate_const: float):"
data/raw/repos\official\vision\ops,augment.py,"def _mult_to_arg(level: float, multiplier: float = 1.):"
data/raw/repos\official\vision\ops,augment.py,"def level_to_arg(cutout_const: float, translate_const: float):"
data/raw/repos\official\vision\ops,augment.py,def bbox_wrapper(func):
data/raw/repos\official\vision\ops,augment.py,"def wrapper(images, bboxes, *args, **kwargs):"
data/raw/repos\official\vision\ops,augment.py,"def _check_policy_shape(self, policies):"
data/raw/repos\official\vision\ops,augment.py,def _make_tf_policies(self):
data/raw/repos\official\vision\ops,augment.py,def make_final_policy(tf_policy_):
data/raw/repos\official\vision\ops,augment.py,"def final_policy(image_, bboxes_):"
data/raw/repos\official\vision\ops,augment.py,def detection_policy_v0():
data/raw/repos\official\vision\ops,augment.py,def policy_v0():
data/raw/repos\official\vision\ops,augment.py,def policy_reduced_cifar10():
data/raw/repos\official\vision\ops,augment.py,def policy_svhn():
data/raw/repos\official\vision\ops,augment.py,def policy_reduced_imagenet():
data/raw/repos\official\vision\ops,augment.py,def policy_simple():
data/raw/repos\official\vision\ops,augment.py,def panoptic_deeplab_policy():
data/raw/repos\official\vision\ops,augment.py,def vit():
data/raw/repos\official\vision\ops,augment.py,def deit3_three_augment():
data/raw/repos\official\vision\ops,augment.py,def policy_test():
data/raw/repos\official\vision\ops,augment.py,"def _sample_from_beta(alpha, beta, shape):"
data/raw/repos\official\vision\ops,augment_test.py,def get_dtype_test_cases():
data/raw/repos\official\vision\ops,augment_test.py,"def test_to_from_4d(self, dtype):"
data/raw/repos\official\vision\ops,augment_test.py,"def test_transform(self, dtype):"
data/raw/repos\official\vision\ops,augment_test.py,"def test_translate(self, dtype):"
data/raw/repos\official\vision\ops,augment_test.py,"def test_translate_shapes(self, dtype):"
data/raw/repos\official\vision\ops,augment_test.py,"def test_translate_invalid_translation(self, dtype):"
data/raw/repos\official\vision\ops,augment_test.py,"def test_rotate(self, dtype):"
data/raw/repos\official\vision\ops,augment_test.py,"def test_rotate_shapes(self, dtype):"
data/raw/repos\official\vision\ops,augment_test.py,"def test_random_cutout_video(self, dtype):"
data/raw/repos\official\vision\ops,augment_test.py,"def test_cutout_video_with_fixed_shape(self, dtype):"
data/raw/repos\official\vision\ops,augment_test.py,def test_autoaugment(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_autoaugment_with_bboxes(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_randaug(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_randaug_with_bboxes(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_randaug_build_for_detection(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_all_policy_ops(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_all_policy_ops_with_bboxes(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_autoaugment_video(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_autoaugment_video_with_boxes(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_randaug_video(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_all_policy_ops_video(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_all_policy_ops_video_with_bboxes(self):
data/raw/repos\official\vision\ops,augment_test.py,def _generate_test_policy(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_custom_policy(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_autoaugment_three_augment(self):
data/raw/repos\official\vision\ops,augment_test.py,"def test_invalid_custom_sub_policy(self, sub_policy, value):"
data/raw/repos\official\vision\ops,augment_test.py,def test_invalid_custom_policy_ndim(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_invalid_custom_policy_shape(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_invalid_custom_policy_key(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_random_erase_replaces_some_pixels(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_mixup_and_cutmix_smoothes_labels(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_mixup_changes_image(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_cutmix_changes_image(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_mixup_and_cutmix_smoothes_labels_with_videos(self):
data/raw/repos\official\vision\ops,augment_test.py,"def test_mixup_changes_video(self, num_channels: int):"
data/raw/repos\official\vision\ops,augment_test.py,"def test_cutmix_changes_video(self, num_channels: int):"
data/raw/repos\official\vision\ops,augment_test.py,"def test_distort_with_boxes_output_shape(self, image):"
data/raw/repos\official\vision\ops,augment_test.py,def test_distort_with_empty_bboxes(self):
data/raw/repos\official\vision\ops,augment_test.py,"def test_distort_with_boxes_run_as_tf_function(self, image):"
data/raw/repos\official\vision\ops,augment_test.py,def test_distort_with_boxes_run_as_tf_function_empty_bboxes(self):
data/raw/repos\official\vision\ops,augment_test.py,def test_distort_with_boxes_filter_and_crop(self):
data/raw/repos\official\vision\ops,box_matcher.py,def _match_when_rows_are_empty():
data/raw/repos\official\vision\ops,box_matcher.py,def _match_when_rows_are_non_empty():
data/raw/repos\official\vision\ops,box_matcher.py,"def _set_values_using_indicator(self, x, indicator, val):"
data/raw/repos\official\vision\ops,box_matcher_test.py,def test_box_matcher_unbatched(self):
data/raw/repos\official\vision\ops,box_matcher_test.py,def test_box_matcher_batched(self):
data/raw/repos\official\vision\ops,box_ops.py,def yxyx_to_xywh(boxes):
data/raw/repos\official\vision\ops,box_ops.py,def yxyx_to_cycxhw(boxes):
data/raw/repos\official\vision\ops,box_ops.py,def cycxhw_to_yxyx(boxes):
data/raw/repos\official\vision\ops,box_ops.py,"def jitter_boxes(boxes, noise_scale=0.025):"
data/raw/repos\official\vision\ops,box_ops.py,"def normalize_boxes(boxes, image_shape):"
data/raw/repos\official\vision\ops,box_ops.py,"def denormalize_boxes(boxes, image_shape):"
data/raw/repos\official\vision\ops,box_ops.py,def horizontal_flip_boxes(normalized_boxes):
data/raw/repos\official\vision\ops,box_ops.py,def vertical_flip_boxes(normalized_boxes):
data/raw/repos\official\vision\ops,box_ops.py,"def clip_boxes(boxes, image_shape):"
data/raw/repos\official\vision\ops,box_ops.py,"def compute_outer_boxes(boxes, image_shape, scale=1.0):"
data/raw/repos\official\vision\ops,box_ops.py,"def encode_boxes(boxes, anchors, weights=None):"
data/raw/repos\official\vision\ops,box_ops.py,"def decode_boxes(encoded_boxes, anchors, weights=None):"
data/raw/repos\official\vision\ops,box_ops.py,"def filter_boxes(boxes, scores, image_shape, min_size_threshold):"
data/raw/repos\official\vision\ops,box_ops.py,"def filter_boxes_by_scores(boxes, scores, min_score_threshold):"
data/raw/repos\official\vision\ops,box_ops.py,"def gather_instances(selected_indices, instances, *aux_instances):"
data/raw/repos\official\vision\ops,box_ops.py,"def top_k_boxes(boxes, scores, k):"
data/raw/repos\official\vision\ops,box_ops.py,def get_non_empty_box_indices(boxes):
data/raw/repos\official\vision\ops,box_ops.py,"def bbox_overlap(boxes, gt_boxes):"
data/raw/repos\official\vision\ops,box_ops.py,"def bbox_generalized_overlap(boxes, gt_boxes):"
data/raw/repos\official\vision\ops,box_ops.py,"def bbox_intersection_over_area(boxes, gt_boxes):"
data/raw/repos\official\vision\ops,box_ops.py,"def box_matching(boxes, gt_boxes, gt_classes):"
data/raw/repos\official\vision\ops,iou_similarity.py,def area(box):
data/raw/repos\official\vision\ops,iou_similarity.py,"def intersection(gt_boxes, boxes):"
data/raw/repos\official\vision\ops,iou_similarity.py,"def iou(gt_boxes, boxes):"
data/raw/repos\official\vision\ops,iou_similarity.py,"def __init__(self, mask_val=-1):"
data/raw/repos\official\vision\ops,iou_similarity.py,"def __call__(self, boxes_1, boxes_2, boxes_1_masks=None, boxes_2_masks=None):"
data/raw/repos\official\vision\ops,iou_similarity_test.py,def test_similarity_unbatched(self):
data/raw/repos\official\vision\ops,iou_similarity_test.py,def test_similarity_batched(self):
data/raw/repos\official\vision\ops,mask_ops_test.py,def testPasteInstanceMasks(self):
data/raw/repos\official\vision\ops,mask_ops_test.py,def testPasteInstanceMasksV2(self):
data/raw/repos\official\vision\ops,mask_ops_test.py,def testInstanceMasksOverlap(self):
data/raw/repos\official\vision\ops,nms.py,"def _self_suppression(iou, _, iou_sum):"
data/raw/repos\official\vision\ops,nms.py,"def _cross_suppression(boxes, box_slice, iou_threshold, inner_idx):"
data/raw/repos\official\vision\ops,nms.py,"def _suppression_loop_body(boxes, iou_threshold, output_size, idx):"
data/raw/repos\official\vision\ops,nms.py,"def _loop_cond(unused_boxes, unused_threshold, output_size, idx):"
data/raw/repos\official\vision\ops,preprocess_ops.py,"def clip_or_pad_to_fixed_size(input_tensor, size, constant_values=0):"
data/raw/repos\official\vision\ops,preprocess_ops.py,"def compute_padded_size(desired_size, stride):"
data/raw/repos\official\vision\ops,preprocess_ops.py,"def get_size_with_aspect_ratio(image_size, size, max_size=None):"
data/raw/repos\official\vision\ops,preprocess_ops.py,"def get_size(image_size, size, max_size=None):"
data/raw/repos\official\vision\ops,preprocess_ops.py,"def resize_and_crop_boxes(boxes, image_scale, output_size, offset):"
data/raw/repos\official\vision\ops,preprocess_ops.py,def horizontal_flip_image(image):
data/raw/repos\official\vision\ops,preprocess_ops.py,def horizontal_flip_masks(masks):
data/raw/repos\official\vision\ops,preprocess_ops.py,def vertical_flip_image(image):
data/raw/repos\official\vision\ops,preprocess_ops.py,def vertical_flip_masks(masks):
data/raw/repos\official\vision\ops,preprocess_ops_3d.py,def resize_fn():
data/raw/repos\official\vision\ops,preprocess_ops_3d_test.py,def setUp(self):
data/raw/repos\official\vision\ops,preprocess_ops_3d_test.py,def test_sample_linspace_sequence(self):
data/raw/repos\official\vision\ops,preprocess_ops_3d_test.py,def test_sample_sequence(self):
data/raw/repos\official\vision\ops,preprocess_ops_3d_test.py,def test_sample_segment_sequence(self):
data/raw/repos\official\vision\ops,preprocess_ops_3d_test.py,def test_decode_jpeg(self):
data/raw/repos\official\vision\ops,preprocess_ops_3d_test.py,def test_decode_image(self):
data/raw/repos\official\vision\ops,preprocess_ops_3d_test.py,def test_crop_image(self):
data/raw/repos\official\vision\ops,preprocess_ops_3d_test.py,def test_resize_smallest(self):
data/raw/repos\official\vision\ops,preprocess_ops_3d_test.py,def test_random_crop_resize(self):
data/raw/repos\official\vision\ops,preprocess_ops_3d_test.py,def test_random_flip_left_right(self):
data/raw/repos\official\vision\ops,preprocess_ops_3d_test.py,def test_random_rotation(self):
data/raw/repos\official\vision\ops,preprocess_ops_3d_test.py,def test_normalize_image(self):
data/raw/repos\official\vision\ops,preprocess_ops_test.py,"def _encode_image(image_array, fmt):"
data/raw/repos\official\vision\ops,preprocess_ops_test.py,"def test_resize_and_crop_image_tensor_desired_size(self, aug_scale_max):"
data/raw/repos\official\vision\ops,preprocess_ops_test.py,"def test_center_crop_image(self, input_height, input_width):"
data/raw/repos\official\vision\ops,preprocess_ops_test.py,"def test_center_crop_image_v2(self, input_height, input_width):"
data/raw/repos\official\vision\ops,preprocess_ops_test.py,"def test_random_crop_image(self, input_height, input_width):"
data/raw/repos\official\vision\ops,preprocess_ops_test.py,"def test_random_crop_image_v2(self, input_height, input_width):"
data/raw/repos\official\vision\ops,preprocess_ops_test.py,"def testColorJitter(self, input_height, input_width, color_jitter):"
data/raw/repos\official\vision\ops,preprocess_ops_test.py,"def testSaturation(self, input_height, input_width, saturation):"
data/raw/repos\official\vision\ops,preprocess_ops_test.py,"def test_random_crop(self, input_height, input_width, num_boxes):"
data/raw/repos\official\vision\ops,preprocess_ops_test.py,"def test_resize_image(self, input_shape, size, max_size, expected_shape):"
data/raw/repos\official\vision\ops,preprocess_ops_test.py,def test_resize_and_crop_masks(self):
data/raw/repos\official\vision\ops,preprocess_ops_test.py,"def test_normalize_image(self, prenormalize, dtype):"
data/raw/repos\official\vision\ops,preprocess_ops_test.py,"def test_random_jpeg_quality(self, min_quality, max_quality, prob_to_apply):"
data/raw/repos\official\vision\ops,preprocess_ops_test.py,"def test_resize_and_crop_image_and_masks(self, scale):"
data/raw/repos\official\vision\ops,sampling_ops.py,def combined_static_and_dynamic_shape(tensor):
data/raw/repos\official\vision\ops,sampling_ops.py,"def matmul_gather_on_zeroth_axis(params, indices, scope=None):"
data/raw/repos\official\vision\ops,sampling_ops.py,"def __init__(self, positive_fraction=0.5, is_static=False):"
data/raw/repos\official\vision\ops,sampling_ops.py,"def subsample_indicator(indicator, num_samples):"
data/raw/repos\official\vision\ops,sampling_ops.py,"def _get_num_pos_neg_samples(self, sorted_indices_tensor, sample_size):"
data/raw/repos\official\vision\ops,sampling_ops.py,"def _static_subsample(self, indicator, batch_size, labels):"
data/raw/repos\official\vision\ops,sampling_ops.py,"def subsample(self, indicator, batch_size, labels, scope=None):"
data/raw/repos\official\vision\ops,target_gather.py,"def __call__(self, labels, match_indices, mask=None, mask_val=0.0):"
data/raw/repos\official\vision\ops,target_gather.py,"def _gather_unbatched(self, labels, match_indices, mask, mask_val):"
data/raw/repos\official\vision\ops,target_gather.py,def _assign_when_rows_empty():
data/raw/repos\official\vision\ops,target_gather.py,def _assign_when_rows_not_empty():
data/raw/repos\official\vision\ops,target_gather.py,"def _gather_batched(self, labels, match_indices, mask, mask_val):"
data/raw/repos\official\vision\ops,target_gather_test.py,def test_target_gather_batched(self):
data/raw/repos\official\vision\ops,target_gather_test.py,def test_target_gather_unbatched(self):
data/raw/repos\official\vision\serving,detection.py,def _padded_size(self):
data/raw/repos\official\vision\serving,detection.py,def _build_model(self):
data/raw/repos\official\vision\serving,detection.py,def _build_anchor_boxes(self):
data/raw/repos\official\vision\serving,detection.py,"def _build_inputs(self, image):"
data/raw/repos\official\vision\serving,detection.py,"def _normalize_coordinates(self, detections_dict, dict_keys, image_info):"
data/raw/repos\official\vision\serving,detection.py,"def _flatten_output(self, feature_map, feature_size=4):"
data/raw/repos\official\vision\serving,detection.py,"def serve(self, images: tf.Tensor):"
data/raw/repos\official\vision\serving,detection_test.py,"def _export_from_module(self, module, input_type, save_directory):"
data/raw/repos\official\vision\serving,detection_test.py,"def _get_dummy_input(self, input_type, batch_size, image_size):"
data/raw/repos\official\vision\serving,detection_test.py,"def test_build_model_pass_with_none_batch_size(self, experiment_type):"
data/raw/repos\official\vision\serving,detection_test.py,def test_export_retinanet_with_intermediate_features(self):
data/raw/repos\official\vision\serving,export_base.py,"def _build_model(self, **kwargs):"
data/raw/repos\official\vision\serving,export_base.py,"def inference_from_image_bytes(self, inputs: tf.Tensor):"
data/raw/repos\official\vision\serving,export_base.py,"def get_inference_signatures(self, function_keys: Dict[Text, Text]):"
data/raw/repos\official\vision\serving,export_base_v2.py,"def serve(self, inputs):"
data/raw/repos\official\vision\serving,export_base_v2.py,"def get_inference_signatures(self, function_keys: Dict[Text, Text]):"
data/raw/repos\official\vision\serving,export_base_v2_test.py,def __init__(self):
data/raw/repos\official\vision\serving,export_base_v2_test.py,"def call(self, inputs):"
data/raw/repos\official\vision\serving,export_base_v2_test.py,def test_preprocessor(self):
data/raw/repos\official\vision\serving,export_base_v2_test.py,def test_postprocessor(self):
data/raw/repos\official\vision\serving,export_module_factory.py,def preprocess_fn(inputs):
data/raw/repos\official\vision\serving,export_module_factory.py,def preprocess_image_fn(inputs):
data/raw/repos\official\vision\serving,export_module_factory.py,def postprocess_fn(logits):
data/raw/repos\official\vision\serving,export_module_factory_test.py,"def _get_classification_module(self, input_type, input_image_size):"
data/raw/repos\official\vision\serving,export_module_factory_test.py,"def _get_dummy_input(self, input_type):"
data/raw/repos\official\vision\serving,export_module_factory_test.py,"def test_export(self, input_type='image_tensor'):"
data/raw/repos\official\vision\serving,export_module_factory_test.py,def preprocess_image_fn(inputs):
data/raw/repos\official\vision\serving,export_saved_model.py,def main(_):
data/raw/repos\official\vision\serving,export_saved_model_lib_test.py,def setUp(self):
data/raw/repos\official\vision\serving,export_saved_model_lib_test.py,"def _export_model_with_log_model_flops_and_params(self, params):"
data/raw/repos\official\vision\serving,export_saved_model_lib_test.py,def assertModelAnalysisFilesExist(self):
data/raw/repos\official\vision\serving,export_saved_model_lib_test.py,def test_retinanet_task(self):
data/raw/repos\official\vision\serving,export_saved_model_lib_test.py,def test_maskrcnn_task(self):
data/raw/repos\official\vision\serving,export_tfhub.py,def main(_):
data/raw/repos\official\vision\serving,image_classification.py,def _build_model(self):
data/raw/repos\official\vision\serving,image_classification.py,"def _crop_and_resize(self, image):"
data/raw/repos\official\vision\serving,image_classification.py,"def _build_inputs(self, image):"
data/raw/repos\official\vision\serving,image_classification.py,"def serve(self, images):"
data/raw/repos\official\vision\serving,image_classification_test.py,"def _get_classification_module(self, input_type, batch_size=1):"
data/raw/repos\official\vision\serving,image_classification_test.py,"def _export_from_module(self, module, input_type, save_directory):"
data/raw/repos\official\vision\serving,image_classification_test.py,"def _get_dummy_input(self, input_type, image_size=224):"
data/raw/repos\official\vision\serving,image_classification_test.py,"def test_export(self, input_type='image_tensor'):"
data/raw/repos\official\vision\serving,image_classification_test.py,"def test_multi_size_images_inference(self, input_type='image_tensor'):"
data/raw/repos\official\vision\serving,semantic_segmentation.py,def _build_model(self):
data/raw/repos\official\vision\serving,semantic_segmentation.py,"def _build_inputs(self, image):"
data/raw/repos\official\vision\serving,semantic_segmentation.py,"def serve(self, images):"
data/raw/repos\official\vision\serving,semantic_segmentation_test.py,"def _export_from_module(self, module, input_type, save_directory):"
data/raw/repos\official\vision\serving,semantic_segmentation_test.py,"def _get_dummy_input(self, input_type, input_image_size, num_channels):"
data/raw/repos\official\vision\serving,semantic_segmentation_test.py,"def test_export_with_extra_input_channels(self, input_type):"
data/raw/repos\official\vision\serving,semantic_segmentation_test.py,def test_export_invalid_batch_size(self):
data/raw/repos\official\vision\serving,video_classification.py,def _build_model(self):
data/raw/repos\official\vision\serving,video_classification.py,"def _decode_tf_example(self, encoded_inputs: tf.Tensor):"
data/raw/repos\official\vision\serving,video_classification.py,"def _preprocess_image(self, image):"
data/raw/repos\official\vision\serving,video_classification.py,"def _preprocess_audio(self, audio):"
data/raw/repos\official\vision\serving,video_classification.py,"def inference_from_image_bytes(self, inputs: tf.Tensor):"
data/raw/repos\official\vision\serving,video_classification.py,"def serve(self, input_frames: tf.Tensor, input_audio: tf.Tensor):"
data/raw/repos\official\vision\serving,video_classification.py,"def get_inference_signatures(self, function_keys: Dict[Text, Text]):"
data/raw/repos\official\vision\serving,video_classification_test.py,def _get_classification_module(self):
data/raw/repos\official\vision\serving,video_classification_test.py,"def _export_from_module(self, module, input_type, save_directory):"
data/raw/repos\official\vision\serving,video_classification_test.py,"def _get_dummy_input(self, input_type, module=None):"
data/raw/repos\official\vision\serving,video_classification_test.py,"def test_export(self, input_type):"
data/raw/repos\official\vision\tasks,image_classification.py,def build_model(self):
data/raw/repos\official\vision\tasks,image_classification.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\vision\tasks,image_classification.py,"def sample_fn(repeated_augment, dataset):"
data/raw/repos\official\vision\tasks,image_classification.py,"def inference_step(self, inputs: tf.Tensor, model: tf_keras.Model):"
data/raw/repos\official\vision\tasks,maskrcnn.py,def build_model(self):
data/raw/repos\official\vision\tasks,maskrcnn.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\vision\tasks,maskrcnn.py,def _build_coco_metrics(self):
data/raw/repos\official\vision\tasks,maskrcnn.py,"def build_metrics(self, training: bool = True):"
data/raw/repos\official\vision\tasks,maskrcnn.py,"def _update_metrics(self, labels, outputs, logs):"
data/raw/repos\official\vision\tasks,retinanet.py,def build_model(self):
data/raw/repos\official\vision\tasks,retinanet.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\vision\tasks,retinanet.py,"def build_metrics(self, training: bool = True):"
data/raw/repos\official\vision\tasks,retinanet.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\vision\tasks,retinanet.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\vision\tasks,semantic_segmentation.py,def build_model(self):
data/raw/repos\official\vision\tasks,semantic_segmentation.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\vision\tasks,semantic_segmentation.py,"def process_metrics(self, metrics, labels, model_outputs, **kwargs):"
data/raw/repos\official\vision\tasks,semantic_segmentation.py,"def build_metrics(self, training: bool = True):"
data/raw/repos\official\vision\tasks,semantic_segmentation.py,"def inference_step(self, inputs: tf.Tensor, model: tf_keras.Model):"
data/raw/repos\official\vision\tasks,semantic_segmentation.py,"def aggregate_logs(self, state=None, step_outputs=None):"
data/raw/repos\official\vision\tasks,semantic_segmentation.py,"def reduce_aggregated_logs(self, aggregated_logs, global_step=None):"
data/raw/repos\official\vision\tasks,video_classification.py,def _get_num_classes(self):
data/raw/repos\official\vision\tasks,video_classification.py,def _get_feature_shape(self):
data/raw/repos\official\vision\tasks,video_classification.py,def _get_num_test_views(self):
data/raw/repos\official\vision\tasks,video_classification.py,def _is_multilabel(self):
data/raw/repos\official\vision\tasks,video_classification.py,def build_model(self):
data/raw/repos\official\vision\tasks,video_classification.py,"def initialize(self, model: tf_keras.Model):"
data/raw/repos\official\vision\tasks,video_classification.py,"def _get_dataset_fn(self, params):"
data/raw/repos\official\vision\tasks,video_classification.py,"def _get_decoder_fn(self, params):"
data/raw/repos\official\vision\tasks,video_classification.py,"def mixup_and_cutmix(features, labels):"
data/raw/repos\official\vision\tasks,video_classification.py,"def build_metrics(self, training: bool = True):"
data/raw/repos\official\vision\tasks,video_classification.py,"def inference_step(self, features: tf.Tensor, model: tf_keras.Model):"
data/raw/repos\official\vision\utils,ops_test.py,def test_merge_boxes_with_multiple_labels(self):
data/raw/repos\official\vision\utils,ops_test.py,def test_merge_boxes_with_multiple_labels_corner_case(self):
data/raw/repos\official\vision\utils,ops_test.py,def test_merge_boxes_with_empty_inputs(self):
data/raw/repos\official\vision\utils\object_detection,argmax_matcher.py,"def _match(self, similarity_matrix):"
data/raw/repos\official\vision\utils\object_detection,argmax_matcher.py,def _match_when_rows_are_empty():
data/raw/repos\official\vision\utils\object_detection,argmax_matcher.py,def _match_when_rows_are_non_empty():
data/raw/repos\official\vision\utils\object_detection,argmax_matcher.py,"def _set_values_using_indicator(self, x, indicator, val):"
data/raw/repos\official\vision\utils\object_detection,balanced_positive_negative_sampler.py,"def __init__(self, positive_fraction=0.5, is_static=False):"
data/raw/repos\official\vision\utils\object_detection,balanced_positive_negative_sampler.py,"def _get_num_pos_neg_samples(self, sorted_indices_tensor, sample_size):"
data/raw/repos\official\vision\utils\object_detection,balanced_positive_negative_sampler.py,"def _static_subsample(self, indicator, batch_size, labels):"
data/raw/repos\official\vision\utils\object_detection,balanced_positive_negative_sampler.py,"def subsample(self, indicator, batch_size, labels, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_coder.py,def code_size(self):
data/raw/repos\official\vision\utils\object_detection,box_coder.py,"def encode(self, boxes, anchors):"
data/raw/repos\official\vision\utils\object_detection,box_coder.py,"def decode(self, rel_codes, anchors):"
data/raw/repos\official\vision\utils\object_detection,box_coder.py,"def _encode(self, boxes, anchors):"
data/raw/repos\official\vision\utils\object_detection,box_coder.py,"def _decode(self, rel_codes, anchors):"
data/raw/repos\official\vision\utils\object_detection,box_coder.py,"def batch_decode(encoded_boxes, box_coder, anchors):"
data/raw/repos\official\vision\utils\object_detection,box_list.py,"def __init__(self, boxes):"
data/raw/repos\official\vision\utils\object_detection,box_list.py,def num_boxes(self):
data/raw/repos\official\vision\utils\object_detection,box_list.py,def num_boxes_static(self):
data/raw/repos\official\vision\utils\object_detection,box_list.py,def get_all_fields(self):
data/raw/repos\official\vision\utils\object_detection,box_list.py,def get_extra_fields(self):
data/raw/repos\official\vision\utils\object_detection,box_list.py,"def add_field(self, field, field_data):"
data/raw/repos\official\vision\utils\object_detection,box_list.py,"def has_field(self, field):"
data/raw/repos\official\vision\utils\object_detection,box_list.py,def get(self):
data/raw/repos\official\vision\utils\object_detection,box_list.py,"def set(self, boxes):"
data/raw/repos\official\vision\utils\object_detection,box_list.py,"def get_field(self, field):"
data/raw/repos\official\vision\utils\object_detection,box_list.py,"def set_field(self, field, value):"
data/raw/repos\official\vision\utils\object_detection,box_list.py,"def get_center_coordinates_and_sizes(self, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list.py,"def transpose_coordinates(self, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list.py,"def as_tensor_dict(self, fields=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def area(boxlist, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def height_width(boxlist, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def scale(boxlist, y_scale, x_scale, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def clip_to_window(boxlist, window, filter_nonoverlapping=True, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def prune_outside_window(boxlist, window, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def prune_completely_outside_window(boxlist, window, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def intersection(boxlist1, boxlist2, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def matched_intersection(boxlist1, boxlist2, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def iou(boxlist1, boxlist2, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def matched_iou(boxlist1, boxlist2, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def ioa(boxlist1, boxlist2, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def prune_small_boxes(boxlist, min_side, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def change_coordinate_frame(boxlist, window, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def sq_dist(boxlist1, boxlist2, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def gather(boxlist, indices, fields=None, scope=None, use_static_shapes=False):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def concatenate(boxlists, fields=None, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def sort_by_field(boxlist, field, order=SortOrder.descend, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def visualize_boxes_in_image(image, boxlist, normalized=False, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def filter_field_value_equals(boxlist, field, value, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def filter_greater_than(boxlist, thresh, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def non_max_suppression(boxlist, thresh, max_output_size, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def _copy_extra_fields(boxlist_to_copy_to, boxlist_to_copy_from):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def box_voting(selected_boxes, pool_boxes, iou_thresh=0.5):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,"def get_minimal_coverage_box(boxlist, default_box=None, scope=None):"
data/raw/repos\official\vision\utils\object_detection,box_list_ops.py,def coverage_box(bboxes):
data/raw/repos\official\vision\utils\object_detection,faster_rcnn_box_coder.py,"def __init__(self, scale_factors=None):"
data/raw/repos\official\vision\utils\object_detection,faster_rcnn_box_coder.py,def code_size(self):
data/raw/repos\official\vision\utils\object_detection,faster_rcnn_box_coder.py,"def _encode(self, boxes, anchors):"
data/raw/repos\official\vision\utils\object_detection,faster_rcnn_box_coder.py,"def _decode(self, rel_codes, anchors):"
data/raw/repos\official\vision\utils\object_detection,matcher.py,"def __init__(self, match_results):"
data/raw/repos\official\vision\utils\object_detection,matcher.py,def match_results(self):
data/raw/repos\official\vision\utils\object_detection,matcher.py,def matched_column_indices(self):
data/raw/repos\official\vision\utils\object_detection,matcher.py,def matched_column_indicator(self):
data/raw/repos\official\vision\utils\object_detection,matcher.py,def num_matched_columns(self):
data/raw/repos\official\vision\utils\object_detection,matcher.py,def unmatched_column_indices(self):
data/raw/repos\official\vision\utils\object_detection,matcher.py,def unmatched_column_indicator(self):
data/raw/repos\official\vision\utils\object_detection,matcher.py,def num_unmatched_columns(self):
data/raw/repos\official\vision\utils\object_detection,matcher.py,def ignored_column_indices(self):
data/raw/repos\official\vision\utils\object_detection,matcher.py,def ignored_column_indicator(self):
data/raw/repos\official\vision\utils\object_detection,matcher.py,def num_ignored_columns(self):
data/raw/repos\official\vision\utils\object_detection,matcher.py,def unmatched_or_ignored_column_indices(self):
data/raw/repos\official\vision\utils\object_detection,matcher.py,def matched_row_indices(self):
data/raw/repos\official\vision\utils\object_detection,matcher.py,"def _reshape_and_cast(self, t):"
data/raw/repos\official\vision\utils\object_detection,matcher.py,"def gather_based_on_match(self, input_tensor, unmatched_value, ignored_value):"
data/raw/repos\official\vision\utils\object_detection,matcher.py,"def match(self, similarity_matrix, scope=None, **params):"
data/raw/repos\official\vision\utils\object_detection,matcher.py,"def _match(self, similarity_matrix, **params):"
data/raw/repos\official\vision\utils\object_detection,minibatch_sampler.py,def __init__(self):
data/raw/repos\official\vision\utils\object_detection,minibatch_sampler.py,"def subsample(self, indicator, batch_size, **params):"
data/raw/repos\official\vision\utils\object_detection,minibatch_sampler.py,"def subsample_indicator(indicator, num_samples):"
data/raw/repos\official\vision\utils\object_detection,ops.py,"def matmul_gather_on_zeroth_axis(params, indices, scope=None):"
data/raw/repos\official\vision\utils\object_detection,ops.py,def map_box_encodings(i):
data/raw/repos\official\vision\utils\object_detection,preprocessor.py,def _flip_boxes_left_right(boxes):
data/raw/repos\official\vision\utils\object_detection,preprocessor.py,def _flip_masks_left_right(masks):
data/raw/repos\official\vision\utils\object_detection,preprocessor.py,"def keypoint_change_coordinate_frame(keypoints, window, scope=None):"
data/raw/repos\official\vision\utils\object_detection,preprocessor.py,"def keypoint_prune_outside_window(keypoints, window, scope=None):"
data/raw/repos\official\vision\utils\object_detection,preprocessor.py,def _flip_image(image):
data/raw/repos\official\vision\utils\object_detection,preprocessor.py,"def _compute_new_static_size(image, min_dimension, max_dimension):"
data/raw/repos\official\vision\utils\object_detection,preprocessor.py,"def _compute_new_dynamic_size(image, min_dimension, max_dimension):"
data/raw/repos\official\vision\utils\object_detection,preprocessor.py,"def _copy_extra_fields(boxlist_to_copy_to, boxlist_to_copy_from):"
data/raw/repos\official\vision\utils\object_detection,preprocessor.py,"def box_list_scale(boxlist, y_scale, x_scale, scope=None):"
data/raw/repos\official\vision\utils\object_detection,preprocessor.py,"def keypoint_scale(keypoints, y_scale, x_scale, scope=None):"
data/raw/repos\official\vision\utils\object_detection,preprocessor.py,"def scale_boxes_to_pixel_coordinates(image, boxes, keypoints=None):"
data/raw/repos\official\vision\utils\object_detection,region_similarity_calculator.py,"def area(boxlist, scope=None):"
data/raw/repos\official\vision\utils\object_detection,region_similarity_calculator.py,"def intersection(boxlist1, boxlist2, scope=None):"
data/raw/repos\official\vision\utils\object_detection,region_similarity_calculator.py,"def iou(boxlist1, boxlist2, scope=None):"
data/raw/repos\official\vision\utils\object_detection,region_similarity_calculator.py,"def compare(self, boxlist1, boxlist2, scope=None):"
data/raw/repos\official\vision\utils\object_detection,region_similarity_calculator.py,"def _compare(self, boxlist1, boxlist2):"
data/raw/repos\official\vision\utils\object_detection,region_similarity_calculator.py,"def _compare(self, boxlist1, boxlist2):"
data/raw/repos\official\vision\utils\object_detection,shape_utils.py,"def assert_shape_equal(shape_a, shape_b):"
data/raw/repos\official\vision\utils\object_detection,shape_utils.py,def combined_static_and_dynamic_shape(tensor):
data/raw/repos\official\vision\utils\object_detection,shape_utils.py,"def pad_or_clip_nd(tensor, output_shape):"
data/raw/repos\official\vision\utils\object_detection,target_assigner.py,def box_coder(self):
data/raw/repos\official\vision\utils\object_detection,target_assigner.py,"def _reset_target_shape(self, target, num_anchors):"
data/raw/repos\official\vision\utils\object_detection,target_assigner.py,"def _create_regression_targets(self, anchors, groundtruth_boxes, match):"
data/raw/repos\official\vision\utils\object_detection,target_assigner.py,def _default_regression_target(self):
data/raw/repos\official\vision\utils\object_detection,target_assigner.py,"def _create_classification_targets(self, groundtruth_labels, match):"
data/raw/repos\official\vision\utils\object_detection,target_assigner.py,"def _create_regression_weights(self, match, groundtruth_weights):"
data/raw/repos\official\vision\utils\object_detection,target_assigner.py,"def _create_classification_weights(self, match, groundtruth_weights):"
data/raw/repos\official\vision\utils\object_detection,target_assigner.py,def get_box_coder(self):
data/raw/repos\official\vision\utils\object_detection,target_assigner.py,"def _create_regression_targets(self, anchors, groundtruth_boxes, match):"
data/raw/repos\official\vision\utils\object_detection,visualization_utils.py,"def save_image_array_as_png(image, output_path):"
data/raw/repos\official\vision\utils\object_detection,visualization_utils.py,def encode_image_array_as_png_str(image):
data/raw/repos\official\vision\utils\object_detection,visualization_utils.py,"def _visualize_boxes(image, boxes, classes, scores, category_index, **kwargs):"
data/raw/repos\official\vision\utils\object_detection,visualization_utils.py,"def _resize_original_image(image, image_shape):"
data/raw/repos\official\vision\utils\object_detection,visualization_utils.py,def draw_boxes(image_and_detections):
data/raw/repos\official\vision\utils\object_detection,visualization_utils.py,"def draw_mask_on_image_array(image, mask, color='red', alpha=0.4):"
data/raw/repos\official\vision\utils\object_detection,visualization_utils.py,"def add_cdf_image_summary(values, name):"
data/raw/repos\official\vision\utils\object_detection,visualization_utils.py,def cdf_plot(values):
data/raw/repos\official\vision\utils\object_detection,visualization_utils.py,"def add_hist_image_summary(values, bins, name):"
data/raw/repos\official\vision\utils\object_detection,visualization_utils.py,"def hist_plot(values, bins):"
data/raw/repos\official\vision\utils\object_detection,visualization_utils.py,def draw_segments(image_and_segments):
data/raw/repos\official\vision\utils\object_detection,visualization_utils.py,"def _visualize_masks(image, mask, num_classes, alpha=0.4):"
data/raw/repos\orbit,controller.py,def _log(message: str):
data/raw/repos\orbit,controller.py,"def _format_output(output, indent=4):"
data/raw/repos\orbit,controller.py,"def train(self, steps: int, checkpoint_at_completion: bool = True):"
data/raw/repos\orbit,controller.py,"def restore_checkpoint(self, checkpoint_path: Optional[str] = None):"
data/raw/repos\orbit,controller.py,def save_checkpoint(self):
data/raw/repos\orbit,controller.py,def steps_per_loop(self):
data/raw/repos\orbit,controller.py,"def _train_n_steps(self, num_steps: int):"
data/raw/repos\orbit,controller.py,"def _maybe_save_checkpoint(self, check_interval: bool = True):"
data/raw/repos\orbit,controller.py,"def _require(self, attribute, for_method):"
data/raw/repos\orbit,controller.py,def _sync_on_async_checkpointing(self):
data/raw/repos\orbit,controller.py,"def __init__(self, step):"
data/raw/repos\orbit,controller.py,def start(self):
data/raw/repos\orbit,controller.py,"def steps_per_second(self, restart=True):"
data/raw/repos\orbit,controller_test.py,def create_model():
data/raw/repos\orbit,controller_test.py,"def summaries_with_matching_keyword(keyword, summary_dir):"
data/raw/repos\orbit,controller_test.py,def dataset_fn(ctx):
data/raw/repos\orbit,controller_test.py,"def __init__(self, return_numpy=False):"
data/raw/repos\orbit,controller_test.py,"def train_step(self, iterator):"
data/raw/repos\orbit,controller_test.py,def _replicated_step(inputs):
data/raw/repos\orbit,controller_test.py,def train_loop_end(self):
data/raw/repos\orbit,controller_test.py,def build_eval_dataset(self):
data/raw/repos\orbit,controller_test.py,def eval_begin(self):
data/raw/repos\orbit,controller_test.py,"def eval_step(self, iterator):"
data/raw/repos\orbit,controller_test.py,def _replicated_step(inputs):
data/raw/repos\orbit,controller_test.py,def eval_end(self):
data/raw/repos\orbit,controller_test.py,def __init__(self):
data/raw/repos\orbit,controller_test.py,"def eval_reduce(self, state, output):"
data/raw/repos\orbit,controller_test.py,def eval_begin(self):
data/raw/repos\orbit,controller_test.py,"def eval_step(self, iterator):"
data/raw/repos\orbit,controller_test.py,def _replicated_step(inputs):
data/raw/repos\orbit,controller_test.py,"def eval_end(self, outputs):"
data/raw/repos\orbit,controller_test.py,"def evaluate(self, num_steps):"
data/raw/repos\orbit,controller_test.py,def __init__(self):
data/raw/repos\orbit,controller_test.py,"def eval_step(self, iterator):"
data/raw/repos\orbit,controller_test.py,"def _replicated_step(loss, accuracy, inputs):"
data/raw/repos\orbit,controller_test.py,def eval_end(self):
data/raw/repos\orbit,controller_test.py,def __init__(self):
data/raw/repos\orbit,controller_test.py,def build_train_dataset(self):
data/raw/repos\orbit,controller_test.py,"def train_step(self, iterator):"
data/raw/repos\orbit,controller_test.py,def _replicated_step(inputs):
data/raw/repos\orbit,controller_test.py,def setUp(self):
data/raw/repos\orbit,controller_test.py,def test_no_checkpoint(self):
data/raw/repos\orbit,controller_test.py,def test_no_checkpoint_and_summaries(self):
data/raw/repos\orbit,controller_test.py,"def test_has_checkpoint_no_summaries(self, enable_async_checkpoint_saving):"
data/raw/repos\orbit,controller_test.py,"def test_train_only(self, enable_async_checkpoint_saving):"
data/raw/repos\orbit,controller_test.py,def test_evaluate_only(self):
data/raw/repos\orbit,controller_test.py,def timeout_fn():
data/raw/repos\orbit,controller_test.py,def test_no_eval_steps(self):
data/raw/repos\orbit,controller_test.py,"def test_already_trained_model(self, enable_async_checkpoint_saving):"
data/raw/repos\orbit,controller_test.py,def test_summaries_inside_train_fn(self):
data/raw/repos\orbit,controller_test.py,def test_train_and_evaluate_with_same_summary_dir(self):
data/raw/repos\orbit,controller_test.py,def test_early_stop_on_eval_loss(self):
data/raw/repos\orbit,controller_test.py,def test_evaluate_with_loss_output(self):
data/raw/repos\orbit,controller_test.py,def test_evaluate_with_no_output(self):
data/raw/repos\orbit,controller_test.py,def test_train_and_evaluate_reset_datasets(self):
data/raw/repos\orbit,controller_test.py,"def test_eval_and_checkpoint_interval(self, enable_async_checkpoint_saving):"
data/raw/repos\orbit,controller_test.py,"def test_evaluate_with_nested_summaries(self, inject_summary_manager):"
data/raw/repos\orbit,controller_test.py,def test_actions(self):
data/raw/repos\orbit,controller_test.py,def __init__(self):
data/raw/repos\orbit,controller_test.py,"def __call__(self, output):"
data/raw/repos\orbit,controller_test.py,def test_step_per_loop_callable(self):
data/raw/repos\orbit,controller_test.py,def steps_per_loop_fn(global_step):
data/raw/repos\orbit,standard_runner.py,def create_train_loop_fn(self):
data/raw/repos\orbit,standard_runner.py,def train_loop_begin(self):
data/raw/repos\orbit,standard_runner.py,"def train_step(self, iterator):"
data/raw/repos\orbit,standard_runner.py,def train_dataset(self):
data/raw/repos\orbit,standard_runner.py,"def train_dataset(self, train_dataset):"
data/raw/repos\orbit,standard_runner.py,"def create_eval_loop_fn(self, has_state: bool):"
data/raw/repos\orbit,standard_runner.py,def eval_dataset(self):
data/raw/repos\orbit,standard_runner.py,"def eval_dataset(self, eval_dataset):"
data/raw/repos\orbit,standard_runner_test.py,def dataset_fn(input_context=None):
data/raw/repos\orbit,standard_runner_test.py,def dummy_data(_):
data/raw/repos\orbit,standard_runner_test.py,"def __init__(self, options=None):"
data/raw/repos\orbit,standard_runner_test.py,def train_loop_begin(self):
data/raw/repos\orbit,standard_runner_test.py,"def train_step(self, iterator):"
data/raw/repos\orbit,standard_runner_test.py,def replica_step(_):
data/raw/repos\orbit,standard_runner_test.py,def train_loop_end(self):
data/raw/repos\orbit,standard_runner_test.py,"def __init__(self, options=None):"
data/raw/repos\orbit,standard_runner_test.py,def eval_begin(self):
data/raw/repos\orbit,standard_runner_test.py,"def eval_step(self, iterator):"
data/raw/repos\orbit,standard_runner_test.py,def replica_step(_):
data/raw/repos\orbit,standard_runner_test.py,def eval_end(self):
data/raw/repos\orbit,standard_runner_test.py,"def __init__(self, options=None):"
data/raw/repos\orbit,standard_runner_test.py,def eval_begin(self):
data/raw/repos\orbit,standard_runner_test.py,"def eval_reduce(self, state, step_outputs):"
data/raw/repos\orbit,standard_runner_test.py,"def eval_step(self, iterator):"
data/raw/repos\orbit,standard_runner_test.py,def replica_step(x):
data/raw/repos\orbit,standard_runner_test.py,"def eval_end(self, outputs):"
data/raw/repos\orbit,standard_runner_test.py,def test_default_trainer(self):
data/raw/repos\orbit,standard_runner_test.py,def test_trainer_with_tpu_summary_optimization(self):
data/raw/repos\orbit,standard_runner_test.py,"def test_default_evaluator(self, use_tf_while_loop):"
data/raw/repos\orbit,standard_runner_test.py,"def test_evaluator_with_outputs_aggregation(self, use_tf_while_loop):"
data/raw/repos\orbit\actions,conditional_action_test.py,def test_conditional_action(self):
data/raw/repos\orbit\actions,conditional_action_test.py,def raise_assertion(arg):
data/raw/repos\orbit\actions,export_saved_model.py,def _id_key(filename):
data/raw/repos\orbit\actions,export_saved_model.py,def _find_managed_files(base_name):
data/raw/repos\orbit\actions,export_saved_model.py,"def __init__(self, base_name: str):"
data/raw/repos\orbit\actions,export_saved_model.py,def __call__(self):
data/raw/repos\orbit\actions,export_saved_model.py,def managed_files(self):
data/raw/repos\orbit\actions,export_saved_model.py,def clean_up(self):
data/raw/repos\orbit\actions,export_saved_model.py,"def __call__(self, _):"
data/raw/repos\orbit\actions,export_saved_model_test.py,def _id_key(name):
data/raw/repos\orbit\actions,export_saved_model_test.py,def _id_sorted_file_base_names(dir_path):
data/raw/repos\orbit\actions,export_saved_model_test.py,def __init__(self):
data/raw/repos\orbit\actions,export_saved_model_test.py,def __call__(self):
data/raw/repos\orbit\actions,export_saved_model_test.py,def test_export_file_manager_default_ids(self):
data/raw/repos\orbit\actions,export_saved_model_test.py,def test_export_file_manager_custom_ids(self):
data/raw/repos\orbit\actions,export_saved_model_test.py,def next_id():
data/raw/repos\orbit\actions,export_saved_model_test.py,def test_export_file_manager_with_suffix(self):
data/raw/repos\orbit\actions,export_saved_model_test.py,def next_id():
data/raw/repos\orbit\actions,export_saved_model_test.py,def test_export_file_manager_with_suffix_second_cleanup_succeeds(self):
data/raw/repos\orbit\actions,export_saved_model_test.py,def next_id():
data/raw/repos\orbit\actions,export_saved_model_test.py,def test_export_file_manager_managed_files(self):
data/raw/repos\orbit\actions,export_saved_model_test.py,def test_export_file_manager_managed_files_double_slash(self):
data/raw/repos\orbit\actions,export_saved_model_test.py,def test_export_saved_model(self):
data/raw/repos\orbit\actions,export_saved_model_test.py,def test_safe_normpath_gs(self):
data/raw/repos\orbit\actions,new_best_metric.py,def read(self):
data/raw/repos\orbit\actions,new_best_metric.py,"def write(self, value):"
data/raw/repos\orbit\actions,new_best_metric_test.py,def test_new_best_metric_higher_is_better(self):
data/raw/repos\orbit\actions,new_best_metric_test.py,def test_new_best_metric_lower_is_better(self):
data/raw/repos\orbit\actions,new_best_metric_test.py,def test_new_best_metric_persistence(self):
data/raw/repos\orbit\actions,new_best_metric_test.py,def test_json_persisted_value(self):
data/raw/repos\orbit\actions,new_best_metric_test.py,def test_json_persisted_value_create_dirs(self):
data/raw/repos\orbit\examples\single_task,single_task_evaluator.py,def eval_begin(self):
data/raw/repos\orbit\examples\single_task,single_task_evaluator.py,"def eval_step(self, iterator):"
data/raw/repos\orbit\examples\single_task,single_task_evaluator.py,def step_fn(inputs):
data/raw/repos\orbit\examples\single_task,single_task_evaluator.py,def eval_end(self):
data/raw/repos\orbit\examples\single_task,single_task_evaluator_test.py,def test_single_task_evaluation(self):
data/raw/repos\orbit\examples\single_task,single_task_trainer.py,def train_loop_begin(self):
data/raw/repos\orbit\examples\single_task,single_task_trainer.py,"def train_step(self, iterator):"
data/raw/repos\orbit\examples\single_task,single_task_trainer.py,def train_fn(inputs):
data/raw/repos\orbit\examples\single_task,single_task_trainer.py,def train_loop_end(self):
data/raw/repos\orbit\examples\single_task,single_task_trainer_test.py,def test_single_task_training(self):
data/raw/repos\orbit\utils,common.py,"def make_distributed_dataset(strategy, dataset_or_fn, *args, **kwargs):"
data/raw/repos\orbit\utils,common.py,def dataset_fn(input_context):
data/raw/repos\orbit\utils,common.py,def get_value(x):
data/raw/repos\orbit\utils,common_test.py,def test_create_global_step(self):
data/raw/repos\orbit\utils,epoch_helper.py,"def __init__(self, epoch_steps: int, global_step: tf.Variable):"
data/raw/repos\orbit\utils,epoch_helper.py,def epoch_begin(self):
data/raw/repos\orbit\utils,epoch_helper.py,def epoch_end(self):
data/raw/repos\orbit\utils,epoch_helper.py,def batch_index(self):
data/raw/repos\orbit\utils,epoch_helper.py,def current_epoch(self):
data/raw/repos\orbit\utils,loop_fns.py,def create_loop_fn(step_fn):
data/raw/repos\orbit\utils,loop_fns.py,"def loop_fn(iterator, num_steps, state=None, reduce_fn=None):"
data/raw/repos\orbit\utils,loop_fns.py,def create_tf_while_loop_fn(step_fn):
data/raw/repos\orbit\utils,loop_fns.py,"def loop_fn(iterator, num_steps):"
data/raw/repos\orbit\utils,loop_fns.py,def create_tf_while_loop_fn_with_state(step_fn):
data/raw/repos\orbit\utils,loop_fns.py,"def loop_fn_with_state(iterator, num_steps, state, reduce_fn):"
data/raw/repos\orbit\utils,loop_fns.py,def _get_relaxed_tensor_shape(t):
data/raw/repos\orbit\utils,loop_fns.py,def _get_relaxed_shape_structure(s):
data/raw/repos\orbit\utils,loop_fns.py,"def __call__(self, iterator, num_steps):"
data/raw/repos\orbit\utils,summary_manager.py,"def __init__(self, summary_dir, summary_fn, global_step=None):"
data/raw/repos\orbit\utils,summary_manager.py,"def summary_writer(self, relative_path=""""):"
data/raw/repos\orbit\utils,summary_manager.py,def flush(self):
data/raw/repos\orbit\utils,summary_manager.py,"def write_summaries(self, summary_dict):"
data/raw/repos\orbit\utils,summary_manager.py,"def _write_summaries(self, summary_dict, relative_path=""""):"
data/raw/repos\orbit\utils,summary_manager_interface.py,def flush(self):
data/raw/repos\orbit\utils,summary_manager_interface.py,"def summary_writer(self, relative_path=""""):"
data/raw/repos\orbit\utils,summary_manager_interface.py,"def write_summaries(self, summary_dict):"
data/raw/repos\orbit\utils,tpu_summaries.py,def _soft_device_placement():
data/raw/repos\orbit\utils,tpu_summaries.py,"def __call__(self, num_steps):"
data/raw/repos\orbit\utils,tpu_summaries.py,"def train_function_with_summaries(function=None, **kwargs):"
data/raw/repos\orbit\utils,tpu_summaries.py,"def train(self, num_steps):"
data/raw/repos\orbit\utils,tpu_summaries.py,"def __init__(self, function, **tf_function_kwargs):"
data/raw/repos\orbit\utils,tpu_summaries.py,"def with_summaries(*args, **kwargs):"
data/raw/repos\orbit\utils,tpu_summaries.py,"def without_summaries(*args, **kwargs):"
data/raw/repos\orbit\utils,tpu_summaries.py,"def __get__(self, instance, owner):"
data/raw/repos\orbit\utils,tpu_summaries_test.py,"def __call__(self, num_steps):"
data/raw/repos\orbit\utils,tpu_summaries_test.py,"def train_function_with_summaries(function=None, **kwargs):"
data/raw/repos\orbit\utils,tpu_summaries_test.py,def __init__(self):
data/raw/repos\orbit\utils,tpu_summaries_test.py,"def train_with_tpu_summary_optimization(self, num_steps):"
data/raw/repos\orbit\utils,tpu_summaries_test.py,"def train_with_tpu_summary_optimization_and_input_signature(self, num_steps):"
data/raw/repos\orbit\utils,tpu_summaries_test.py,"def train_with_tpu_summary_optimization_no_decorator(self, num_steps):"
data/raw/repos\orbit\utils,tpu_summaries_test.py,def setUp(self):
data/raw/repos\orbit\utils,tpu_summaries_test.py,"def _get_events_from_logdir(self, logdir):"
data/raw/repos\orbit\utils,tpu_summaries_test.py,"def _validate_tpu_summary_optimization(self, function, *args, **kwargs):"
data/raw/repos\orbit\utils,tpu_summaries_test.py,def test_train_with_tpu_summary_optimization(self):
data/raw/repos\orbit\utils,tpu_summaries_test.py,def test_train_with_tpu_summary_optimization_no_decorator(self):
data/raw/repos\orbit\utils,tpu_summaries_test.py,def test_train_with_tpu_summary_optimization_and_input_signature(self):
data/raw/repos\research\adversarial_text,adversarial_losses.py,"def random_perturbation_loss(embedded, length, loss_fn):"
data/raw/repos\research\adversarial_text,adversarial_losses.py,"def adversarial_loss(embedded, loss, loss_fn):"
data/raw/repos\research\adversarial_text,adversarial_losses.py,"def random_perturbation_loss_bidir(embedded, length, loss_fn):"
data/raw/repos\research\adversarial_text,adversarial_losses.py,"def adversarial_loss_bidir(embedded, loss, loss_fn):"
data/raw/repos\research\adversarial_text,adversarial_losses.py,"def _mask_by_length(t, length):"
data/raw/repos\research\adversarial_text,adversarial_losses.py,"def _scale_l2(x, norm_length):"
data/raw/repos\research\adversarial_text,adversarial_losses.py,"def _kl_divergence_with_logits(q_logits, p_logits, weights):"
data/raw/repos\research\adversarial_text,evaluate.py,"def restore_from_checkpoint(sess, saver):"
data/raw/repos\research\adversarial_text,evaluate.py,"def run_eval(eval_ops, summary_writer, saver):"
data/raw/repos\research\adversarial_text,evaluate.py,"def _log_values(sess, value_ops, summary_writer=None):"
data/raw/repos\research\adversarial_text,evaluate.py,def main(_):
data/raw/repos\research\adversarial_text,gen_data.py,def build_shuffling_tf_record_writer(fname):
data/raw/repos\research\adversarial_text,gen_data.py,def build_tf_record_writer(fname):
data/raw/repos\research\adversarial_text,gen_data.py,"def build_input_sequence(doc, vocab_ids):"
data/raw/repos\research\adversarial_text,gen_data.py,def make_vocab_ids(vocab_filename):
data/raw/repos\research\adversarial_text,gen_data.py,"def generate_training_data(vocab_ids, writer_lm_all, writer_seq_ae_all):"
data/raw/repos\research\adversarial_text,gen_data.py,"def generate_test_data(vocab_ids, writer_lm_all, writer_seq_ae_all):"
data/raw/repos\research\adversarial_text,gen_data.py,def main(_):
data/raw/repos\research\adversarial_text,gen_vocab.py,"def fill_vocab_from_doc(doc, vocab_freqs, doc_counts):"
data/raw/repos\research\adversarial_text,gen_vocab.py,def main(_):
data/raw/repos\research\adversarial_text,graphs.py,def get_model():
data/raw/repos\research\adversarial_text,graphs.py,"def __init__(self, cl_logits_input_dim=None):"
data/raw/repos\research\adversarial_text,graphs.py,def pretrained_variables(self):
data/raw/repos\research\adversarial_text,graphs.py,def classifier_training(self):
data/raw/repos\research\adversarial_text,graphs.py,def language_model_training(self):
data/raw/repos\research\adversarial_text,graphs.py,def classifier_graph(self):
data/raw/repos\research\adversarial_text,graphs.py,"def language_model_graph(self, compute_loss=True):"
data/raw/repos\research\adversarial_text,graphs.py,"def eval_graph(self, dataset='test'):"
data/raw/repos\research\adversarial_text,graphs.py,def adversarial_loss(self):
data/raw/repos\research\adversarial_text,graphs.py,def random_perturbation_loss():
data/raw/repos\research\adversarial_text,graphs.py,def adversarial_loss():
data/raw/repos\research\adversarial_text,graphs.py,def virtual_adversarial_loss():
data/raw/repos\research\adversarial_text,graphs.py,"def logits_from_embedding(embedded, return_next_state=False):"
data/raw/repos\research\adversarial_text,graphs.py,def combo_loss():
data/raw/repos\research\adversarial_text,graphs.py,def __init__(self):
data/raw/repos\research\adversarial_text,graphs.py,def pretrained_variables(self):
data/raw/repos\research\adversarial_text,graphs.py,def classifier_graph(self):
data/raw/repos\research\adversarial_text,graphs.py,"def language_model_graph(self, compute_loss=True):"
data/raw/repos\research\adversarial_text,graphs.py,"def eval_graph(self, dataset='test'):"
data/raw/repos\research\adversarial_text,graphs.py,def adversarial_loss(self):
data/raw/repos\research\adversarial_text,graphs.py,def random_perturbation_loss():
data/raw/repos\research\adversarial_text,graphs.py,def adversarial_loss():
data/raw/repos\research\adversarial_text,graphs.py,def virtual_adversarial_loss():
data/raw/repos\research\adversarial_text,graphs.py,"def logits_from_embedding(embedded, return_next_state=False):"
data/raw/repos\research\adversarial_text,graphs.py,def combo_loss():
data/raw/repos\research\adversarial_text,graphs.py,"def _inputs(dataset='train', pretrain=False, bidir=False):"
data/raw/repos\research\adversarial_text,graphs.py,def _get_vocab_freqs():
data/raw/repos\research\adversarial_text,graphs.py,def make_restore_average_vars_dict():
data/raw/repos\research\adversarial_text,graphs.py,"def optimize(loss, global_step):"
data/raw/repos\research\adversarial_text,graphs_test.py,def _build_random_vocabulary(vocab_size=100):
data/raw/repos\research\adversarial_text,graphs_test.py,def _build_random_sequence(vocab_ids):
data/raw/repos\research\adversarial_text,graphs_test.py,"def _build_vocab_frequencies(seqs, vocab_ids):"
data/raw/repos\research\adversarial_text,graphs_test.py,def setUpClass(cls):
data/raw/repos\research\adversarial_text,graphs_test.py,def tearDownClass(cls):
data/raw/repos\research\adversarial_text,graphs_test.py,def setUp(self):
data/raw/repos\research\adversarial_text,graphs_test.py,def testClassifierGraph(self):
data/raw/repos\research\adversarial_text,graphs_test.py,def testLanguageModelGraph(self):
data/raw/repos\research\adversarial_text,graphs_test.py,def testMulticlass(self):
data/raw/repos\research\adversarial_text,graphs_test.py,def testATMethods(self):
data/raw/repos\research\adversarial_text,graphs_test.py,def testSyncReplicas(self):
data/raw/repos\research\adversarial_text,graphs_test.py,def testCandidateSampling(self):
data/raw/repos\research\adversarial_text,graphs_test.py,def testSeqAE(self):
data/raw/repos\research\adversarial_text,graphs_test.py,def testBidirLM(self):
data/raw/repos\research\adversarial_text,graphs_test.py,def testBidirClassifier(self):
data/raw/repos\research\adversarial_text,graphs_test.py,def testEvalGraph(self):
data/raw/repos\research\adversarial_text,graphs_test.py,def testBidirEvalGraph(self):
data/raw/repos\research\adversarial_text,inputs.py,def tokens(self):
data/raw/repos\research\adversarial_text,inputs.py,def weights(self):
data/raw/repos\research\adversarial_text,inputs.py,def eos_weights(self):
data/raw/repos\research\adversarial_text,inputs.py,def labels(self):
data/raw/repos\research\adversarial_text,inputs.py,def length(self):
data/raw/repos\research\adversarial_text,inputs.py,def state_name(self):
data/raw/repos\research\adversarial_text,inputs.py,def state(self):
data/raw/repos\research\adversarial_text,inputs.py,"def save_state(self, value):"
data/raw/repos\research\adversarial_text,inputs.py,"def _get_tuple_state_names(num_states, base_name):"
data/raw/repos\research\adversarial_text,inputs.py,def _split_bidir_tokens(batch):
data/raw/repos\research\adversarial_text,inputs.py,"def _filenames_for_data_spec(phase, bidir, pretrain, use_seq2seq):"
data/raw/repos\research\adversarial_text,inputs.py,"def _read_single_sequence_example(file_list, tokens_shape=None):"
data/raw/repos\research\adversarial_text,layers.py,"def cl_logits_subgraph(layer_sizes, input_size, num_classes, keep_prob=1.):"
data/raw/repos\research\adversarial_text,layers.py,"def build(self, input_shape):"
data/raw/repos\research\adversarial_text,layers.py,"def call(self, x):"
data/raw/repos\research\adversarial_text,layers.py,"def _normalize(self, emb):"
data/raw/repos\research\adversarial_text,layers.py,"def __init__(self, cell_size, num_layers=1, keep_prob=1., name='LSTM'):"
data/raw/repos\research\adversarial_text,layers.py,"def __call__(self, x, initial_state, seq_length):"
data/raw/repos\research\adversarial_text,layers.py,"def build(self, input_shape):"
data/raw/repos\research\adversarial_text,layers.py,"def call(self, inputs):"
data/raw/repos\research\adversarial_text,layers.py,"def classification_loss(logits, labels, weights):"
data/raw/repos\research\adversarial_text,layers.py,"def accuracy(logits, targets, weights):"
data/raw/repos\research\adversarial_text,layers.py,def predictions(logits):
data/raw/repos\research\adversarial_text,layers.py,def _num_labels(weights):
data/raw/repos\research\adversarial_text,layers.py,def _summarize_vars_and_grads(grads_and_vars):
data/raw/repos\research\adversarial_text,layers.py,"def tag(name, v=var):"
data/raw/repos\research\adversarial_text,pretrain.py,def main(_):
data/raw/repos\research\adversarial_text,train_classifier.py,def main(_):
data/raw/repos\research\adversarial_text,train_utils.py,"def maybe_restore_pretrained_model(sess, saver_for_restore, model_dir):"
data/raw/repos\research\adversarial_text,train_utils.py,"def train_step(sess, train_op, loss, global_step):"
data/raw/repos\research\adversarial_text\data,data_utils.py,"def __init__(self, path):"
data/raw/repos\research\adversarial_text\data,data_utils.py,"def write(self, record):"
data/raw/repos\research\adversarial_text\data,data_utils.py,def close(self):
data/raw/repos\research\adversarial_text\data,data_utils.py,def __enter__(self):
data/raw/repos\research\adversarial_text\data,data_utils.py,"def __exit__(self, unused_type, unused_value, unused_traceback):"
data/raw/repos\research\adversarial_text\data,data_utils.py,"def __init__(self, token, label, weight, multivalent_tokens=False):"
data/raw/repos\research\adversarial_text\data,data_utils.py,def token(self):
data/raw/repos\research\adversarial_text\data,data_utils.py,def tokens(self):
data/raw/repos\research\adversarial_text\data,data_utils.py,def label(self):
data/raw/repos\research\adversarial_text\data,data_utils.py,def weight(self):
data/raw/repos\research\adversarial_text\data,data_utils.py,"def set_token(self, token):"
data/raw/repos\research\adversarial_text\data,data_utils.py,"def add_token(self, token):"
data/raw/repos\research\adversarial_text\data,data_utils.py,"def set_label(self, label):"
data/raw/repos\research\adversarial_text\data,data_utils.py,"def set_weight(self, weight):"
data/raw/repos\research\adversarial_text\data,data_utils.py,"def copy_from(self, timestep):"
data/raw/repos\research\adversarial_text\data,data_utils.py,def _fill_with_defaults(self):
data/raw/repos\research\adversarial_text\data,data_utils.py,"def __init__(self, multivalent_tokens=False):"
data/raw/repos\research\adversarial_text\data,data_utils.py,def seq(self):
data/raw/repos\research\adversarial_text\data,data_utils.py,def multivalent_tokens(self):
data/raw/repos\research\adversarial_text\data,data_utils.py,def _tokens(self):
data/raw/repos\research\adversarial_text\data,data_utils.py,def _labels(self):
data/raw/repos\research\adversarial_text\data,data_utils.py,def _weights(self):
data/raw/repos\research\adversarial_text\data,data_utils.py,def add_timestep(self):
data/raw/repos\research\adversarial_text\data,data_utils.py,def __iter__(self):
data/raw/repos\research\adversarial_text\data,data_utils.py,def __len__(self):
data/raw/repos\research\adversarial_text\data,data_utils.py,"def __getitem__(self, idx):"
data/raw/repos\research\adversarial_text\data,data_utils.py,def build_reverse_sequence(seq):
data/raw/repos\research\adversarial_text\data,data_utils.py,"def build_bidirectional_seq(seq, rev_seq):"
data/raw/repos\research\adversarial_text\data,data_utils.py,def build_lm_sequence(seq):
data/raw/repos\research\adversarial_text\data,data_utils.py,def build_seq_ae_sequence(seq):
data/raw/repos\research\adversarial_text\data,data_utils.py,"def build_labeled_sequence(seq, class_label, label_gain=False):"
data/raw/repos\research\adversarial_text\data,data_utils.py,def split_by_punct(segment):
data/raw/repos\research\adversarial_text\data,data_utils.py,def sort_vocab_by_frequency(vocab_freq_map):
data/raw/repos\research\adversarial_text\data,data_utils.py,"def write_vocab_and_frequency(ordered_vocab_freqs, output_dir):"
data/raw/repos\research\adversarial_text\data,data_utils_test.py,def testDefaultTimesteps(self):
data/raw/repos\research\adversarial_text\data,data_utils_test.py,def testSettersAndGetters(self):
data/raw/repos\research\adversarial_text\data,data_utils_test.py,def testTimestepIteration(self):
data/raw/repos\research\adversarial_text\data,data_utils_test.py,def testFillsSequenceExampleCorrectly(self):
data/raw/repos\research\adversarial_text\data,data_utils_test.py,def testSplitByPunct(self):
data/raw/repos\research\adversarial_text\data,data_utils_test.py,def _buildDummySequence(self):
data/raw/repos\research\adversarial_text\data,data_utils_test.py,def testBuildLMSeq(self):
data/raw/repos\research\adversarial_text\data,data_utils_test.py,def testBuildSAESeq(self):
data/raw/repos\research\adversarial_text\data,data_utils_test.py,def testBuildLabelSeq(self):
data/raw/repos\research\adversarial_text\data,data_utils_test.py,def testBuildBidirLabelSeq(self):
data/raw/repos\research\adversarial_text\data,data_utils_test.py,def testReverseSeq(self):
data/raw/repos\research\adversarial_text\data,data_utils_test.py,def testBidirSeq(self):
data/raw/repos\research\adversarial_text\data,data_utils_test.py,def testLabelGain(self):
data/raw/repos\research\adversarial_text\data,document_generators.py,def tokens(doc):
data/raw/repos\research\adversarial_text\data,document_generators.py,"def check_is_validation(filename, class_label):"
data/raw/repos\research\attention_ocr\python,common_flags.py,def define():
data/raw/repos\research\attention_ocr\python,common_flags.py,def get_crop_size():
data/raw/repos\research\attention_ocr\python,common_flags.py,def create_dataset(split_name):
data/raw/repos\research\attention_ocr\python,common_flags.py,def create_mparams():
data/raw/repos\research\attention_ocr\python,common_flags.py,"def create_model(*args, **kwargs):"
data/raw/repos\research\attention_ocr\python,data_provider.py,def augment_image(image):
data/raw/repos\research\attention_ocr\python,data_provider.py,"def central_crop(image, crop_size):"
data/raw/repos\research\attention_ocr\python,data_provider_test.py,def setUp(self):
data/raw/repos\research\attention_ocr\python,data_provider_test.py,def test_preprocessed_image_values_are_in_range(self):
data/raw/repos\research\attention_ocr\python,data_provider_test.py,def test_provided_data_has_correct_shape(self):
data/raw/repos\research\attention_ocr\python,data_provider_test.py,def test_optionally_applies_central_crop(self):
data/raw/repos\research\attention_ocr\python,demo_inference.py,def get_dataset_image_size(dataset_name):
data/raw/repos\research\attention_ocr\python,demo_inference.py,"def load_images(file_pattern, batch_size, dataset_name):"
data/raw/repos\research\attention_ocr\python,demo_inference.py,"def create_model(batch_size, dataset_name):"
data/raw/repos\research\attention_ocr\python,demo_inference.py,"def run(checkpoint, batch_size, dataset_name, image_path_pattern):"
data/raw/repos\research\attention_ocr\python,demo_inference.py,def main(_):
data/raw/repos\research\attention_ocr\python,demo_inference_test.py,def setUp(self):
data/raw/repos\research\attention_ocr\python,demo_inference_test.py,def test_moving_variables_properly_loaded_from_a_checkpoint(self):
data/raw/repos\research\attention_ocr\python,demo_inference_test.py,def test_correct_results_on_test_data(self):
data/raw/repos\research\attention_ocr\python,eval.py,def main(_):
data/raw/repos\research\attention_ocr\python,inception_preprocessing.py,"def apply_with_random_selector(x, func, num_cases):"
data/raw/repos\research\attention_ocr\python,inception_preprocessing.py,"def distort_color(image, color_ordering=0, fast_mode=True, scope=None):"
data/raw/repos\research\attention_ocr\python,metrics.py,"def char_accuracy(predictions, targets, rej_char, streaming=False):"
data/raw/repos\research\attention_ocr\python,metrics.py,"def sequence_accuracy(predictions, targets, rej_char, streaming=False):"
data/raw/repos\research\attention_ocr\python,metrics_test.py,def setUp(self):
data/raw/repos\research\attention_ocr\python,metrics_test.py,def initialized_session(self):
data/raw/repos\research\attention_ocr\python,metrics_test.py,def _fake_labels(self):
data/raw/repos\research\attention_ocr\python,metrics_test.py,"def _incorrect_copy(self, values, bad_indexes):"
data/raw/repos\research\attention_ocr\python,metrics_test.py,def test_sequence_accuracy_identical_samples(self):
data/raw/repos\research\attention_ocr\python,metrics_test.py,def test_sequence_accuracy_one_char_difference(self):
data/raw/repos\research\attention_ocr\python,metrics_test.py,def test_char_accuracy_one_char_difference_with_padding(self):
data/raw/repos\research\attention_ocr\python,model.py,"def _dict_to_array(id_to_char, default_character):"
data/raw/repos\research\attention_ocr\python,model.py,"def __init__(self, charset, default_character='?'):"
data/raw/repos\research\attention_ocr\python,model.py,"def get_text(self, ids):"
data/raw/repos\research\attention_ocr\python,model.py,def get_softmax_loss_fn(label_smoothing):
data/raw/repos\research\attention_ocr\python,model.py,"def loss_fn(labels, logits):"
data/raw/repos\research\attention_ocr\python,model.py,"def loss_fn(labels, logits):"
data/raw/repos\research\attention_ocr\python,model.py,def get_tensor_dimensions(tensor):
data/raw/repos\research\attention_ocr\python,model.py,"def lookup_indexed_value(indices, row_vecs):"
data/raw/repos\research\attention_ocr\python,model.py,def max_char_logprob_cumsum(char_log_prob):
data/raw/repos\research\attention_ocr\python,model.py,"def find_length_by_null(predicted_chars, null_code):"
data/raw/repos\research\attention_ocr\python,model.py,"def axis_pad(tensor, axis, before=0, after=0, constant_values=0.0):"
data/raw/repos\research\attention_ocr\python,model.py,"def null_based_length_prediction(chars_log_prob, null_code):"
data/raw/repos\research\attention_ocr\python,model.py,def default_mparams(self):
data/raw/repos\research\attention_ocr\python,model.py,"def set_mparam(self, function, **kwargs):"
data/raw/repos\research\attention_ocr\python,model.py,"def conv_tower_fn(self, images, is_training=True, reuse=None):"
data/raw/repos\research\attention_ocr\python,model.py,"def _create_lstm_inputs(self, net):"
data/raw/repos\research\attention_ocr\python,model.py,"def sequence_logit_fn(self, net, labels_one_hot):"
data/raw/repos\research\attention_ocr\python,model.py,"def max_pool_views(self, nets_list):"
data/raw/repos\research\attention_ocr\python,model.py,"def pool_views_fn(self, nets):"
data/raw/repos\research\attention_ocr\python,model.py,"def char_predictions(self, chars_logit):"
data/raw/repos\research\attention_ocr\python,model.py,"def encode_coordinates_fn(self, net):"
data/raw/repos\research\attention_ocr\python,model.py,"def create_loss(self, data, endpoints):"
data/raw/repos\research\attention_ocr\python,model.py,"def label_smoothing_regularization(self, chars_labels, weight=0.1):"
data/raw/repos\research\attention_ocr\python,model.py,"def sequence_loss_fn(self, chars_logits, chars_labels):"
data/raw/repos\research\attention_ocr\python,model.py,"def create_summaries(self, data, endpoints, charset, is_training):"
data/raw/repos\research\attention_ocr\python,model.py,def sname(label):
data/raw/repos\research\attention_ocr\python,model.py,"def use_metric(name, value_update_tuple):"
data/raw/repos\research\attention_ocr\python,model.py,"def assign_from_checkpoint(variables, checkpoint):"
data/raw/repos\research\attention_ocr\python,model.py,def init_assign_fn(sess):
data/raw/repos\research\attention_ocr\python,model_export.py,def get_checkpoint_path():
data/raw/repos\research\attention_ocr\python,model_export.py,def main(unused_argv):
data/raw/repos\research\attention_ocr\python,model_export_lib.py,def attention_ocr_attention_masks(num_characters):
data/raw/repos\research\attention_ocr\python,model_export_lib.py,def build_tensor_info(tensor_dict):
data/raw/repos\research\attention_ocr\python,model_export_test.py,def _clean_up():
data/raw/repos\research\attention_ocr\python,model_export_test.py,def _create_tf_example_string(image):
data/raw/repos\research\attention_ocr\python,model_export_test.py,def setUp(self):
data/raw/repos\research\attention_ocr\python,model_export_test.py,"def create_input_feed(self, graph_def, serving):"
data/raw/repos\research\attention_ocr\python,model_export_test.py,"def verify_export_load_and_inference(self, export_for_serving=False):"
data/raw/repos\research\attention_ocr\python,model_export_test.py,def test_fsns_export_for_serving_and_load_inference(self):
data/raw/repos\research\attention_ocr\python,model_export_test.py,def test_fsns_export_and_load_inference(self):
data/raw/repos\research\attention_ocr\python,model_test.py,def create_fake_charset(num_char_classes):
data/raw/repos\research\attention_ocr\python,model_test.py,def setUp(self):
data/raw/repos\research\attention_ocr\python,model_test.py,def initialize_fakes(self):
data/raw/repos\research\attention_ocr\python,model_test.py,"def create_model(self, charset=None):"
data/raw/repos\research\attention_ocr\python,model_test.py,def test_char_related_shapes(self):
data/raw/repos\research\attention_ocr\python,model_test.py,def test_predicted_scores_are_within_range(self):
data/raw/repos\research\attention_ocr\python,model_test.py,def test_conv_tower_shape(self):
data/raw/repos\research\attention_ocr\python,model_test.py,def test_model_size_less_then1_gb(self):
data/raw/repos\research\attention_ocr\python,model_test.py,def test_create_summaries_is_runnable(self):
data/raw/repos\research\attention_ocr\python,model_test.py,def test_sequence_loss_function_without_label_smoothing(self):
data/raw/repos\research\attention_ocr\python,model_test.py,"def encode_coordinates_alt(self, net):"
data/raw/repos\research\attention_ocr\python,model_test.py,def test_encoded_coordinates_have_correct_shape(self):
data/raw/repos\research\attention_ocr\python,model_test.py,def test_disabled_coordinate_encoding_returns_features_unchanged(self):
data/raw/repos\research\attention_ocr\python,model_test.py,def test_coordinate_encoding_is_correct_for_simple_example(self):
data/raw/repos\research\attention_ocr\python,model_test.py,def test_alt_implementation_of_coordinate_encoding_returns_same_values(self):
data/raw/repos\research\attention_ocr\python,model_test.py,def test_predicted_text_has_correct_shape_w_charset(self):
data/raw/repos\research\attention_ocr\python,model_test.py,def test_text_corresponds_to_ids(self):
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def orthogonal_initializer(shape, dtype=tf.float32, *args, **kwargs):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def __init__(self, net, labels_one_hot, model_params, method_params):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def get_train_input(self, prev, i):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def get_eval_input(self, prev, i):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def unroll_cell(self, decoder_inputs, initial_state, loop_function, cell):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,def is_training(self):
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def char_logit(self, inputs, char_index):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def char_one_hot(self, logit):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def get_input(self, prev, i):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,def create_logits(self):
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def get_image_feature(self, char_index):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def get_eval_input(self, prev, i):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def get_train_input(self, prev, i):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def unroll_cell(self, decoder_inputs, initial_state, loop_function, cell):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def get_eval_input(self, prev, i):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def get_train_input(self, prev, i):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def get_eval_input(self, prev, i):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def get_train_input(self, prev, i):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def unroll_cell(self, decoder_inputs, initial_state, loop_function, cell):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def get_train_input(self, prev, i):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def get_eval_input(self, prev, i):"
data/raw/repos\research\attention_ocr\python,sequence_layers.py,"def get_layer_class(use_attention, use_autoregression):"
data/raw/repos\research\attention_ocr\python,sequence_layers_test.py,"def fake_net(batch_size, num_features, feature_size):"
data/raw/repos\research\attention_ocr\python,sequence_layers_test.py,"def fake_labels(batch_size, seq_length, num_char_classes):"
data/raw/repos\research\attention_ocr\python,sequence_layers_test.py,"def create_layer(layer_class, batch_size, seq_length, num_char_classes):"
data/raw/repos\research\attention_ocr\python,sequence_layers_test.py,def test_net_slice_char_logits_with_correct_shape(self):
data/raw/repos\research\attention_ocr\python,sequence_layers_test.py,def test_net_slice_with_autoregression_char_logits_with_correct_shape(self):
data/raw/repos\research\attention_ocr\python,sequence_layers_test.py,def test_attention_char_logits_with_correct_shape(self):
data/raw/repos\research\attention_ocr\python,sequence_layers_test.py,def test_attention_with_autoregression_char_logits_with_correct_shape(self):
data/raw/repos\research\attention_ocr\python,train.py,def get_training_hparams():
data/raw/repos\research\attention_ocr\python,train.py,def create_optimizer(hparams):
data/raw/repos\research\attention_ocr\python,train.py,"def train(loss, init_fn, hparams):"
data/raw/repos\research\attention_ocr\python,train.py,def prepare_training_dir():
data/raw/repos\research\attention_ocr\python,train.py,def calculate_graph_metrics():
data/raw/repos\research\attention_ocr\python,train.py,def main(_):
data/raw/repos\research\attention_ocr\python,utils.py,def logits_to_log_prob(logits):
data/raw/repos\research\attention_ocr\python,utils.py,"def variables_to_restore(scope=None, strip_scope=False):"
data/raw/repos\research\attention_ocr\python,utils.py,def ConvertAllInputsToTensors(func):
data/raw/repos\research\attention_ocr\python,utils.py,def FuncWrapper(*args):
data/raw/repos\research\attention_ocr\python\datasets,fsns.py,"def read_charset(filename, null_character=u'\u2591'):"
data/raw/repos\research\attention_ocr\python\datasets,fsns.py,"def __init__(self, width_key, original_width_key, num_of_views):"
data/raw/repos\research\attention_ocr\python\datasets,fsns.py,"def tensors_to_item(self, keys_to_tensors):"
data/raw/repos\research\attention_ocr\python\datasets,fsns.py,"def get_split(split_name, dataset_dir=None, config=None):"
data/raw/repos\research\attention_ocr\python\datasets,fsns_test.py,def get_test_split():
data/raw/repos\research\attention_ocr\python\datasets,fsns_test.py,def dataset_dir():
data/raw/repos\research\attention_ocr\python\datasets,fsns_test.py,def test_decodes_example_proto(self):
data/raw/repos\research\attention_ocr\python\datasets,fsns_test.py,def test_label_has_shape_defined(self):
data/raw/repos\research\attention_ocr\python\datasets,fsns_test.py,def test_dataset_tuple_has_all_extra_attributes(self):
data/raw/repos\research\attention_ocr\python\datasets,fsns_test.py,def test_can_use_the_test_data(self):
data/raw/repos\research\attention_ocr\python\datasets,unittest_utils.py,"def create_random_image(image_format, shape):"
data/raw/repos\research\attention_ocr\python\datasets,unittest_utils.py,def create_serialized_example(name_to_values):
data/raw/repos\research\attention_ocr\python\datasets,unittest_utils_test.py,def test_creates_an_image_of_specified_shape(self):
data/raw/repos\research\attention_ocr\python\datasets,unittest_utils_test.py,def test_encoded_image_corresponds_to_numpy_array(self):
data/raw/repos\research\attention_ocr\python\datasets,unittest_utils_test.py,def test_created_example_has_correct_values(self):
data/raw/repos\research\audioset\vggish,mel_features.py,"def frame(data, window_length, hop_length):"
data/raw/repos\research\audioset\vggish,mel_features.py,def periodic_hann(window_length):
data/raw/repos\research\audioset\vggish,mel_features.py,def hertz_to_mel(frequencies_hertz):
data/raw/repos\research\audioset\vggish,vggish_export_tfhub.py,"def vggish_definer(variables, checkpoint_path):"
data/raw/repos\research\audioset\vggish,vggish_export_tfhub.py,"def var_tracker(next_creator, **kwargs):"
data/raw/repos\research\audioset\vggish,vggish_export_tfhub.py,def waveform_to_features(waveform):
data/raw/repos\research\audioset\vggish,vggish_export_tfhub.py,def define_vggish(waveform):
data/raw/repos\research\audioset\vggish,vggish_export_tfhub.py,"def __init__(self, checkpoint_path):"
data/raw/repos\research\audioset\vggish,vggish_export_tfhub.py,"def __call__(self, waveform):"
data/raw/repos\research\audioset\vggish,vggish_export_tfhub.py,def check_model(model_fn):
data/raw/repos\research\audioset\vggish,vggish_export_tfhub.py,def main(args):
data/raw/repos\research\audioset\vggish,vggish_export_tfhub.py,def run_model(waveform):
data/raw/repos\research\audioset\vggish,vggish_inference_demo.py,def main(_):
data/raw/repos\research\audioset\vggish,vggish_input.py,def wav_read(wav_file):
data/raw/repos\research\audioset\vggish,vggish_input.py,def wav_read(wav_file):
data/raw/repos\research\audioset\vggish,vggish_input.py,"def waveform_to_examples(data, sample_rate):"
data/raw/repos\research\audioset\vggish,vggish_input.py,def wavfile_to_examples(wav_file):
data/raw/repos\research\audioset\vggish,vggish_postprocess.py,"def __init__(self, pca_params_npz_path):"
data/raw/repos\research\audioset\vggish,vggish_postprocess.py,"def postprocess(self, embeddings_batch):"
data/raw/repos\research\audioset\vggish,vggish_slim.py,"def define_vggish_slim(features_tensor=None, training=False):"
data/raw/repos\research\audioset\vggish,vggish_slim.py,"def load_vggish_slim_checkpoint(session, checkpoint_path):"
data/raw/repos\research\audioset\vggish,vggish_train_demo.py,def _get_examples_batch():
data/raw/repos\research\audioset\vggish,vggish_train_demo.py,def main(_):
data/raw/repos\research\audioset\yamnet,export.py,def log(msg):
data/raw/repos\research\audioset\yamnet,export.py,"def __init__(self, weights_path, params):"
data/raw/repos\research\audioset\yamnet,export.py,def class_map_path(self):
data/raw/repos\research\audioset\yamnet,export.py,"def __call__(self, waveform):"
data/raw/repos\research\audioset\yamnet,export.py,"def check_model(model_fn, class_map_path, params):"
data/raw/repos\research\audioset\yamnet,export.py,"def clip_test(waveform, expected_class_name, top_n=10):"
data/raw/repos\research\audioset\yamnet,export.py,"def make_tf2_export(weights_path, export_dir):"
data/raw/repos\research\audioset\yamnet,export.py,def run_model(waveform):
data/raw/repos\research\audioset\yamnet,export.py,"def make_tflite_export(weights_path, export_dir):"
data/raw/repos\research\audioset\yamnet,export.py,"def make_tfjs_export(tflite_saved_model_dir, export_dir):"
data/raw/repos\research\audioset\yamnet,export.py,def main(args):
data/raw/repos\research\audioset\yamnet,features.py,"def waveform_to_log_mel_spectrogram_patches(waveform, params):"
data/raw/repos\research\audioset\yamnet,features.py,"def pad_waveform(waveform, params):"
data/raw/repos\research\audioset\yamnet,features.py,"def _tflite_stft_magnitude(signal, frame_length, frame_step, fft_length):"
data/raw/repos\research\audioset\yamnet,features.py,def _hann_window():
data/raw/repos\research\audioset\yamnet,features.py,def _dft_matrix(dft_length):
data/raw/repos\research\audioset\yamnet,features.py,"def _rdft(framed_signal, fft_length):"
data/raw/repos\research\audioset\yamnet,features.py,"def _complex_abs(real, imag):"
data/raw/repos\research\audioset\yamnet,inference.py,def main(argv):
data/raw/repos\research\audioset\yamnet,params.py,def patch_frames(self):
data/raw/repos\research\audioset\yamnet,params.py,def patch_bands(self):
data/raw/repos\research\audioset\yamnet,yamnet.py,"def _batch_norm(name, params):"
data/raw/repos\research\audioset\yamnet,yamnet.py,def _bn_layer(layer_input):
data/raw/repos\research\audioset\yamnet,yamnet.py,"def _conv(name, kernel, stride, filters, params):"
data/raw/repos\research\audioset\yamnet,yamnet.py,def _conv_layer(layer_input):
data/raw/repos\research\audioset\yamnet,yamnet.py,"def _separable_conv(name, kernel, stride, filters, params):"
data/raw/repos\research\audioset\yamnet,yamnet.py,def _separable_conv_layer(layer_input):
data/raw/repos\research\audioset\yamnet,yamnet.py,"def yamnet(features, params):"
data/raw/repos\research\audioset\yamnet,yamnet.py,def yamnet_frames_model(params):
data/raw/repos\research\audioset\yamnet,yamnet.py,def class_names(class_map_csv):
data/raw/repos\research\audioset\yamnet,yamnet_test.py,def setUpClass(cls):
data/raw/repos\research\audioset\yamnet,yamnet_test.py,"def clip_test(self, waveform, expected_class_name, top_n=10):"
data/raw/repos\research\audioset\yamnet,yamnet_test.py,def testZeros(self):
data/raw/repos\research\audioset\yamnet,yamnet_test.py,def testRandom(self):
data/raw/repos\research\audioset\yamnet,yamnet_test.py,def testSine(self):
data/raw/repos\research\autoaugment,augmentation_transforms.py,def random_flip(x):
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def zero_pad_and_crop(img, amount=4):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def create_cutout_mask(img_height, img_width, num_channels, size):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def cutout_numpy(img, size=16):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def float_parameter(level, maxval):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def int_parameter(level, maxval):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,def pil_wrap(img):
data/raw/repos\research\autoaugment,augmentation_transforms.py,def pil_unwrap(pil_img):
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def apply_policy(policy, img):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def __init__(self, func, name):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,def __repr__(self):
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def __call__(self, pil_img):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def __init__(self, name, xform_fn):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def pil_transformer(self, probability, level):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,def return_function(im):
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def do_transform(self, image, level):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def _rotate_impl(pil_img, level):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def _posterize_impl(pil_img, level):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def _shear_x_impl(pil_img, level):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def _shear_y_impl(pil_img, level):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def _translate_x_impl(pil_img, level):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def _translate_y_impl(pil_img, level):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def _crop_impl(pil_img, level, interpolation=Image.BILINEAR):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def _solarize_impl(pil_img, level):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def _cutout_pil_impl(pil_img, level):"
data/raw/repos\research\autoaugment,augmentation_transforms.py,def _enhancer_impl(enhancer):
data/raw/repos\research\autoaugment,augmentation_transforms.py,"def impl(pil_img, level):"
data/raw/repos\research\autoaugment,custom_ops.py,"def variable(name, shape, dtype, initializer, trainable):"
data/raw/repos\research\autoaugment,custom_ops.py,"def global_avg_pool(x, scope=None):"
data/raw/repos\research\autoaugment,custom_ops.py,"def zero_pad(inputs, in_filter, out_filter):"
data/raw/repos\research\autoaugment,custom_ops.py,"def stride_arr(stride_h, stride_w):"
data/raw/repos\research\autoaugment,custom_ops.py,"def avg_pool(inputs, kernel_size, stride=2, padding='VALID', scope=None):"
data/raw/repos\research\autoaugment,data_utils.py,"def __init__(self, hparams):"
data/raw/repos\research\autoaugment,data_utils.py,def next_batch(self):
data/raw/repos\research\autoaugment,data_utils.py,def reset(self):
data/raw/repos\research\autoaugment,data_utils.py,def unpickle(f):
data/raw/repos\research\autoaugment,helper_utils.py,"def setup_loss(logits, labels):"
data/raw/repos\research\autoaugment,helper_utils.py,"def decay_weights(cost, weight_decay_rate):"
data/raw/repos\research\autoaugment,helper_utils.py,"def eval_child_model(session, model, data_loader, mode):"
data/raw/repos\research\autoaugment,helper_utils.py,"def cosine_lr(learning_rate, epoch, iteration, batches_per_epoch, total_epochs):"
data/raw/repos\research\autoaugment,helper_utils.py,"def get_lr(curr_epoch, hparams, iteration=None):"
data/raw/repos\research\autoaugment,helper_utils.py,"def run_epoch_training(session, model, data_loader, curr_epoch):"
data/raw/repos\research\autoaugment,policies.py,def good_policies():
data/raw/repos\research\autoaugment,shake_drop.py,def round_int(x):
data/raw/repos\research\autoaugment,shake_drop.py,"def shortcut(x, output_filters, stride):"
data/raw/repos\research\autoaugment,shake_drop.py,"def calc_prob(curr_layer, total_layers, p_l):"
data/raw/repos\research\autoaugment,shake_drop.py,"def bottleneck_layer(x, n, stride, prob, is_training, alpha, beta):"
data/raw/repos\research\autoaugment,shake_drop.py,"def build_shake_drop_model(images, num_classes, is_training):"
data/raw/repos\research\autoaugment,shake_shake.py,"def _shake_shake_skip_connection(x, output_filters, stride):"
data/raw/repos\research\autoaugment,shake_shake.py,"def _shake_shake_block(x, output_filters, stride, is_training):"
data/raw/repos\research\autoaugment,shake_shake.py,"def build_shake_shake_model(images, num_classes, hparams, is_training):"
data/raw/repos\research\autoaugment,train_cifar.py,def setup_arg_scopes(is_training):
data/raw/repos\research\autoaugment,train_cifar.py,"def build_model(inputs, num_classes, is_training, hparams):"
data/raw/repos\research\autoaugment,train_cifar.py,"def __init__(self, hparams):"
data/raw/repos\research\autoaugment,train_cifar.py,"def build(self, mode):"
data/raw/repos\research\autoaugment,train_cifar.py,"def _setup_misc(self, mode):"
data/raw/repos\research\autoaugment,train_cifar.py,def _setup_images_and_labels(self):
data/raw/repos\research\autoaugment,train_cifar.py,"def assign_epoch(self, session, epoch_value):"
data/raw/repos\research\autoaugment,train_cifar.py,"def _build_graph(self, images, labels, mode):"
data/raw/repos\research\autoaugment,train_cifar.py,def _calc_num_trainable_params(self):
data/raw/repos\research\autoaugment,train_cifar.py,def _build_train_op(self):
data/raw/repos\research\autoaugment,train_cifar.py,"def __init__(self, hparams):"
data/raw/repos\research\autoaugment,train_cifar.py,"def save_model(self, step=None):"
data/raw/repos\research\autoaugment,train_cifar.py,def extract_model_spec(self):
data/raw/repos\research\autoaugment,train_cifar.py,"def eval_child_model(self, model, data_loader, mode):"
data/raw/repos\research\autoaugment,train_cifar.py,"def _new_session(self, m):"
data/raw/repos\research\autoaugment,train_cifar.py,def _build_models(self):
data/raw/repos\research\autoaugment,train_cifar.py,"def _calc_starting_epoch(self, m):"
data/raw/repos\research\autoaugment,train_cifar.py,"def _run_training_loop(self, m, curr_epoch):"
data/raw/repos\research\autoaugment,train_cifar.py,"def _compute_final_accuracies(self, meval):"
data/raw/repos\research\autoaugment,train_cifar.py,def run_model(self):
data/raw/repos\research\autoaugment,train_cifar.py,def saver(self):
data/raw/repos\research\autoaugment,train_cifar.py,def session(self):
data/raw/repos\research\autoaugment,train_cifar.py,def num_trainable_params(self):
data/raw/repos\research\autoaugment,train_cifar.py,def main(_):
data/raw/repos\research\autoaugment,wrn.py,"def _res_add(in_filter, out_filter, stride, x, orig_x):"
data/raw/repos\research\autoaugment,wrn.py,"def build_wrn_model(images, num_classes, wrn_size):"
data/raw/repos\research\cognitive_planning,embedders.py,"def build(self, observation):"
data/raw/repos\research\cognitive_planning,embedders.py,"def __init__(self, rnn_state_size, scope=None):"
data/raw/repos\research\cognitive_planning,embedders.py,"def build(self, observations):"
data/raw/repos\research\cognitive_planning,embedders.py,"def __init__(self, params, *args, **kwargs):"
data/raw/repos\research\cognitive_planning,embedders.py,"def build(self, images):"
data/raw/repos\research\cognitive_planning,embedders.py,def extra_train_ops(self):
data/raw/repos\research\cognitive_planning,embedders.py,"def _build_model(self, images):"
data/raw/repos\research\cognitive_planning,embedders.py,"def _stride_arr(self, stride):"
data/raw/repos\research\cognitive_planning,embedders.py,"def _batch_norm(self, name, x):"
data/raw/repos\research\cognitive_planning,embedders.py,def _decay(self):
data/raw/repos\research\cognitive_planning,embedders.py,"def _conv(self, name, x, filter_size, in_filters, out_filters, strides):"
data/raw/repos\research\cognitive_planning,embedders.py,"def _relu(self, x, leakiness=0.0):"
data/raw/repos\research\cognitive_planning,embedders.py,"def _fully_connected(self, x, out_dim):"
data/raw/repos\research\cognitive_planning,embedders.py,"def _global_avg_pooling(self, x):"
data/raw/repos\research\cognitive_planning,embedders.py,"def __init__(self, layers, *args, **kwargs):"
data/raw/repos\research\cognitive_planning,embedders.py,"def build(self, features):"
data/raw/repos\research\cognitive_planning,embedders.py,"def _fully_connected(self, x, out_dim):"
data/raw/repos\research\cognitive_planning,embedders.py,"def _relu(self, x, leakiness=0.0):"
data/raw/repos\research\cognitive_planning,embedders.py,"def __init__(self, params, *args, **kwargs):"
data/raw/repos\research\cognitive_planning,embedders.py,"def build(self, images):"
data/raw/repos\research\cognitive_planning,embedders.py,"def build(self, images):"
data/raw/repos\research\cognitive_planning,embedders.py,def preprocess_fn(x):
data/raw/repos\research\cognitive_planning,embedders.py,"def build(self, images):"
data/raw/repos\research\cognitive_planning,label_map_util.py,def _validate_label_map(label_map):
data/raw/repos\research\cognitive_planning,label_map_util.py,def create_category_index(categories):
data/raw/repos\research\cognitive_planning,label_map_util.py,def get_max_label_map_index(label_map):
data/raw/repos\research\cognitive_planning,label_map_util.py,def load_labelmap(path):
data/raw/repos\research\cognitive_planning,label_map_util.py,"def get_label_map_dict(label_map_path, use_display_name=False):"
data/raw/repos\research\cognitive_planning,label_map_util.py,def create_category_index_from_labelmap(label_map_path):
data/raw/repos\research\cognitive_planning,label_map_util.py,def create_class_agnostic_category_index():
data/raw/repos\research\cognitive_planning,policies.py,"def _print_debug_ios(history, goal, output):"
data/raw/repos\research\cognitive_planning,policies.py,"def __init__(self, embedders_dict, action_size):"
data/raw/repos\research\cognitive_planning,policies.py,"def build(self, observations, prev_state):"
data/raw/repos\research\cognitive_planning,policies.py,def embed(name):
data/raw/repos\research\cognitive_planning,policies.py,def extra_train_ops(self):
data/raw/repos\research\cognitive_planning,policies.py,"def _embed_task_ios(self, streams):"
data/raw/repos\research\cognitive_planning,policies.py,"def build(self, feeds, prev_state):"
data/raw/repos\research\cognitive_planning,policies.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\research\cognitive_planning,policies.py,"def build(self, feeds, prev_state):"
data/raw/repos\research\cognitive_planning,policies.py,"def __init__(self, lstm_hparams, *args, **kwargs):"
data/raw/repos\research\cognitive_planning,policies.py,"def build(self, feeds, state):"
data/raw/repos\research\cognitive_planning,tasks.py,"def _pad_or_clip_array(np_arr, arr_len, is_front_clip=True, output_mask=False):"
data/raw/repos\research\cognitive_planning,tasks.py,"def classification_loss(truth, predicted, weights=None, is_one_hot=True):"
data/raw/repos\research\cognitive_planning,tasks.py,"def __init__(self, inputs, output, query=None):"
data/raw/repos\research\cognitive_planning,tasks.py,def assert_config(config):
data/raw/repos\research\cognitive_planning,tasks.py,def inputs(self):
data/raw/repos\research\cognitive_planning,tasks.py,def output(self):
data/raw/repos\research\cognitive_planning,tasks.py,def query(self):
data/raw/repos\research\cognitive_planning,tasks.py,"def __init__(self, config):"
data/raw/repos\research\cognitive_planning,tasks.py,def config(self):
data/raw/repos\research\cognitive_planning,tasks.py,def episode(self):
data/raw/repos\research\cognitive_planning,tasks.py,"def reset(self, observation):"
data/raw/repos\research\cognitive_planning,tasks.py,"def episode_batch(self, batch_size):"
data/raw/repos\research\cognitive_planning,tasks.py,"def tf_episode_batch(self, batch_size):"
data/raw/repos\research\cognitive_planning,tasks.py,def episode_batch_func():
data/raw/repos\research\cognitive_planning,tasks.py,"def target_loss(self, true_targets, targets, weights=None):"
data/raw/repos\research\cognitive_planning,tasks.py,"def reward(self, obs, done, info):"
data/raw/repos\research\cognitive_planning,tasks.py,def _exploration(self):
data/raw/repos\research\cognitive_planning,tasks.py,"def regroup(obs, i):"
data/raw/repos\research\cognitive_planning,tasks.py,"def _obs_to_state(self, path, states):"
data/raw/repos\research\cognitive_planning,tasks.py,"def _perturb_state(self, state, noise_var):"
data/raw/repos\research\cognitive_planning,tasks.py,"def normal(v, std):"
data/raw/repos\research\cognitive_planning,tasks.py,def episode(self):
data/raw/repos\research\cognitive_planning,tasks.py,"def one_hot(label, num_labels=3):"
data/raw/repos\research\cognitive_planning,tasks.py,"def target_loss(self, truth, predicted, weights=None):"
data/raw/repos\research\cognitive_planning,tasks.py,def episode(self):
data/raw/repos\research\cognitive_planning,tasks.py,"def target_loss(self, truth, predicted, weights=None):"
data/raw/repos\research\cognitive_planning,tasks.py,def episode(self):
data/raw/repos\research\cognitive_planning,tasks.py,"def reward(self, obs, done, info):"
data/raw/repos\research\cognitive_planning,tasks.py,"def _compute_path_length(self, goal_vertex):"
data/raw/repos\research\cognitive_planning,tasks.py,"def reset(self, observation):"
data/raw/repos\research\cognitive_planning,tasks.py,"def target_loss(self, truth, predicted, weights=None):"
data/raw/repos\research\cognitive_planning,tasks.py,"def __init__(self, num_labels, *args, **kwargs):"
data/raw/repos\research\cognitive_planning,tasks.py,def episode(self):
data/raw/repos\research\cognitive_planning,tasks.py,"def target_loss(self, truth, predicted, weights=None):"
data/raw/repos\research\cognitive_planning,tasks.py,"def __init__(self, env, seed, *args, **kwargs):"
data/raw/repos\research\cognitive_planning,tasks.py,def location(self):
data/raw/repos\research\cognitive_planning,tasks.py,"def location(self, location):"
data/raw/repos\research\cognitive_planning,tasks.py,def episode(self):
data/raw/repos\research\cognitive_planning,tasks.py,"def rotate(xy, theta):"
data/raw/repos\research\cognitive_planning,tasks.py,"def reward(self, obs, done, info):"
data/raw/repos\research\cognitive_planning,tasks.py,"def target_loss(self, truth, predicted, weights=None):"
data/raw/repos\research\cognitive_planning,tasks.py,"def __init__(self, env, *args, **kwargs):"
data/raw/repos\research\cognitive_planning,tasks.py,"def _compute_shortest_path_length(self, vertex, target_vertices):"
data/raw/repos\research\cognitive_planning,tasks.py,"def _compute_gt_value(self, vertex, target_vertices):"
data/raw/repos\research\cognitive_planning,tasks.py,def episode(self):
data/raw/repos\research\cognitive_planning,tasks.py,"def reset(self, observation):"
data/raw/repos\research\cognitive_planning,tasks.py,"def target_loss(self, true_targets, targets, weights=None):"
data/raw/repos\research\cognitive_planning,tasks.py,"def reward(self, obs, done, info):"
data/raw/repos\research\cognitive_planning,tasks.py,"def __init__(self, env, *args, **kwargs):"
data/raw/repos\research\cognitive_planning,tasks.py,"def _compute_shortest_path_length(self, vertex, target_vertices):"
data/raw/repos\research\cognitive_planning,tasks.py,"def _compute_gt_value(self, vertex, target_vertices):"
data/raw/repos\research\cognitive_planning,tasks.py,def episode(self):
data/raw/repos\research\cognitive_planning,tasks.py,"def reset(self, observation):"
data/raw/repos\research\cognitive_planning,tasks.py,"def target_loss(self, true_targets, targets, weights=None):"
data/raw/repos\research\cognitive_planning,tasks.py,"def reward(self, obs, done, info):"
data/raw/repos\research\cognitive_planning,train_supervised_active_vision.py,def create_modality_types():
data/raw/repos\research\cognitive_planning,train_supervised_active_vision.py,def map_to_embedder(modality_type):
data/raw/repos\research\cognitive_planning,train_supervised_active_vision.py,"def create_train_and_init_ops(policy, task):"
data/raw/repos\research\cognitive_planning,train_supervised_active_vision.py,"def create_eval_ops(policy, config, possible_targets):"
data/raw/repos\research\cognitive_planning,train_supervised_active_vision.py,"def init(sequence_length, eval_init_points_file_name, worlds):"
data/raw/repos\research\cognitive_planning,train_supervised_active_vision.py,def test():
data/raw/repos\research\cognitive_planning,train_supervised_active_vision.py,def train():
data/raw/repos\research\cognitive_planning,train_supervised_active_vision.py,def main(_):
data/raw/repos\research\cognitive_planning,visualization_utils.py,"def save_image_array_as_png(image, output_path):"
data/raw/repos\research\cognitive_planning,visualization_utils.py,def encode_image_array_as_png_str(image):
data/raw/repos\research\cognitive_planning,visualization_utils.py,"def _visualize_boxes(image, boxes, classes, scores, category_index, **kwargs):"
data/raw/repos\research\cognitive_planning,visualization_utils.py,def draw_boxes(image_and_detections):
data/raw/repos\research\cognitive_planning,visualization_utils.py,"def draw_mask_on_image_array(image, mask, color='red', alpha=0.4):"
data/raw/repos\research\cognitive_planning,visualization_utils.py,"def add_cdf_image_summary(values, name):"
data/raw/repos\research\cognitive_planning,visualization_utils.py,def cdf_plot(values):
data/raw/repos\research\cognitive_planning,visualization_utils.py,"def add_hist_image_summary(values, bins, name):"
data/raw/repos\research\cognitive_planning,visualization_utils.py,"def hist_plot(values, bins):"
data/raw/repos\research\cognitive_planning,viz_active_vision_dataset_main.py,"def benchmark(env, targets):"
data/raw/repos\research\cognitive_planning,viz_active_vision_dataset_main.py,"def human(env, targets):"
data/raw/repos\research\cognitive_planning,viz_active_vision_dataset_main.py,def visualize_random_step_sequence(env):
data/raw/repos\research\cognitive_planning,viz_active_vision_dataset_main.py,"def visualize(env, input_folder, output_root_folder):"
data/raw/repos\research\cognitive_planning,viz_active_vision_dataset_main.py,def which_env(file_name):
data/raw/repos\research\cognitive_planning,viz_active_vision_dataset_main.py,def which_goal(file_name):
data/raw/repos\research\cognitive_planning,viz_active_vision_dataset_main.py,"def evaluate_folder(env, folder_path):"
data/raw/repos\research\cognitive_planning,viz_active_vision_dataset_main.py,def compute_acc(npy_file):
data/raw/repos\research\cognitive_planning,viz_active_vision_dataset_main.py,def evaluate_iteration(folder):
data/raw/repos\research\cognitive_planning,viz_active_vision_dataset_main.py,def main(_):
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,def _init_category_index(label_map_path):
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def _draw_detections(image_np, detections, category_index):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def _get_detection_path(root, detection_folder_name, world):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def _get_image_folder(root, world):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def _get_json_path(root, world):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def _get_image_path(root, world, image_id):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def _get_image_list(path, worlds):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def read_all_poses(dataset_root, world):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,def get_spec_dtype_map():
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,def actions(self):
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def _next_image(self, image_id, action):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def _largest_detection_for_image(self, image_id, detections_dict):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,def _compute_goal_indexes(self):
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def to_image_id(self, vid):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def to_vertex(self, image_id):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def observation(self, view_pose):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def _step_no_reward(self, action):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,def graph(self):
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,def state(self):
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def gt_value(self, goal, v):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,def _update_graph(self):
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def reset_for_eval(self, new_world, new_goal, new_image_id):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def get_init_config(self, path):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,def cur_vertex(self):
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,def cur_image_id(self):
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def path_to_goal(self, image_id=None):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,def targets(self):
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def vertex_to_pose(self, v):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def pose_to_vertex(self, pose):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def check_scene_graph(self, world, goal):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,def goal_one_hot(self):
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,def goal_index(self):
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,def goal_string(self):
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,def worlds(self):
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,def possible_targets(self):
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def action(self, from_pose, to_pose):"
data/raw/repos\research\cognitive_planning\envs,active_vision_dataset_env.py,"def random_step_sequence(self, min_len=None, max_len=None):"
data/raw/repos\research\cognitive_planning\envs,task_env.py,"def __lt__(self, other):"
data/raw/repos\research\cognitive_planning\envs,task_env.py,"def random_step_sequence(self, min_len=None, max_len=None):"
data/raw/repos\research\cognitive_planning\envs,task_env.py,def targets(self):
data/raw/repos\research\cognitive_planning\envs,task_env.py,def state(self):
data/raw/repos\research\cognitive_planning\envs,task_env.py,def graph(self):
data/raw/repos\research\cognitive_planning\envs,task_env.py,"def vertex_to_pose(self, vertex_index):"
data/raw/repos\research\cognitive_planning\envs,task_env.py,"def pose_to_vertex(self, pose):"
data/raw/repos\research\cognitive_planning\envs,task_env.py,"def observation(self, state):"
data/raw/repos\research\cognitive_planning\envs,task_env.py,"def action(self, init_state, final_state):"
data/raw/repos\research\cognitive_planning\envs,task_env.py,"def __init__(self, task=None):"
data/raw/repos\research\cognitive_planning\envs,task_env.py,"def set_task(self, task):"
data/raw/repos\research\cognitive_planning\envs,task_env.py,"def _step_no_reward(self, action):"
data/raw/repos\research\cognitive_planning\envs,task_env.py,def _reset_env(self):
data/raw/repos\research\cognitive_planning\envs,task_env.py,"def step(self, action):"
data/raw/repos\research\cognitive_planning\envs,task_env.py,def reset(self):
data/raw/repos\research\cognitive_planning\envs,util.py,"def trajectory_to_deltas(trajectory, state):"
data/raw/repos\research\cognitive_planning\preprocessing,inception_preprocessing.py,"def apply_with_random_selector(x, func, num_cases):"
data/raw/repos\research\cognitive_planning\preprocessing,inception_preprocessing.py,"def distort_color(image, color_ordering=0, fast_mode=True, scope=None):"
data/raw/repos\research\cognitive_planning\preprocessing,lenet_preprocessing.py,"def preprocess_image(image, output_height, output_width, is_training):"
data/raw/repos\research\cognitive_planning\preprocessing,preprocessing_factory.py,"def get_preprocessing(name, is_training=False):"
data/raw/repos\research\cognitive_planning\preprocessing,preprocessing_factory.py,"def preprocessing_fn(image, output_height, output_width, **kwargs):"
data/raw/repos\research\cognitive_planning\preprocessing,vgg_preprocessing.py,"def _crop(image, offset_height, offset_width, crop_height, crop_width):"
data/raw/repos\research\cognitive_planning\preprocessing,vgg_preprocessing.py,"def _random_crop(image_list, crop_height, crop_width):"
data/raw/repos\research\cognitive_planning\preprocessing,vgg_preprocessing.py,"def _central_crop(image_list, crop_height, crop_width):"
data/raw/repos\research\cognitive_planning\preprocessing,vgg_preprocessing.py,"def _mean_image_subtraction(image, means):"
data/raw/repos\research\cognitive_planning\preprocessing,vgg_preprocessing.py,"def _smallest_size_at_least(height, width, smallest_side):"
data/raw/repos\research\cognitive_planning\preprocessing,vgg_preprocessing.py,"def _aspect_preserving_resize(image, smallest_side):"
data/raw/repos\research\cognitive_planning\preprocessing,vgg_preprocessing.py,"def preprocess_for_eval(image, output_height, output_width, resize_side):"
data/raw/repos\research\cvt_text,cvt.py,def main():
data/raw/repos\research\cvt_text,preprocessing.py,def main(data_dir='./data'):
data/raw/repos\research\cvt_text,preprocessing.py,"def write_sentences(fname, sentences):"
data/raw/repos\research\cvt_text\base,configure.py,"def __init__(self, **kwargs):"
data/raw/repos\research\cvt_text\base,configure.py,def write(self):
data/raw/repos\research\cvt_text\base,embeddings.py,"def __getitem__(self, w):"
data/raw/repos\research\cvt_text\base,embeddings.py,def get_char_vocab():
data/raw/repos\research\cvt_text\base,embeddings.py,def get_inv_char_vocab():
data/raw/repos\research\cvt_text\base,embeddings.py,def get_word_vocab(config):
data/raw/repos\research\cvt_text\base,embeddings.py,def get_word_embeddings(config):
data/raw/repos\research\cvt_text\base,embeddings.py,def _punctuation_ids(vocab_path):
data/raw/repos\research\cvt_text\base,embeddings.py,def get_punctuation_ids(config):
data/raw/repos\research\cvt_text\base,embeddings.py,"def __init__(self, config):"
data/raw/repos\research\cvt_text\base,embeddings.py,"def _add_vector(self, w):"
data/raw/repos\research\cvt_text\base,embeddings.py,def build(self):
data/raw/repos\research\cvt_text\base,embeddings.py,def _write(self):
data/raw/repos\research\cvt_text\base,embeddings.py,def normalize_chars(w):
data/raw/repos\research\cvt_text\base,embeddings.py,def normalize_word(w):
data/raw/repos\research\cvt_text\base,utils.py,"def __init__(self, f):"
data/raw/repos\research\cvt_text\base,utils.py,"def __call__(self, *args):"
data/raw/repos\research\cvt_text\base,utils.py,"def load_cpickle(path, memoized=True):"
data/raw/repos\research\cvt_text\base,utils.py,def _load_cpickle(path):
data/raw/repos\research\cvt_text\base,utils.py,def _load_cpickle_memoize(path):
data/raw/repos\research\cvt_text\base,utils.py,"def write_cpickle(o, path):"
data/raw/repos\research\cvt_text\base,utils.py,def log(*args):
data/raw/repos\research\cvt_text\base,utils.py,def heading(*args):
data/raw/repos\research\cvt_text\corpus_processing,example.py,"def __init__(self, words, word_vocab, char_vocab):"
data/raw/repos\research\cvt_text\corpus_processing,example.py,"def __repr__(self,):"
data/raw/repos\research\cvt_text\corpus_processing,minibatching.py,"def get_bucket(config, l):"
data/raw/repos\research\cvt_text\corpus_processing,minibatching.py,"def build_array(nested_lists, dtype='int32'):"
data/raw/repos\research\cvt_text\corpus_processing,minibatching.py,"def _get_sizes(nested_lists, depth_to_sizes, depth=0):"
data/raw/repos\research\cvt_text\corpus_processing,minibatching.py,"def _fill_array(nested_lists, arr, copy_depth, depth=0):"
data/raw/repos\research\cvt_text\corpus_processing,minibatching.py,"def __init__(self, config, examples, task_name='unlabeled', is_training=False):"
data/raw/repos\research\cvt_text\corpus_processing,minibatching.py,"def get_minibatches(self, minibatch_size):"
data/raw/repos\research\cvt_text\corpus_processing,minibatching.py,"def endless_minibatches(self, minibatch_size):"
data/raw/repos\research\cvt_text\corpus_processing,minibatching.py,"def _make_minibatch(self, ids):"
data/raw/repos\research\cvt_text\corpus_processing,scorer.py,def __init__(self):
data/raw/repos\research\cvt_text\corpus_processing,scorer.py,"def update(self, examples, predictions, loss):"
data/raw/repos\research\cvt_text\corpus_processing,scorer.py,def get_loss(self):
data/raw/repos\research\cvt_text\corpus_processing,scorer.py,def _get_results(self):
data/raw/repos\research\cvt_text\corpus_processing,scorer.py,"def get_results(self, prefix=""""):"
data/raw/repos\research\cvt_text\corpus_processing,scorer.py,def results_str(self):
data/raw/repos\research\cvt_text\corpus_processing,unlabeled_data.py,"def __init__(self, config, starting_file=0, starting_line=0, one_pass=False):"
data/raw/repos\research\cvt_text\corpus_processing,unlabeled_data.py,def endless_minibatches(self):
data/raw/repos\research\cvt_text\corpus_processing,unlabeled_data.py,"def _make_examples(self, sentences):"
data/raw/repos\research\cvt_text\corpus_processing,unlabeled_data.py,def get_unlabeled_examples(self):
data/raw/repos\research\cvt_text\corpus_processing,unlabeled_data.py,def get_unlabeled_sentences(self):
data/raw/repos\research\cvt_text\model,encoder.py,"def __init__(self, config, inputs, pretrained_embeddings):"
data/raw/repos\research\cvt_text\model,encoder.py,"def _get_word_reprs(self, pretrained_embeddings):"
data/raw/repos\research\cvt_text\model,encoder.py,"def _get_unidirectional_reprs(self, word_reprs):"
data/raw/repos\research\cvt_text\model,encoder.py,"def _get_bidirectional_reprs(self, uni_reprs):"
data/raw/repos\research\cvt_text\model,model_helpers.py,"def project(input_layers, size, name='projection'):"
data/raw/repos\research\cvt_text\model,model_helpers.py,"def lstm_cell(cell_size, keep_prob, num_proj):"
data/raw/repos\research\cvt_text\model,model_helpers.py,"def multi_lstm_cell(cell_sizes, keep_prob, num_proj):"
data/raw/repos\research\cvt_text\model,model_helpers.py,"def masked_ce_loss(logits, labels, mask, sparse=False, roll_direction=0):"
data/raw/repos\research\cvt_text\model,model_helpers.py,"def _roll(arr, direction, sparse=False):"
data/raw/repos\research\cvt_text\model,multitask_model.py,"def __init__(self, config, inputs, pretrained_embeddings, tasks):"
data/raw/repos\research\cvt_text\model,multitask_model.py,"def __init__(self, config, pretrained_embeddings, tasks):"
data/raw/repos\research\cvt_text\model,multitask_model.py,"def ema_getter(getter, name, *args, **kwargs):"
data/raw/repos\research\cvt_text\model,multitask_model.py,"def _get_consistency_loss(self, tasks):"
data/raw/repos\research\cvt_text\model,multitask_model.py,def _get_optimizer(self):
data/raw/repos\research\cvt_text\model,multitask_model.py,"def _get_train_op(self, loss):"
data/raw/repos\research\cvt_text\model,multitask_model.py,"def _create_feed_dict(self, mb, model, is_training=True):"
data/raw/repos\research\cvt_text\model,multitask_model.py,"def train_unlabeled(self, sess, mb):"
data/raw/repos\research\cvt_text\model,multitask_model.py,"def train_labeled(self, sess, mb):"
data/raw/repos\research\cvt_text\model,multitask_model.py,"def run_teacher(self, sess, mb):"
data/raw/repos\research\cvt_text\model,multitask_model.py,"def test(self, sess, mb):"
data/raw/repos\research\cvt_text\model,multitask_model.py,"def get_global_step(self, sess):"
data/raw/repos\research\cvt_text\model,shared_inputs.py,"def __init__(self, config):"
data/raw/repos\research\cvt_text\model,shared_inputs.py,"def create_feed_dict(self, mb, is_training):"
data/raw/repos\research\cvt_text\model,task_module.py,def __init__(self):
data/raw/repos\research\cvt_text\model,task_module.py,"def update_feed_dict(self, feed, mb):"
data/raw/repos\research\cvt_text\model,task_module.py,def __init__(self):
data/raw/repos\research\cvt_text\task_specific,task_definitions.py,"def __init__(self, config, name, loader):"
data/raw/repos\research\cvt_text\task_specific,task_definitions.py,"def get_module(self, inputs, encoder):"
data/raw/repos\research\cvt_text\task_specific,task_definitions.py,def get_scorer(self):
data/raw/repos\research\cvt_text\task_specific,task_definitions.py,"def __init__(self, config, name, is_token_level=True):"
data/raw/repos\research\cvt_text\task_specific,task_definitions.py,"def get_module(self, inputs, encoder):"
data/raw/repos\research\cvt_text\task_specific,task_definitions.py,def get_scorer(self):
data/raw/repos\research\cvt_text\task_specific,task_definitions.py,"def __init__(self, config, name):"
data/raw/repos\research\cvt_text\task_specific,task_definitions.py,"def get_module(self, inputs, encoder):"
data/raw/repos\research\cvt_text\task_specific,task_definitions.py,def get_scorer(self):
data/raw/repos\research\cvt_text\task_specific,task_definitions.py,"def get_task(config, name):"
data/raw/repos\research\cvt_text\task_specific\word_level,depparse_module.py,"def __init__(self, config, task_name, n_classes, inputs, encoder):"
data/raw/repos\research\cvt_text\task_specific\word_level,depparse_module.py,"def __init__(self, name, dep_reprs, head_reprs, roll_direction=0):"
data/raw/repos\research\cvt_text\task_specific\word_level,depparse_module.py,"def update_feed_dict(self, feed, mb):"
data/raw/repos\research\cvt_text\task_specific\word_level,depparse_scorer.py,"def __init__(self, n_relations, punctuation):"
data/raw/repos\research\cvt_text\task_specific\word_level,depparse_scorer.py,def _get_results(self):
data/raw/repos\research\cvt_text\task_specific\word_level,tagging_module.py,"def __init__(self, name, input_reprs, roll_direction=0, activate=True):"
data/raw/repos\research\cvt_text\task_specific\word_level,tagging_module.py,"def update_feed_dict(self, feed, mb):"
data/raw/repos\research\cvt_text\task_specific\word_level,tagging_scorers.py,"def __init__(self, auto_fail_label=None):"
data/raw/repos\research\cvt_text\task_specific\word_level,tagging_scorers.py,def _get_results(self):
data/raw/repos\research\cvt_text\task_specific\word_level,tagging_scorers.py,def __init__(self):
data/raw/repos\research\cvt_text\task_specific\word_level,tagging_scorers.py,def _get_results(self):
data/raw/repos\research\cvt_text\task_specific\word_level,tagging_scorers.py,"def __init__(self, label_mapping):"
data/raw/repos\research\cvt_text\task_specific\word_level,tagging_scorers.py,def _get_results(self):
data/raw/repos\research\cvt_text\task_specific\word_level,tagging_utils.py,"def get_span_labels(sentence_tags, inv_label_mapping=None):"
data/raw/repos\research\cvt_text\task_specific\word_level,tagging_utils.py,"def get_tags(span_labels, length, encoding):"
data/raw/repos\research\cvt_text\task_specific\word_level,word_level_data.py,"def __init__(self, config, name, is_token_level):"
data/raw/repos\research\cvt_text\task_specific\word_level,word_level_data.py,"def get_dataset(self, split):"
data/raw/repos\research\cvt_text\task_specific\word_level,word_level_data.py,"def get_labeled_sentences(self, split):"
data/raw/repos\research\cvt_text\task_specific\word_level,word_level_data.py,def label_mapping(self):
data/raw/repos\research\cvt_text\task_specific\word_level,word_level_data.py,"def _get_examples(self, split):"
data/raw/repos\research\cvt_text\task_specific\word_level,word_level_scorer.py,def __init__(self):
data/raw/repos\research\cvt_text\task_specific\word_level,word_level_scorer.py,"def update(self, examples, predictions, loss):"
data/raw/repos\research\cvt_text\task_specific\word_level,word_level_scorer.py,def get_loss(self):
data/raw/repos\research\cvt_text\training,trainer.py,"def __init__(self, config):"
data/raw/repos\research\cvt_text\training,trainer.py,"def train(self, sess, progress, summary_writer):"
data/raw/repos\research\cvt_text\training,trainer.py,"def evaluate_all_tasks(self, sess, summary_writer, history, train_set=False):"
data/raw/repos\research\cvt_text\training,trainer.py,"def _evaluate_task(self, sess, task, summary_writer, train_set):"
data/raw/repos\research\cvt_text\training,trainer.py,"def _get_training_mbs(self, unlabeled_data_reader):"
data/raw/repos\research\cvt_text\training,trainer.py,"def write_summary(writer, results, global_step):"
data/raw/repos\research\cvt_text\training,training_progress.py,"def write(self, sess, global_step):"
data/raw/repos\research\cvt_text\training,training_progress.py,"def save_if_best_dev_model(self, sess, global_step):"
data/raw/repos\research\deeplab,common.py,"def __deepcopy__(self, memo):"
data/raw/repos\research\deeplab,common_test.py,def testOutputsToNumClasses(self):
data/raw/repos\research\deeplab,common_test.py,def testDeepcopy(self):
data/raw/repos\research\deeplab,convert_to_tflite.py,"def check_tflite_consistency(graph_def, tflite_model, image_path):"
data/raw/repos\research\deeplab,convert_to_tflite.py,def main(unused_argv):
data/raw/repos\research\deeplab,eval.py,def main(unused_argv):
data/raw/repos\research\deeplab,export_model.py,def _create_input_tensors():
data/raw/repos\research\deeplab,export_model.py,def main(unused_argv):
data/raw/repos\research\deeplab,export_model.py,"def _resize_label(label, label_size):"
data/raw/repos\research\deeplab,model.py,def get_extra_layer_scopes(last_layers_contain_logits_only=False):
data/raw/repos\research\deeplab,model.py,"def predict_labels(images, model_options, image_pyramid=None):"
data/raw/repos\research\deeplab,model_test.py,def testWrongDeepLabVariant(self):
data/raw/repos\research\deeplab,model_test.py,def testBuildDeepLabv2(self):
data/raw/repos\research\deeplab,model_test.py,def testForwardpassDeepLabv3plus(self):
data/raw/repos\research\deeplab,model_test.py,def testBuildDeepLabWithDensePredictionCell(self):
data/raw/repos\research\deeplab,train.py,"def _build_deeplab(iterator, outputs_to_num_classes, ignore_label):"
data/raw/repos\research\deeplab,train.py,def main(unused_argv):
data/raw/repos\research\deeplab,vis.py,"def _convert_train_id_to_eval_id(prediction, train_id_to_eval_id):"
data/raw/repos\research\deeplab,vis.py,def main(unused_argv):
data/raw/repos\research\deeplab\core,conv2d_ws.py,"def call(self, inputs):"
data/raw/repos\research\deeplab\core,conv2d_ws.py,"def conv2d_same(inputs, num_outputs, kernel_size, stride, rate=1, scope=None):"
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testInvalidShape(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testInvalidDataFormat(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testCreateConv(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testCreateConvWithWS(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testCreateConvNCHW(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testCreateSquareConv(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testCreateConvWithTensorShape(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testCreateFullyConv(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testFullyConvWithCustomGetter(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,"def custom_getter(getter, *args, **kwargs):"
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testCreateVerticalConv(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testCreateHorizontalConv(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testCreateConvWithStride(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testCreateConvCreatesWeightsAndBiasesVars(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testCreateConvWithScope(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testCreateConvWithCollection(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testCreateConvWithoutActivation(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testCreateConvValid(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testCreateConvWithWD(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testCreateConvNoRegularizers(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testReuseVars(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testNonReuseVars(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testReuseConvWithWD(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testConvWithBatchNorm(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testReuseConvWithBatchNorm(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testCreateConvCreatesWeightsAndBiasesVarsWithRateTwo(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testOutputSizeWithRateTwoSamePadding(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testOutputSizeWithRateTwoValidPadding(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testOutputSizeWithRateTwoThreeValidPadding(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testDynamicOutputSizeWithRateOneValidPadding(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testDynamicOutputSizeWithRateOneValidPaddingNCHW(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testDynamicOutputSizeWithRateTwoValidPadding(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testWithScope(self):
data/raw/repos\research\deeplab\core,conv2d_ws_test.py,def testWithScopeWithoutActivation(self):
data/raw/repos\research\deeplab\core,dense_prediction_cell.py,def dense_prediction_cell_hparams():
data/raw/repos\research\deeplab\core,dense_prediction_cell.py,"def __init__(self, config, hparams=None):"
data/raw/repos\research\deeplab\core,dense_prediction_cell_test.py,def setUp(self):
data/raw/repos\research\deeplab\core,dense_prediction_cell_test.py,def testPyramidPoolingArguments(self):
data/raw/repos\research\deeplab\core,dense_prediction_cell_test.py,def testPyramidPoolingArgumentsWithImageGrid1x1(self):
data/raw/repos\research\deeplab\core,dense_prediction_cell_test.py,def testParseOperationStringWithConv1x1(self):
data/raw/repos\research\deeplab\core,dense_prediction_cell_test.py,def testParseOperationStringWithConv3x3(self):
data/raw/repos\research\deeplab\core,dense_prediction_cell_test.py,def testParseOperationStringWithPyramidPooling2x2(self):
data/raw/repos\research\deeplab\core,dense_prediction_cell_test.py,def testBuildCell(self):
data/raw/repos\research\deeplab\core,dense_prediction_cell_test.py,def testBuildCellWithImagePoolingCropSize(self):
data/raw/repos\research\deeplab\core,feature_extractor.py,"def _preprocess_subtract_imagenet_mean(inputs, dtype=tf.float32):"
data/raw/repos\research\deeplab\core,feature_extractor.py,"def _preprocess_zero_mean_unit_range(inputs, dtype=tf.float32):"
data/raw/repos\research\deeplab\core,feature_extractor.py,def mean_pixel(model_variant=None):
data/raw/repos\research\deeplab\core,feature_extractor.py,"def _identity_function(inputs, dtype=preprocessed_images_dtype):"
data/raw/repos\research\deeplab\core,feature_extractor.py,"def network_fn(inputs, *args, **kwargs):"
data/raw/repos\research\deeplab\core,nas_cell.py,"def __call__(self, net, scope, filter_scaling, stride, prev_layer, cell_num):"
data/raw/repos\research\deeplab\core,nas_cell.py,"def _cell_base(self, net, prev_layer):"
data/raw/repos\research\deeplab\core,nas_cell.py,"def _combine_unused_states(self, net):"
data/raw/repos\research\deeplab\core,nas_cell.py,"def _apply_drop_path(self, net):"
data/raw/repos\research\deeplab\core,nas_network.py,"def add_and_check_endpoint(endpoint_name, net):"
data/raw/repos\research\deeplab\core,nas_network_test.py,"def create_test_input(batch, height, width, channels):"
data/raw/repos\research\deeplab\core,nas_network_test.py,def testFullyConvolutionalEndpointShapes(self):
data/raw/repos\research\deeplab\core,preprocess_utils.py,"def flip_dim(tensor_list, prob=0.5, dim=1):"
data/raw/repos\research\deeplab\core,preprocess_utils.py,def flip():
data/raw/repos\research\deeplab\core,preprocess_utils.py,"def _image_dimensions(image, rank):"
data/raw/repos\research\deeplab\core,preprocess_utils.py,def get_label_resize_method(label):
data/raw/repos\research\deeplab\core,preprocess_utils.py,"def _crop(image, offset_height, offset_width, crop_height, crop_width):"
data/raw/repos\research\deeplab\core,preprocess_utils.py,"def random_crop(image_list, crop_height, crop_width):"
data/raw/repos\research\deeplab\core,preprocess_utils.py,"def get_random_scale(min_scale_factor, max_scale_factor, step_size):"
data/raw/repos\research\deeplab\core,preprocess_utils.py,"def randomly_scale_image_and_label(image, label=None, scale=1.0):"
data/raw/repos\research\deeplab\core,preprocess_utils.py,"def resolve_shape(tensor, rank=None, scope=None):"
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testNoFlipWhenProbIsZero(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testFlipWhenProbIsOne(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testFlipMultipleImagesConsistentlyWhenProbIsOne(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testReturnRandomFlipsOnMultipleEvals(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testReturnCorrectCropOfSingleImage(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testRandomCropMaintainsNumberOfChannels(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testReturnDifferentCropAreasOnTwoEvals(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testReturnConsistenCropsOfImagesInTheList(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testDieOnRandomCropWhenImagesWithDifferentWidth(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testDieOnRandomCropWhenImagesWithDifferentHeight(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testDieOnRandomCropWhenCropSizeIsGreaterThanImage(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testReturnPaddedImageWithNonZeroPadValue(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testReturnOriginalImageWhenTargetSizeIsEqualToImageSize(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testDieOnTargetSizeGreaterThanImageSize(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testDieIfTargetSizeNotPossibleWithGivenOffset(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testDieIfImageTensorRankIsTwo(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testResizeTensorsToRange(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testResizeTensorsToRangeWithFactor(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testResizeTensorsToRangeWithFactorAndLabelShapeCHW(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testResizeTensorsToRangeWithSimilarMinMaxSizes(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testResizeTensorsToRangeWithEqualMaxSize(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testResizeTensorsToRangeWithPotentialErrorInTFCeil(self):
data/raw/repos\research\deeplab\core,preprocess_utils_test.py,def testResizeTensorsToRangeWithEqualMaxSizeWithoutAspectRatio(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta.py,"def root_block_fn_for_beta_variant(net, depth_multiplier=1.0):"
data/raw/repos\research\deeplab\core,resnet_v1_beta.py,"def resnet_v1_beta_block(scope, base_depth, num_units, stride):"
data/raw/repos\research\deeplab\core,resnet_v1_beta.py,"def resnet_v1_small_beta_block(scope, base_depth, num_units, stride):"
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,"def create_test_input(batch, height, width, channels):"
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testClassificationEndPointsWithLiteBottleneck(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testClassificationEndPointsWithMultigridAndLiteBottleneck(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testClassificationShapesWithLiteBottleneck(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testFullyConvolutionalEndpointShapesWithLiteBottleneck(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testAtrousFullyConvolutionalEndpointShapesWithLiteBottleneck(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testAtrousFullyConvolutionalValuesWithLiteBottleneck(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testUnknownBatchSizeWithLiteBottleneck(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testFullyConvolutionalUnknownHeightWidthWithLiteBottleneck(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testAtrousFullyConvolutionalUnknownHeightWidthWithLiteBottleneck(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testClassificationEndPoints(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testClassificationEndPointsWithWS(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testClassificationEndPointsWithGN(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testInvalidGroupsWithGN(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testClassificationEndPointsWithGNWS(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testClassificationEndPointsWithMultigrid(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testClassificationShapes(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testFullyConvolutionalEndpointShapes(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testAtrousFullyConvolutionalEndpointShapes(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testAtrousFullyConvolutionalValues(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testUnknownBatchSize(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testFullyConvolutionalUnknownHeightWidth(self):
data/raw/repos\research\deeplab\core,resnet_v1_beta_test.py,def testAtrousFullyConvolutionalUnknownHeightWidth(self):
data/raw/repos\research\deeplab\core,utils.py,"def resize_bilinear(images, size, output_dtype=tf.float32):"
data/raw/repos\research\deeplab\core,utils.py,"def scale_dimension(dim, scale):"
data/raw/repos\research\deeplab\core,utils.py,"def get_label_weight_mask(labels, ignore_label, num_classes, label_weights=1.0):"
data/raw/repos\research\deeplab\core,utils.py,def get_batch_norm_fn(sync_batch_norm_method):
data/raw/repos\research\deeplab\core,utils_test.py,def testScaleDimensionOutput(self):
data/raw/repos\research\deeplab\core,utils_test.py,def testGetLabelWeightMask_withFloatLabelWeights(self):
data/raw/repos\research\deeplab\core,utils_test.py,def testGetLabelWeightMask_withListLabelWeights(self):
data/raw/repos\research\deeplab\core,utils_test.py,def testGetLabelWeightMask_withInvalidLabelWeightsType(self):
data/raw/repos\research\deeplab\core,utils_test.py,def testGetLabelWeightMask_withInvalidLabelWeightsLength(self):
data/raw/repos\research\deeplab\core,xception.py,"def fixed_padding(inputs, kernel_size, rate=1):"
data/raw/repos\research\deeplab\core,xception.py,def _separable_conv2d(padding):
data/raw/repos\research\deeplab\core,xception.py,def _split_separable_conv2d(padding):
data/raw/repos\research\deeplab\core,xception_test.py,"def create_test_input(batch, height, width, channels):"
data/raw/repos\research\deeplab\core,xception_test.py,def testSeparableConv2DSameWithInputEvenSize(self):
data/raw/repos\research\deeplab\core,xception_test.py,def testSeparableConv2DSameWithInputOddSize(self):
data/raw/repos\research\deeplab\core,xception_test.py,def testClassificationEndPoints(self):
data/raw/repos\research\deeplab\core,xception_test.py,def testEndpointNames(self):
data/raw/repos\research\deeplab\core,xception_test.py,def testClassificationShapes(self):
data/raw/repos\research\deeplab\core,xception_test.py,def testFullyConvolutionalEndpointShapes(self):
data/raw/repos\research\deeplab\core,xception_test.py,def testAtrousFullyConvolutionalEndpointShapes(self):
data/raw/repos\research\deeplab\core,xception_test.py,def testAtrousFullyConvolutionalValues(self):
data/raw/repos\research\deeplab\core,xception_test.py,def testUnknownBatchSize(self):
data/raw/repos\research\deeplab\core,xception_test.py,def testFullyConvolutionalUnknownHeightWidth(self):
data/raw/repos\research\deeplab\core,xception_test.py,def testAtrousFullyConvolutionalUnknownHeightWidth(self):
data/raw/repos\research\deeplab\core,xception_test.py,def testEndpointsReuse(self):
data/raw/repos\research\deeplab\core,xception_test.py,def testUseBoundedAcitvation(self):
data/raw/repos\research\deeplab\datasets,build_ade20k_data.py,"def _convert_dataset(dataset_split, dataset_dir, dataset_label_dir):"
data/raw/repos\research\deeplab\datasets,build_ade20k_data.py,def main(unused_argv):
data/raw/repos\research\deeplab\datasets,build_cityscapes_data.py,"def _get_files(data, dataset_split):"
data/raw/repos\research\deeplab\datasets,build_cityscapes_data.py,def _convert_dataset(dataset_split):
data/raw/repos\research\deeplab\datasets,build_cityscapes_data.py,def main(unused_argv):
data/raw/repos\research\deeplab\datasets,build_data.py,"def __init__(self, image_format='jpeg', channels=3):"
data/raw/repos\research\deeplab\datasets,build_data.py,"def read_image_dims(self, image_data):"
data/raw/repos\research\deeplab\datasets,build_data.py,"def decode_image(self, image_data):"
data/raw/repos\research\deeplab\datasets,build_data.py,def _int64_list_feature(values):
data/raw/repos\research\deeplab\datasets,build_data.py,def _bytes_list_feature(values):
data/raw/repos\research\deeplab\datasets,build_data.py,def norm2bytes(value):
data/raw/repos\research\deeplab\datasets,build_data.py,"def image_seg_to_tfexample(image_data, filename, height, width, seg_data):"
data/raw/repos\research\deeplab\datasets,build_voc2012_data.py,def _convert_dataset(dataset_split):
data/raw/repos\research\deeplab\datasets,build_voc2012_data.py,def main(unused_argv):
data/raw/repos\research\deeplab\datasets,data_generator.py,def get_cityscapes_dataset_name():
data/raw/repos\research\deeplab\datasets,data_generator.py,"def _parse_function(self, example_proto):"
data/raw/repos\research\deeplab\datasets,data_generator.py,"def _decode_image(content, channels):"
data/raw/repos\research\deeplab\datasets,data_generator.py,"def _preprocess_image(self, sample):"
data/raw/repos\research\deeplab\datasets,data_generator.py,def get_one_shot_iterator(self):
data/raw/repos\research\deeplab\datasets,data_generator.py,def _get_all_files(self):
data/raw/repos\research\deeplab\datasets,data_generator_test.py,def testPascalVocSegTestData(self):
data/raw/repos\research\deeplab\datasets,data_generator_test.py,def _get_attributes_of_image(index):
data/raw/repos\research\deeplab\datasets,remove_gt_colormap.py,def _remove_colormap(filename):
data/raw/repos\research\deeplab\datasets,remove_gt_colormap.py,"def _save_annotation(annotation, filename):"
data/raw/repos\research\deeplab\datasets,remove_gt_colormap.py,def main(unused_argv):
data/raw/repos\research\deeplab\deprecated,segmentation_dataset.py,def get_cityscapes_dataset_name():
data/raw/repos\research\deeplab\deprecated,segmentation_dataset.py,"def get_dataset(dataset_name, split_name, dataset_dir):"
data/raw/repos\research\deeplab\evaluation,base_metric.py,"def realdiv_maybe_zero(x, y):"
data/raw/repos\research\deeplab\evaluation,base_metric.py,"def _naively_combine_labels(self, category_array, instance_array):"
data/raw/repos\research\deeplab\evaluation,base_metric.py,def result(self):
data/raw/repos\research\deeplab\evaluation,base_metric.py,"def detailed_results(self, is_thing=None):"
data/raw/repos\research\deeplab\evaluation,base_metric.py,def result_per_category(self):
data/raw/repos\research\deeplab\evaluation,base_metric.py,"def print_detailed_results(self, is_thing=None, print_digits=3):"
data/raw/repos\research\deeplab\evaluation,base_metric.py,"def merge(self, other_instance):"
data/raw/repos\research\deeplab\evaluation,base_metric.py,def reset(self):
data/raw/repos\research\deeplab\evaluation,eval_coco_format.py,"def _matched_annotations(gt_json, pred_json):"
data/raw/repos\research\deeplab\evaluation,eval_coco_format.py,def _open_panoptic_id_image(image_path):
data/raw/repos\research\deeplab\evaluation,eval_coco_format.py,"def _split_panoptic(ann_json, id_array, ignored_label, allow_crowds):"
data/raw/repos\research\deeplab\evaluation,eval_coco_format.py,def _iterate_work_queue(work_queue):
data/raw/repos\research\deeplab\evaluation,eval_coco_format.py,"def _is_thing_array(categories_json, ignored_label):"
data/raw/repos\research\deeplab\evaluation,eval_coco_format.py,def main(argv):
data/raw/repos\research\deeplab\evaluation,eval_coco_format_test.py,def test_compare_pq_with_reference_eval(self):
data/raw/repos\research\deeplab\evaluation,eval_coco_format_test.py,def test_compare_pc_with_golden_value(self):
data/raw/repos\research\deeplab\evaluation,eval_coco_format_test.py,def test_compare_pc_with_golden_value_normalize_by_size(self):
data/raw/repos\research\deeplab\evaluation,eval_coco_format_test.py,def test_pc_with_multiple_workers(self):
data/raw/repos\research\deeplab\evaluation,panoptic_quality.py,def _ids_to_counts(id_array):
data/raw/repos\research\deeplab\evaluation,panoptic_quality.py,def prediction_void_overlap(pred_segment_id):
data/raw/repos\research\deeplab\evaluation,panoptic_quality.py,def prediction_ignored_overlap(pred_segment_id):
data/raw/repos\research\deeplab\evaluation,panoptic_quality.py,def _valid_categories(self):
data/raw/repos\research\deeplab\evaluation,panoptic_quality.py,"def detailed_results(self, is_thing=None):"
data/raw/repos\research\deeplab\evaluation,panoptic_quality.py,def result_per_category(self):
data/raw/repos\research\deeplab\evaluation,panoptic_quality.py,"def print_detailed_results(self, is_thing=None, print_digits=3):"
data/raw/repos\research\deeplab\evaluation,panoptic_quality.py,def result(self):
data/raw/repos\research\deeplab\evaluation,panoptic_quality.py,"def merge(self, other_instance):"
data/raw/repos\research\deeplab\evaluation,panoptic_quality.py,def reset(self):
data/raw/repos\research\deeplab\evaluation,panoptic_quality_test.py,def test_perfect_match(self):
data/raw/repos\research\deeplab\evaluation,panoptic_quality_test.py,def test_totally_wrong(self):
data/raw/repos\research\deeplab\evaluation,panoptic_quality_test.py,def test_matches_by_iou(self):
data/raw/repos\research\deeplab\evaluation,panoptic_quality_test.py,def test_wrong_instances(self):
data/raw/repos\research\deeplab\evaluation,panoptic_quality_test.py,def test_instance_order_is_arbitrary(self):
data/raw/repos\research\deeplab\evaluation,panoptic_quality_test.py,def test_matches_expected(self):
data/raw/repos\research\deeplab\evaluation,panoptic_quality_test.py,def test_merge_accumulates_all_across_instances(self):
data/raw/repos\research\deeplab\evaluation,parsing_covering.py,def result_per_category(self):
data/raw/repos\research\deeplab\evaluation,parsing_covering.py,def _valid_categories(self):
data/raw/repos\research\deeplab\evaluation,parsing_covering.py,"def detailed_results(self, is_thing=None):"
data/raw/repos\research\deeplab\evaluation,parsing_covering.py,"def print_detailed_results(self, is_thing=None, print_digits=3):"
data/raw/repos\research\deeplab\evaluation,parsing_covering.py,def result(self):
data/raw/repos\research\deeplab\evaluation,parsing_covering.py,"def merge(self, other_instance):"
data/raw/repos\research\deeplab\evaluation,parsing_covering.py,def reset(self):
data/raw/repos\research\deeplab\evaluation,parsing_covering_test.py,def test_perfect_match(self):
data/raw/repos\research\deeplab\evaluation,parsing_covering_test.py,def test_totally_wrong(self):
data/raw/repos\research\deeplab\evaluation,parsing_covering_test.py,def test_matches_expected(self):
data/raw/repos\research\deeplab\evaluation,parsing_covering_test.py,def test_matches_expected_normalize_by_size(self):
data/raw/repos\research\deeplab\evaluation,streaming_metrics.py,"def _realdiv_maybe_zero(x, y):"
data/raw/repos\research\deeplab\evaluation,streaming_metrics.py,"def _running_total(value, shape, name=None):"
data/raw/repos\research\deeplab\evaluation,streaming_metrics_test.py,def test_streaming_metric_on_single_image(self):
data/raw/repos\research\deeplab\evaluation,streaming_metrics_test.py,def test_streaming_metric_on_multiple_images(self):
data/raw/repos\research\deeplab\evaluation,streaming_metrics_test.py,def test_streaming_metric_on_single_image(self):
data/raw/repos\research\deeplab\evaluation,streaming_metrics_test.py,def test_streaming_metric_on_multiple_images(self):
data/raw/repos\research\deeplab\evaluation,streaming_metrics_test.py,def test_streaming_metric_on_multiple_images_normalize_by_size(self):
data/raw/repos\research\deeplab\evaluation,test_utils.py,"def read_test_image(testdata_path, *args, **kwargs):"
data/raw/repos\research\deeplab\evaluation,test_utils_test.py,def test_read_test_image(self):
data/raw/repos\research\deeplab\evaluation,test_utils_test.py,def test_reads_segmentation_with_color_map(self):
data/raw/repos\research\deeplab\evaluation,test_utils_test.py,def test_reads_gt_segmentation(self):
data/raw/repos\research\deeplab\utils,get_dataset_colormap.py,def create_ade20k_label_colormap():
data/raw/repos\research\deeplab\utils,get_dataset_colormap.py,def create_cityscapes_label_colormap():
data/raw/repos\research\deeplab\utils,get_dataset_colormap.py,def create_mapillary_vistas_label_colormap():
data/raw/repos\research\deeplab\utils,get_dataset_colormap.py,def create_pascal_label_colormap():
data/raw/repos\research\deeplab\utils,get_dataset_colormap.py,def get_ade20k_name():
data/raw/repos\research\deeplab\utils,get_dataset_colormap.py,def get_cityscapes_name():
data/raw/repos\research\deeplab\utils,get_dataset_colormap.py,def get_mapillary_vistas_name():
data/raw/repos\research\deeplab\utils,get_dataset_colormap.py,def get_pascal_name():
data/raw/repos\research\deeplab\utils,get_dataset_colormap.py,"def bit_get(val, idx):"
data/raw/repos\research\deeplab\utils,get_dataset_colormap.py,def create_label_colormap(dataset=_PASCAL):
data/raw/repos\research\deeplab\utils,get_dataset_colormap.py,"def label_to_color_image(label, dataset=_PASCAL):"
data/raw/repos\research\deeplab\utils,get_dataset_colormap.py,def get_dataset_colormap_max_entries(dataset):
data/raw/repos\research\deeplab\utils,get_dataset_colormap_test.py,def testBitGet(self):
data/raw/repos\research\deeplab\utils,get_dataset_colormap_test.py,def testPASCALLabelColorMapValue(self):
data/raw/repos\research\deeplab\utils,get_dataset_colormap_test.py,def testLabelToPASCALColorImage(self):
data/raw/repos\research\deeplab\utils,get_dataset_colormap_test.py,def testUnExpectedLabelValueForLabelToPASCALColorImage(self):
data/raw/repos\research\deeplab\utils,get_dataset_colormap_test.py,def testUnExpectedLabelDimensionForLabelToPASCALColorImage(self):
data/raw/repos\research\deeplab\utils,get_dataset_colormap_test.py,def testGetColormapForUnsupportedDataset(self):
data/raw/repos\research\deeplab\utils,get_dataset_colormap_test.py,def testUnExpectedLabelDimensionForLabelToADE20KColorImage(self):
data/raw/repos\research\deeplab\utils,get_dataset_colormap_test.py,def testFirstColorInADE20KColorMap(self):
data/raw/repos\research\deeplab\utils,get_dataset_colormap_test.py,def testMapillaryVistasColorMapValue(self):
data/raw/repos\research\deeplab\utils,train_utils.py,"def _div_maybe_zero(total_loss, num_present):"
data/raw/repos\research\deeplab\utils,train_utils.py,def restore_fn(sess):
data/raw/repos\research\deeplab\utils,train_utils.py,"def get_model_gradient_multipliers(last_layers, last_layer_gradient_multiplier):"
data/raw/repos\research\deep_speech,decoder.py,"def __init__(self, labels, blank_index=28):"
data/raw/repos\research\deep_speech,decoder.py,"def convert_to_string(self, sequence):"
data/raw/repos\research\deep_speech,decoder.py,"def wer(self, decode, target):"
data/raw/repos\research\deep_speech,decoder.py,"def cer(self, decode, target):"
data/raw/repos\research\deep_speech,decoder.py,"def decode(self, logits):"
data/raw/repos\research\deep_speech,deep_speech.py,"def compute_length_after_conv(max_time_steps, ctc_time_steps, input_length):"
data/raw/repos\research\deep_speech,deep_speech.py,"def evaluate_model(estimator, speech_labels, entries, input_fn_eval):"
data/raw/repos\research\deep_speech,deep_speech.py,"def model_fn(features, labels, mode, params):"
data/raw/repos\research\deep_speech,deep_speech.py,def generate_dataset(data_dir):
data/raw/repos\research\deep_speech,deep_speech.py,"def per_device_batch_size(batch_size, num_gpus):"
data/raw/repos\research\deep_speech,deep_speech.py,def run_deep_speech(_):
data/raw/repos\research\deep_speech,deep_speech.py,def input_fn_train():
data/raw/repos\research\deep_speech,deep_speech.py,def input_fn_eval():
data/raw/repos\research\deep_speech,deep_speech.py,def define_deep_speech_flags():
data/raw/repos\research\deep_speech,deep_speech.py,def main(_):
data/raw/repos\research\deep_speech,deep_speech_model.py,"def batch_norm(inputs, training):"
data/raw/repos\research\deep_speech,deep_speech_model.py,"def __call__(self, inputs, training):"
data/raw/repos\research\deep_speech\data,dataset.py,"def __init__(self, audio_config, data_path, vocab_file_path, sortagrad):"
data/raw/repos\research\deep_speech\data,dataset.py,def _normalize_audio_feature(audio_feature):
data/raw/repos\research\deep_speech\data,dataset.py,"def _preprocess_audio(audio_file_path, audio_featurizer, normalize):"
data/raw/repos\research\deep_speech\data,dataset.py,def _preprocess_data(file_path):
data/raw/repos\research\deep_speech\data,dataset.py,"def __init__(self, dataset_config):"
data/raw/repos\research\deep_speech\data,dataset.py,"def batch_wise_dataset_shuffle(entries, epoch_index, sortagrad, batch_size):"
data/raw/repos\research\deep_speech\data,dataset.py,"def input_fn(batch_size, deep_speech_dataset, repeat=1):"
data/raw/repos\research\deep_speech\data,dataset.py,def _gen_data():
data/raw/repos\research\deep_speech\data,download.py,"def download_and_extract(directory, url):"
data/raw/repos\research\deep_speech\data,download.py,"def _progress(count, block_size, total_size):"
data/raw/repos\research\deep_speech\data,download.py,"def download_and_process_datasets(directory, datasets):"
data/raw/repos\research\deep_speech\data,download.py,def define_data_download_flags():
data/raw/repos\research\deep_speech\data,download.py,def main(_):
data/raw/repos\research\deep_speech\data,featurizer.py,"def compute_label_feature(text, token_to_idx):"
data/raw/repos\research\deep_speech\data,featurizer.py,"def __init__(self, vocab_file):"
data/raw/repos\research\delf\delf\python,box_io.py,"def ArraysToBoxes(boxes, scores, class_indices):"
data/raw/repos\research\delf\delf\python,box_io.py,def BoxesToArrays(boxes_proto):
data/raw/repos\research\delf\delf\python,box_io.py,"def SerializeToString(boxes, scores, class_indices):"
data/raw/repos\research\delf\delf\python,box_io.py,def ParseFromString(string):
data/raw/repos\research\delf\delf\python,box_io.py,def ReadFromFile(file_path):
data/raw/repos\research\delf\delf\python,box_io.py,"def WriteToFile(file_path, boxes, scores, class_indices):"
data/raw/repos\research\delf\delf\python,box_io_test.py,def _create_data(self):
data/raw/repos\research\delf\delf\python,box_io_test.py,def testConversionAndBack(self):
data/raw/repos\research\delf\delf\python,box_io_test.py,def testWriteAndReadToFile(self):
data/raw/repos\research\delf\delf\python,box_io_test.py,def testWriteAndReadToFileEmptyFile(self):
data/raw/repos\research\delf\delf\python,datum_io.py,def ArrayToDatum(arr):
data/raw/repos\research\delf\delf\python,datum_io.py,"def ArraysToDatumPair(arr_1, arr_2):"
data/raw/repos\research\delf\delf\python,datum_io.py,def DatumToArray(datum):
data/raw/repos\research\delf\delf\python,datum_io.py,def DatumPairToArrays(datum_pair):
data/raw/repos\research\delf\delf\python,datum_io.py,def SerializeToString(arr):
data/raw/repos\research\delf\delf\python,datum_io.py,"def SerializePairToString(arr_1, arr_2):"
data/raw/repos\research\delf\delf\python,datum_io.py,def ParseFromString(string):
data/raw/repos\research\delf\delf\python,datum_io.py,def ParsePairFromString(string):
data/raw/repos\research\delf\delf\python,datum_io.py,def ReadFromFile(file_path):
data/raw/repos\research\delf\delf\python,datum_io.py,def ReadPairFromFile(file_path):
data/raw/repos\research\delf\delf\python,datum_io.py,"def WriteToFile(data, file_path):"
data/raw/repos\research\delf\delf\python,datum_io.py,"def WritePairToFile(arr_1, arr_2, file_path):"
data/raw/repos\research\delf\delf\python,datum_io_test.py,"def Conversion2dTestWithType(self, dtype):"
data/raw/repos\research\delf\delf\python,datum_io_test.py,"def Conversion3dTestWithType(self, dtype):"
data/raw/repos\research\delf\delf\python,datum_io_test.py,def testConversion2dWithType(self):
data/raw/repos\research\delf\delf\python,datum_io_test.py,def testConversion3dWithType(self):
data/raw/repos\research\delf\delf\python,datum_io_test.py,def testConversionWithUnsupportedType(self):
data/raw/repos\research\delf\delf\python,datum_io_test.py,def testWriteAndReadToFile(self):
data/raw/repos\research\delf\delf\python,datum_io_test.py,def testWriteAndReadPairToFile(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor.py,"def __init__(self, aggregation_config):"
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor.py,"def Extract(self, features, num_features_per_region=None):"
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor.py,def _ComputeVladEmptyFeatures():
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor.py,def _ComputeVladNonEmptyFeatures():
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor.py,"def _BatchNearestVisualWords(ind, selected_visual_words):"
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor.py,"def _ConstructVladFromAssignments(ind, vlad):"
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor.py,def _ComputeRvladEmptyRegions():
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor.py,def _ComputeRvladNonEmptyRegions():
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor.py,"def _ConstructRvladFromVlad(ind, rvlad):"
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor.py,"def _PerCentroidNormalization(self, unnormalized_vector):"
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor.py,"def _ComputeAsmk(self, features, codebook, num_assignments=1):"
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,"def _CreateCodebook(self, checkpoint_path):"
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def setUp(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def testComputeNormalizedVladWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def testComputeNormalizedVladWithBatchingWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def testComputeUnnormalizedVladWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def testComputeUnnormalizedVladMultipleAssignmentWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def testComputeVladEmptyFeaturesWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def testComputeUnnormalizedRvladWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def testComputeNormalizedRvladWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def testComputeRvladEmptyRegionsWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def testComputeUnnormalizedRvladSomeEmptyRegionsWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def testComputeNormalizedRvladSomeEmptyRegionsWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def testComputeRvladMisconfiguredFeatures(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def testComputeAsmkWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def testComputeAsmkStarWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def testComputeAsmkMultipleAssignmentWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def testComputeRasmkWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def testComputeRasmkStarWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_extractor_test.py,def testComputeUnknownAggregation(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_similarity.py,"def __init__(self, aggregation_config):"
data/raw/repos\research\delf\delf\python,feature_aggregation_similarity.py,"def _SigmaFn(self, x):"
data/raw/repos\research\delf\delf\python,feature_aggregation_similarity.py,"def _BinaryNormalizedInnerProduct(self, descriptors_1, descriptors_2):"
data/raw/repos\research\delf\delf\python,feature_aggregation_similarity_test.py,def testComputeVladSimilarityWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_similarity_test.py,def testComputeAsmkSimilarityWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_similarity_test.py,def testComputeAsmkSimilarityNoNormalizationWorks(self):
data/raw/repos\research\delf\delf\python,feature_aggregation_similarity_test.py,def testComputeAsmkStarSimilarityWorks(self):
data/raw/repos\research\delf\delf\python,feature_extractor.py,"def CalculateReceptiveBoxes(height, width, rf, stride, padding):"
data/raw/repos\research\delf\delf\python,feature_extractor.py,def CalculateKeypointCenters(boxes):
data/raw/repos\research\delf\delf\python,feature_extractor.py,"def PostProcessDescriptors(descriptors, use_pca, pca_parameters=None):"
data/raw/repos\research\delf\delf\python,feature_extractor.py,"def DelfFeaturePostProcessing(boxes, descriptors, use_pca, pca_parameters=None):"
data/raw/repos\research\delf\delf\python,feature_extractor_test.py,def testNormalizePixelValues(self):
data/raw/repos\research\delf\delf\python,feature_extractor_test.py,def testCalculateReceptiveBoxes(self):
data/raw/repos\research\delf\delf\python,feature_extractor_test.py,def testCalculateKeypointCenters(self):
data/raw/repos\research\delf\delf\python,feature_extractor_test.py,def testPcaWhitening(self):
data/raw/repos\research\delf\delf\python,feature_io.py,def DelfFeaturesToArrays(delf_features):
data/raw/repos\research\delf\delf\python,feature_io.py,def ParseFromString(string):
data/raw/repos\research\delf\delf\python,feature_io.py,def ReadFromFile(file_path):
data/raw/repos\research\delf\delf\python,feature_io_test.py,def create_data():
data/raw/repos\research\delf\delf\python,feature_io_test.py,def testConversionAndBack(self):
data/raw/repos\research\delf\delf\python,feature_io_test.py,def testConversionAndBackNoOrientations(self):
data/raw/repos\research\delf\delf\python,feature_io_test.py,def testWriteAndReadToFile(self):
data/raw/repos\research\delf\delf\python,feature_io_test.py,def testWriteAndReadToFileEmptyFile(self):
data/raw/repos\research\delf\delf\python,utils.py,def RgbLoader(path):
data/raw/repos\research\delf\delf\python,utils.py,"def ResizeImage(image, config, resize_factor=1.0):"
data/raw/repos\research\delf\delf\python,whiten.py,"def learn_whitening(descriptors, qidxs, pidxs):"
data/raw/repos\research\delf\delf\python,whiten.py,def cholesky(matrix):
data/raw/repos\research\delf\delf\python,whiten_test.py,def testApplyWhitening(self):
data/raw/repos\research\delf\delf\python,whiten_test.py,def testLearnWhitening(self):
data/raw/repos\research\delf\delf\python,whiten_test.py,def testCholeskyPositiveDefinite(self):
data/raw/repos\research\delf\delf\python,whiten_test.py,def testCholeskyNonPositiveDefinite(self):
data/raw/repos\research\delf\delf\python\datasets,generic_dataset.py,"def __getitem__(self, index):"
data/raw/repos\research\delf\delf\python\datasets,generic_dataset.py,def __len__(self):
data/raw/repos\research\delf\delf\python\datasets,generic_dataset_test.py,def testGenericDataset(self):
data/raw/repos\research\delf\delf\python\datasets,tuples_dataset.py,def __iter__(self):
data/raw/repos\research\delf\delf\python\datasets,tuples_dataset.py,def __next__(self):
data/raw/repos\research\delf\delf\python\datasets,tuples_dataset.py,"def _img_names_to_full_path(self, image_list):"
data/raw/repos\research\delf\delf\python\datasets,tuples_dataset.py,"def __getitem__(self, index):"
data/raw/repos\research\delf\delf\python\datasets,tuples_dataset.py,def __len__(self):
data/raw/repos\research\delf\delf\python\datasets,tuples_dataset.py,def __repr__(self):
data/raw/repos\research\delf\delf\python\datasets,tuples_dataset.py,"def create_epoch_tuples(self, net):"
data/raw/repos\research\delf\delf\python\datasets,tuples_dataset_test.py,def testCreateEpochTuples(self):
data/raw/repos\research\delf\delf\python\datasets,utils.py,"def pil_imagenet_loader(path, imsize, bounding_box=None, preprocess=True):"
data/raw/repos\research\delf\delf\python\datasets,utils.py,"def default_loader(path, imsize, bounding_box=None, preprocess=True):"
data/raw/repos\research\delf\delf\python\datasets,utils_test.py,def testDefaultLoader(self):
data/raw/repos\research\delf\delf\python\datasets,utils_test.py,def testDefaultLoaderWithBoundingBox(self):
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,compute_recognition_metrics.py,def main(argv):
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,compute_retrieval_metrics.py,def main(argv):
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,dataset_file_io.py,"def ReadSolution(file_path, task):"
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,dataset_file_io.py,"def ReadPredictions(file_path, public_ids, private_ids, ignored_ids, task):"
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,dataset_file_io_test.py,def testReadRecognitionSolutionWorks(self):
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,dataset_file_io_test.py,def testReadRetrievalSolutionWorks(self):
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,dataset_file_io_test.py,def testReadRecognitionPredictionsWorks(self):
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,dataset_file_io_test.py,def testReadRetrievalPredictionsWorks(self):
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,googlelandmarks.py,"def NormalizeImages(images, pixel_value_scale=0.5, pixel_value_offset=0.5):"
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,googlelandmarks.py,"def _ImageNetCrop(image, image_size):"
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,googlelandmarks.py,"def _ParseFunction(example, name_to_features, image_size, augmentation):"
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,googlelandmarks.py,def GoogleLandmarksInfo():
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,metrics.py,def _CountPositives(solution):
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,metrics.py,"def Top1Accuracy(predictions, recognition_solution):"
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,metrics.py,"def MeanAveragePrecision(predictions, retrieval_solution, max_predictions=100):"
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,metrics.py,"def MeanPrecisions(predictions, retrieval_solution, max_predictions=100):"
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,metrics.py,"def MeanMedianPosition(predictions, retrieval_solution, max_predictions=100):"
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,metrics_test.py,def _CreateRecognitionSolution():
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,metrics_test.py,def _CreateRecognitionPredictions():
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,metrics_test.py,def _CreateRetrievalSolution():
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,metrics_test.py,def _CreateRetrievalPredictions():
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,metrics_test.py,def testGlobalAveragePrecisionWorks(self):
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,metrics_test.py,def testGlobalAveragePrecisionIgnoreNonGroundTruthWorks(self):
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,metrics_test.py,def testTop1AccuracyWorks(self):
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,metrics_test.py,def testMeanAveragePrecisionWorks(self):
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,metrics_test.py,def testMeanAveragePrecisionMaxPredictionsWorks(self):
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,metrics_test.py,def testMeanPrecisionsWorks(self):
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,metrics_test.py,def testMeanMedianPositionWorks(self):
data/raw/repos\research\delf\delf\python\datasets\google_landmarks_dataset,metrics_test.py,def testMeanMedianPositionMaxPredictionsWorks(self):
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset.py,def ReadDatasetFile(dataset_file_path):
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset.py,"def _ParseGroundTruth(ok_list, junk_list):"
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset.py,def ParseEasyMediumHardGroundTruth(ground_truth):
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset.py,"def AdjustPositiveRanks(positive_ranks, junk_ranks):"
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset.py,def ComputeAveragePrecision(positive_ranks):
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset.py,"def ComputePRAtRanks(positive_ranks, desired_pr_ranks):"
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset.py,"def ComputeMetrics(sorted_index_ids, ground_truth, desired_pr_ranks):"
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset.py,"def _ParseSpaceSeparatedStringsInBrackets(line, prefixes, ind):"
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset.py,def _ParsePrRanks(line):
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset.py,"def _ParsePrScores(line, num_pr_ranks):"
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset.py,def ReadMetricsFile(metrics_path):
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset.py,"def CreateConfigForTestDataset(dataset, dir_main):"
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset.py,"def _ConfigImname(cfg, i):"
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset.py,"def _ConfigQimname(cfg, i):"
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset_test.py,def testParseEasyMediumHardGroundTruth(self):
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset_test.py,"def _AssertListOfDictsOfArraysAreEqual(ground_truth, expected_ground_truth):"
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset_test.py,def testAdjustPositiveRanksWorks(self):
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset_test.py,def testComputeAveragePrecisionWorks(self):
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset_test.py,def testComputePRAtRanksWorks(self):
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset_test.py,def testComputeMetricsWorks(self):
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset_test.py,def testSaveMetricsFileWorks(self):
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset_test.py,def testSaveAndReadMetricsWorks(self):
data/raw/repos\research\delf\delf\python\datasets\revisited_op,dataset_test.py,def testReadMetricsWithRepeatedProtocolFails(self):
data/raw/repos\research\delf\delf\python\datasets\sfm120k,dataset_download.py,def download_train(data_dir):
data/raw/repos\research\delf\delf\python\datasets\sfm120k,sfm120k.py,"def id2filename(image_id, prefix):"
data/raw/repos\research\delf\delf\python\datasets\sfm120k,sfm120k.py,def Sfm120kInfo(self):
data/raw/repos\research\delf\delf\python\datasets\sfm120k,sfm120k_test.py,def testId2Filename(self):
data/raw/repos\research\delf\delf\python\delg,extract_features.py,def main(argv):
data/raw/repos\research\delf\delf\python\delg,measure_latency.py,def _ReadImageList(list_path):
data/raw/repos\research\delf\delf\python\delg,measure_latency.py,def main(argv):
data/raw/repos\research\delf\delf\python\delg,perform_retrieval.py,"def _ReadDelgGlobalDescriptors(input_dir, image_list):"
data/raw/repos\research\delf\delf\python\delg,perform_retrieval.py,def main(argv):
data/raw/repos\research\delf\delf\python\detect_to_retrieve,aggregation_extraction.py,"def _ReadMappingBasenameToBoxNames(input_path, index_image_names):"
data/raw/repos\research\delf\delf\python\detect_to_retrieve,boxes_and_features_extraction.py,"def _WriteMappingBasenameToIds(index_names_ids_and_boxes, output_path):"
data/raw/repos\research\delf\delf\python\detect_to_retrieve,cluster_delf_features.py,def __init__(self):
data/raw/repos\research\delf\delf\python\detect_to_retrieve,cluster_delf_features.py,"def after_create_session(self, session, coord):"
data/raw/repos\research\delf\delf\python\detect_to_retrieve,cluster_delf_features.py,def main(argv):
data/raw/repos\research\delf\delf\python\detect_to_retrieve,cluster_delf_features.py,def _get_input_fn():
data/raw/repos\research\delf\delf\python\detect_to_retrieve,cluster_delf_features.py,def _input_fn():
data/raw/repos\research\delf\delf\python\detect_to_retrieve,cluster_delf_features.py,def _initializer_fn(sess):
data/raw/repos\research\delf\delf\python\detect_to_retrieve,extract_aggregation.py,def main(argv):
data/raw/repos\research\delf\delf\python\detect_to_retrieve,extract_index_boxes_and_features.py,def main(argv):
data/raw/repos\research\delf\delf\python\detect_to_retrieve,extract_query_features.py,def main(argv):
data/raw/repos\research\delf\delf\python\detect_to_retrieve,image_reranking.py,def _InliersInitialScoresSorting(k):
data/raw/repos\research\delf\delf\python\detect_to_retrieve,perform_retrieval.py,"def _ReadAggregatedDescriptors(input_dir, image_list, config):"
data/raw/repos\research\delf\delf\python\detect_to_retrieve,perform_retrieval.py,def main(argv):
data/raw/repos\research\delf\delf\python\examples,detector.py,def MakeDetector(model_dir):
data/raw/repos\research\delf\delf\python\examples,detector.py,def DetectorFn(images):
data/raw/repos\research\delf\delf\python\examples,extractor.py,def MakeExtractor(config):
data/raw/repos\research\delf\delf\python\examples,extractor.py,"def ExtractorFn(image, resize_factor=1.0):"
data/raw/repos\research\delf\delf\python\examples,extract_boxes.py,def _ReadImageList(list_path):
data/raw/repos\research\delf\delf\python\examples,extract_boxes.py,"def _FilterBoxesByScore(boxes, scores, class_indices, score_threshold):"
data/raw/repos\research\delf\delf\python\examples,extract_boxes.py,"def _PlotBoxesAndSaveImage(image, boxes, output_path):"
data/raw/repos\research\delf\delf\python\examples,extract_boxes.py,def main(argv):
data/raw/repos\research\delf\delf\python\examples,extract_features.py,def _ReadImageList(list_path):
data/raw/repos\research\delf\delf\python\examples,extract_features.py,def main(unused_argv):
data/raw/repos\research\delf\delf\python\examples,match_images.py,def main(unused_argv):
data/raw/repos\research\delf\delf\python\normalization_layers,normalization.py,def __init__(self):
data/raw/repos\research\delf\delf\python\normalization_layers,normalization.py,"def call(self, x, axis=1):"
data/raw/repos\research\delf\delf\python\normalization_layers,normalization_test.py,def testL2Normalization(self):
data/raw/repos\research\delf\delf\python\pooling_layers,pooling.py,"def call(self, x, axis=None):"
data/raw/repos\research\delf\delf\python\pooling_layers,pooling.py,"def call(self, x, axis=None):"
data/raw/repos\research\delf\delf\python\pooling_layers,pooling.py,"def __init__(self, power=3.):"
data/raw/repos\research\delf\delf\python\pooling_layers,pooling.py,"def call(self, x, axis=None):"
data/raw/repos\research\delf\delf\python\pooling_layers,pooling.py,"def call(self, x):"
data/raw/repos\research\delf\delf\python\pooling_layers,pooling.py,"def mac(x, axis=None):"
data/raw/repos\research\delf\delf\python\pooling_layers,pooling.py,"def spoc(x, axis=None):"
data/raw/repos\research\delf\delf\python\pooling_layers,pooling.py,"def gem(x, axis=None, power=3., eps=1e-6):"
data/raw/repos\research\delf\delf\python\pooling_layers,pooling_test.py,def testMac(self):
data/raw/repos\research\delf\delf\python\pooling_layers,pooling_test.py,def testSpoc(self):
data/raw/repos\research\delf\delf\python\pooling_layers,pooling_test.py,def testGem(self):
data/raw/repos\research\delf\delf\python\pooling_layers,pooling_test.py,def testGeMPooling2D(self):
data/raw/repos\research\delf\delf\python\training,build_image_dataset.py,"def _get_all_image_files_and_labels(name, csv_path, image_dir):"
data/raw/repos\research\delf\delf\python\training,build_image_dataset.py,"def _get_clean_train_image_files_and_labels(csv_path, image_dir):"
data/raw/repos\research\delf\delf\python\training,build_image_dataset.py,def _process_image(filename):
data/raw/repos\research\delf\delf\python\training,build_image_dataset.py,def _int64_feature(value):
data/raw/repos\research\delf\delf\python\training,build_image_dataset.py,def _bytes_feature(value):
data/raw/repos\research\delf\delf\python\training,build_image_dataset.py,"def _convert_to_example(file_id, image_buffer, height, width, label=None):"
data/raw/repos\research\delf\delf\python\training,build_image_dataset.py,"def _write_tfrecord(output_prefix, image_paths, file_ids, labels):"
data/raw/repos\research\delf\delf\python\training,build_image_dataset.py,def _write_relabeling_rules(relabeling_rules):
data/raw/repos\research\delf\delf\python\training,build_image_dataset.py,"def _shuffle_by_columns(np_array, random_state):"
data/raw/repos\research\delf\delf\python\training,build_image_dataset.py,"def _build_test_tfrecord_dataset(csv_path, image_dir):"
data/raw/repos\research\delf\delf\python\training,build_image_dataset.py,def main(unused_argv):
data/raw/repos\research\delf\delf\python\training,global_features_utils.py,def __init__(self):
data/raw/repos\research\delf\delf\python\training,global_features_utils.py,def reset(self):
data/raw/repos\research\delf\delf\python\training,global_features_utils.py,"def update(self, val, n=1):"
data/raw/repos\research\delf\delf\python\training,global_features_utils.py,def htime(time_difference):
data/raw/repos\research\delf\delf\python\training,global_features_utils.py,"def debug_and_log(msg, debug=True, log=True, debug_on_the_same_line=False):"
data/raw/repos\research\delf\delf\python\training,global_features_utils.py,def get_standard_keras_models():
data/raw/repos\research\delf\delf\python\training,tensorboard_utils.py,def launch_tensorboard(log_dir):
data/raw/repos\research\delf\delf\python\training,train.py,"def _record_accuracy(metric, logits, labels):"
data/raw/repos\research\delf\delf\python\training,train.py,"def _attention_summaries(scores, global_step):"
data/raw/repos\research\delf\delf\python\training,train.py,def create_model(num_classes):
data/raw/repos\research\delf\delf\python\training,train.py,"def _learning_rate_schedule(global_step_value, max_iters, initial_lr):"
data/raw/repos\research\delf\delf\python\training,train.py,def main(argv):
data/raw/repos\research\delf\delf\python\training,train.py,"def compute_loss(labels, predictions):"
data/raw/repos\research\delf\delf\python\training,train.py,def train_step(inputs):
data/raw/repos\research\delf\delf\python\training,train.py,"def _backprop_loss(tape, loss, weights):"
data/raw/repos\research\delf\delf\python\training,train.py,def validation_step(inputs):
data/raw/repos\research\delf\delf\python\training,train.py,def distributed_train_step(dataset_inputs):
data/raw/repos\research\delf\delf\python\training,train.py,def distributed_validation_step(dataset_inputs):
data/raw/repos\research\delf\delf\python\training\global_features,train.py,def main(argv):
data/raw/repos\research\delf\delf\python\training\global_features,train.py,def _train_gen():
data/raw/repos\research\delf\delf\python\training\global_features,train.py,def _val_gen():
data/raw/repos\research\delf\delf\python\training\global_features,train_utils.py,"def _compute_loss_and_gradient(criterion, model, input, target, neg_num=5):"
data/raw/repos\research\delf\delf\python\training\losses,ranking_losses.py,"def __init__(self, margin=0.7, reduction=tf.keras.losses.Reduction.NONE):"
data/raw/repos\research\delf\delf\python\training\losses,ranking_losses.py,"def __call__(self, queries, positives, negatives):"
data/raw/repos\research\delf\delf\python\training\losses,ranking_losses.py,"def __init__(self, margin=0.1, reduction=tf.keras.losses.Reduction.NONE):"
data/raw/repos\research\delf\delf\python\training\losses,ranking_losses.py,"def __call__(self, queries, positives, negatives):"
data/raw/repos\research\delf\delf\python\training\losses,ranking_losses.py,"def contrastive_loss(queries, positives, negatives, margin=0.7, eps=1e-6):"
data/raw/repos\research\delf\delf\python\training\losses,ranking_losses.py,"def triplet_loss(queries, positives, negatives, margin=0.1):"
data/raw/repos\research\delf\delf\python\training\losses,ranking_losses_test.py,def testContrastiveLoss(self):
data/raw/repos\research\delf\delf\python\training\losses,ranking_losses_test.py,def testTripletLossZeroLoss(self):
data/raw/repos\research\delf\delf\python\training\losses,ranking_losses_test.py,def testTripletLossNonZeroLoss(self):
data/raw/repos\research\delf\delf\python\training\model,delf_model.py,"def __init__(self, kernel_size=1, decay=_DECAY, name='attention'):"
data/raw/repos\research\delf\delf\python\training\model,delf_model.py,"def call(self, inputs, targets=None, training=True):"
data/raw/repos\research\delf\delf\python\training\model,delf_model.py,"def call(self, inputs):"
data/raw/repos\research\delf\delf\python\training\model,delf_model.py,"def init_classifiers(self, num_classes, desc_classification=None):"
data/raw/repos\research\delf\delf\python\training\model,delf_model.py,"def global_and_local_forward_pass(self, images, training=True):"
data/raw/repos\research\delf\delf\python\training\model,delf_model.py,"def build_call(self, input_image, training=True):"
data/raw/repos\research\delf\delf\python\training\model,delf_model.py,"def call(self, input_image, training=True):"
data/raw/repos\research\delf\delf\python\training\model,delf_model_test.py,"def test_build_model(self, block3_strides):"
data/raw/repos\research\delf\delf\python\training\model,delf_model_test.py,"def test_train_step(self, block3_strides):"
data/raw/repos\research\delf\delf\python\training\model,delf_model_test.py,"def compute_loss(labels, predictions):"
data/raw/repos\research\delf\delf\python\training\model,delg_model.py,"def init_classifiers(self, num_classes):"
data/raw/repos\research\delf\delf\python\training\model,delg_model.py,"def _create_backbone_classifier(self, num_classes):"
data/raw/repos\research\delf\delf\python\training\model,delg_model.py,"def apply_arcface_margin(cosine_sim, one_hot_labels, arcface_margin):"
data/raw/repos\research\delf\delf\python\training\model,delg_model_test.py,"def test_forward_pass(self, block3_strides):"
data/raw/repos\research\delf\delf\python\training\model,delg_model_test.py,"def test_build_model(self, block3_strides):"
data/raw/repos\research\delf\delf\python\training\model,delg_model_test.py,"def test_train_step(self, block3_strides):"
data/raw/repos\research\delf\delf\python\training\model,delg_model_test.py,"def compute_loss(labels, predictions):"
data/raw/repos\research\delf\delf\python\training\model,export_CNN_global.py,"def _NormalizeImages(images, *args):"
data/raw/repos\research\delf\delf\python\training\model,export_CNN_global.py,"def LoadWeights(self, checkpoint_path):"
data/raw/repos\research\delf\delf\python\training\model,export_CNN_global.py,"def ExtractFeaturesFixedScales(self, input_image):"
data/raw/repos\research\delf\delf\python\training\model,export_CNN_global.py,def main(argv):
data/raw/repos\research\delf\delf\python\training\model,export_global_model.py,"def LoadWeights(self, checkpoint_path):"
data/raw/repos\research\delf\delf\python\training\model,export_global_model.py,"def ExtractFeatures(self, input_image, input_scales, input_global_scales_ind):"
data/raw/repos\research\delf\delf\python\training\model,export_global_model.py,"def ExtractFeaturesFixedScales(self, input_image):"
data/raw/repos\research\delf\delf\python\training\model,export_global_model.py,def main(argv):
data/raw/repos\research\delf\delf\python\training\model,export_local_and_global_model.py,"def LoadWeights(self, checkpoint_path):"
data/raw/repos\research\delf\delf\python\training\model,export_local_and_global_model.py,def main(argv):
data/raw/repos\research\delf\delf\python\training\model,export_local_model.py,"def __init__(self, block3_strides, iou):"
data/raw/repos\research\delf\delf\python\training\model,export_local_model.py,"def LoadWeights(self, checkpoint_path):"
data/raw/repos\research\delf\delf\python\training\model,export_local_model.py,def main(argv):
data/raw/repos\research\delf\delf\python\training\model,export_model_utils.py,"def _ProcessSingleScale(scale_index, boxes, features, scales, scores):"
data/raw/repos\research\delf\delf\python\training\model,export_model_utils.py,def _ResizeAndExtract(scale_index):
data/raw/repos\research\delf\delf\python\training\model,export_model_utils.py,def _ResizeAndExtract(scale_index):
data/raw/repos\research\delf\delf\python\training\model,global_model.py,"def call(self, x, training=False):"
data/raw/repos\research\delf\delf\python\training\model,global_model.py,def meta_repr(self):
data/raw/repos\research\delf\delf\python\training\model,global_model.py,def _data_gen():
data/raw/repos\research\delf\delf\python\training\model,global_model.py,"def extract_multi_scale_descriptor(net, input, scales, multi_scale_power):"
data/raw/repos\research\delf\delf\python\training\model,global_model_test.py,def testInitModel(self):
data/raw/repos\research\delf\delf\python\training\model,global_model_test.py,def testExtractVectors(self):
data/raw/repos\research\delf\delf\python\training\model,global_model_test.py,def testExtractMultiScale(self):
data/raw/repos\research\delf\delf\python\training\model,resnet50.py,"def __init__(self, kernel_size, filters, stage, block, data_format):"
data/raw/repos\research\delf\delf\python\training\model,resnet50.py,"def call(self, input_tensor, training=False):"
data/raw/repos\research\delf\delf\python\training\model,resnet50.py,"def call(self, input_tensor, training=False):"
data/raw/repos\research\delf\delf\python\training\model,resnet50.py,"def conv_block(filters, stage, block, strides=(2, 2)):"
data/raw/repos\research\delf\delf\python\training\model,resnet50.py,"def id_block(filters, stage, block):"
data/raw/repos\research\delf\delf\python\training\model,resnet50.py,"def build_call(self, inputs, training=True, intermediates_dict=None):"
data/raw/repos\research\delf\delf\python\training\model,resnet50.py,"def call(self, inputs, training=True, intermediates_dict=None):"
data/raw/repos\research\delf\delf\python\training\model,resnet50.py,"def restore_weights(self, filepath):"
data/raw/repos\research\delf\delf\python\training\model,resnet50.py,def log_weights(self):
data/raw/repos\research\efficient-hrl,agent.py,"def set_meta_agent(self, agent=None):"
data/raw/repos\research\efficient-hrl,agent.py,def meta_agent(self):
data/raw/repos\research\efficient-hrl,agent.py,"def action(self, state, context=None):"
data/raw/repos\research\efficient-hrl,agent.py,"def actions(self, state, context=None):"
data/raw/repos\research\efficient-hrl,agent.py,"def log_probs(self, states, actions, state_reprs, contexts=None):"
data/raw/repos\research\efficient-hrl,agent.py,"def noisy_action_fn(state, context=None):"
data/raw/repos\research\efficient-hrl,agent.py,"def merged_state(self, state, context=None):"
data/raw/repos\research\efficient-hrl,agent.py,"def merged_states(self, states, contexts=None):"
data/raw/repos\research\efficient-hrl,agent.py,"def unmerged_states(self, merged_states):"
data/raw/repos\research\efficient-hrl,agent.py,"def sample_random_actions(self, batch_size=1):"
data/raw/repos\research\efficient-hrl,agent.py,"def clip_actions(self, actions):"
data/raw/repos\research\efficient-hrl,agent.py,"def mix_contexts(self, contexts, insert_contexts, indices):"
data/raw/repos\research\efficient-hrl,agent.py,"def begin_episode_ops(self, mode, action_fn=None, state=None):"
data/raw/repos\research\efficient-hrl,agent.py,"def cond_begin_episode_op(self, cond, input_vars, mode, meta_action_fn):"
data/raw/repos\research\efficient-hrl,agent.py,def continue_fn():
data/raw/repos\research\efficient-hrl,agent.py,def begin_episode_fn():
data/raw/repos\research\efficient-hrl,agent.py,"def get_env_base_wrapper(self, env_base, **begin_kwargs):"
data/raw/repos\research\efficient-hrl,agent.py,"def init_action_vars(self, name, i=None):"
data/raw/repos\research\efficient-hrl,agent.py,"def critic_function(self, critic_vals, states, critic_fn=None):"
data/raw/repos\research\efficient-hrl,agent.py,"def get_action_vars(self, key):"
data/raw/repos\research\efficient-hrl,agent.py,"def get_context_vars(self, key):"
data/raw/repos\research\efficient-hrl,agent.py,"def step_cond_fn(self, *args):"
data/raw/repos\research\efficient-hrl,agent.py,"def reset_episode_cond_fn(self, *args):"
data/raw/repos\research\efficient-hrl,agent.py,"def reset_env_cond_fn(self, *args):"
data/raw/repos\research\efficient-hrl,agent.py,def context_vars(self):
data/raw/repos\research\efficient-hrl,agent.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\research\efficient-hrl,agent.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\research\efficient-hrl,agent.py,"def huber(x, kappa=0.1):"
data/raw/repos\research\efficient-hrl,agent.py,"def __call__(self, states):"
data/raw/repos\research\efficient-hrl,agent.py,"def loss(self, states, next_states, low_actions, low_states):"
data/raw/repos\research\efficient-hrl,agent.py,def get_trainable_vars(self):
data/raw/repos\research\efficient-hrl,agent.py,"def __init__(self, spec):"
data/raw/repos\research\efficient-hrl,agent.py,"def sample(self, states, next_states, num_samples, orig_goals, sc=0.5):"
data/raw/repos\research\efficient-hrl,eval.py,def evaluate_checkpoint(checkpoint_path):
data/raw/repos\research\efficient-hrl,eval.py,"def get_model_rollout(uvf_agent, tf_env):"
data/raw/repos\research\efficient-hrl,eval.py,"def model_rollout_fn(sess, state, action):"
data/raw/repos\research\efficient-hrl,eval.py,def increment_step():
data/raw/repos\research\efficient-hrl,eval.py,def increment_episode():
data/raw/repos\research\efficient-hrl,eval.py,def no_op_int():
data/raw/repos\research\efficient-hrl,eval.py,def step_fn(sess):
data/raw/repos\research\efficient-hrl,eval.py,def step_fn(sess):
data/raw/repos\research\efficient-hrl,run_env.py,def get_goal_sample_fn(env_name):
data/raw/repos\research\efficient-hrl,run_env.py,def get_reward_fn(env_name):
data/raw/repos\research\efficient-hrl,run_env.py,def success_fn(last_reward):
data/raw/repos\research\efficient-hrl,run_env.py,"def __init__(self, base_env, env_name):"
data/raw/repos\research\efficient-hrl,run_env.py,def reset(self):
data/raw/repos\research\efficient-hrl,run_env.py,"def step(self, a):"
data/raw/repos\research\efficient-hrl,run_env.py,def action_space(self):
data/raw/repos\research\efficient-hrl,run_env.py,"def run_environment(env_name, episode_length, num_episodes):"
data/raw/repos\research\efficient-hrl,run_env.py,def action_fn(obs):
data/raw/repos\research\efficient-hrl,run_env.py,def main(unused_argv):
data/raw/repos\research\efficient-hrl,run_eval.py,def main(_):
data/raw/repos\research\efficient-hrl,run_train.py,def main(_):
data/raw/repos\research\efficient-hrl,train.py,def increment_step():
data/raw/repos\research\efficient-hrl,train.py,def increment_episode():
data/raw/repos\research\efficient-hrl,train.py,def increment_reset():
data/raw/repos\research\efficient-hrl,train.py,"def update_episode_rewards(context_reward, meta_reward, reset):"
data/raw/repos\research\efficient-hrl,train.py,def no_op_int():
data/raw/repos\research\efficient-hrl,train.py,def policy_save_fn(sess):
data/raw/repos\research\efficient-hrl,train.py,def initialize_training_fn(sess):
data/raw/repos\research\efficient-hrl,train_utils.py,"def train_step(self, sess, train_ops, global_step, _):"
data/raw/repos\research\efficient-hrl,train_utils.py,def create_counter_summaries(counters):
data/raw/repos\research\efficient-hrl,train_utils.py,def gen_debug_batch_summaries(batch):
data/raw/repos\research\efficient-hrl\agents,circular_buffer.py,"def __init__(self, buffer_size=1000, scope='replay_buffer'):"
data/raw/repos\research\efficient-hrl\agents,circular_buffer.py,def buffer_size(self):
data/raw/repos\research\efficient-hrl\agents,circular_buffer.py,def scope(self):
data/raw/repos\research\efficient-hrl\agents,circular_buffer.py,def num_adds(self):
data/raw/repos\research\efficient-hrl\agents,circular_buffer.py,"def _create_variables(self, tensors):"
data/raw/repos\research\efficient-hrl\agents,circular_buffer.py,"def _validate(self, tensors):"
data/raw/repos\research\efficient-hrl\agents,circular_buffer.py,"def add(self, tensors):"
data/raw/repos\research\efficient-hrl\agents,circular_buffer.py,"def maybe_add(self, tensors, condition):"
data/raw/repos\research\efficient-hrl\agents,circular_buffer.py,def _increment_num_adds():
data/raw/repos\research\efficient-hrl\agents,circular_buffer.py,def _add():
data/raw/repos\research\efficient-hrl\agents,circular_buffer.py,"def get_random_batch(self, batch_size, keys=None, num_steps=1):"
data/raw/repos\research\efficient-hrl\agents,circular_buffer.py,"def gather(self, indices, keys=None):"
data/raw/repos\research\efficient-hrl\agents,circular_buffer.py,"def gather_nstep(self, num_steps, indices, keys=None):"
data/raw/repos\research\efficient-hrl\agents,circular_buffer.py,def get_position(self):
data/raw/repos\research\efficient-hrl\agents,circular_buffer.py,def get_num_adds(self):
data/raw/repos\research\efficient-hrl\agents,circular_buffer.py,def num_adds():
data/raw/repos\research\efficient-hrl\agents,circular_buffer.py,def get_num_tensors(self):
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def critic_net(states, actions):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def actor_net(states, num_action_dims):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def _batch_state(self, state):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def action(self, state):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def sample_action(self, state, stddev=1.0):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def actor_net(self, states, stop_gradients=False):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def critic_net(self, states, actions, for_critic_loss=False):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def target_actor_net(self, states):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def target_critic_net(self, states, actions, for_critic_loss=False):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def value_net(self, states, for_critic_loss=False):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def target_value_net(self, states, for_critic_loss=False):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def actor_loss(self, states):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def critic_function(self, critic_values, states, weights=None):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def update_targets(self, tau=1.0):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,def get_trainable_critic_vars(self):
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,def get_trainable_actor_vars(self):
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,def get_critic_vars(self):
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,def get_actor_vars(self):
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def _validate_states(self, states):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def _validate_actions(self, actions):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,def get_trainable_critic_vars(self):
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def critic_net(self, states, actions, for_critic_loss=False):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def target_critic_net(self, states, actions, for_critic_loss=False):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def value_net(self, states, for_critic_loss=False):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def target_value_net(self, states, for_critic_loss=False):"
data/raw/repos\research\efficient-hrl\agents,ddpg_agent.py,"def update_targets(self, tau=1.0):"
data/raw/repos\research\efficient-hrl\context,context.py,def _add_custom_reward_fns(self):
data/raw/repos\research\efficient-hrl\context,context.py,def _add_custom_sampler_fns(self):
data/raw/repos\research\efficient-hrl\context,context.py,"def sample_random_contexts(self, batch_size):"
data/raw/repos\research\efficient-hrl\context,context.py,"def _make_reward_fn(self, reward_fns_list, reward_weights):"
data/raw/repos\research\efficient-hrl\context,context.py,"def reward_fn(*args, **kwargs):"
data/raw/repos\research\efficient-hrl\context,context.py,"def _make_sampler_fn(self, sampler_cls_list, mode):"
data/raw/repos\research\efficient-hrl\context,context.py,"def batch_sampler_fn(batch_size, state=None, next_state=None, **kwargs):"
data/raw/repos\research\efficient-hrl\context,context.py,"def set_env_context_op(self, context, disable_unnormalizer=False):"
data/raw/repos\research\efficient-hrl\context,context.py,def set_context_func(*env_context_values):
data/raw/repos\research\efficient-hrl\context,context.py,"def set_replay(self, replay):"
data/raw/repos\research\efficient-hrl\context,context.py,def get_clip_fns(self):
data/raw/repos\research\efficient-hrl\context,context.py,"def clip_fn(var_, range_=context_range):"
data/raw/repos\research\efficient-hrl\context,context.py,"def _validate_contexts(self, contexts):"
data/raw/repos\research\efficient-hrl\context,context.py,"def context_multi_transition_fn(self, contexts, **kwargs):"
data/raw/repos\research\efficient-hrl\context,context.py,"def step(self, mode, agent=None, action_fn=None, **kwargs):"
data/raw/repos\research\efficient-hrl\context,context.py,def sampler_fn():
data/raw/repos\research\efficient-hrl\context,context.py,"def reset(self, mode, agent=None, action_fn=None, state=None):"
data/raw/repos\research\efficient-hrl\context,context.py,"def create_vars(self, name, agent=None):"
data/raw/repos\research\efficient-hrl\context,context.py,def n(self):
data/raw/repos\research\efficient-hrl\context,context.py,def vars(self):
data/raw/repos\research\efficient-hrl\context,context.py,def gym_env(self):
data/raw/repos\research\efficient-hrl\context,context.py,def tf_env(self):
data/raw/repos\research\efficient-hrl\context,context_transition_functions.py,"def periodic_context_fn(contexts, timer, sampler_fn, period=1):"
data/raw/repos\research\efficient-hrl\context,context_transition_functions.py,def reset():
data/raw/repos\research\efficient-hrl\context,context_transition_functions.py,def update():
data/raw/repos\research\efficient-hrl\context,gin_utils.py,"def gin_sparse_array(size, values, indices, fill_value=0):"
data/raw/repos\research\efficient-hrl\context,gin_utils.py,def gin_sum(values):
data/raw/repos\research\efficient-hrl\context,gin_utils.py,def gin_range(n):
data/raw/repos\research\efficient-hrl\context,rewards_functions.py,def summarize_stats(stats):
data/raw/repos\research\efficient-hrl\context,rewards_functions.py,"def index_states(states, indices):"
data/raw/repos\research\efficient-hrl\context,rewards_functions.py,"def record_tensor(tensor, indices, stats, name='states'):"
data/raw/repos\research\efficient-hrl\context,rewards_functions.py,def true_fn():
data/raw/repos\research\efficient-hrl\context,rewards_functions.py,def false_fn():
data/raw/repos\research\efficient-hrl\context,rewards_functions.py,"def plain_rewards(states, actions, rewards, next_states, contexts):"
data/raw/repos\research\efficient-hrl\context,samplers.py,"def __init__(self, context_spec, context_range=None, k=2, scope='sampler'):"
data/raw/repos\research\efficient-hrl\context,samplers.py,"def __call__(self, batch_size, **kwargs):"
data/raw/repos\research\efficient-hrl\context,samplers.py,"def set_replay(self, replay=None):"
data/raw/repos\research\efficient-hrl\context,samplers.py,"def _validate_contexts(self, contexts):"
data/raw/repos\research\efficient-hrl\context,samplers.py,"def __call__(self, batch_size, **kwargs):"
data/raw/repos\research\efficient-hrl\context,samplers.py,"def __init__(self, probs=0.5, *args, **kwargs):"
data/raw/repos\research\efficient-hrl\context,samplers.py,"def __call__(self, batch_size, **kwargs):"
data/raw/repos\research\efficient-hrl\context,samplers.py,"def __call__(self, batch_size, **kwargs):"
data/raw/repos\research\efficient-hrl\context,samplers.py,"def __call__(self, batch_size, **kwargs):"
data/raw/repos\research\efficient-hrl\context,samplers.py,"def _next(self, i):"
data/raw/repos\research\efficient-hrl\context,samplers.py,"def set_replay(self, replay):"
data/raw/repos\research\efficient-hrl\context,samplers.py,"def __call__(self, batch_size, **kwargs):"
data/raw/repos\research\efficient-hrl\context,samplers.py,"def __init__(self, minval=0, maxval=1, timestep=-1, *args, **kwargs):"
data/raw/repos\research\efficient-hrl\context,samplers.py,"def __call__(self, batch_size, **kwargs):"
data/raw/repos\research\efficient-hrl\context,samplers.py,"def __init__(self, value=None, *args, **kwargs):"
data/raw/repos\research\efficient-hrl\context,samplers.py,"def __call__(self, batch_size, **kwargs):"
data/raw/repos\research\efficient-hrl\context,samplers.py,"def __call__(self, batch_size, **kwargs):"
data/raw/repos\research\efficient-hrl\environments,ant.py,def q_inv(a):
data/raw/repos\research\efficient-hrl\environments,ant.py,"def q_mult(a, b):"
data/raw/repos\research\efficient-hrl\environments,ant.py,def physics(self):
data/raw/repos\research\efficient-hrl\environments,ant.py,"def _step(self, a):"
data/raw/repos\research\efficient-hrl\environments,ant.py,"def step(self, a):"
data/raw/repos\research\efficient-hrl\environments,ant.py,def _get_obs(self):
data/raw/repos\research\efficient-hrl\environments,ant.py,def reset_model(self):
data/raw/repos\research\efficient-hrl\environments,ant.py,def viewer_setup(self):
data/raw/repos\research\efficient-hrl\environments,ant.py,def get_ori(self):
data/raw/repos\research\efficient-hrl\environments,ant.py,"def set_xy(self, xy):"
data/raw/repos\research\efficient-hrl\environments,ant.py,def get_xy(self):
data/raw/repos\research\efficient-hrl\environments,create_maze_env.py,"def create_maze_env(env_name=None, top_down_view=False):"
data/raw/repos\research\efficient-hrl\environments,create_maze_env.py,"def __init__(self, *args, **kwargs):"
data/raw/repos\research\efficient-hrl\environments,create_maze_env.py,def start_collect(self):
data/raw/repos\research\efficient-hrl\environments,create_maze_env.py,def current_obs(self):
data/raw/repos\research\efficient-hrl\environments,create_maze_env.py,"def step(self, actions):"
data/raw/repos\research\efficient-hrl\environments,create_maze_env.py,def reset(self):
data/raw/repos\research\efficient-hrl\environments,maze_env.py,def get_ori(self):
data/raw/repos\research\efficient-hrl\environments,maze_env.py,def get_top_down_view(self):
data/raw/repos\research\efficient-hrl\environments,maze_env.py,"def valid(row, col):"
data/raw/repos\research\efficient-hrl\environments,maze_env.py,"def update_view(x, y, d, row=None, col=None):"
data/raw/repos\research\efficient-hrl\environments,maze_env.py,def get_range_sensor_obs(self):
data/raw/repos\research\efficient-hrl\environments,maze_env.py,def _get_obs(self):
data/raw/repos\research\efficient-hrl\environments,maze_env.py,def reset(self):
data/raw/repos\research\efficient-hrl\environments,maze_env.py,def viewer(self):
data/raw/repos\research\efficient-hrl\environments,maze_env.py,"def render(self, *args, **kwargs):"
data/raw/repos\research\efficient-hrl\environments,maze_env.py,def observation_space(self):
data/raw/repos\research\efficient-hrl\environments,maze_env.py,def action_space(self):
data/raw/repos\research\efficient-hrl\environments,maze_env.py,def _find_robot(self):
data/raw/repos\research\efficient-hrl\environments,maze_env.py,def _find_all_robots(self):
data/raw/repos\research\efficient-hrl\environments,maze_env.py,"def _is_in_collision(self, pos):"
data/raw/repos\research\efficient-hrl\environments,maze_env.py,"def step(self, action):"
data/raw/repos\research\efficient-hrl\environments,maze_env_utils.py,def can_move_x(movable):
data/raw/repos\research\efficient-hrl\environments,maze_env_utils.py,def can_move_y(movable):
data/raw/repos\research\efficient-hrl\environments,maze_env_utils.py,def can_move_z(movable):
data/raw/repos\research\efficient-hrl\environments,maze_env_utils.py,def can_spin(movable):
data/raw/repos\research\efficient-hrl\environments,maze_env_utils.py,def can_move(movable):
data/raw/repos\research\efficient-hrl\environments,maze_env_utils.py,def construct_maze(maze_id='Maze'):
data/raw/repos\research\efficient-hrl\environments,maze_env_utils.py,"def line_intersect(pt1, pt2, ptA, ptB):"
data/raw/repos\research\efficient-hrl\environments,maze_env_utils.py,"def ray_segment_intersect(ray, segment):"
data/raw/repos\research\efficient-hrl\environments,maze_env_utils.py,"def point_distance(p1, p2):"
data/raw/repos\research\efficient-hrl\environments,point.py,"def __init__(self, file_path=None, expose_all_qpos=True):"
data/raw/repos\research\efficient-hrl\environments,point.py,def physics(self):
data/raw/repos\research\efficient-hrl\environments,point.py,"def _step(self, a):"
data/raw/repos\research\efficient-hrl\environments,point.py,"def step(self, action):"
data/raw/repos\research\efficient-hrl\environments,point.py,def _get_obs(self):
data/raw/repos\research\efficient-hrl\environments,point.py,def reset_model(self):
data/raw/repos\research\efficient-hrl\environments,point.py,def get_ori(self):
data/raw/repos\research\efficient-hrl\environments,point.py,"def set_xy(self, xy):"
data/raw/repos\research\efficient-hrl\scripts,local_eval.py,def main():
data/raw/repos\research\efficient-hrl\scripts,local_train.py,def main():
data/raw/repos\research\efficient-hrl\utils,eval_utils.py,"def compute_model_loss(sess, model_rollout_fn, states, actions):"
data/raw/repos\research\efficient-hrl\utils,eval_utils.py,"def compute_reward(sess, step_fn, gamma, num_steps):"
data/raw/repos\research\efficient-hrl\utils,utils.py,"def get_contextual_env_base(env_base, begin_ops=None, end_ops=None):"
data/raw/repos\research\efficient-hrl\utils,utils.py,"def init(self_, env_base):"
data/raw/repos\research\efficient-hrl\utils,utils.py,"def render(self, *args, **kwargs):"
data/raw/repos\research\efficient-hrl\utils,utils.py,"def set_sess(self_, sess):"
data/raw/repos\research\efficient-hrl\utils,utils.py,def begin_episode(self_):
data/raw/repos\research\efficient-hrl\utils,utils.py,def end_episode(self_):
data/raw/repos\research\efficient-hrl\utils,utils.py,def merge_specs(specs_):
data/raw/repos\research\efficient-hrl\utils,utils.py,"def merge_shapes(shapes, axis=0):"
data/raw/repos\research\efficient-hrl\utils,utils.py,def get_all_vars(ignore_scopes=None):
data/raw/repos\research\efficient-hrl\utils,utils.py,"def clip(tensor, range_=None):"
data/raw/repos\research\efficient-hrl\utils,utils.py,"def clip_to_bounds(value, minimum, maximum):"
data/raw/repos\research\efficient-hrl\utils,utils.py,"def _clip_to_spec(value, spec):"
data/raw/repos\research\efficient-hrl\utils,utils.py,"def _join_scope(parent_scope, child_scope):"
data/raw/repos\research\efficient-hrl\utils,utils.py,"def assign_vars(vars_, values):"
data/raw/repos\research\efficient-hrl\utils,utils.py,def identity_vars(vars_):
data/raw/repos\research\efficient-hrl\utils,utils.py,"def tile(var, batch_size=1):"
data/raw/repos\research\efficient-hrl\utils,utils.py,def batch_list(vars_list):
data/raw/repos\research\efficient-hrl\utils,utils.py,def print_message(*xs):
data/raw/repos\research\efficient-hrl\utils,utils.py,"def _periodically(body, period, name='periodically'):"
data/raw/repos\research\efficient-hrl\utils,utils.py,def _wrapped_body():
data/raw/repos\research\lfads,distributions.py,"def __init__(self, log_rates):"
data/raw/repos\research\lfads,distributions.py,"def logp(self, bin_counts):"
data/raw/repos\research\lfads,distributions.py,"def diag_gaussian_log_likelihood(z, mu=0.0, logvar=0.0):"
data/raw/repos\research\lfads,distributions.py,"def gaussian_pos_log_likelihood(unused_mean, logvar, noise):"
data/raw/repos\research\lfads,distributions.py,"def __init__(self, batch_size, z_size, mean, logvar):"
data/raw/repos\research\lfads,distributions.py,"def logp(self, z=None):"
data/raw/repos\research\lfads,distributions.py,"def logp(self, z=None):"
data/raw/repos\research\lfads,distributions.py,def mean(self):
data/raw/repos\research\lfads,distributions.py,def logvar(self):
data/raw/repos\research\lfads,distributions.py,def sample(self):
data/raw/repos\research\lfads,distributions.py,"def __init__(self, x_bxu, z_size, name, var_min=0.0):"
data/raw/repos\research\lfads,distributions.py,"def logp(self, z=None):"
data/raw/repos\research\lfads,distributions.py,def mean(self):
data/raw/repos\research\lfads,distributions.py,def logvar(self):
data/raw/repos\research\lfads,distributions.py,def sample(self):
data/raw/repos\research\lfads,distributions.py,"def logp_t(self, z_t_bxu, z_tm1_bxu=None):"
data/raw/repos\research\lfads,distributions.py,"def __init__(self, zs, prior_zs):"
data/raw/repos\research\lfads,distributions.py,"def __init__(self, post_zs, prior_z_process):"
data/raw/repos\research\lfads,lfads.py,def state_size(self):
data/raw/repos\research\lfads,lfads.py,def output_size(self):
data/raw/repos\research\lfads,lfads.py,def state_multiplier(self):
data/raw/repos\research\lfads,lfads.py,"def output_from_state(self, state):"
data/raw/repos\research\lfads,lfads.py,"def __call__(self, inputs, state, scope=None):"
data/raw/repos\research\lfads,lfads.py,def state_size(self):
data/raw/repos\research\lfads,lfads.py,def output_size(self):
data/raw/repos\research\lfads,lfads.py,def state_multiplier(self):
data/raw/repos\research\lfads,lfads.py,"def output_from_state(self, state):"
data/raw/repos\research\lfads,lfads.py,"def __call__(self, inputs, state, scope=None):"
data/raw/repos\research\lfads,lfads.py,"def __init__(self, hps, kind=""train"", datasets=None):"
data/raw/repos\research\lfads,lfads.py,def makelambda(v):
data/raw/repos\research\lfads,lfads.py,"def example_idxs_mod_batch_size(nexamples, batch_size):"
data/raw/repos\research\lfads,lfads.py,"def randomize_example_idxs_mod_batch_size(nexamples, batch_size):"
data/raw/repos\research\lfads,lfads.py,"def shuffle_spikes_in_time(self, data_bxtxd):"
data/raw/repos\research\lfads,lfads.py,"def shuffle_and_flatten_datasets(self, datasets, kind='train'):"
data/raw/repos\research\lfads,lfads.py,"def train_epoch(self, datasets, batch_size=None, do_save_ckpt=True):"
data/raw/repos\research\lfads,lfads.py,"def summarize_all(self, datasets, summary_values):"
data/raw/repos\research\lfads,lfads.py,"def plot_single_example(self, datasets):"
data/raw/repos\research\lfads,lfads.py,"def train_model(self, datasets):"
data/raw/repos\research\lfads,lfads.py,"def trial_batches(N, per):"
data/raw/repos\research\lfads,lfads.py,"def write_model_runs(self, datasets, output_fname=None, push_mean=False):"
data/raw/repos\research\lfads,lfads.py,"def write_model_samples(self, dataset_name, output_fname=None):"
data/raw/repos\research\lfads,lfads.py,"def eval_model_parameters(use_nested=True, include_strs=None):"
data/raw/repos\research\lfads,lfads.py,def spikify_rates(rates_bxtxd):
data/raw/repos\research\lfads,plot_lfads.py,"def _plot_item(W, name, full_name, nspaces):"
data/raw/repos\research\lfads,plot_lfads.py,"def all_plot(d, full_name="""", exclude="""", nspaces=0):"
data/raw/repos\research\lfads,run_lfads.py,"def build_model(hps, kind=""train"", datasets=None):"
data/raw/repos\research\lfads,run_lfads.py,def jsonify_dict(d):
data/raw/repos\research\lfads,run_lfads.py,def jsonify_bool(boolean_value):
data/raw/repos\research\lfads,run_lfads.py,def build_hyperparameter_dict(flags):
data/raw/repos\research\lfads,run_lfads.py,"def __getattr__(self, key):"
data/raw/repos\research\lfads,run_lfads.py,"def __setattr__(self, key, value):"
data/raw/repos\research\lfads,run_lfads.py,"def train(hps, datasets):"
data/raw/repos\research\lfads,run_lfads.py,"def write_model_runs(hps, datasets, output_fname=None, push_mean=False):"
data/raw/repos\research\lfads,run_lfads.py,"def write_model_samples(hps, datasets, dataset_name=None, output_fname=None):"
data/raw/repos\research\lfads,run_lfads.py,"def write_model_parameters(hps, output_fname=None, datasets=None):"
data/raw/repos\research\lfads,run_lfads.py,def clean_data_dict(data_dict):
data/raw/repos\research\lfads,run_lfads.py,"def load_datasets(data_dir, data_filename_stem):"
data/raw/repos\research\lfads,run_lfads.py,def main(_):
data/raw/repos\research\lfads,utils.py,def log_sum_exp(x_k):
data/raw/repos\research\lfads,utils.py,"def write_data(data_fname, data_dict, use_json=False, compression=None):"
data/raw/repos\research\lfads,utils.py,def read_data(data_fname):
data/raw/repos\research\lfads,utils.py,"def write_datasets(data_path, data_fname_stem, dataset_dict, compression=None):"
data/raw/repos\research\lfads,utils.py,"def read_datasets(data_path, data_fname_stem):"
data/raw/repos\research\lfads,utils.py,def list_t_bxn_to_list_b_txn(values_t_bxn):
data/raw/repos\research\lfads,utils.py,def list_t_bxn_to_tensor_bxtxn(values_t_bxn):
data/raw/repos\research\lfads,utils.py,def tensor_bxtxn_to_list_t_bxn(tensor_bxtxn):
data/raw/repos\research\lfads,utils.py,def flatten(list_of_lists):
data/raw/repos\research\lfads\synth_data,generate_itb_data.py,"def __init__(self, N):"
data/raw/repos\research\lfads\synth_data,generate_itb_data.py,"def call(self, h_tm1_bxn, u_bx1):"
data/raw/repos\research\lfads\synth_data,generate_itb_data.py,"def get_data_batch(batch_size, T, rng, u_std):"
data/raw/repos\research\lfads\synth_data,synthetic_data_utils.py,"def generate_rnn(rng, N, g, tau, dt, max_firing_rate):"
data/raw/repos\research\lfads\synth_data,synthetic_data_utils.py,"def run_rnn(rnn, x0, ntime_steps, input_time=None):"
data/raw/repos\research\lfads\synth_data,synthetic_data_utils.py,"def normalize_rates(data_e, E, S):"
data/raw/repos\research\lfads\synth_data,synthetic_data_utils.py,"def spikify_data(data_e, rng, dt=1.0, max_firing_rate=100):"
data/raw/repos\research\lfads\synth_data,synthetic_data_utils.py,"def gaussify_data(data_e, rng, dt=1.0, max_firing_rate=100):"
data/raw/repos\research\lfads\synth_data,synthetic_data_utils.py,"def get_train_n_valid_inds(num_trials, train_fraction, nreplications):"
data/raw/repos\research\lfads\synth_data,synthetic_data_utils.py,"def split_list_by_inds(data, inds1, inds2):"
data/raw/repos\research\lfads\synth_data,synthetic_data_utils.py,def nparray_and_transpose(data_a_b_c):
data/raw/repos\research\lfads\synth_data,synthetic_data_utils.py,"def add_alignment_projections(datasets, npcs, ntime=None, nsamples=None):"
data/raw/repos\research\lstm_object_detection,eval.py,def main(unused_argv):
data/raw/repos\research\lstm_object_detection,eval.py,"def get_next(config, model_config, lstm_config, unroll_length):"
data/raw/repos\research\lstm_object_detection,evaluator.py,"def _create_detection_op(model, input_dict, batch):"
data/raw/repos\research\lstm_object_detection,evaluator.py,"def get_evaluators(eval_config, categories):"
data/raw/repos\research\lstm_object_detection,evaluator.py,def _restore_latest_checkpoint(sess):
data/raw/repos\research\lstm_object_detection,export_tflite_lstd_graph.py,def main(argv):
data/raw/repos\research\lstm_object_detection,export_tflite_lstd_graph_lib.py,def get_const_center_size_encoded_anchors(anchors):
data/raw/repos\research\lstm_object_detection,export_tflite_lstd_model.py,def main(_):
data/raw/repos\research\lstm_object_detection,model_builder.py,"def build(model_config, lstm_config, is_training):"
data/raw/repos\research\lstm_object_detection,model_builder.py,"def _build_lstm_model(ssd_config, lstm_config, is_training):"
data/raw/repos\research\lstm_object_detection,model_builder_test.py,"def create_train_model(self, model_config, lstm_config):"
data/raw/repos\research\lstm_object_detection,model_builder_test.py,"def create_eval_model(self, model_config, lstm_config):"
data/raw/repos\research\lstm_object_detection,model_builder_test.py,def get_model_configs_from_proto(self):
data/raw/repos\research\lstm_object_detection,model_builder_test.py,def get_interleaved_model_configs_from_proto(self):
data/raw/repos\research\lstm_object_detection,model_builder_test.py,def test_model_creation_from_valid_configs(self):
data/raw/repos\research\lstm_object_detection,model_builder_test.py,def test_interleaved_model_creation_from_valid_configs(self):
data/raw/repos\research\lstm_object_detection,model_builder_test.py,def test_model_creation_from_invalid_configs(self):
data/raw/repos\research\lstm_object_detection,test_tflite_model.py,def main(_):
data/raw/repos\research\lstm_object_detection,train.py,def main(_):
data/raw/repos\research\lstm_object_detection,train.py,"def get_next(config, model_config, lstm_config, unroll_length):"
data/raw/repos\research\lstm_object_detection,trainer.py,def create_input_queue(create_tensor_dict_fn):
data/raw/repos\research\lstm_object_detection,trainer.py,"def get_inputs(input_queue, num_classes, merge_multiple_label_boxes=False):"
data/raw/repos\research\lstm_object_detection,trainer.py,def extract_images_and_targets(read_data):
data/raw/repos\research\lstm_object_detection,trainer.py,"def _create_losses(input_queue, create_model_fn, train_config):"
data/raw/repos\research\lstm_object_detection,trainer.py,def initializer_fn(sess):
data/raw/repos\research\lstm_object_detection\builders,graph_rewriter_builder.py,def graph_rewrite_fn():
data/raw/repos\research\lstm_object_detection\builders,graph_rewriter_builder.py,def _get_context_from_op(op):
data/raw/repos\research\lstm_object_detection\builders,graph_rewriter_builder_test.py,def testQuantizationBuilderSetsUpCorrectTrainArguments(self):
data/raw/repos\research\lstm_object_detection\builders,graph_rewriter_builder_test.py,def testQuantizationBuilderSetsUpCorrectEvalArguments(self):
data/raw/repos\research\lstm_object_detection\builders,graph_rewriter_builder_test.py,def testQuantizationBuilderAddsQuantOverride(self):
data/raw/repos\research\lstm_object_detection\builders,graph_rewriter_builder_test.py,"def _buildGraph(self, scope='test_graph'):"
data/raw/repos\research\lstm_object_detection\inputs,seq_dataset_builder_test.py,def _create_tf_record(self):
data/raw/repos\research\lstm_object_detection\inputs,seq_dataset_builder_test.py,def _get_model_configs_from_proto(self):
data/raw/repos\research\lstm_object_detection\inputs,seq_dataset_builder_test.py,def _get_data_augmentation_preprocessor_proto(self):
data/raw/repos\research\lstm_object_detection\inputs,seq_dataset_builder_test.py,"def _create_training_dict(self, tensor_dict):"
data/raw/repos\research\lstm_object_detection\inputs,seq_dataset_builder_test.py,"def _get_input_proto(self, input_reader):"
data/raw/repos\research\lstm_object_detection\inputs,seq_dataset_builder_test.py,def test_video_input_reader(self):
data/raw/repos\research\lstm_object_detection\inputs,seq_dataset_builder_test.py,def test_build_with_data_augmentation(self):
data/raw/repos\research\lstm_object_detection\inputs,seq_dataset_builder_test.py,def test_raises_error_without_input_paths(self):
data/raw/repos\research\lstm_object_detection\inputs,tf_sequence_example_decoder.py,"def tensors_to_item(self, keys_to_tensors):"
data/raw/repos\research\lstm_object_detection\inputs,tf_sequence_example_decoder.py,def __init__(self):
data/raw/repos\research\lstm_object_detection\inputs,tf_sequence_example_decoder.py,"def decode(self, tf_seq_example_string_tensor, items=None):"
data/raw/repos\research\lstm_object_detection\inputs,tf_sequence_example_decoder.py,def list_items(self):
data/raw/repos\research\lstm_object_detection\inputs,tf_sequence_example_decoder.py,"def decode(self, serialized_example, items=None):"
data/raw/repos\research\lstm_object_detection\inputs,tf_sequence_example_decoder_test.py,"def _EncodeImage(self, image_tensor, encoding_type='jpeg'):"
data/raw/repos\research\lstm_object_detection\inputs,tf_sequence_example_decoder_test.py,"def _DecodeImage(self, image_encoded, encoding_type='jpeg'):"
data/raw/repos\research\lstm_object_detection\inputs,tf_sequence_example_decoder_test.py,def testDecodeJpegImageAndBoundingBox(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells.py,def state_size(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells.py,def state_size_flat(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells.py,def output_size(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells.py,"def __call__(self, inputs, state, scope=None):"
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells.py,"def init_state(self, state_name, batch_size, dtype, learned_state=False):"
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells.py,"def pre_bottleneck(self, inputs, state, input_index):"
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells.py,def state_size(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells.py,def state_size_flat(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells.py,def output_size(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells.py,def filter_size(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells.py,def num_groups(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells.py,"def __call__(self, inputs, state, scope=None):"
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells.py,"def init_state(self, state_name, batch_size, dtype, learned_state=False):"
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells.py,"def pre_bottleneck(self, inputs, state, input_index):"
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells_test.py,def test_run_lstm_cell(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells_test.py,def test_run_lstm_cell_with_flattened_state(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells_test.py,def test_run_lstm_cell_with_output_bottleneck(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells_test.py,def test_get_init_state(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells_test.py,def test_get_init_learned_state(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells_test.py,def test_unroll(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells_test.py,def test_prebottleneck(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells_test.py,def test_flatten_state(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells_test.py,def test_run_lstm_cell(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells_test.py,def test_run_lstm_cell_with_output_bottleneck(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells_test.py,def test_get_init_state(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells_test.py,def test_get_init_learned_state(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells_test.py,def test_unroll(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells_test.py,def test_prebottleneck(self):
data/raw/repos\research\lstm_object_detection\lstm,lstm_cells_test.py,def test_flatten_state(self):
data/raw/repos\research\lstm_object_detection\lstm,rnn_decoder.py,def __enter__(self):
data/raw/repos\research\lstm_object_detection\lstm,rnn_decoder.py,"def __exit__(self, exc_type, exc_value, traceback):"
data/raw/repos\research\lstm_object_detection\lstm,rnn_decoder.py,"def select_state(previous_state, new_state, action):"
data/raw/repos\research\lstm_object_detection\lstm,rnn_decoder_test.py,"def __init__(self, input_size, num_units):"
data/raw/repos\research\lstm_object_detection\lstm,rnn_decoder_test.py,"def __call__(self, inputs, state_tuple):"
data/raw/repos\research\lstm_object_detection\lstm,rnn_decoder_test.py,def state_size(self):
data/raw/repos\research\lstm_object_detection\lstm,rnn_decoder_test.py,def output_size(self):
data/raw/repos\research\lstm_object_detection\lstm,rnn_decoder_test.py,"def pre_bottleneck(self, inputs, state, input_index):"
data/raw/repos\research\lstm_object_detection\lstm,rnn_decoder_test.py,def test_rnn_decoder_single_unroll(self):
data/raw/repos\research\lstm_object_detection\lstm,rnn_decoder_test.py,def test_rnn_decoder_multiple_unroll(self):
data/raw/repos\research\lstm_object_detection\lstm,rnn_decoder_test.py,def test_rnn_decoder_single_unroll(self):
data/raw/repos\research\lstm_object_detection\lstm,rnn_decoder_test.py,def test_rnn_decoder_multiple_unroll(self):
data/raw/repos\research\lstm_object_detection\lstm,rnn_decoder_test.py,def test_rnn_decoder_multiple_unroll_with_skip(self):
data/raw/repos\research\lstm_object_detection\lstm,utils_test.py,def test_quantizable_concat_is_training(self):
data/raw/repos\research\lstm_object_detection\lstm,utils_test.py,def test_quantizable_concat_inference(self):
data/raw/repos\research\lstm_object_detection\lstm,utils_test.py,def test_quantizable_concat_not_quantized_is_training(self):
data/raw/repos\research\lstm_object_detection\lstm,utils_test.py,def test_quantizable_concat_not_quantized_inference(self):
data/raw/repos\research\lstm_object_detection\lstm,utils_test.py,def test_quantize_op_is_training(self):
data/raw/repos\research\lstm_object_detection\lstm,utils_test.py,def test_quantize_op_inference(self):
data/raw/repos\research\lstm_object_detection\lstm,utils_test.py,def test_fixed_quantize_op(self):
data/raw/repos\research\lstm_object_detection\lstm,utils_test.py,"def _check_min_max_vars(self, graph):"
data/raw/repos\research\lstm_object_detection\lstm,utils_test.py,"def _check_min_max_ema(self, graph):"
data/raw/repos\research\lstm_object_detection\lstm,utils_test.py,"def _check_no_min_max_vars(self, graph):"
data/raw/repos\research\lstm_object_detection\lstm,utils_test.py,"def _check_no_min_max_ema(self, graph):"
data/raw/repos\research\lstm_object_detection\lstm,utils_test.py,def test_quantizable_separable_conv2d(self):
data/raw/repos\research\lstm_object_detection\lstm,utils_test.py,def test_quantizable_separable_conv2d_not_quantized(self):
data/raw/repos\research\lstm_object_detection\lstm,utils_test.py,"def _check_depthwise_bias_add(self, graph, scope):"
data/raw/repos\research\lstm_object_detection\lstm,utils_test.py,"def _check_no_depthwise_bias_add(self, graph, scope):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,def unroll_length(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,"def unroll_length(self, unroll_length):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,"def loss(self, prediction_dict, true_image_shapes, scope=None):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,"def restore_map(self, fine_tune_checkpoint_type='lstm'):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,def get_base_network_scope(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,def clip_state(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,"def clip_state(self, clip_state):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,def depth_multipliers(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,"def depth_multipliers(self, depth_multipliers):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,def lstm_state_depth(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,"def lstm_state_depth(self, lstm_state_depth):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,def is_quantized(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,"def is_quantized(self, is_quantized):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,def interleaved(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,def states_and_outputs(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,def step(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,def get_base_network_scope(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,"def create_lstm_cell(self, batch_size, output_size, state_saver, state_name):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,def pre_bottleneck(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,"def pre_bottleneck(self, pre_bottleneck):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,def low_res(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,"def low_res(self, low_res):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,def interleaved(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,def interleave_method(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,"def interleave_method(self, interleave_method):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,"def extract_base_features_large(self, preprocessed_inputs):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch.py,"def extract_base_features_small(self, preprocessed_inputs):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch_test.py,def __init__(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch_test.py,def scope_fn(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch_test.py,def create_lstm_cell(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch_test.py,def __init__(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch_test.py,def scope_fn(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch_test.py,def create_lstm_cell(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch_test.py,"def extract_base_features_large(self, preprocessed_inputs):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch_test.py,"def extract_base_features_small(self, preprocessed_inputs):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch_test.py,def name_scope(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch_test.py,def num_anchors_per_location(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch_test.py,"def _generate(self, feature_map_shape_list, im_height, im_width):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch_test.py,def num_anchors(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch_test.py,def image_resizer_fn(image):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch_test.py,"def _get_value_for_matching_key(self, dictionary, suffix):"
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch_test.py,def test_predict_returns_correct_items_and_sizes(self):
data/raw/repos\research\lstm_object_detection\meta_architectures,lstm_ssd_meta_arch_test.py,def test_interleaved_predict_returns_correct_items_and_sizes(self):
data/raw/repos\research\lstm_object_detection\metrics,coco_evaluation_all_frames.py,"def add_single_ground_truth_image_info(self, image_id, groundtruth_dict):"
data/raw/repos\research\lstm_object_detection\metrics,coco_evaluation_all_frames.py,"def add_single_detected_image_info(self, image_id, detections_dict):"
data/raw/repos\research\lstm_object_detection\metrics,coco_evaluation_all_frames_test.py,def testGroundtruthAndDetectionsDisagreeOnAllFrames(self):
data/raw/repos\research\lstm_object_detection\metrics,coco_evaluation_all_frames_test.py,def testGroundtruthAndDetections(self):
data/raw/repos\research\lstm_object_detection\metrics,coco_evaluation_all_frames_test.py,def testMissingDetectionResults(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor.py,"def extract_base_features_large(self, preprocessed_inputs):"
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor.py,"def extract_base_features_small(self, preprocessed_inputs):"
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor_test.py,def conv_hyperparams_fn():
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor_test.py,def test_feature_extractor_construct_with_expected_params(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor_test.py,def conv_hyperparams_fn():
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor_test.py,def test_extract_features_returns_correct_shapes_128(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor_test.py,def test_extract_features_returns_correct_shapes_unroll10(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor_test.py,def test_extract_features_returns_correct_shapes_320(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor_test.py,def test_extract_features_returns_correct_shapes_enforcing_min_depth(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor_test.py,def test_extract_features_returns_correct_shapes_with_pad_to_multiple(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor_test.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor_test.py,def test_variables_only_created_in_scope(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor_test.py,def test_has_fused_batchnorm(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor_test.py,def test_variables_for_tflite(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor_test.py,def test_output_nodes_for_tflite(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor_test.py,def test_fixed_concat_nodes(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor_test.py,def test_lstm_states(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_interleaved_mobilenet_v2_feature_extractor_test.py,def graph_fn(image_tensor):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_mobilenet_v1_feature_extractor_test.py,def test_feature_extractor_construct_with_expected_params(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_mobilenet_v1_feature_extractor_test.py,def conv_hyperparams_fn():
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_mobilenet_v1_feature_extractor_test.py,def test_extract_features_returns_correct_shapes_256(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_mobilenet_v1_feature_extractor_test.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_mobilenet_v1_feature_extractor_test.py,def test_variables_only_created_in_scope(self):
data/raw/repos\research\lstm_object_detection\models,lstm_ssd_mobilenet_v1_feature_extractor_test.py,def test_lstm_non_zero_state(self):
data/raw/repos\research\lstm_object_detection\models,mobilenet_defs.py,"def mobilenet_v1_lite_def(depth_multiplier, low_res=False):"
data/raw/repos\research\lstm_object_detection\models,mobilenet_defs.py,"def _find_target_depth(original, depth_multiplier):"
data/raw/repos\research\lstm_object_detection\models,mobilenet_defs.py,"def mobilenet_v2_lite_def(reduced=False, is_quantized=False, low_res=False):"
data/raw/repos\research\lstm_object_detection\models,mobilenet_defs_test.py,def test_mobilenet_v1_lite_def(self):
data/raw/repos\research\lstm_object_detection\models,mobilenet_defs_test.py,def test_mobilenet_v1_lite_def_depthmultiplier_half(self):
data/raw/repos\research\lstm_object_detection\models,mobilenet_defs_test.py,def test_mobilenet_v1_lite_def_depthmultiplier_2x(self):
data/raw/repos\research\lstm_object_detection\models,mobilenet_defs_test.py,def test_mobilenet_v1_lite_def_low_res(self):
data/raw/repos\research\lstm_object_detection\models,mobilenet_defs_test.py,def test_mobilenet_v2_lite_def(self):
data/raw/repos\research\lstm_object_detection\models,mobilenet_defs_test.py,def test_mobilenet_v2_lite_def_is_quantized(self):
data/raw/repos\research\lstm_object_detection\models,mobilenet_defs_test.py,def test_mobilenet_v2_lite_def_low_res(self):
data/raw/repos\research\lstm_object_detection\models,mobilenet_defs_test.py,def test_mobilenet_v2_lite_def_reduced(self):
data/raw/repos\research\lstm_object_detection\models,mobilenet_defs_test.py,"def _assert_contains_op(self, op_name):"
data/raw/repos\research\lstm_object_detection\utils,config_util.py,def get_configs_from_pipeline_file(pipeline_config_path):
data/raw/repos\research\lstm_object_detection\utils,config_util.py,def create_pipeline_proto_from_configs(configs):
data/raw/repos\research\lstm_object_detection\utils,config_util_test.py,"def _write_config(config, config_path):"
data/raw/repos\research\lstm_object_detection\utils,config_util_test.py,def test_get_configs_from_pipeline_file(self):
data/raw/repos\research\lstm_object_detection\utils,config_util_test.py,def test_create_pipeline_proto_from_configs(self):
data/raw/repos\research\marco,Automated_Marco.py,def load_images(file_list):
data/raw/repos\research\marco,jpeg2json.py,def to_json(data):
data/raw/repos\research\object_detection,eval_util.py,"def write_metrics(metrics, global_step, summary_dir):"
data/raw/repos\research\object_detection,eval_util.py,def _scale_box_to_absolute(args):
data/raw/repos\research\object_detection,eval_util.py,def _resize_detection_masks(arg_tuple):
data/raw/repos\research\object_detection,eval_util.py,def _resize_groundtruth_masks(args):
data/raw/repos\research\object_detection,eval_util.py,def _resize_surface_coordinate_masks(args):
data/raw/repos\research\object_detection,eval_util.py,def _scale_keypoint_to_absolute(args):
data/raw/repos\research\object_detection,eval_util.py,def _scale_box_to_normalized_true_image(args):
data/raw/repos\research\object_detection,eval_util.py,def _scale_keypoints_to_normalized_true_image(args):
data/raw/repos\research\object_detection,eval_util.py,"def get_evaluators(eval_config, categories, evaluator_options=None):"
data/raw/repos\research\object_detection,eval_util.py,def evaluator_options_from_eval_config(eval_config):
data/raw/repos\research\object_detection,eval_util.py,def has_densepose(eval_dict):
data/raw/repos\research\object_detection,eval_util_test.py,def _get_categories_list(self):
data/raw/repos\research\object_detection,eval_util_test.py,def _get_categories_list_with_keypoints(self):
data/raw/repos\research\object_detection,eval_util_test.py,def test_get_eval_metric_ops_raises_error_with_unsupported_metric(self):
data/raw/repos\research\object_detection,eval_util_test.py,def test_get_eval_metric_ops_for_evaluators(self):
data/raw/repos\research\object_detection,eval_util_test.py,def test_get_evaluator_with_evaluator_options(self):
data/raw/repos\research\object_detection,eval_util_test.py,def test_get_evaluator_with_no_evaluator_options(self):
data/raw/repos\research\object_detection,eval_util_test.py,def test_get_evaluator_with_keypoint_metrics(self):
data/raw/repos\research\object_detection,eval_util_test.py,def test_get_evaluator_with_unmatched_label(self):
data/raw/repos\research\object_detection,eval_util_test.py,def test_padded_image_result_dict(self):
data/raw/repos\research\object_detection,eval_util_test.py,def graph_fn():
data/raw/repos\research\object_detection,eval_util_test.py,def test_evaluator_options_from_eval_config_no_super_categories(self):
data/raw/repos\research\object_detection,eval_util_test.py,def test_evaluator_options_from_eval_config_with_super_categories(self):
data/raw/repos\research\object_detection,exporter.py,def rewrite_nn_resize_op(is_quantized=False):
data/raw/repos\research\object_detection,exporter.py,def remove_nn():
data/raw/repos\research\object_detection,exporter.py,def replace_matches(consumer_pattern):
data/raw/repos\research\object_detection,exporter.py,def _image_tensor_input_placeholder(input_shape=None):
data/raw/repos\research\object_detection,exporter.py,def _tf_example_input_placeholder(input_shape=None):
data/raw/repos\research\object_detection,exporter.py,def decode(tf_example_string_tensor):
data/raw/repos\research\object_detection,exporter.py,def _encoded_image_string_tensor_input_placeholder(input_shape=None):
data/raw/repos\research\object_detection,exporter.py,def decode(encoded_image_string_tensor):
data/raw/repos\research\object_detection,exporter.py,def profile_inference_graph(graph):
data/raw/repos\research\object_detection,exporter_lib_tf2_test.py,"def __init__(self, conv_weight_scalar=1.0):"
data/raw/repos\research\object_detection,exporter_lib_tf2_test.py,"def preprocess(self, inputs):"
data/raw/repos\research\object_detection,exporter_lib_tf2_test.py,"def predict(self, preprocessed_inputs, true_image_shapes, **side_inputs):"
data/raw/repos\research\object_detection,exporter_lib_tf2_test.py,"def postprocess(self, prediction_dict, true_image_shapes):"
data/raw/repos\research\object_detection,exporter_lib_tf2_test.py,"def predict_masks_from_boxes(self, prediction_dict, true_image_shapes, boxes):"
data/raw/repos\research\object_detection,exporter_lib_tf2_test.py,"def restore_map(self, checkpoint_path, fine_tune_checkpoint_type):"
data/raw/repos\research\object_detection,exporter_lib_tf2_test.py,"def restore_from_objects(self, fine_tune_checkpoint_type):"
data/raw/repos\research\object_detection,exporter_lib_tf2_test.py,"def loss(self, prediction_dict, true_image_shapes):"
data/raw/repos\research\object_detection,exporter_lib_tf2_test.py,def regularization_losses(self):
data/raw/repos\research\object_detection,exporter_lib_tf2_test.py,def updates(self):
data/raw/repos\research\object_detection,exporter_lib_tf2_test.py,"def get_dummy_input(self, input_type):"
data/raw/repos\research\object_detection,exporter_lib_tf2_test.py,def test_export_checkpoint_and_run_inference_with_image(self):
data/raw/repos\research\object_detection,exporter_lib_tf2_test.py,"def get_dummy_input(self, input_type):"
data/raw/repos\research\object_detection,exporter_lib_v2.py,def _decode_image(encoded_image_string_tensor):
data/raw/repos\research\object_detection,exporter_lib_v2.py,def _decode_tf_example(tf_example_string_tensor):
data/raw/repos\research\object_detection,exporter_lib_v2.py,"def _get_side_input_signature(self, zipped_side_inputs):"
data/raw/repos\research\object_detection,exporter_lib_v2.py,"def _get_side_names_from_zip(self, zipped_side_inputs):"
data/raw/repos\research\object_detection,exporter_lib_v2.py,"def _preprocess_input(self, batch_input, decode_fn):"
data/raw/repos\research\object_detection,exporter_lib_v2.py,def _decode_and_preprocess(single_input):
data/raw/repos\research\object_detection,exporter_lib_v2.py,"def _run_inference_on_images(self, images, true_shapes, **kwargs):"
data/raw/repos\research\object_detection,exporter_lib_v2.py,"def call_func(input_tensor, *side_inputs):"
data/raw/repos\research\object_detection,exporter_lib_v2.py,def get_true_shapes(input_tensor):
data/raw/repos\research\object_detection,exporter_lib_v2.py,"def __call__(self, input_tensor):"
data/raw/repos\research\object_detection,exporter_lib_v2.py,"def __call__(self, input_tensor):"
data/raw/repos\research\object_detection,exporter_lib_v2.py,"def __call__(self, input_tensor):"
data/raw/repos\research\object_detection,exporter_lib_v2.py,"def _run_segmentation_on_images(self, image, boxes, **kwargs):"
data/raw/repos\research\object_detection,exporter_lib_v2.py,"def __call__(self, input_tensor, boxes):"
data/raw/repos\research\object_detection,exporter_main_v2.py,def main(_):
data/raw/repos\research\object_detection,exporter_tf1_test.py,"def preprocess(self, inputs):"
data/raw/repos\research\object_detection,exporter_tf1_test.py,"def predict(self, preprocessed_inputs, true_image_shapes):"
data/raw/repos\research\object_detection,exporter_tf1_test.py,"def postprocess(self, prediction_dict, true_image_shapes):"
data/raw/repos\research\object_detection,exporter_tf1_test.py,"def restore_map(self, checkpoint_path, fine_tune_checkpoint_type):"
data/raw/repos\research\object_detection,exporter_tf1_test.py,"def restore_from_objects(self, fine_tune_checkpoint_type):"
data/raw/repos\research\object_detection,exporter_tf1_test.py,"def loss(self, prediction_dict, true_image_shapes):"
data/raw/repos\research\object_detection,exporter_tf1_test.py,def regularization_losses(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def updates(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,"def _load_inference_graph(self, inference_graph_path, is_binary=True):"
data/raw/repos\research\object_detection,exporter_tf1_test.py,"def _create_tf_example(self, image_array):"
data/raw/repos\research\object_detection,exporter_tf1_test.py,def _bytes_feature(value):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_export_graph_with_image_tensor_input(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_write_inference_graph(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_export_graph_with_fixed_size_image_tensor_input(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_export_graph_with_tf_example_input(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_export_graph_with_fixed_size_tf_example_input(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_export_graph_with_encoded_image_string_input(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_export_graph_with_fixed_size_encoded_image_string_input(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,"def _get_variables_in_checkpoint(self, checkpoint_file):"
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_replace_variable_values_with_moving_averages(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_export_graph_with_moving_averages(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_export_model_with_quantization_nodes(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_export_model_with_all_output_nodes(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_export_model_with_detection_only_nodes(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_export_model_with_detection_only_nodes_and_detection_features(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_export_and_run_inference_with_image_tensor(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,"def _create_encoded_image_string(self, image_array_np, encoding_format):"
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_export_and_run_inference_with_encoded_image_string_tensor(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_raise_runtime_error_on_images_with_different_sizes(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_export_and_run_inference_with_tf_example(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_write_frozen_graph(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_export_graph_saves_pipeline_file(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_export_saved_model_and_run_inference(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_write_saved_model(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_export_checkpoint_and_run_inference(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_write_graph_and_checkpoint(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_rewrite_nn_resize_op(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_rewrite_nn_resize_op_quantized(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_rewrite_nn_resize_op_odd_size(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_rewrite_nn_resize_op_quantized_odd_size(self):
data/raw/repos\research\object_detection,exporter_tf1_test.py,def test_rewrite_nn_resize_op_multiple_path(self):
data/raw/repos\research\object_detection,export_inference_graph.py,def main(_):
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2.py,def get_const_center_size_encoded_anchors(anchors):
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2.py,"def _process_config(self, pipeline_config):"
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2.py,def input_shape(self):
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2.py,def postprocess_implements_signature(self):
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2.py,"def _get_postprocess_fn(self, num_anchors, num_classes):"
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2.py,"def dummy_post_processing(box_encodings, class_predictions, anchors):"
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2.py,"def inference_fn(self, image):"
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2.py,def get_model(self):
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2.py,"def _process_config(self, pipeline_config):"
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2.py,def input_shape(self):
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2.py,"def inference_fn(self, image):"
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,def __init__(self):
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,"def preprocess(self, inputs):"
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,"def predict(self, preprocessed_inputs, true_image_shapes):"
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,"def postprocess(self, prediction_dict, true_image_shapes):"
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,"def restore_map(self, checkpoint_path, from_detection_checkpoint):"
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,"def restore_from_objects(self, fine_tune_checkpoint_type):"
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,"def loss(self, prediction_dict, true_image_shapes):"
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,def regularization_losses(self):
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,def updates(self):
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,"def _save_checkpoint_from_mock_model(self, checkpoint_dir):"
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,def _get_ssd_config(self):
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,def _get_center_net_config(self):
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,def test_postprocess_implements_signature(self):
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,def test_unsupported_architecture(self):
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,def test_export_yields_saved_model(self):
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,def test_exported_model_inference(self):
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,def test_center_net_inference_object_detection(self):
data/raw/repos\research\object_detection,export_tflite_graph_lib_tf2_test.py,def test_center_net_inference_keypoint(self):
data/raw/repos\research\object_detection,export_tflite_graph_tf2.py,def main(argv):
data/raw/repos\research\object_detection,export_tflite_ssd_graph.py,def main(argv):
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib.py,def get_const_center_size_encoded_anchors(anchors):
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,"def __init__(self, add_detection_masks=False):"
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,"def preprocess(self, inputs):"
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,"def predict(self, preprocessed_inputs, true_image_shapes):"
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,"def postprocess(self, prediction_tensors, true_image_shapes):"
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,"def restore_map(self, checkpoint_path, from_detection_checkpoint):"
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,"def restore_from_objects(self, fine_tune_checkpoint_type):"
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,"def loss(self, prediction_dict, true_image_shapes):"
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,def regularization_losses(self):
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,def updates(self):
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,"def _assert_quant_vars_exists(self, tflite_graph_file):"
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,"def _import_graph_and_run_inference(self, tflite_graph_file, num_channels=3):"
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,def test_export_tflite_graph_with_moving_averages(self):
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,def test_export_tflite_graph_without_moving_averages(self):
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,def test_export_tflite_graph_grayscale(self):
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,def test_export_tflite_graph_with_quantization(self):
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,def test_export_tflite_graph_with_softmax_score_conversion(self):
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,def test_export_tflite_graph_with_sigmoid_score_conversion(self):
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,def test_export_tflite_graph_with_postprocessing_op(self):
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,def test_export_tflite_graph_with_additional_tensors(self):
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,def test_export_tflite_graph_with_postprocess_op_and_additional_tensors(self):
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,"def test_export_with_nn_resize_op_not_called_without_fpn(self, mock_get):"
data/raw/repos\research\object_detection,export_tflite_ssd_graph_lib_tf1_test.py,"def test_export_with_nn_resize_op_called_with_fpn(self, mock_get):"
data/raw/repos\research\object_detection,inputs.py,def true_fn():
data/raw/repos\research\object_detection,inputs.py,def false_fn():
data/raw/repos\research\object_detection,inputs.py,def true_fn():
data/raw/repos\research\object_detection,inputs.py,def false_fn():
data/raw/repos\research\object_detection,inputs.py,"def _remove_unrecognized_classes(class_ids, unrecognized_label):"
data/raw/repos\research\object_detection,inputs.py,def assert_or_prune_invalid_boxes(boxes):
data/raw/repos\research\object_detection,inputs.py,"def augment_input_data(tensor_dict, data_augmentation_options):"
data/raw/repos\research\object_detection,inputs.py,def _get_labels_dict(input_dict):
data/raw/repos\research\object_detection,inputs.py,def _replace_empty_string_with_random_number(string_tensor):
data/raw/repos\research\object_detection,inputs.py,"def _get_features_dict(input_dict, include_source_id=False):"
data/raw/repos\research\object_detection,inputs.py,def _train_input_fn(params=None):
data/raw/repos\research\object_detection,inputs.py,def transform_and_pad_input_data_fn(tensor_dict):
data/raw/repos\research\object_detection,inputs.py,"def create_eval_input_fn(eval_config, eval_input_config, model_config):"
data/raw/repos\research\object_detection,inputs.py,def _eval_input_fn(params=None):
data/raw/repos\research\object_detection,inputs.py,def transform_and_pad_input_data_fn(tensor_dict):
data/raw/repos\research\object_detection,inputs.py,"def create_predict_input_fn(model_config, predict_input_config):"
data/raw/repos\research\object_detection,inputs.py,def _predict_input_fn(params=None):
data/raw/repos\research\object_detection,inputs.py,"def get_reduce_to_frame_fn(input_reader_config, is_training):"
data/raw/repos\research\object_detection,inputs.py,def get_single_frame(tensor_dict):
data/raw/repos\research\object_detection,inputs_test.py,def _get_configs_for_model(model_name):
data/raw/repos\research\object_detection,inputs_test.py,"def _get_configs_for_model_sequence_example(model_name, frame_index=-1):"
data/raw/repos\research\object_detection,inputs_test.py,def _make_initializable_iterator(dataset):
data/raw/repos\research\object_detection,inputs_test.py,def test_faster_rcnn_resnet50_train_input(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_faster_rcnn_resnet50_train_input_with_additional_channels(self):
data/raw/repos\research\object_detection,inputs_test.py,"def test_faster_rcnn_resnet50_eval_input(self, eval_batch_size=1):"
data/raw/repos\research\object_detection,inputs_test.py,def test_ssd_inceptionV2_train_input(self):
data/raw/repos\research\object_detection,inputs_test.py,"def test_ssd_inceptionV2_eval_input(self, eval_batch_size=1):"
data/raw/repos\research\object_detection,inputs_test.py,def test_predict_input(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_predict_input_with_additional_channels(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_error_with_bad_train_config(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_error_with_bad_train_input_config(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_error_with_bad_train_model_config(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_error_with_bad_eval_config(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_error_with_bad_eval_input_config(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_error_with_bad_eval_model_config(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_output_equal_in_replace_empty_string_with_random_number(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_output_is_integer_in_replace_empty_string_with_random_number(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_force_no_resize(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_apply_image_and_box_augmentation(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,def test_apply_image_and_box_augmentation_with_scores(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,def test_include_masks_in_data_augmentation(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,def test_include_keypoints_in_data_augmentation(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,def _fake_model_preprocessor_fn(image):
data/raw/repos\research\object_detection,inputs_test.py,"def _fake_image_resizer_fn(image, mask):"
data/raw/repos\research\object_detection,inputs_test.py,def _fake_resize50_preprocess_fn(image):
data/raw/repos\research\object_detection,inputs_test.py,def test_combine_additional_channels_if_present(self):
data/raw/repos\research\object_detection,inputs_test.py,"def graph_fn(image, additional_channels):"
data/raw/repos\research\object_detection,inputs_test.py,def test_use_multiclass_scores_when_present(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,def test_use_multiclass_scores_when_not_present(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,"def test_use_labeled_classes(self, labeled_classes):"
data/raw/repos\research\object_detection,inputs_test.py,def test_returns_correct_class_label_encodings(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,def test_returns_correct_labels_with_unrecognized_class(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,def test_returns_correct_merged_boxes(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,def test_returns_correct_groundtruth_confidences_when_input_present(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,def test_returns_resized_masks(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,"def fake_image_resizer_fn(image, masks=None):"
data/raw/repos\research\object_detection,inputs_test.py,def test_applies_model_preprocess_fn_to_image_tensor(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn(image):
data/raw/repos\research\object_detection,inputs_test.py,def fake_model_preprocessor_fn(image):
data/raw/repos\research\object_detection,inputs_test.py,def test_applies_data_augmentation_fn_to_tensor_dict(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn(image):
data/raw/repos\research\object_detection,inputs_test.py,def add_one_data_augmentation_fn(tensor_dict):
data/raw/repos\research\object_detection,inputs_test.py,def test_applies_data_augmentation_fn_before_model_preprocess_fn(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn(image):
data/raw/repos\research\object_detection,inputs_test.py,def mul_two_model_preprocessor_fn(image):
data/raw/repos\research\object_detection,inputs_test.py,def add_five_to_image_data_augmentation_fn(tensor_dict):
data/raw/repos\research\object_detection,inputs_test.py,def test_resize_with_padding(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,def test_groundtruth_keypoint_weights(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,def test_groundtruth_keypoint_weights_default(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,def test_groundtruth_dense_pose(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,def test_groundtruth_keypoint_depths(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,def test_pad_images_boxes_and_classes(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_clip_boxes_and_classes(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,def test_images_and_additional_channels(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_images_and_additional_channels_errors(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_gray_images(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_gray_images_and_additional_channels(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_keypoints(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_dense_pose(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_pad_input_data_to_static_shapes_for_trackid(self):
data/raw/repos\research\object_detection,inputs_test.py,def test_context_features(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,def test_negative_size_error(self):
data/raw/repos\research\object_detection,inputs_test.py,def graph_fn():
data/raw/repos\research\object_detection,inputs_test.py,def test_negative_size_no_assert(self):
data/raw/repos\research\object_detection,model_hparams.py,def create_hparams(hparams_overrides=None):
data/raw/repos\research\object_detection,model_lib.py,"def unstack_batch(tensor_dict, unpad_groundtruth_tensors=True):"
data/raw/repos\research\object_detection,model_lib.py,"def provide_groundtruth(model, labels, training_step=None):"
data/raw/repos\research\object_detection,model_lib.py,"def model_fn(features, labels, mode, params=None):"
data/raw/repos\research\object_detection,model_lib.py,def postprocess_wrapper(args):
data/raw/repos\research\object_detection,model_lib.py,def tpu_scaffold():
data/raw/repos\research\object_detection,model_lib.py,def terminate_eval():
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def _get_data_path(model_name):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def get_pipeline_config_path(model_name):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def _get_labelmap_path():
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def _get_keypoints_labelmap_path():
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def _get_sequence_example_labelmap_path():
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def _get_configs_for_model(model_name):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def _make_initializable_iterator(dataset):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def setUpClass(cls):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,"def _assert_model_fn_for_predict(self, configs):"
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_model_fn_in_train_mode(self):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_model_fn_in_train_mode_sequences(self):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_model_fn_in_train_mode_freeze_all_variables(self):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_model_fn_in_train_mode_freeze_all_included_variables(self):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_model_fn_in_train_mode_freeze_box_predictor(self):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_model_fn_in_eval_mode(self):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_model_fn_in_eval_mode_sequences(self):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_model_fn_in_keypoints_eval_mode(self):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_model_fn_in_eval_on_train_mode(self):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_model_fn_in_predict_mode(self):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_create_estimator_and_inputs(self):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_create_estimator_and_inputs_sequence_example(self):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_create_estimator_with_default_train_eval_steps(self):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_create_tpu_estimator_and_inputs(self):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_create_train_and_eval_specs(self):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_experiment(self):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_unbatch_without_unpadding(self):
data/raw/repos\research\object_detection,model_lib_tf1_test.py,def test_unbatch_and_unpad_groundtruth_tensors(self):
data/raw/repos\research\object_detection,model_lib_tf2_test.py,def _get_data_path():
data/raw/repos\research\object_detection,model_lib_tf2_test.py,def get_pipeline_config_path(model_name):
data/raw/repos\research\object_detection,model_lib_tf2_test.py,def _get_labelmap_path():
data/raw/repos\research\object_detection,model_lib_tf2_test.py,def _get_config_kwarg_overrides():
data/raw/repos\research\object_detection,model_lib_tf2_test.py,def setUpClass(cls):
data/raw/repos\research\object_detection,model_lib_tf2_test.py,def test_train_loop_then_eval_loop(self):
data/raw/repos\research\object_detection,model_lib_tf2_test.py,"def __init__(self, num_classes=1):"
data/raw/repos\research\object_detection,model_lib_tf2_test.py,"def postprocess(self, prediction_dict, true_image_shapes):"
data/raw/repos\research\object_detection,model_lib_tf2_test.py,def updates(self):
data/raw/repos\research\object_detection,model_lib_tf2_test.py,"def restore_map(self, *args, **kwargs):"
data/raw/repos\research\object_detection,model_lib_tf2_test.py,"def restore_from_objects(self, fine_tune_checkpoint_type):"
data/raw/repos\research\object_detection,model_lib_tf2_test.py,"def preprocess(self, _):"
data/raw/repos\research\object_detection,model_lib_tf2_test.py,"def provide_groundtruth(self, *args, **kwargs):"
data/raw/repos\research\object_detection,model_lib_tf2_test.py,"def predict(self, pred_inputs, true_image_shapes):"
data/raw/repos\research\object_detection,model_lib_tf2_test.py,"def loss(self, prediction_dict, _):"
data/raw/repos\research\object_detection,model_lib_tf2_test.py,def regularization_losses(self):
data/raw/repos\research\object_detection,model_lib_tf2_test.py,"def fake_model_builder(*_, **__):"
data/raw/repos\research\object_detection,model_lib_tf2_test.py,def test_checkpoint_max_to_keep(self):
data/raw/repos\research\object_detection,model_lib_tf2_test.py,"def restore_from_objects(self, *args, **kwargs):"
data/raw/repos\research\object_detection,model_lib_tf2_test.py,def setUp(self):
data/raw/repos\research\object_detection,model_lib_tf2_test.py,def test_restore_v2(self):
data/raw/repos\research\object_detection,model_lib_tf2_test.py,def test_restore_map_incompatible_error(self):
data/raw/repos\research\object_detection,model_lib_tf2_test.py,def setUpClass(cls):
data/raw/repos\research\object_detection,model_lib_tf2_test.py,def test_export_metrics_json_serializable(self):
data/raw/repos\research\object_detection,model_lib_tf2_test.py,"def export(data, _):"
data/raw/repos\research\object_detection,model_lib_tf2_test.py,def setUpModule():
data/raw/repos\research\object_detection,model_lib_v2.py,"def _ensure_model_is_built(model, input_dataset, unpad_groundtruth_tensors):"
data/raw/repos\research\object_detection,model_lib_v2.py,"def _dummy_computation_fn(features, labels):"
data/raw/repos\research\object_detection,model_lib_v2.py,"def normalize_dict(values_dict, num_replicas):"
data/raw/repos\research\object_detection,model_lib_v2.py,"def reduce_dict(strategy, reduction_dict, reduction_op):"
data/raw/repos\research\object_detection,model_lib_v2.py,def validate_tf_v2_checkpoint_restore_map(checkpoint_restore_map):
data/raw/repos\research\object_detection,model_lib_v2.py,def is_object_based_checkpoint(checkpoint_path):
data/raw/repos\research\object_detection,model_lib_v2.py,"def get_filepath(strategy, filepath):"
data/raw/repos\research\object_detection,model_lib_v2.py,"def clean_temporary_directories(strategy, filepath):"
data/raw/repos\research\object_detection,model_lib_v2.py,def train_dataset_fn(input_context):
data/raw/repos\research\object_detection,model_lib_v2.py,"def train_step_fn(features, labels):"
data/raw/repos\research\object_detection,model_lib_v2.py,"def _sample_and_train(strategy, train_step_fn, data_iterator):"
data/raw/repos\research\object_detection,model_lib_v2.py,def _dist_train_step(data_iterator):
data/raw/repos\research\object_detection,model_lib_v2.py,"def prepare_eval_dict(detections, groundtruth, features):"
data/raw/repos\research\object_detection,model_lib_v2.py,def concat_replica_results(tensor_dict):
data/raw/repos\research\object_detection,model_lib_v2.py,"def compute_eval_dict(features, labels):"
data/raw/repos\research\object_detection,model_main.py,def main(unused_argv):
data/raw/repos\research\object_detection,model_main_tf2.py,def main(unused_argv):
data/raw/repos\research\object_detection,model_tpu_main.py,def main(unused_argv):
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator.py,def name_scope(self):
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator.py,def num_anchors_per_location(self):
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator.py,"def _generate(self, feature_map_shape_list, im_height=1, im_width=1):"
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def test_construct_single_anchor(self):
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def test_construct_single_anchor_unit_dimensions(self):
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def test_construct_normalized_anchors_fails_with_unit_dimensions(self):
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def test_construct_single_anchor_in_normalized_coordinates(self):
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def test_num_anchors_per_location(self):
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def test_construct_single_anchor_dynamic_size(self):
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def test_construct_single_anchor_with_odd_input_dimension(self):
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def test_construct_single_anchor_on_two_feature_maps(self):
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def test_construct_single_anchor_with_two_scales_per_octave(self):
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def test_construct_single_anchor_with_two_scales_per_octave_and_aspect(self):
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,flexible_grid_anchor_generator_test.py,def test_construct_single_anchors_on_feature_maps_with_dynamic_shape(self):
data/raw/repos\research\object_detection\anchor_generators,grid_anchor_generator.py,def name_scope(self):
data/raw/repos\research\object_detection\anchor_generators,grid_anchor_generator.py,def num_anchors_per_location(self):
data/raw/repos\research\object_detection\anchor_generators,grid_anchor_generator.py,"def _generate(self, feature_map_shape_list):"
data/raw/repos\research\object_detection\anchor_generators,grid_anchor_generator.py,"def _center_size_bbox_to_corners_bbox(centers, sizes):"
data/raw/repos\research\object_detection\anchor_generators,grid_anchor_generator_test.py,def test_construct_single_anchor(self):
data/raw/repos\research\object_detection\anchor_generators,grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,grid_anchor_generator_test.py,def test_construct_anchor_grid(self):
data/raw/repos\research\object_detection\anchor_generators,grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,grid_anchor_generator_test.py,def test_construct_anchor_grid_with_dynamic_feature_map_shapes(self):
data/raw/repos\research\object_detection\anchor_generators,grid_anchor_generator_test.py,"def graph_fn(feature_map_height, feature_map_width):"
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator.py,def name_scope(self):
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator.py,def num_anchors_per_location(self):
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator.py,"def _generate(self, feature_map_shape_list, im_height=1, im_width=1):"
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def test_construct_single_anchor_grid(self):
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def test_construct_anchor_grid(self):
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def test_construct_anchor_grid_non_square(self):
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def test_construct_dynamic_size_anchor_grid(self):
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,"def graph_fn(height, width):"
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def test_construct_anchor_grid_normalized(self):
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def test_construct_multiple_grids(self):
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def test_construct_multiple_grids_with_clipping(self):
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def test_invalid_box_specs(self):
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def test_invalid_generate_arguments(self):
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def test_create_ssd_anchors_returns_correct_shape(self):
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def graph_fn1():
data/raw/repos\research\object_detection\anchor_generators,multiple_grid_anchor_generator_test.py,def graph_fn2():
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator.py,def name_scope(self):
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator.py,def num_anchors_per_location(self):
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator.py,"def _generate(self, feature_map_shape_list, im_height=1, im_width=1):"
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def test_construct_single_anchor(self):
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def test_construct_single_anchor_unit_dimensions(self):
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def test_construct_normalized_anchors_fails_with_unit_dimensions(self):
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def test_construct_single_anchor_in_normalized_coordinates(self):
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def test_num_anchors_per_location(self):
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def test_construct_single_anchor_dynamic_size(self):
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def test_construct_single_anchor_with_odd_input_dimension(self):
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def test_construct_single_anchor_on_two_feature_maps(self):
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def test_construct_single_anchor_with_two_scales_per_octave(self):
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def test_construct_single_anchor_with_two_scales_per_octave_and_aspect(self):
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def graph_fn():
data/raw/repos\research\object_detection\anchor_generators,multiscale_grid_anchor_generator_test.py,def test_construct_single_anchors_on_feature_maps_with_dynamic_shape(self):
data/raw/repos\research\object_detection\box_coders,faster_rcnn_box_coder.py,"def __init__(self, scale_factors=None):"
data/raw/repos\research\object_detection\box_coders,faster_rcnn_box_coder.py,def code_size(self):
data/raw/repos\research\object_detection\box_coders,faster_rcnn_box_coder.py,"def _encode(self, boxes, anchors):"
data/raw/repos\research\object_detection\box_coders,faster_rcnn_box_coder.py,"def _decode(self, rel_codes, anchors):"
data/raw/repos\research\object_detection\box_coders,faster_rcnn_box_coder_test.py,def test_get_correct_relative_codes_after_encoding(self):
data/raw/repos\research\object_detection\box_coders,faster_rcnn_box_coder_test.py,"def graph_fn(boxes, anchors):"
data/raw/repos\research\object_detection\box_coders,faster_rcnn_box_coder_test.py,def test_get_correct_relative_codes_after_encoding_with_scaling(self):
data/raw/repos\research\object_detection\box_coders,faster_rcnn_box_coder_test.py,"def graph_fn(boxes, anchors):"
data/raw/repos\research\object_detection\box_coders,faster_rcnn_box_coder_test.py,def test_get_correct_boxes_after_decoding(self):
data/raw/repos\research\object_detection\box_coders,faster_rcnn_box_coder_test.py,"def graph_fn(rel_codes, anchors):"
data/raw/repos\research\object_detection\box_coders,faster_rcnn_box_coder_test.py,def test_get_correct_boxes_after_decoding_with_scaling(self):
data/raw/repos\research\object_detection\box_coders,faster_rcnn_box_coder_test.py,"def graph_fn(rel_codes, anchors):"
data/raw/repos\research\object_detection\box_coders,faster_rcnn_box_coder_test.py,def test_very_small_Width_nan_after_encoding(self):
data/raw/repos\research\object_detection\box_coders,faster_rcnn_box_coder_test.py,"def graph_fn(boxes, anchors):"
data/raw/repos\research\object_detection\box_coders,keypoint_box_coder.py,"def __init__(self, num_keypoints, scale_factors=None):"
data/raw/repos\research\object_detection\box_coders,keypoint_box_coder.py,def code_size(self):
data/raw/repos\research\object_detection\box_coders,keypoint_box_coder.py,"def _encode(self, boxes, anchors):"
data/raw/repos\research\object_detection\box_coders,keypoint_box_coder.py,"def _decode(self, rel_codes, anchors):"
data/raw/repos\research\object_detection\box_coders,keypoint_box_coder_test.py,def test_get_correct_relative_codes_after_encoding(self):
data/raw/repos\research\object_detection\box_coders,keypoint_box_coder_test.py,"def graph_fn(boxes, keypoints, anchors):"
data/raw/repos\research\object_detection\box_coders,keypoint_box_coder_test.py,def test_get_correct_relative_codes_after_encoding_with_scaling(self):
data/raw/repos\research\object_detection\box_coders,keypoint_box_coder_test.py,"def graph_fn(boxes, keypoints, anchors):"
data/raw/repos\research\object_detection\box_coders,keypoint_box_coder_test.py,def test_get_correct_boxes_after_decoding(self):
data/raw/repos\research\object_detection\box_coders,keypoint_box_coder_test.py,"def graph_fn(rel_codes, anchors):"
data/raw/repos\research\object_detection\box_coders,keypoint_box_coder_test.py,def test_get_correct_boxes_after_decoding_with_scaling(self):
data/raw/repos\research\object_detection\box_coders,keypoint_box_coder_test.py,"def graph_fn(rel_codes, anchors):"
data/raw/repos\research\object_detection\box_coders,keypoint_box_coder_test.py,def test_very_small_width_nan_after_encoding(self):
data/raw/repos\research\object_detection\box_coders,keypoint_box_coder_test.py,"def graph_fn(boxes, keypoints, anchors):"
data/raw/repos\research\object_detection\box_coders,mean_stddev_box_coder.py,"def __init__(self, stddev=0.01):"
data/raw/repos\research\object_detection\box_coders,mean_stddev_box_coder.py,def code_size(self):
data/raw/repos\research\object_detection\box_coders,mean_stddev_box_coder.py,"def _encode(self, boxes, anchors):"
data/raw/repos\research\object_detection\box_coders,mean_stddev_box_coder.py,"def _decode(self, rel_codes, anchors):"
data/raw/repos\research\object_detection\box_coders,mean_stddev_box_coder_test.py,def testGetCorrectRelativeCodesAfterEncoding(self):
data/raw/repos\research\object_detection\box_coders,mean_stddev_box_coder_test.py,"def graph_fn(boxes, anchors):"
data/raw/repos\research\object_detection\box_coders,mean_stddev_box_coder_test.py,def testGetCorrectBoxesAfterDecoding(self):
data/raw/repos\research\object_detection\box_coders,mean_stddev_box_coder_test.py,"def graph_fn(rel_codes, anchors):"
data/raw/repos\research\object_detection\box_coders,square_box_coder.py,"def __init__(self, scale_factors=None):"
data/raw/repos\research\object_detection\box_coders,square_box_coder.py,def code_size(self):
data/raw/repos\research\object_detection\box_coders,square_box_coder.py,"def _encode(self, boxes, anchors):"
data/raw/repos\research\object_detection\box_coders,square_box_coder.py,"def _decode(self, rel_codes, anchors):"
data/raw/repos\research\object_detection\box_coders,square_box_coder_test.py,def test_correct_relative_codes_with_default_scale(self):
data/raw/repos\research\object_detection\box_coders,square_box_coder_test.py,"def graph_fn(boxes, anchors):"
data/raw/repos\research\object_detection\box_coders,square_box_coder_test.py,def test_correct_relative_codes_with_non_default_scale(self):
data/raw/repos\research\object_detection\box_coders,square_box_coder_test.py,"def graph_fn(boxes, anchors):"
data/raw/repos\research\object_detection\box_coders,square_box_coder_test.py,def test_correct_relative_codes_with_small_width(self):
data/raw/repos\research\object_detection\box_coders,square_box_coder_test.py,"def graph_fn(boxes, anchors):"
data/raw/repos\research\object_detection\box_coders,square_box_coder_test.py,def test_correct_boxes_with_default_scale(self):
data/raw/repos\research\object_detection\box_coders,square_box_coder_test.py,"def graph_fn(rel_codes, anchors):"
data/raw/repos\research\object_detection\box_coders,square_box_coder_test.py,def test_correct_boxes_with_non_default_scale(self):
data/raw/repos\research\object_detection\box_coders,square_box_coder_test.py,"def graph_fn(rel_codes, anchors):"
data/raw/repos\research\object_detection\builders,anchor_generator_builder.py,def build(anchor_generator_config):
data/raw/repos\research\object_detection\builders,anchor_generator_builder_test.py,"def assert_almost_list_equal(self, expected_list, actual_list, delta=None):"
data/raw/repos\research\object_detection\builders,anchor_generator_builder_test.py,def test_build_grid_anchor_generator_with_defaults(self):
data/raw/repos\research\object_detection\builders,anchor_generator_builder_test.py,def test_build_grid_anchor_generator_with_non_default_parameters(self):
data/raw/repos\research\object_detection\builders,anchor_generator_builder_test.py,def test_build_ssd_anchor_generator_with_defaults(self):
data/raw/repos\research\object_detection\builders,anchor_generator_builder_test.py,def test_build_ssd_anchor_generator_with_custom_scales(self):
data/raw/repos\research\object_detection\builders,anchor_generator_builder_test.py,def test_build_ssd_anchor_generator_with_custom_interpolated_scale(self):
data/raw/repos\research\object_detection\builders,anchor_generator_builder_test.py,def test_build_ssd_anchor_generator_without_reduced_boxes(self):
data/raw/repos\research\object_detection\builders,anchor_generator_builder_test.py,def test_build_ssd_anchor_generator_with_non_default_parameters(self):
data/raw/repos\research\object_detection\builders,anchor_generator_builder_test.py,def test_raise_value_error_on_empty_anchor_genertor(self):
data/raw/repos\research\object_detection\builders,anchor_generator_builder_test.py,def test_build_multiscale_anchor_generator_custom_aspect_ratios(self):
data/raw/repos\research\object_detection\builders,anchor_generator_builder_test.py,def test_build_flexible_anchor_generator(self):
data/raw/repos\research\object_detection\builders,box_coder_builder.py,def build(box_coder_config):
data/raw/repos\research\object_detection\builders,box_coder_builder_test.py,def test_build_faster_rcnn_box_coder_with_defaults(self):
data/raw/repos\research\object_detection\builders,box_coder_builder_test.py,def test_build_faster_rcnn_box_coder_with_non_default_parameters(self):
data/raw/repos\research\object_detection\builders,box_coder_builder_test.py,def test_build_keypoint_box_coder_with_defaults(self):
data/raw/repos\research\object_detection\builders,box_coder_builder_test.py,def test_build_keypoint_box_coder_with_non_default_parameters(self):
data/raw/repos\research\object_detection\builders,box_coder_builder_test.py,def test_build_mean_stddev_box_coder(self):
data/raw/repos\research\object_detection\builders,box_coder_builder_test.py,def test_build_square_box_coder_with_defaults(self):
data/raw/repos\research\object_detection\builders,box_coder_builder_test.py,def test_build_square_box_coder_with_non_default_parameters(self):
data/raw/repos\research\object_detection\builders,box_coder_builder_test.py,def test_raise_error_on_empty_box_coder(self):
data/raw/repos\research\object_detection\builders,box_predictor_builder.py,"def build_score_converter(score_converter_config, is_training):"
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,def test_box_predictor_calls_conv_argscope_fn(self):
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,"def mock_conv_argscope_builder(conv_hyperparams_arg, is_training):"
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,def test_construct_non_default_conv_box_predictor(self):
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,"def mock_conv_argscope_builder(conv_hyperparams_arg, is_training):"
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,def test_construct_default_conv_box_predictor(self):
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,def test_box_predictor_calls_conv_argscope_fn(self):
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,"def mock_conv_argscope_builder(conv_hyperparams_arg, is_training):"
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,def test_construct_non_default_conv_box_predictor(self):
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,"def mock_conv_argscope_builder(conv_hyperparams_arg, is_training):"
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,def test_construct_non_default_depthwise_conv_box_predictor(self):
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,"def mock_conv_argscope_builder(conv_hyperparams_arg, is_training):"
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,def test_construct_default_conv_box_predictor(self):
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,def test_construct_default_conv_box_predictor_with_batch_norm(self):
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,def test_box_predictor_builder_calls_fc_argscope_fn(self):
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,def test_non_default_mask_rcnn_box_predictor(self):
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,"def mock_fc_argscope_builder(fc_hyperparams_arg, is_training):"
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,def test_build_default_mask_rcnn_box_predictor(self):
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,def test_build_box_predictor_with_mask_branch(self):
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,def test_build_box_predictor_with_convlve_then_upsample_masks(self):
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,def test_box_predictor_calls_fc_argscope_fn(self):
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,"def mock_conv_argscope_builder(conv_hyperparams_arg, is_training):"
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,def test_non_default_rfcn_box_predictor(self):
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,"def mock_conv_argscope_builder(conv_hyperparams_arg, is_training):"
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,def test_default_rfcn_box_predictor(self):
data/raw/repos\research\object_detection\builders,box_predictor_builder_test.py,"def mock_conv_argscope_builder(conv_hyperparams_arg, is_training):"
data/raw/repos\research\object_detection\builders,calibration_builder.py,"def _find_interval_containing_new_value(x, new_value):"
data/raw/repos\research\object_detection\builders,calibration_builder.py,"def _tf_linear_interp1d(x_to_interpolate, fn_x, fn_y):"
data/raw/repos\research\object_detection\builders,calibration_builder.py,def _function_approximation_proto_to_tf_tensors(x_y_pairs_message):
data/raw/repos\research\object_detection\builders,calibration_builder.py,def _get_class_id_function_dict(calibration_config):
data/raw/repos\research\object_detection\builders,calibration_builder.py,def build(calibration_config):
data/raw/repos\research\object_detection\builders,calibration_builder.py,def calibration_fn(class_predictions_with_background):
data/raw/repos\research\object_detection\builders,calibration_builder.py,def calibration_fn(class_predictions_with_background):
data/raw/repos\research\object_detection\builders,calibration_builder.py,def calibration_fn(class_predictions_with_background):
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,def test_tf_linear_interp1d_map(self):
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,def test_tf_linear_interp1d_interpolate(self):
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,"def _get_scipy_interp1d(new_x, x, y):"
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,"def _get_tf_interp1d(self, new_x, x, y):"
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,def test_tf_linear_interp1d_against_scipy_map(self):
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,def test_tf_linear_interp1d_against_scipy_interpolate(self):
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,def test_class_agnostic_function_approximation(self):
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,def test_multiclass_function_approximations(self):
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,def test_temperature_scaling(self):
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,def test_temperature_scaling_incorrect_value_error(self):
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,def test_skips_class_when_calibration_parameters_not_present(self):
data/raw/repos\research\object_detection\builders,calibration_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder.py,def make_initializable_iterator(dataset):
data/raw/repos\research\object_detection\builders,dataset_builder.py,"def read_dataset(file_read_func, input_files, config, filename_shard_fn=None):"
data/raw/repos\research\object_detection\builders,dataset_builder.py,def shard_function_for_context(input_context):
data/raw/repos\research\object_detection\builders,dataset_builder.py,def shard_fn(dataset):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,"def get_iterator_next_for_testing(dataset, is_tf2):"
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def _get_labelmap_path():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def dummy_jpeg_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def create_tf_record_sequence_example(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_build_tf_record_input_reader(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def get_mock_reduce_to_frame_fn(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,"def mock_reduce_to_frame_fn(dataset, dataset_map_fn, batch_size, config):"
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def get_frame(tensor_dict):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_build_tf_record_input_reader_sequence_example_train(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_build_tf_record_input_reader_sequence_example_test(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_build_tf_record_input_reader_and_load_instance_masks(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_build_tf_record_input_reader_with_batch_size_two(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def one_hot_class_encoding_fn(tensor_dict):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_build_tf_record_input_reader_with_batch_size_two_and_masks(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def one_hot_class_encoding_fn(tensor_dict):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_raises_error_with_no_input_paths(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_sample_all_data(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_sample_one_of_n_shards(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_no_input_context(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn_last_batch():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_with_input_context(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn_last_batch():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def setUp(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,"def _get_dataset_next(self, files, config, batch_size, num_batches_skip=0):"
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def decode_func(value):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,"def _assert_item_count(self, data, item, percentage):"
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_make_initializable_iterator_with_hashTable(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_read_dataset_sample_from_datasets_weights_equal_weight(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_read_dataset_sample_from_datasets_weights_non_normalized(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_read_dataset_sample_from_datasets_weights_zero_weight(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_read_dataset_sample_from_datasets_weights_unbalanced(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_read_dataset(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_reduce_num_reader(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_enable_shuffle(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_disable_shuffle_(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def test_read_dataset_single_epoch(self):
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,dataset_builder_test.py,def graph_fn_second_batch():
data/raw/repos\research\object_detection\builders,decoder_builder.py,def build(input_reader_config):
data/raw/repos\research\object_detection\builders,decoder_builder_test.py,def _get_labelmap_path():
data/raw/repos\research\object_detection\builders,decoder_builder_test.py,"def _make_serialized_tf_example(self, has_additional_channels=False):"
data/raw/repos\research\object_detection\builders,decoder_builder_test.py,def graph_fn(image_tensor):
data/raw/repos\research\object_detection\builders,decoder_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,decoder_builder_test.py,def _make_serialized_tf_sequence_example(self):
data/raw/repos\research\object_detection\builders,decoder_builder_test.py,def test_build_tf_record_input_reader(self):
data/raw/repos\research\object_detection\builders,decoder_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,decoder_builder_test.py,def test_build_tf_record_input_reader_sequence_example(self):
data/raw/repos\research\object_detection\builders,decoder_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,decoder_builder_test.py,def test_build_tf_record_input_reader_and_load_instance_masks(self):
data/raw/repos\research\object_detection\builders,decoder_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,decoder_builder_test.py,def test_build_tf_record_input_reader_and_load_keypoint_depth(self):
data/raw/repos\research\object_detection\builders,decoder_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,graph_rewriter_builder.py,"def build(graph_rewriter_config, is_training):"
data/raw/repos\research\object_detection\builders,graph_rewriter_builder.py,def graph_rewrite_fn():
data/raw/repos\research\object_detection\builders,graph_rewriter_builder_tf1_test.py,def testQuantizationBuilderSetsUpCorrectTrainArguments(self):
data/raw/repos\research\object_detection\builders,graph_rewriter_builder_tf1_test.py,def testQuantizationBuilderSetsUpCorrectEvalArguments(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,"def __init__(self, hyperparams_config):"
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,def use_batch_norm(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,def use_sync_batch_norm(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,def force_use_bias(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,def use_bias(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,"def batch_norm_params(self, **overrides):"
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,"def build_batch_norm(self, training=None, **overrides):"
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,"def build_activation_layer(self, name='activation'):"
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,def get_regularizer_weight(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,"def params(self, include_activation=False, **overrides):"
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,"def build(hyperparams_config, is_training):"
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,def scope_fn():
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,def _build_activation_fn(activation_fn):
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,def _build_slim_regularizer(regularizer):
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,def _build_keras_regularizer(regularizer):
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,"def _build_initializer(initializer, build_for_keras=False):"
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,"def _build_batch_norm_params(batch_norm, is_training):"
data/raw/repos\research\object_detection\builders,hyperparams_builder.py,def _build_keras_batch_norm_params(batch_norm):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def _get_scope_key(op):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_default_arg_scope_has_conv2d_op(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_default_arg_scope_has_separable_conv2d_op(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_default_arg_scope_has_conv2d_transpose_op(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_explicit_fc_op_arg_scope_has_fully_connected_op(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_separable_conv2d_and_conv2d_and_transpose_have_same_parameters(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_return_l1_regularized_weights(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_return_l2_regularizer_weights(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_return_non_default_batch_norm_params_with_train_during_train(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_return_batch_norm_params_with_notrain_during_eval(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_return_batch_norm_params_with_notrain_when_train_is_false(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_do_not_use_batch_norm_if_default(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_use_none_activation(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_use_relu_activation(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_use_relu_6_activation(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_use_swish_activation(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_variance_in_range_with_variance_scaling_initializer_fan_in(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_variance_in_range_with_variance_scaling_initializer_fan_out(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_variance_in_range_with_variance_scaling_initializer_fan_avg(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_variance_in_range_with_variance_scaling_initializer_uniform(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_variance_in_range_with_truncated_normal_initializer(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_variance_in_range_with_random_normal_initializer(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_return_l1_regularized_weights_keras(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_return_l2_regularized_weights_keras(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_return_l1_regularizer_weight_keras(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_return_l2_regularizer_weight_keras(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_return_undefined_regularizer_weight_keras(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_do_not_use_batch_norm_if_default_keras(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_do_not_use_bias_if_batch_norm_center_keras(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_force_use_bias_if_batch_norm_center_keras(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_use_none_activation_keras(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_use_relu_activation_keras(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_use_relu_6_activation_keras(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_use_swish_activation_keras(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_override_activation_keras(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_variance_in_range_with_truncated_normal_initializer_keras(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_variance_in_range_with_random_normal_initializer_keras(self):
data/raw/repos\research\object_detection\builders,hyperparams_builder_test.py,def test_keras_initializer_by_name(self):
data/raw/repos\research\object_detection\builders,image_resizer_builder.py,def _tf_resize_method(resize_method):
data/raw/repos\research\object_detection\builders,image_resizer_builder.py,def build(image_resizer_config):
data/raw/repos\research\object_detection\builders,image_resizer_builder.py,"def image_resizer_fn(image, masks=None, **kwargs):"
data/raw/repos\research\object_detection\builders,image_resizer_builder.py,"def grayscale_image_resizer(image, masks=None):"
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,def test_build_keep_aspect_ratio_resizer_returns_expected_shape(self):
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,def test_build_keep_aspect_ratio_resizer_grayscale(self):
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,def test_build_keep_aspect_ratio_resizer_with_padding(self):
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,def test_built_fixed_shape_resizer_returns_expected_shape(self):
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,def test_built_fixed_shape_resizer_grayscale(self):
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,def test_identity_resizer_returns_expected_shape(self):
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,def test_raises_error_on_invalid_input(self):
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,"def _resized_image_given_text_proto(self, image, text_proto):"
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,def graph_fn(image):
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,def test_fixed_shape_resizer_nearest_neighbor_method(self):
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,def test_build_conditional_shape_resizer_greater_returns_expected_shape(self):
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,def test_build_conditional_shape_resizer_same_shape_with_no_resize(self):
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,def test_build_conditional_shape_resizer_smaller_returns_expected_shape(self):
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,def test_build_conditional_shape_resizer_grayscale(self):
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,def test_build_conditional_shape_resizer_error_on_invalid_condition(self):
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,def test_build_pad_to_multiple_resizer(self):
data/raw/repos\research\object_detection\builders,image_resizer_builder_test.py,def test_build_pad_to_multiple_resizer_invalid_multiple(self):
data/raw/repos\research\object_detection\builders,input_reader_builder.py,def build(input_reader_config):
data/raw/repos\research\object_detection\builders,input_reader_builder_tf1_test.py,def _get_labelmap_path():
data/raw/repos\research\object_detection\builders,input_reader_builder_tf1_test.py,def create_tf_record(self):
data/raw/repos\research\object_detection\builders,input_reader_builder_tf1_test.py,def create_tf_record_sequence_example(self):
data/raw/repos\research\object_detection\builders,input_reader_builder_tf1_test.py,def create_tf_record_with_context(self):
data/raw/repos\research\object_detection\builders,input_reader_builder_tf1_test.py,def test_build_tf_record_input_reader(self):
data/raw/repos\research\object_detection\builders,input_reader_builder_tf1_test.py,def test_build_tf_record_input_reader_sequence_example(self):
data/raw/repos\research\object_detection\builders,input_reader_builder_tf1_test.py,def test_build_tf_record_input_reader_with_context(self):
data/raw/repos\research\object_detection\builders,input_reader_builder_tf1_test.py,def test_build_tf_record_input_reader_and_load_instance_masks(self):
data/raw/repos\research\object_detection\builders,input_reader_builder_tf1_test.py,def test_raises_error_with_no_input_paths(self):
data/raw/repos\research\object_detection\builders,losses_builder.py,def build(loss_config):
data/raw/repos\research\object_detection\builders,losses_builder.py,def build_faster_rcnn_classification_loss(loss_config):
data/raw/repos\research\object_detection\builders,losses_builder.py,def _build_localization_loss(loss_config):
data/raw/repos\research\object_detection\builders,losses_builder.py,def _build_classification_loss(loss_config):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_weighted_l2_localization_loss(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_weighted_smooth_l1_localization_loss_default_delta(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_weighted_smooth_l1_localization_loss_non_default_delta(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_weighted_iou_localization_loss(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_weighted_giou_localization_loss(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_anchorwise_output(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_raise_error_on_empty_localization_config(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_weighted_sigmoid_classification_loss(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_weighted_sigmoid_focal_classification_loss(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_weighted_sigmoid_focal_loss_non_default(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_weighted_softmax_classification_loss(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_weighted_logits_softmax_classification_loss(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_weighted_softmax_classification_loss_with_logit_scale(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_bootstrapped_sigmoid_classification_loss(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_anchorwise_output(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_raise_error_on_empty_config(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_penalty_reduced_logistic_focal_loss(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_dice_loss(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_do_not_build_hard_example_miner_by_default(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_hard_example_miner_for_classification_loss(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_hard_example_miner_for_localization_loss(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_hard_example_miner_with_non_default_values(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_all_loss_parameters(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_expected_sampling(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_reweighting_unmatched_anchors(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_raise_error_when_both_focal_loss_and_hard_example_miner(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_sigmoid_loss(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_softmax_loss(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_logits_softmax_loss(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_sigmoid_focal_loss(self):
data/raw/repos\research\object_detection\builders,losses_builder_test.py,def test_build_softmax_loss_by_default(self):
data/raw/repos\research\object_detection\builders,matcher_builder.py,def build(matcher_config):
data/raw/repos\research\object_detection\builders,matcher_builder_test.py,def test_build_arg_max_matcher_with_defaults(self):
data/raw/repos\research\object_detection\builders,matcher_builder_test.py,def test_build_arg_max_matcher_without_thresholds(self):
data/raw/repos\research\object_detection\builders,matcher_builder_test.py,def test_build_arg_max_matcher_with_non_default_parameters(self):
data/raw/repos\research\object_detection\builders,matcher_builder_test.py,def test_build_bipartite_matcher(self):
data/raw/repos\research\object_detection\builders,matcher_builder_test.py,def test_raise_error_on_empty_matcher(self):
data/raw/repos\research\object_detection\builders,model_builder.py,def _check_feature_extractor_exists(feature_extractor_type):
data/raw/repos\research\object_detection\builders,model_builder.py,"def _build_ssd_model(ssd_config, is_training, add_summaries):"
data/raw/repos\research\object_detection\builders,model_builder.py,"def _build_faster_rcnn_model(frcnn_config, is_training, add_summaries):"
data/raw/repos\research\object_detection\builders,model_builder.py,"def _build_experimental_model(config, is_training, add_summaries=True):"
data/raw/repos\research\object_detection\builders,model_builder.py,"def keypoint_proto_to_params(kp_config, keypoint_map_dict):"
data/raw/repos\research\object_detection\builders,model_builder.py,def object_detection_proto_to_params(od_config):
data/raw/repos\research\object_detection\builders,model_builder.py,def object_center_proto_to_params(oc_config):
data/raw/repos\research\object_detection\builders,model_builder.py,def mask_proto_to_params(mask_config):
data/raw/repos\research\object_detection\builders,model_builder.py,def densepose_proto_to_params(densepose_config):
data/raw/repos\research\object_detection\builders,model_builder.py,def tracking_proto_to_params(tracking_config):
data/raw/repos\research\object_detection\builders,model_builder.py,def temporal_offset_proto_to_params(temporal_offset_config):
data/raw/repos\research\object_detection\builders,model_builder.py,"def _build_center_net_model(center_net_config, is_training, add_summaries):"
data/raw/repos\research\object_detection\builders,model_builder.py,"def _build_center_net_feature_extractor(feature_extractor_config, is_training):"
data/raw/repos\research\object_detection\builders,model_builder.py,"def build(model_config, is_training, add_summaries=True):"
data/raw/repos\research\object_detection\builders,model_builder_test.py,def default_ssd_feature_extractor(self):
data/raw/repos\research\object_detection\builders,model_builder_test.py,def default_faster_rcnn_feature_extractor(self):
data/raw/repos\research\object_detection\builders,model_builder_test.py,def ssd_feature_extractors(self):
data/raw/repos\research\object_detection\builders,model_builder_test.py,"def get_override_base_feature_extractor_hyperparams(self, extractor_type):"
data/raw/repos\research\object_detection\builders,model_builder_test.py,def faster_rcnn_feature_extractors(self):
data/raw/repos\research\object_detection\builders,model_builder_test.py,"def create_model(self, model_config, is_training=True):"
data/raw/repos\research\object_detection\builders,model_builder_test.py,def create_default_ssd_model_proto(self):
data/raw/repos\research\object_detection\builders,model_builder_test.py,def create_default_faster_rcnn_model_proto(self):
data/raw/repos\research\object_detection\builders,model_builder_test.py,def test_create_ssd_models_from_config(self):
data/raw/repos\research\object_detection\builders,model_builder_test.py,def test_create_ssd_fpn_model_from_config(self):
data/raw/repos\research\object_detection\builders,model_builder_test.py,def test_create_faster_rcnn_model_from_config_with_example_miner(self):
data/raw/repos\research\object_detection\builders,model_builder_test.py,def test_create_rfcn_model_from_config(self):
data/raw/repos\research\object_detection\builders,model_builder_test.py,def test_invalid_model_config_proto(self):
data/raw/repos\research\object_detection\builders,model_builder_test.py,def test_unknown_meta_architecture(self):
data/raw/repos\research\object_detection\builders,model_builder_test.py,def test_unknown_ssd_feature_extractor(self):
data/raw/repos\research\object_detection\builders,model_builder_test.py,def test_unknown_faster_rcnn_feature_extractor(self):
data/raw/repos\research\object_detection\builders,model_builder_test.py,def test_invalid_first_stage_nms_iou_threshold(self):
data/raw/repos\research\object_detection\builders,model_builder_test.py,def test_invalid_second_stage_batch_size(self):
data/raw/repos\research\object_detection\builders,model_builder_test.py,def test_invalid_faster_rcnn_batchnorm_update(self):
data/raw/repos\research\object_detection\builders,model_builder_test.py,def test_create_experimental_model(self):
data/raw/repos\research\object_detection\builders,model_builder_tf1_test.py,def default_ssd_feature_extractor(self):
data/raw/repos\research\object_detection\builders,model_builder_tf1_test.py,def default_faster_rcnn_feature_extractor(self):
data/raw/repos\research\object_detection\builders,model_builder_tf1_test.py,def ssd_feature_extractors(self):
data/raw/repos\research\object_detection\builders,model_builder_tf1_test.py,"def get_override_base_feature_extractor_hyperparams(self, extractor_type):"
data/raw/repos\research\object_detection\builders,model_builder_tf1_test.py,def faster_rcnn_feature_extractors(self):
data/raw/repos\research\object_detection\builders,model_builder_tf1_test.py,"def test_create_context_rcnn_from_config_with_params(self, is_training):"
data/raw/repos\research\object_detection\builders,model_builder_tf2_test.py,def default_ssd_feature_extractor(self):
data/raw/repos\research\object_detection\builders,model_builder_tf2_test.py,def default_faster_rcnn_feature_extractor(self):
data/raw/repos\research\object_detection\builders,model_builder_tf2_test.py,def ssd_feature_extractors(self):
data/raw/repos\research\object_detection\builders,model_builder_tf2_test.py,"def get_override_base_feature_extractor_hyperparams(self, extractor_type):"
data/raw/repos\research\object_detection\builders,model_builder_tf2_test.py,def faster_rcnn_feature_extractors(self):
data/raw/repos\research\object_detection\builders,model_builder_tf2_test.py,def get_fake_label_map_file_path(self):
data/raw/repos\research\object_detection\builders,model_builder_tf2_test.py,"def get_fake_keypoint_proto(self, customize_head_params=False):"
data/raw/repos\research\object_detection\builders,model_builder_tf2_test.py,"def get_fake_object_center_proto(self, customize_head_params=False):"
data/raw/repos\research\object_detection\builders,model_builder_tf2_test.py,def get_fake_object_center_from_keypoints_proto(self):
data/raw/repos\research\object_detection\builders,model_builder_tf2_test.py,"def get_fake_object_detection_proto(self, customize_head_params=False):"
data/raw/repos\research\object_detection\builders,model_builder_tf2_test.py,"def get_fake_mask_proto(self, customize_head_params=False):"
data/raw/repos\research\object_detection\builders,model_builder_tf2_test.py,def get_fake_densepose_proto(self):
data/raw/repos\research\object_detection\builders,model_builder_tf2_test.py,"def test_create_center_net_model(self, customize_head_params):"
data/raw/repos\research\object_detection\builders,model_builder_tf2_test.py,def test_create_center_net_model_from_keypoints(self):
data/raw/repos\research\object_detection\builders,model_builder_tf2_test.py,def test_create_center_net_model_mobilenet(self):
data/raw/repos\research\object_detection\builders,model_builder_tf2_test.py,def test_create_center_net_deepmac(self):
data/raw/repos\research\object_detection\builders,optimizer_builder.py,"def build_optimizers_tf_v1(optimizer_config, global_step=None):"
data/raw/repos\research\object_detection\builders,optimizer_builder.py,"def build_optimizers_tf_v2(optimizer_config, global_step=None):"
data/raw/repos\research\object_detection\builders,optimizer_builder.py,"def build(config, global_step=None):"
data/raw/repos\research\object_detection\builders,optimizer_builder.py,"def _create_learning_rate(learning_rate_config, global_step=None):"
data/raw/repos\research\object_detection\builders,optimizer_builder_tf1_test.py,def testBuildConstantLearningRate(self):
data/raw/repos\research\object_detection\builders,optimizer_builder_tf1_test.py,def testBuildExponentialDecayLearningRate(self):
data/raw/repos\research\object_detection\builders,optimizer_builder_tf1_test.py,def testBuildManualStepLearningRate(self):
data/raw/repos\research\object_detection\builders,optimizer_builder_tf1_test.py,def testBuildCosineDecayLearningRate(self):
data/raw/repos\research\object_detection\builders,optimizer_builder_tf1_test.py,def testRaiseErrorOnEmptyLearningRate(self):
data/raw/repos\research\object_detection\builders,optimizer_builder_tf1_test.py,def testBuildRMSPropOptimizer(self):
data/raw/repos\research\object_detection\builders,optimizer_builder_tf1_test.py,def testBuildMomentumOptimizer(self):
data/raw/repos\research\object_detection\builders,optimizer_builder_tf1_test.py,def testBuildAdamOptimizer(self):
data/raw/repos\research\object_detection\builders,optimizer_builder_tf1_test.py,def testBuildMovingAverageOptimizer(self):
data/raw/repos\research\object_detection\builders,optimizer_builder_tf1_test.py,def testBuildMovingAverageOptimizerWithNonDefaultDecay(self):
data/raw/repos\research\object_detection\builders,optimizer_builder_tf1_test.py,def testBuildEmptyOptimizer(self):
data/raw/repos\research\object_detection\builders,optimizer_builder_tf2_test.py,def testBuildRMSPropOptimizer(self):
data/raw/repos\research\object_detection\builders,optimizer_builder_tf2_test.py,def testBuildMomentumOptimizer(self):
data/raw/repos\research\object_detection\builders,optimizer_builder_tf2_test.py,def testBuildAdamOptimizer(self):
data/raw/repos\research\object_detection\builders,optimizer_builder_tf2_test.py,def testBuildMovingAverageOptimizer(self):
data/raw/repos\research\object_detection\builders,post_processing_builder.py,def build(post_processing_config):
data/raw/repos\research\object_detection\builders,post_processing_builder.py,def _build_non_max_suppressor(nms_config):
data/raw/repos\research\object_detection\builders,post_processing_builder.py,"def _score_converter_fn_with_logit_scale(tf_score_converter_fn, logit_scale):"
data/raw/repos\research\object_detection\builders,post_processing_builder.py,def score_converter_fn(logits):
data/raw/repos\research\object_detection\builders,post_processing_builder.py,"def _build_score_converter(score_converter_config, logit_scale):"
data/raw/repos\research\object_detection\builders,post_processing_builder.py,"def _build_calibrated_score_converter(score_converter_fn, calibration_config):"
data/raw/repos\research\object_detection\builders,post_processing_builder.py,def calibrated_score_converter_fn(logits):
data/raw/repos\research\object_detection\builders,post_processing_builder_test.py,def test_build_non_max_suppressor_with_correct_parameters(self):
data/raw/repos\research\object_detection\builders,post_processing_builder_test.py,def test_build_identity_score_converter(self):
data/raw/repos\research\object_detection\builders,post_processing_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,post_processing_builder_test.py,def test_build_identity_score_converter_with_logit_scale(self):
data/raw/repos\research\object_detection\builders,post_processing_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,post_processing_builder_test.py,def test_build_sigmoid_score_converter(self):
data/raw/repos\research\object_detection\builders,post_processing_builder_test.py,def test_build_softmax_score_converter(self):
data/raw/repos\research\object_detection\builders,post_processing_builder_test.py,def test_build_softmax_score_converter_with_temperature(self):
data/raw/repos\research\object_detection\builders,post_processing_builder_test.py,def test_build_calibrator_with_nonempty_config(self):
data/raw/repos\research\object_detection\builders,post_processing_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,post_processing_builder_test.py,def test_build_temperature_scaling_calibrator(self):
data/raw/repos\research\object_detection\builders,post_processing_builder_test.py,def graph_fn():
data/raw/repos\research\object_detection\builders,preprocessor_builder.py,"def _get_step_config_from_proto(preprocessor_step_config, step_name):"
data/raw/repos\research\object_detection\builders,preprocessor_builder.py,def _get_dict_from_proto(config):
data/raw/repos\research\object_detection\builders,preprocessor_builder.py,def get_random_jitter_kwargs(proto):
data/raw/repos\research\object_detection\builders,preprocessor_builder.py,def build(preprocessor_step_config):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,"def assert_dictionary_close(self, dict1, dict2):"
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_normalize_image(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_horizontal_flip(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_vertical_flip(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_rotation90(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_pixel_value_scale(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_image_scale(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_rgb_to_gray(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_adjust_brightness(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_adjust_contrast(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_adjust_hue(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_adjust_saturation(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_distort_color(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_jitter_boxes(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_crop_image(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_pad_image(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_absolute_pad_image(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_crop_pad_image(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_crop_pad_image_with_optional_parameters(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_crop_to_aspect_ratio(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_black_patches(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_jpeg_quality(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_downscale_to_target_pixels(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_patch_gaussian(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_auto_augment_image(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_drop_label_probabilistically(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_remap_labels(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_random_resize_method(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_scale_boxes_to_pixel_coordinates(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_resize_image(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_rgb_to_gray(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_subtract_channel_mean(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_random_self_concat_image(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_ssd_random_crop(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_ssd_random_crop_empty_operations(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_ssd_random_crop_pad(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_ssd_random_crop_fixed_aspect_ratio(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_ssd_random_crop_pad_fixed_aspect_ratio(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_build_normalize_image_convert_class_logits_to_softmax(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_random_crop_by_scale(self):
data/raw/repos\research\object_detection\builders,preprocessor_builder_test.py,def test_adjust_gamma(self):
data/raw/repos\research\object_detection\builders,region_similarity_calculator_builder.py,def build(region_similarity_calculator_config):
data/raw/repos\research\object_detection\builders,region_similarity_calculator_builder_test.py,def testBuildIoaSimilarityCalculator(self):
data/raw/repos\research\object_detection\builders,region_similarity_calculator_builder_test.py,def testBuildIouSimilarityCalculator(self):
data/raw/repos\research\object_detection\builders,region_similarity_calculator_builder_test.py,def testBuildNegSqDistSimilarityCalculator(self):
data/raw/repos\research\object_detection\builders,target_assigner_builder.py,def build(target_assigner_config):
data/raw/repos\research\object_detection\builders,target_assigner_builder_test.py,def test_build_a_target_assigner(self):
data/raw/repos\research\object_detection\core,anchor_generator.py,def name_scope(self):
data/raw/repos\research\object_detection\core,anchor_generator.py,def check_num_anchors(self):
data/raw/repos\research\object_detection\core,anchor_generator.py,def num_anchors_per_location(self):
data/raw/repos\research\object_detection\core,anchor_generator.py,"def generate(self, feature_map_shape_list, **params):"
data/raw/repos\research\object_detection\core,anchor_generator.py,"def _generate(self, feature_map_shape_list, **params):"
data/raw/repos\research\object_detection\core,anchor_generator.py,"def anchor_index_to_feature_map_index(self, boxlist_list):"
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler.py,"def __init__(self, positive_fraction=0.5, is_static=False):"
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler.py,"def _get_num_pos_neg_samples(self, sorted_indices_tensor, sample_size):"
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler.py,"def _static_subsample(self, indicator, batch_size, labels):"
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler.py,"def subsample(self, indicator, batch_size, labels, scope=None):"
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler_test.py,def test_subsample_all_examples(self):
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler_test.py,"def graph_fn(indicator, labels):"
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler_test.py,def test_subsample_all_examples_static(self):
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler_test.py,"def graph_fn(indicator, labels):"
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler_test.py,def test_subsample_selection(self):
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler_test.py,"def graph_fn(indicator, labels):"
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler_test.py,def test_subsample_selection_static(self):
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler_test.py,"def graph_fn(indicator, labels):"
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler_test.py,def test_subsample_selection_larger_batch_size(self):
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler_test.py,"def graph_fn(indicator, labels):"
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler_test.py,def test_subsample_selection_larger_batch_size_static(self):
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler_test.py,"def graph_fn(indicator, labels):"
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler_test.py,def test_subsample_selection_no_batch_size(self):
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler_test.py,"def graph_fn(indicator, labels):"
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler_test.py,def test_subsample_selection_no_batch_size_static(self):
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler_test.py,def test_raises_error_with_incorrect_label_shape(self):
data/raw/repos\research\object_detection\core,balanced_positive_negative_sampler_test.py,def test_raises_error_with_incorrect_indicator_shape(self):
data/raw/repos\research\object_detection\core,batcher.py,def dequeue(self):
data/raw/repos\research\object_detection\core,batcher_tf1_test.py,def test_batch_and_unpad_2d_tensors_of_different_sizes_in_1st_dimension(self):
data/raw/repos\research\object_detection\core,batcher_tf1_test.py,def test_batch_and_unpad_2d_tensors_of_same_size_in_all_dimensions(self):
data/raw/repos\research\object_detection\core,batcher_tf1_test.py,def test_batcher_when_batch_size_is_one(self):
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,def test_batch_multiclass_nms_with_batch_size_1(self):
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,"def graph_fn(boxes, scores):"
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,def test_batch_iou_with_negative_data(self):
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,"def test_batch_multiclass_nms_with_batch_size_2(self, use_dynamic_map_fn):"
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,"def graph_fn(boxes, scores):"
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,def test_batch_multiclass_nms_with_per_batch_clip_window(self):
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,"def graph_fn(boxes, scores, clip_window):"
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,def test_batch_multiclass_nms_with_per_image_clip_window(self):
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,"def graph_fn(boxes, scores, clip_window):"
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,def test_batch_multiclass_nms_with_masks(self):
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,"def graph_fn(boxes, scores, masks):"
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,def test_batch_multiclass_nms_with_additional_fields(self):
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,"def graph_fn(boxes, scores, keypoints, size):"
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,def test_batch_multiclass_nms_with_masks_and_num_valid_boxes(self):
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,"def graph_fn(boxes, scores, masks, num_valid_boxes):"
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,"def graph_fn(boxes, scores, keypoints, size, num_valid_boxes):"
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,def test_combined_nms_with_batch_size_2(self):
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,"def graph_fn(boxes, scores):"
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,def test_batch_multiclass_nms_with_use_static_shapes(self):
data/raw/repos\research\object_detection\core,batch_multiclass_nms_test.py,"def graph_fn(boxes, scores, clip_window):"
data/raw/repos\research\object_detection\core,box_coder.py,def code_size(self):
data/raw/repos\research\object_detection\core,box_coder.py,"def encode(self, boxes, anchors):"
data/raw/repos\research\object_detection\core,box_coder.py,"def decode(self, rel_codes, anchors):"
data/raw/repos\research\object_detection\core,box_coder.py,"def _encode(self, boxes, anchors):"
data/raw/repos\research\object_detection\core,box_coder.py,"def _decode(self, rel_codes, anchors):"
data/raw/repos\research\object_detection\core,box_coder.py,"def batch_decode(encoded_boxes, box_coder, anchors):"
data/raw/repos\research\object_detection\core,box_coder_test.py,def code_size(self):
data/raw/repos\research\object_detection\core,box_coder_test.py,"def _encode(self, boxes, anchors):"
data/raw/repos\research\object_detection\core,box_coder_test.py,"def _decode(self, rel_codes, anchors):"
data/raw/repos\research\object_detection\core,box_coder_test.py,def test_batch_decode(self):
data/raw/repos\research\object_detection\core,box_coder_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list.py,"def __init__(self, boxes):"
data/raw/repos\research\object_detection\core,box_list.py,def num_boxes(self):
data/raw/repos\research\object_detection\core,box_list.py,def num_boxes_static(self):
data/raw/repos\research\object_detection\core,box_list.py,def get_all_fields(self):
data/raw/repos\research\object_detection\core,box_list.py,def get_extra_fields(self):
data/raw/repos\research\object_detection\core,box_list.py,"def add_field(self, field, field_data):"
data/raw/repos\research\object_detection\core,box_list.py,"def has_field(self, field):"
data/raw/repos\research\object_detection\core,box_list.py,def get(self):
data/raw/repos\research\object_detection\core,box_list.py,"def set(self, boxes):"
data/raw/repos\research\object_detection\core,box_list.py,"def get_field(self, field):"
data/raw/repos\research\object_detection\core,box_list.py,"def set_field(self, field, value):"
data/raw/repos\research\object_detection\core,box_list.py,"def get_center_coordinates_and_sizes(self, scope=None):"
data/raw/repos\research\object_detection\core,box_list.py,"def transpose_coordinates(self, scope=None):"
data/raw/repos\research\object_detection\core,box_list.py,"def as_tensor_dict(self, fields=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def area(boxlist, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def height_width(boxlist, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def scale(boxlist, y_scale, x_scale, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def scale_height_width(boxlist, y_scale, x_scale, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def clip_to_window(boxlist, window, filter_nonoverlapping=True, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def prune_outside_window(boxlist, window, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def prune_completely_outside_window(boxlist, window, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def intersection(boxlist1, boxlist2, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def matched_intersection(boxlist1, boxlist2, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def iou(boxlist1, boxlist2, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def l1(boxlist1, boxlist2, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def giou(boxlist1, boxlist2, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def matched_iou(boxlist1, boxlist2, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def ioa(boxlist1, boxlist2, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def prune_small_boxes(boxlist, min_side, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def change_coordinate_frame(boxlist, window, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def sq_dist(boxlist1, boxlist2, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def gather(boxlist, indices, fields=None, scope=None, use_static_shapes=False):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def concatenate(boxlists, fields=None, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def sort_by_field(boxlist, field, order=SortOrder.descend, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def visualize_boxes_in_image(image, boxlist, normalized=False, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def filter_field_value_equals(boxlist, field, value, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def filter_greater_than(boxlist, thresh, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def non_max_suppression(boxlist, thresh, max_output_size, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def _copy_extra_fields(boxlist_to_copy_to, boxlist_to_copy_from):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def box_voting(selected_boxes, pool_boxes, iou_thresh=0.5):"
data/raw/repos\research\object_detection\core,box_list_ops.py,"def pad_or_clip_box_list(boxlist, num_boxes, scope=None):"
data/raw/repos\research\object_detection\core,box_list_ops.py,def select_box():
data/raw/repos\research\object_detection\core,box_list_ops.py,def coverage_box(bboxes):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_area(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_height_width(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_scale(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_scale_height_width(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_prune_completely_outside_window(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_prune_completely_outside_window_with_empty_boxlist(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_intersection(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_matched_intersection(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_iou(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_l1(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_giou(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_matched_iou(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_iouworks_on_empty_inputs(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_ioa(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_prune_non_overlapping_boxes(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_prune_small_boxes(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_prune_small_boxes_prunes_boxes_with_negative_side(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_change_coordinate_frame(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_ioaworks_on_empty_inputs(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_pairwise_distances(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_boolean_mask(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_static_boolean_mask_with_field(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,"def graph_fn(corners, weights, indicator):"
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_gather(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_static_gather_with_field(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,"def graph_fn(corners, weights, indices):"
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_gather_with_invalid_field(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_gather_with_invalid_inputs(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_gather_with_dynamic_indexing(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_sort_by_field_ascending_order(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_sort_by_field_descending_order(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_sort_by_field_invalid_inputs(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_visualize_boxes_in_image(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_filter_field_value_equals(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_filter_greater_than(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_clip_box_list(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_pad_box_list(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_select_random_box(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_select_random_box_with_empty_boxlist(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_get_minimal_coverage_box(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_get_minimal_coverage_box_with_empty_boxlist(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_invalid_input_box_list_list(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_concatenate_with_missing_fields(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_concatenate_with_incompatible_field_shapes(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_concatenate_is_correct(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_select_from_three_clusters(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_select_at_most_two_boxes_from_three_clusters(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_select_at_most_thirty_boxes_from_three_clusters(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_select_single_box(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_select_from_ten_identical_boxes(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_copy_extra_fields(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_to_normalized_coordinates(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_to_normalized_coordinates_already_normalized(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_to_absolute_coordinates(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_to_absolute_coordinates_already_abolute(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_convert_to_normalized_and_back(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_convert_to_absolute_and_back(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_to_absolute_coordinates_maximum_coordinate_check(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_box_voting(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_box_voting_fails_with_negative_scores(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_box_voting_fails_when_unmatched(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_refine_boxes(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_refine_boxes_multi_class(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def test_sample_boxes_by_jittering(self):
data/raw/repos\research\object_detection\core,box_list_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_test.py,def test_num_boxes(self):
data/raw/repos\research\object_detection\core,box_list_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_test.py,def test_get_correct_center_coordinates_and_sizes(self):
data/raw/repos\research\object_detection\core,box_list_test.py,def graph_fn(boxes):
data/raw/repos\research\object_detection\core,box_list_test.py,def test_create_box_list_with_dynamic_shape(self):
data/raw/repos\research\object_detection\core,box_list_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,box_list_test.py,def test_transpose_coordinates(self):
data/raw/repos\research\object_detection\core,box_list_test.py,def graph_fn(boxes):
data/raw/repos\research\object_detection\core,box_list_test.py,def test_box_list_invalid_inputs(self):
data/raw/repos\research\object_detection\core,box_list_test.py,def test_num_boxes_static(self):
data/raw/repos\research\object_detection\core,box_list_test.py,def test_as_tensor_dict(self):
data/raw/repos\research\object_detection\core,box_list_test.py,def test_as_tensor_dict_with_features(self):
data/raw/repos\research\object_detection\core,box_list_test.py,def test_as_tensor_dict_missing_field(self):
data/raw/repos\research\object_detection\core,box_predictor.py,"def __init__(self, is_training, num_classes):"
data/raw/repos\research\object_detection\core,box_predictor.py,def is_keras_model(self):
data/raw/repos\research\object_detection\core,box_predictor.py,def num_classes(self):
data/raw/repos\research\object_detection\core,box_predictor.py,"def _predict(self, image_features, num_predictions_per_location, **params):"
data/raw/repos\research\object_detection\core,box_predictor.py,def is_keras_model(self):
data/raw/repos\research\object_detection\core,box_predictor.py,def num_classes(self):
data/raw/repos\research\object_detection\core,box_predictor.py,"def call(self, image_features, **kwargs):"
data/raw/repos\research\object_detection\core,box_predictor.py,"def _predict(self, image_features, **kwargs):"
data/raw/repos\research\object_detection\core,class_agnostic_nms_test.py,def test_class_agnostic_nms_select_with_shared_boxes(self):
data/raw/repos\research\object_detection\core,class_agnostic_nms_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,class_agnostic_nms_test.py,def test_class_agnostic_nms_select_with_per_class_boxes(self):
data/raw/repos\research\object_detection\core,class_agnostic_nms_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,class_agnostic_nms_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,data_decoder.py,"def decode(self, data):"
data/raw/repos\research\object_detection\core,data_parser.py,"def parse(self, input_data):"
data/raw/repos\research\object_detection\core,densepose_ops.py,"def scale(dp_surface_coords, y_scale, x_scale, scope=None):"
data/raw/repos\research\object_detection\core,densepose_ops.py,"def clip_to_window(dp_surface_coords, window, scope=None):"
data/raw/repos\research\object_detection\core,densepose_ops.py,def gather_and_reshuffle(elems):
data/raw/repos\research\object_detection\core,densepose_ops.py,"def change_coordinate_frame(dp_surface_coords, window, scope=None):"
data/raw/repos\research\object_detection\core,densepose_ops.py,def __init__(self):
data/raw/repos\research\object_detection\core,densepose_ops.py,"def flip_parts_and_coords(self, part_ids, vu):"
data/raw/repos\research\object_detection\core,densepose_ops.py,"def flip_horizontal(dp_part_ids, dp_surface_coords, scope=None):"
data/raw/repos\research\object_detection\core,densepose_ops_test.py,def test_scale(self):
data/raw/repos\research\object_detection\core,densepose_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,densepose_ops_test.py,def test_clip_to_window(self):
data/raw/repos\research\object_detection\core,densepose_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,densepose_ops_test.py,def test_prune_outside_window(self):
data/raw/repos\research\object_detection\core,densepose_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,densepose_ops_test.py,def test_change_coordinate_frame(self):
data/raw/repos\research\object_detection\core,densepose_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,densepose_ops_test.py,def test_to_normalized_coordinates(self):
data/raw/repos\research\object_detection\core,densepose_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,densepose_ops_test.py,def test_to_absolute_coordinates(self):
data/raw/repos\research\object_detection\core,densepose_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,densepose_ops_test.py,def test_horizontal_flip(self):
data/raw/repos\research\object_detection\core,densepose_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,freezable_batch_norm.py,"def __init__(self, training=None, **kwargs):"
data/raw/repos\research\object_detection\core,freezable_batch_norm.py,"def call(self, inputs, training=None):"
data/raw/repos\research\object_detection\core,freezable_batch_norm_tf2_test.py,"def _build_model(self, use_sync_batch_norm, training=None):"
data/raw/repos\research\object_detection\core,freezable_batch_norm_tf2_test.py,"def _copy_weights(self, source_weights, target_weights):"
data/raw/repos\research\object_detection\core,freezable_batch_norm_tf2_test.py,"def test_batchnorm_freezing_training_none(self, use_sync_batch_norm):"
data/raw/repos\research\object_detection\core,freezable_batch_norm_tf2_test.py,"def test_batchnorm_freezing_training_false(self, use_sync_batch_norm):"
data/raw/repos\research\object_detection\core,freezable_sync_batch_norm.py,"def __init__(self, training=None, **kwargs):"
data/raw/repos\research\object_detection\core,freezable_sync_batch_norm.py,"def call(self, inputs, training=None):"
data/raw/repos\research\object_detection\core,keypoint_ops.py,"def scale(keypoints, y_scale, x_scale, scope=None):"
data/raw/repos\research\object_detection\core,keypoint_ops.py,"def clip_to_window(keypoints, window, scope=None):"
data/raw/repos\research\object_detection\core,keypoint_ops.py,"def prune_outside_window(keypoints, window, scope=None):"
data/raw/repos\research\object_detection\core,keypoint_ops.py,"def change_coordinate_frame(keypoints, window, scope=None):"
data/raw/repos\research\object_detection\core,keypoint_ops.py,"def keypoints_to_enclosing_bounding_boxes(keypoints, keypoints_axis=1):"
data/raw/repos\research\object_detection\core,keypoint_ops.py,"def flip_horizontal(keypoints, flip_point, flip_permutation=None, scope=None):"
data/raw/repos\research\object_detection\core,keypoint_ops.py,"def flip_vertical(keypoints, flip_point, flip_permutation=None, scope=None):"
data/raw/repos\research\object_detection\core,keypoint_ops.py,"def rot90(keypoints, rotation_permutation=None, scope=None):"
data/raw/repos\research\object_detection\core,keypoint_ops.py,"def set_keypoint_visibilities(keypoints, initial_keypoint_visibilities=None):"
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_scale(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_clip_to_window(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_prune_outside_window(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_change_coordinate_frame(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_keypoints_to_enclosing_bounding_boxes(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_keypoints_to_enclosing_bounding_boxes_axis2(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_to_normalized_coordinates(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_to_normalized_coordinates_already_normalized(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_to_absolute_coordinates(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_to_absolute_coordinates_already_absolute(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_flip_horizontal(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_flip_horizontal_permutation(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_flip_vertical(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_flip_vertical_permutation(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_rot90(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_rot90_permutation(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_keypoint_weights_from_visibilities(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_keypoint_weights_from_visibilities_no_per_kpt_weights(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_set_keypoint_visibilities_no_initial_kpt_vis(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def test_set_keypoint_visibilities(self):
data/raw/repos\research\object_detection\core,keypoint_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses.py,"def _get_loss_multiplier_for_tensor(self, tensor, losses_mask):"
data/raw/repos\research\object_detection\core,losses.py,"def _compute_loss(self, prediction_tensor, target_tensor, **params):"
data/raw/repos\research\object_detection\core,losses.py,"def _compute_loss(self, prediction_tensor, target_tensor, weights):"
data/raw/repos\research\object_detection\core,losses.py,"def __init__(self, delta=1.0):"
data/raw/repos\research\object_detection\core,losses.py,"def _compute_loss(self, prediction_tensor, target_tensor, weights):"
data/raw/repos\research\object_detection\core,losses.py,"def _compute_loss(self, prediction_tensor, target_tensor, weights):"
data/raw/repos\research\object_detection\core,losses.py,"def _compute_loss(self, prediction_tensor, target_tensor, weights):"
data/raw/repos\research\object_detection\core,losses.py,"def __init__(self, squared_normalization, is_prediction_probability=False):"
data/raw/repos\research\object_detection\core,losses.py,"def __init__(self, gamma=2.0, alpha=0.25):"
data/raw/repos\research\object_detection\core,losses.py,"def __init__(self, logit_scale=1.0):"
data/raw/repos\research\object_detection\core,losses.py,"def _compute_loss(self, prediction_tensor, target_tensor, weights):"
data/raw/repos\research\object_detection\core,losses.py,"def __init__(self, logit_scale=1.0):"
data/raw/repos\research\object_detection\core,losses.py,"def _scale_and_softmax_logits(self, logits):"
data/raw/repos\research\object_detection\core,losses.py,"def _compute_loss(self, prediction_tensor, target_tensor, weights):"
data/raw/repos\research\object_detection\core,losses.py,"def __init__(self, alpha, bootstrap_type='soft'):"
data/raw/repos\research\object_detection\core,losses.py,"def _compute_loss(self, prediction_tensor, target_tensor, weights):"
data/raw/repos\research\object_detection\core,losses.py,def summarize(self):
data/raw/repos\research\object_detection\core,losses.py,"def __init__(self, alpha=2.0, beta=4.0, sigmoid_clip_value=1e-4):"
data/raw/repos\research\object_detection\core,losses.py,"def _compute_loss(self, prediction_tensor, target_tensor, weights):"
data/raw/repos\research\object_detection\core,losses.py,"def _compute_loss(self, prediction_tensor, target_tensor, weights):"
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectWeightedLoss(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectAnchorwiseLoss(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectNanLoss(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectWeightedLossWithLossesMask(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectLoss(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectLossWithLossesMask(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectLoss(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectLossWithNoLabels(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectLoss(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectLossWithNoLabels(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectLoss(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectAnchorWiseLoss(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectLossWithClassIndices(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectLossWithLossesMask(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def _logit(probability):
data/raw/repos\research\object_detection\core,losses_test.py,def testEasyExamplesProduceSmallLossComparedToSigmoidXEntropy(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testHardExamplesProduceLossComparableToSigmoidXEntropy(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testNonAnchorWiseOutputComparableToSigmoidXEntropy(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testIgnoreNegativeExampleLossViaAlphaMultiplier(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testIgnorePositiveExampleLossViaAlphaMultiplier(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testSimilarToSigmoidXEntropyWithHalfAlphaAndZeroGammaUpToAScale(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testSameAsSigmoidXEntropyWithNoAlphaAndZeroGamma(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testExpectedLossWithAlphaOneAndZeroGamma(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testExpectedLossWithAlpha75AndZeroGamma(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testExpectedLossWithLossesMask(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectLoss(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectAnchorWiseLoss(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectAnchorWiseLossWithHighLogitScaleSetting(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectLossWithLossesMask(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectLoss(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectAnchorWiseLoss(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectAnchorWiseLossWithLogitScaleSetting(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectLossSoftBootstrapping(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectLossHardBootstrapping(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testReturnsCorrectAnchorWiseLoss(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testHardMiningWithSingleLossType(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testHardMiningWithBothLossType(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testHardMiningNMS(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testEnforceNegativesPerPositiveRatio(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def testEnforceNegativesPerPositiveRatioWithMinNegativesPerImage(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def setUp(self):
data/raw/repos\research\object_detection\core,losses_test.py,def test_returns_correct_loss(self):
data/raw/repos\research\object_detection\core,losses_test.py,"def graph_fn(prediction, target):"
data/raw/repos\research\object_detection\core,losses_test.py,def test_returns_correct_loss_weighted(self):
data/raw/repos\research\object_detection\core,losses_test.py,"def graph_fn(prediction, target):"
data/raw/repos\research\object_detection\core,losses_test.py,def test_returns_correct_loss(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def test_compute_weights_1(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def test_compute_weights_set(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,losses_test.py,def test_class_indices(self):
data/raw/repos\research\object_detection\core,losses_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,matcher.py,"def __init__(self, match_results, use_matmul_gather=False):"
data/raw/repos\research\object_detection\core,matcher.py,def match_results(self):
data/raw/repos\research\object_detection\core,matcher.py,def matched_column_indices(self):
data/raw/repos\research\object_detection\core,matcher.py,def matched_column_indicator(self):
data/raw/repos\research\object_detection\core,matcher.py,def num_matched_columns(self):
data/raw/repos\research\object_detection\core,matcher.py,def unmatched_column_indices(self):
data/raw/repos\research\object_detection\core,matcher.py,def unmatched_column_indicator(self):
data/raw/repos\research\object_detection\core,matcher.py,def num_unmatched_columns(self):
data/raw/repos\research\object_detection\core,matcher.py,def ignored_column_indices(self):
data/raw/repos\research\object_detection\core,matcher.py,def ignored_column_indicator(self):
data/raw/repos\research\object_detection\core,matcher.py,def num_ignored_columns(self):
data/raw/repos\research\object_detection\core,matcher.py,def unmatched_or_ignored_column_indices(self):
data/raw/repos\research\object_detection\core,matcher.py,def matched_row_indices(self):
data/raw/repos\research\object_detection\core,matcher.py,def num_matched_rows(self):
data/raw/repos\research\object_detection\core,matcher.py,"def _reshape_and_cast(self, t):"
data/raw/repos\research\object_detection\core,matcher.py,"def __init__(self, use_matmul_gather=False):"
data/raw/repos\research\object_detection\core,matcher.py,"def match(self, similarity_matrix, valid_rows=None, scope=None):"
data/raw/repos\research\object_detection\core,matcher.py,"def _match(self, similarity_matrix, valid_rows):"
data/raw/repos\research\object_detection\core,matcher_test.py,def test_get_correct_matched_columnIndices(self):
data/raw/repos\research\object_detection\core,matcher_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,matcher_test.py,def test_get_correct_counts(self):
data/raw/repos\research\object_detection\core,matcher_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,matcher_test.py,def testGetCorrectUnmatchedColumnIndices(self):
data/raw/repos\research\object_detection\core,matcher_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,matcher_test.py,def testGetCorrectMatchedRowIndices(self):
data/raw/repos\research\object_detection\core,matcher_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,matcher_test.py,def test_get_correct_ignored_column_indices(self):
data/raw/repos\research\object_detection\core,matcher_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,matcher_test.py,def test_get_correct_matched_column_indicator(self):
data/raw/repos\research\object_detection\core,matcher_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,matcher_test.py,def test_get_correct_unmatched_column_indicator(self):
data/raw/repos\research\object_detection\core,matcher_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,matcher_test.py,def test_get_correct_ignored_column_indicator(self):
data/raw/repos\research\object_detection\core,matcher_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,matcher_test.py,def test_get_correct_unmatched_ignored_column_indices(self):
data/raw/repos\research\object_detection\core,matcher_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,matcher_test.py,def test_all_columns_accounted_for(self):
data/raw/repos\research\object_detection\core,matcher_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,matcher_test.py,def test_scalar_gather_based_on_match(self):
data/raw/repos\research\object_detection\core,matcher_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,matcher_test.py,def test_multidimensional_gather_based_on_match(self):
data/raw/repos\research\object_detection\core,matcher_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,matcher_test.py,def test_multidimensional_gather_based_on_match_with_matmul_gather_op(self):
data/raw/repos\research\object_detection\core,matcher_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,minibatch_sampler.py,def __init__(self):
data/raw/repos\research\object_detection\core,minibatch_sampler.py,"def subsample(self, indicator, batch_size, **params):"
data/raw/repos\research\object_detection\core,minibatch_sampler.py,"def subsample_indicator(indicator, num_samples):"
data/raw/repos\research\object_detection\core,minibatch_sampler_test.py,def test_subsample_indicator_when_more_true_elements_than_num_samples(self):
data/raw/repos\research\object_detection\core,minibatch_sampler_test.py,def graph_fn(indicator):
data/raw/repos\research\object_detection\core,minibatch_sampler_test.py,def test_subsample_indicator_when_less_true_elements_than_num_samples(self):
data/raw/repos\research\object_detection\core,minibatch_sampler_test.py,def graph_fn(indicator):
data/raw/repos\research\object_detection\core,minibatch_sampler_test.py,def test_subsample_indicator_when_num_samples_is_zero(self):
data/raw/repos\research\object_detection\core,minibatch_sampler_test.py,def graph_fn(indicator):
data/raw/repos\research\object_detection\core,minibatch_sampler_test.py,def test_subsample_indicator_when_indicator_all_false(self):
data/raw/repos\research\object_detection\core,minibatch_sampler_test.py,def graph_fn(indicator):
data/raw/repos\research\object_detection\core,model.py,"def __init__(self, num_classes):"
data/raw/repos\research\object_detection\core,model.py,def num_classes(self):
data/raw/repos\research\object_detection\core,model.py,"def groundtruth_lists(self, field):"
data/raw/repos\research\object_detection\core,model.py,"def groundtruth_has_field(self, field):"
data/raw/repos\research\object_detection\core,model.py,def training_step(self):
data/raw/repos\research\object_detection\core,model.py,def get_side_inputs(features):
data/raw/repos\research\object_detection\core,model.py,"def preprocess(self, inputs):"
data/raw/repos\research\object_detection\core,model.py,"def predict(self, preprocessed_inputs, true_image_shapes, **side_inputs):"
data/raw/repos\research\object_detection\core,model.py,"def postprocess(self, prediction_dict, true_image_shapes, **params):"
data/raw/repos\research\object_detection\core,model.py,"def loss(self, prediction_dict, true_image_shapes):"
data/raw/repos\research\object_detection\core,model.py,def regularization_losses(self):
data/raw/repos\research\object_detection\core,model.py,"def restore_from_objects(self, fine_tune_checkpoint_type='detection'):"
data/raw/repos\research\object_detection\core,model.py,def updates(self):
data/raw/repos\research\object_detection\core,model.py,"def call(self, images):"
data/raw/repos\research\object_detection\core,model_test.py,def __init__(self):
data/raw/repos\research\object_detection\core,model_test.py,"def preprocess(self, images):"
data/raw/repos\research\object_detection\core,model_test.py,"def predict(self, images, shapes):"
data/raw/repos\research\object_detection\core,model_test.py,"def postprocess(self, prediction_dict, shapes):"
data/raw/repos\research\object_detection\core,model_test.py,def loss(self):
data/raw/repos\research\object_detection\core,model_test.py,def updates(self):
data/raw/repos\research\object_detection\core,model_test.py,def restore_map(self):
data/raw/repos\research\object_detection\core,model_test.py,"def restore_from_objects(self, fine_tune_checkpoint_type):"
data/raw/repos\research\object_detection\core,model_test.py,def regularization_losses(self):
data/raw/repos\research\object_detection\core,model_test.py,def test_model_call(self):
data/raw/repos\research\object_detection\core,model_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,model_test.py,def test_freeze(self):
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,def test_multiclass_nms_select_with_shared_boxes_cpu_only(self):
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,"def graph_fn(boxes, scores):"
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,def test_multiclass_nms_select_with_shared_boxes_pad_to_max_output_size(self):
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,"def graph_fn(boxes, scores):"
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,def test_multiclass_nms_select_with_shared_boxes_given_keypoints(self):
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,"def graph_fn(boxes, scores, keypoints):"
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,def test_multiclass_nms_with_shared_boxes_given_keypoint_heatmaps(self):
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,"def graph_fn(boxes, scores, keypoint_heatmaps):"
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,def test_multiclass_nms_with_additional_fields(self):
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,"def graph_fn(boxes, scores, coarse_boxes):"
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,def test_multiclass_nms_select_with_shared_boxes_given_masks(self):
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,"def graph_fn(boxes, scores, masks):"
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,def test_multiclass_nms_select_with_clip_window(self):
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,"def graph_fn(boxes, scores, clip_window):"
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,def test_multiclass_nms_select_with_clip_window_change_coordinate_frame(self):
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,"def graph_fn(boxes, scores, clip_window):"
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,def test_multiclass_nms_select_with_per_class_cap(self):
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,"def graph_fn(boxes, scores):"
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,def test_multiclass_nms_select_with_total_cap(self):
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,"def graph_fn(boxes, scores):"
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,def test_multiclass_nms_threshold_then_select_with_shared_boxes(self):
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,"def graph_fn(boxes, scores):"
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,def test_multiclass_nms_select_with_separate_boxes(self):
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,"def graph_fn(boxes, scores):"
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,def test_multiclass_soft_nms_select_with_shared_boxes_cpu_only(self):
data/raw/repos\research\object_detection\core,multiclass_nms_test.py,"def graph_fn(boxes, scores):"
data/raw/repos\research\object_detection\core,post_processing.py,"def batch_iou(boxes1, boxes2):"
data/raw/repos\research\object_detection\core,post_processing.py,"def _self_suppression(iou, iou_threshold, loop_condition, iou_sum):"
data/raw/repos\research\object_detection\core,post_processing.py,"def _cross_suppression(boxes, box_slice, iou_threshold, inner_idx):"
data/raw/repos\research\object_detection\core,post_processing.py,"def _suppression_loop_body(boxes, iou_threshold, output_size, idx):"
data/raw/repos\research\object_detection\core,post_processing.py,"def _loop_cond(unused_boxes, unused_threshold, output_size, idx):"
data/raw/repos\research\object_detection\core,post_processing.py,"def _clip_boxes(boxes, clip_window):"
data/raw/repos\research\object_detection\core,post_processing.py,def __enter__(self):
data/raw/repos\research\object_detection\core,post_processing.py,"def __exit__(self, type_arg, value_arg, traceback_arg):"
data/raw/repos\research\object_detection\core,post_processing.py,def _single_image_nms_fn(args):
data/raw/repos\research\object_detection\core,prefetcher.py,"def prefetch(tensor_dict, capacity):"
data/raw/repos\research\object_detection\core,prefetcher_tf1_test.py,def test_prefetch_tensors_with_fully_defined_shapes(self):
data/raw/repos\research\object_detection\core,prefetcher_tf1_test.py,def test_prefetch_tensors_with_partially_defined_shapes(self):
data/raw/repos\research\object_detection\core,preprocessor.py,"def _random_integer(minval, maxval, seed):"
data/raw/repos\research\object_detection\core,preprocessor.py,"def _rgb_to_grayscale(images, name=None):"
data/raw/repos\research\object_detection\core,preprocessor.py,def _flip_boxes_left_right(boxes):
data/raw/repos\research\object_detection\core,preprocessor.py,def _flip_boxes_up_down(boxes):
data/raw/repos\research\object_detection\core,preprocessor.py,def _rot90_boxes(boxes):
data/raw/repos\research\object_detection\core,preprocessor.py,def _flip_masks_left_right(masks):
data/raw/repos\research\object_detection\core,preprocessor.py,def _flip_masks_up_down(masks):
data/raw/repos\research\object_detection\core,preprocessor.py,def _rot90_masks(masks):
data/raw/repos\research\object_detection\core,preprocessor.py,def _flip_image(image):
data/raw/repos\research\object_detection\core,preprocessor.py,def _flip_image(image):
data/raw/repos\research\object_detection\core,preprocessor.py,def _rot90_image(image):
data/raw/repos\research\object_detection\core,preprocessor.py,"def _augment_only_rgb_channels(image, augment_function):"
data/raw/repos\research\object_detection\core,preprocessor.py,def _image_to_gray(image):
data/raw/repos\research\object_detection\core,preprocessor.py,"def adjust_gamma(image, gamma=1.0, gain=1.0):"
data/raw/repos\research\object_detection\core,preprocessor.py,def _adjust_gamma(image):
data/raw/repos\research\object_detection\core,preprocessor.py,def _adjust_brightness(image):
data/raw/repos\research\object_detection\core,preprocessor.py,def _adjust_contrast(image):
data/raw/repos\research\object_detection\core,preprocessor.py,def _adjust_hue(image):
data/raw/repos\research\object_detection\core,preprocessor.py,def _adjust_saturation(image):
data/raw/repos\research\object_detection\core,preprocessor.py,"def random_distort_color(image, color_ordering=0, preprocess_vars_cache=None):"
data/raw/repos\research\object_detection\core,preprocessor.py,"def random_jitter_boxes(boxes, ratio=0.05, jitter_mode='default', seed=None):"
data/raw/repos\research\object_detection\core,preprocessor.py,def strict_random_crop_image_fn():
data/raw/repos\research\object_detection\core,preprocessor.py,def target_height_fn():
data/raw/repos\research\object_detection\core,preprocessor.py,def target_width_fn():
data/raw/repos\research\object_detection\core,preprocessor.py,"def add_black_patch_to_image(image, idx):"
data/raw/repos\research\object_detection\core,preprocessor.py,def _adjust_jpeg_quality():
data/raw/repos\research\object_detection\core,preprocessor.py,"def _resize_image_to_target(target_height, target_width):"
data/raw/repos\research\object_detection\core,preprocessor.py,"def _resize_image_and_masks_to_target(target_height, target_width):"
data/raw/repos\research\object_detection\core,preprocessor.py,def _apply_patch_gaussian(image):
data/raw/repos\research\object_detection\core,preprocessor.py,"def autoaugment_image(image, boxes, policy_name='v0'):"
data/raw/repos\research\object_detection\core,preprocessor.py,def image_to_float(image):
data/raw/repos\research\object_detection\core,preprocessor.py,"def random_resize_method(image, target_size, preprocess_vars_cache=None):"
data/raw/repos\research\object_detection\core,preprocessor.py,def _resize_landscape_image(image):
data/raw/repos\research\object_detection\core,preprocessor.py,def _resize_portrait_image(image):
data/raw/repos\research\object_detection\core,preprocessor.py,def _get_image_info(image):
data/raw/repos\research\object_detection\core,preprocessor.py,"def resize_pad_to_multiple(image, masks=None, multiple=1):"
data/raw/repos\research\object_detection\core,preprocessor.py,"def scale_boxes_to_pixel_coordinates(image, boxes, keypoints=None):"
data/raw/repos\research\object_detection\core,preprocessor.py,def resize_masks_branch():
data/raw/repos\research\object_detection\core,preprocessor.py,def reshape_masks_branch():
data/raw/repos\research\object_detection\core,preprocessor.py,"def subtract_channel_mean(image, means=None):"
data/raw/repos\research\object_detection\core,preprocessor.py,"def one_hot_encoding(labels, num_classes=None):"
data/raw/repos\research\object_detection\core,preprocessor.py,def rgb_to_gray(image):
data/raw/repos\research\object_detection\core,preprocessor.py,"def _concat_image(image, boxes, labels, label_weights, axis):"
data/raw/repos\research\object_detection\core,preprocessor.py,"def random_crop_selector(selected_result, index):"
data/raw/repos\research\object_detection\core,preprocessor.py,"def random_crop_pad_selector(image_boxes_labels, index):"
data/raw/repos\research\object_detection\core,preprocessor.py,"def convert_class_logits_to_softmax(multiclass_scores, temperature=1.0):"
data/raw/repos\research\object_detection\core,preprocessor.py,"def _get_crop_border(border, size):"
data/raw/repos\research\object_detection\core,preprocessor.py,def y_function():
data/raw/repos\research\object_detection\core,preprocessor.py,def x_function():
data/raw/repos\research\object_detection\core,preprocessor.py,def get_arg(key):
data/raw/repos\research\object_detection\core,preprocessor_cache.py,def __init__(self):
data/raw/repos\research\object_detection\core,preprocessor_cache.py,def clear(self):
data/raw/repos\research\object_detection\core,preprocessor_cache.py,"def get(self, function_id, key):"
data/raw/repos\research\object_detection\core,preprocessor_cache.py,"def update(self, function_id, key, value):"
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createColorfulTestImage(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createTestImages(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createEmptyTestBoxes(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createTestBoxes(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createRandomTextBoxes(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createTestGroundtruthWeights(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createZeroBoxes(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createTestMasks(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createTestKeypoints(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createTestKeypointDepths(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createTestKeypointsInsideCrop(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createTestKeypointsOutsideCrop(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createTestDensePose(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createKeypointFlipPermutation(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createKeypointRotPermutation(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createTestLabels(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createTestLabelsLong(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createTestBoxesOutOfImage(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def createTestMultiClassScores(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedImagesAfterNormalization(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedMaxImageAfterColorScale(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedMinImageAfterColorScale(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedImagesAfterLeftRightFlip(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedImagesAfterUpDownFlip(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedImagesAfterRot90(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedBoxesAfterLeftRightFlip(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedBoxesAfterUpDownFlip(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedBoxesAfterRot90(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedMasksAfterLeftRightFlip(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedMasksAfterUpDownFlip(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedMasksAfterRot90(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedLabelScoresAfterThresholding(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedBoxesAfterThresholding(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedLabelsAfterThresholding(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedMultiClassScoresAfterThresholding(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedMasksAfterThresholding(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedKeypointsAfterThresholding(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedLabelScoresAfterThresholdingWithMissingScore(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedBoxesAfterThresholdingWithMissingScore(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedLabelsAfterThresholdingWithMissingScore(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedLabelScoresAfterDropping(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedBoxesAfterDropping(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedLabelsAfterDropping(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedMultiClassScoresAfterDropping(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedMasksAfterDropping(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedKeypointsAfterDropping(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def expectedLabelsAfterRemapping(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRgbToGrayscale(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testNormalizeImage(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRetainBoxesAboveThreshold(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRetainBoxesAboveThresholdWithMultiClassScores(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRetainBoxesAboveThresholdWithMasks(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRetainBoxesAboveThresholdWithKeypoints(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testDropLabelProbabilistically(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testDropLabelProbabilisticallyWithMultiClassScores(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testDropLabelProbabilisticallyWithMasks(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testDropLabelProbabilisticallyWithKeypoints(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRemapLabels(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testFlipBoxesLeftRight(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testFlipBoxesUpDown(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRot90Boxes(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testFlipMasksLeftRight(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testFlipMasksUpDown(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRot90Masks(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomHorizontalFlip(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomHorizontalFlipWithEmptyBoxes(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomHorizontalFlipWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRunRandomHorizontalFlipWithKeypointDepth(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomVerticalFlip(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomVerticalFlipWithEmptyBoxes(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomVerticalFlipWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRunRandomVerticalFlipWithMaskAndKeypoints(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomRotation90(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomRotation90WithEmptyBoxes(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomRotation90WithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRunRandomRotation90WithMaskAndKeypoints(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomPixelValueScale(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomPixelValueScaleWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomImageScale(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomImageScaleWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomRGBtoGray(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomRGBtoGrayWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomAdjustBrightness(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomAdjustBrightnessWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomAdjustContrast(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomAdjustContrastWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomAdjustHue(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomAdjustHueWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomDistortColor(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomDistortColorWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomJitterBoxes(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,"def testRandomJitterBoxesZeroRatio(self, jitter_mode):"
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomJitterBoxesExpand(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomJitterBoxesExpandSymmetric(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomJitterBoxesExpandSymmetricXY(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomJitterBoxesShrink(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomJitterBoxesShrinkSymmetric(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomJitterBoxesShrinkSymmetricXY(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomCropImage(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomCropImageWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomCropImageGrayscale(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomCropImageWithBoxOutOfImage(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomCropImageWithRandomCoefOne(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomCropWithMockSampleDistortedBoundingBox(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomCropWithoutClipBoxes(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomCropImageWithMultiClassScores(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testStrictRandomCropImageWithGroundtruthWeights(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testStrictRandomCropImageWithMasks(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testStrictRandomCropImageWithMaskWeights(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testStrictRandomCropImageWithKeypoints(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRunRandomCropImageWithMasks(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRunRandomCropImageWithKeypointsInsideCrop(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRunRandomCropImageWithKeypointsOutsideCrop(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRunRandomCropImageWithDensePose(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRunRetainBoxesAboveThreshold(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRunRetainBoxesAboveThresholdWithMasks(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRunRetainBoxesAboveThresholdWithKeypoints(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomCropToAspectRatioWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRunRandomCropToAspectRatioWithMasks(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRunRandomCropToAspectRatioCenterCrop(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRunRandomCropToAspectRatioWithKeypoints(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomPadToAspectRatioWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRunRandomPadToAspectRatioWithMinMaxPaddedSizeRatios(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRunRandomPadToAspectRatioWithMasks(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRunRandomPadToAspectRatioWithKeypoints(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomPadImageWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomPadImage(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomPadImageCenterPad(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,"def testRandomPadImageWithKeypointsAndMasks(self, include_dense_pose):"
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomAbsolutePadImage(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomAbsolutePadImageWithKeypoints(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomCropPadImageWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomCropPadImageWithRandomCoefOne(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomCropToAspectRatio(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomPadToAspectRatio(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomBlackPatchesWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomBlackPatches(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomJpegQuality(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomJpegQualityKeepsStaticChannelShape(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomJpegQualityWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomJpegQualityWithRandomCoefOne(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomDownscaleToTargetPixels(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomDownscaleToTargetPixelsWithMasks(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,"def testRandomDownscaleToTargetPixelsWithCache(self, test_masks):"
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomDownscaleToTargetPixelsWithRandomCoefOne(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomDownscaleToTargetPixelsIgnoresSmallImages(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomPatchGaussianShape(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomPatchGaussianClippedToLowerBound(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomPatchGaussianClippedToUpperBound(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomPatchGaussianWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomPatchGaussianWithRandomCoefOne(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testAutoAugmentImage(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomResizeMethodWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomResizeMethod(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeImageWithMasks(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,"def graph_fn(in_image_shape, in_masks_shape):"
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeImageWithMasksTensorInputHeightAndWidth(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,"def graph_fn(in_image_shape, in_masks_shape):"
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeImageWithNoInstanceMask(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,"def graph_fn(in_image_shape, in_masks_shape):"
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeToRangePreservesStaticSpatialShape(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeToRangeWithDynamicSpatialShape(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn(in_image_shape):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeToRangeWithPadToMaxDimensionReturnsCorrectShapes(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn(in_image):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeToRangeWithPadToMaxDimensionReturnsCorrectTensor(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn(in_image):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeToRangeWithMasksPreservesStaticSpatialShape(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeToRangeWithMasksAndPadToMaxDimension(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,"def graph_fn(in_image, in_masks):"
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeToRangeWithMasksAndDynamicSpatialShape(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,"def graph_fn(in_image, in_masks):"
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeToRangeWithInstanceMasksTensorOfSizeZero(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,"def graph_fn(in_image, in_masks):"
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeToRange4DImageTensor(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeToRangeSameMinMax(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn(in_shape):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeToMaxDimensionTensorShapes(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,"def graph_fn(in_image_shape, in_masks_shape):"
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeToMaxDimensionWithInstanceMasksTensorOfSizeZero(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,"def graph_fn(in_image_shape, in_masks_shape):"
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeToMaxDimensionRaisesErrorOn4DImage(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeToMinDimensionTensorShapes(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,"def graph_fn(in_image_shape, in_masks_shape):"
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeToMinDimensionWithInstanceMasksTensorOfSizeZero(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,"def graph_fn(in_image_shape, in_masks_shape):"
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizeToMinDimensionRaisesErrorOn4DImage(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizePadToMultipleNoMasks(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizePadToMultipleWithMasks(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testResizePadToMultipleEmptyMasks(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testScaleBoxesToPixelCoordinates(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testScaleBoxesToPixelCoordinatesWithKeypoints(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testSubtractChannelMean(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testOneHotEncoding(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomSelfConcatImageVertically(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testRandomSelfConcatImageHorizontally(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testSSDRandomCropWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testSSDRandomCrop(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testSSDRandomCropWithMultiClassScores(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testSSDRandomCropPad(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testSSDRandomCropFixedAspectRatioWithCache(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testSSDRandomCropFixedAspectRatio(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testSSDRandomCropFixedAspectRatioWithMultiClassScores(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testSSDRandomCropFixedAspectRatioWithMasksAndKeypoints(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testSSDRandomCropFixedAspectRatioWithLabelScoresMasksAndKeypoints(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testConvertClassLogitsToSoftmax(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,"def test_square_crop_by_scale(self, scale):"
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,"def test_random_scale_crop_and_pad_to_square(self, scale):"
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def test_random_scale_crop_and_pad_to_square_handles_confidences(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,preprocessor_test.py,def testAdjustGamma(self):
data/raw/repos\research\object_detection\core,preprocessor_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,region_similarity_calculator.py,"def compare(self, boxlist1, boxlist2, scope=None):"
data/raw/repos\research\object_detection\core,region_similarity_calculator.py,"def _compare(self, boxlist1, boxlist2):"
data/raw/repos\research\object_detection\core,region_similarity_calculator.py,"def _compare(self, boxlist1, boxlist2):"
data/raw/repos\research\object_detection\core,region_similarity_calculator.py,"def __init__(self, l1_weight=5, giou_weight=2):"
data/raw/repos\research\object_detection\core,region_similarity_calculator.py,"def _compare(self, boxlist1, boxlist2):"
data/raw/repos\research\object_detection\core,region_similarity_calculator.py,"def _compare(self, boxlist1, boxlist2):"
data/raw/repos\research\object_detection\core,region_similarity_calculator.py,"def _compare(self, boxlist1, boxlist2):"
data/raw/repos\research\object_detection\core,region_similarity_calculator.py,"def __init__(self, iou_threshold=0):"
data/raw/repos\research\object_detection\core,region_similarity_calculator.py,"def _compare(self, boxlist1, boxlist2):"
data/raw/repos\research\object_detection\core,region_similarity_calculator_test.py,def test_get_correct_pairwise_similarity_based_on_iou(self):
data/raw/repos\research\object_detection\core,region_similarity_calculator_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,region_similarity_calculator_test.py,def test_get_correct_pairwise_similarity_based_on_squared_distances(self):
data/raw/repos\research\object_detection\core,region_similarity_calculator_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,region_similarity_calculator_test.py,def test_get_correct_pairwise_similarity_based_on_ioa(self):
data/raw/repos\research\object_detection\core,region_similarity_calculator_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,region_similarity_calculator_test.py,def test_get_correct_pairwise_similarity_based_on_thresholded_iou(self):
data/raw/repos\research\object_detection\core,region_similarity_calculator_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,region_similarity_calculator_test.py,def test_detr_similarity(self):
data/raw/repos\research\object_detection\core,region_similarity_calculator_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner.py,def box_coder(self):
data/raw/repos\research\object_detection\core,target_assigner.py,"def _reset_target_shape(self, target, num_anchors):"
data/raw/repos\research\object_detection\core,target_assigner.py,"def _create_regression_targets(self, anchors, groundtruth_boxes, match):"
data/raw/repos\research\object_detection\core,target_assigner.py,def _default_regression_target(self):
data/raw/repos\research\object_detection\core,target_assigner.py,"def _create_regression_weights(self, match, groundtruth_weights):"
data/raw/repos\research\object_detection\core,target_assigner.py,def get_box_coder(self):
data/raw/repos\research\object_detection\core,target_assigner.py,"def _smallest_positive_root(a, b, c):"
data/raw/repos\research\object_detection\core,target_assigner.py,"def max_distance_for_overlap(height, width, min_iou):"
data/raw/repos\research\object_detection\core,target_assigner.py,"def get_batch_predictions_from_indices(batch_predictions, indices):"
data/raw/repos\research\object_detection\core,target_assigner.py,"def _compute_std_dev_from_box_size(boxes_height, boxes_width, min_overlap):"
data/raw/repos\research\object_detection\core,target_assigner.py,"def __init__(self, stride):"
data/raw/repos\research\object_detection\core,target_assigner.py,"def _get_keypoint_types(self, num_instances, num_keypoints, num_neighbors):"
data/raw/repos\research\object_detection\core,target_assigner.py,"def _resize_masks(masks, height, width, method):"
data/raw/repos\research\object_detection\core,target_assigner.py,"def __init__(self, stride, boxes_scale=1.0):"
data/raw/repos\research\object_detection\core,target_assigner.py,"def __init__(self, stride, num_parts=24):"
data/raw/repos\research\object_detection\core,target_assigner.py,"def __init__(self, stride, num_track_ids):"
data/raw/repos\research\object_detection\core,target_assigner.py,def filter_mask_overlap_min_area(masks):
data/raw/repos\research\object_detection\core,target_assigner.py,def _filter_min_area():
data/raw/repos\research\object_detection\core,target_assigner.py,"def filter_mask_overlap(masks, method='min_area'):"
data/raw/repos\research\object_detection\core,target_assigner.py,"def __init__(self, stride, overlap_resolution='min_area'):"
data/raw/repos\research\object_detection\core,target_assigner.py,"def __init__(self, stride):"
data/raw/repos\research\object_detection\core,target_assigner.py,def __init__(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_agnostic(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,"def graph_fn(anchor_means, groundtruth_box_corners):"
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_class_agnostic_with_ignored_matches(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,"def graph_fn(anchor_means, groundtruth_box_corners):"
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_agnostic_with_keypoints(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_class_agnostic_with_keypoints_and_ignored_matches(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_multiclass(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,"def graph_fn(anchor_means, groundtruth_box_corners, groundtruth_labels):"
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_multiclass_with_groundtruth_weights(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_multidimensional_class_targets(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,"def graph_fn(anchor_means, groundtruth_box_corners, groundtruth_labels):"
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_empty_groundtruth(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,"def graph_fn(anchor_means, groundtruth_box_corners, groundtruth_labels):"
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_raises_error_on_incompatible_groundtruth_boxes_and_labels(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_raises_error_on_invalid_groundtruth_labels(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def _get_target_assigner(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_batch_assign_targets(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,"def graph_fn(anchor_means, groundtruth_boxlist1, groundtruth_boxlist2):"
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_batch_assign_multiclass_targets(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_batch_assign_multiclass_targets_with_padded_groundtruth(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_batch_assign_multidimensional_targets(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_batch_assign_empty_groundtruth(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,"def graph_fn(anchor_means, groundtruth_box_corners, gt_class_targets):"
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_scalar_targets(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_1d_targets(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def _get_target_assigner(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_batch_assign_empty_groundtruth(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,"def graph_fn(anchor_means, groundtruth_box_corners, gt_class_confidences):"
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_batch_assign_confidences_agnostic(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,"def graph_fn(anchor_means, groundtruth_boxlist1, groundtruth_boxlist2):"
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_batch_assign_confidences_multiclass(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_batch_assign_confidences_multiclass_with_padded_groundtruth(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_batch_assign_confidences_multidimensional(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_create_target_assigner(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def _array_argmax(array):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def setUp(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_center_location(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,"def test_center_location_by_keypoints(self, keypoint_weights_for_center):"
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_center_batch_shape(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_center_overlap_maximum(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_size_blur(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_weights(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph1_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph2_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_low_overlap(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph1_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph2_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph3_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_empty_box_list(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def setUp(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_max_distance_for_overlap(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_max_distance_for_overlap_centernet(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_size_and_offset_targets(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_size_and_offset_targets_weights(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_get_batch_predictions_from_indices(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_get_batch_predictions_from_indices_with_class(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def setUp(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_center_location(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_exponent(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_keypoint_heatmap_targets(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_keypoints_offset_targets(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_keypoint_depths_target(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_keypoint_depths_per_keypoints(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_keypoints_offset_targets_radius(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_joint_regression_targets(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_joint_regression_targets_radius(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_segmentation_targets(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_segmentation_targets_no_objects(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_part_and_coordinate_targets(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def setUp(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_track_targets(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_track_targets_weights(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_filter_overlap_min_area_empty(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn(masks):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_filter_overlap_min_area(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn(masks):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_corner_offset_single_object(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_corner_offset_multiple_objects(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_corner_offsets_no_objects(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def setUp(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_empty_groundtruths(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_offset_targets(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_offset_targets_with_match_flags(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def graph_fn():
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_assign_detr(self):
data/raw/repos\research\object_detection\core,target_assigner_test.py,def test_batch_assign_detr(self):
data/raw/repos\research\object_detection\dataset_tools,create_ava_actions_tf_record.py,def feature_list_feature(value):
data/raw/repos\research\object_detection\dataset_tools,create_ava_actions_tf_record.py,"def __init__(self, path_to_output_dir, path_to_data_download):"
data/raw/repos\research\object_detection\dataset_tools,create_ava_actions_tf_record.py,def _download_data(self):
data/raw/repos\research\object_detection\dataset_tools,create_ava_actions_tf_record.py,"def get_label_map(self, path):"
data/raw/repos\research\object_detection\dataset_tools,create_ava_actions_tf_record.py,def _close_on_exit(writers):
data/raw/repos\research\object_detection\dataset_tools,create_ava_actions_tf_record.py,def main(argv):
data/raw/repos\research\object_detection\dataset_tools,create_coco_tf_record.py,def clip_to_unit(x):
data/raw/repos\research\object_detection\dataset_tools,create_coco_tf_record.py,def main(_):
data/raw/repos\research\object_detection\dataset_tools,create_coco_tf_record_test.py,"def _assertProtoEqual(self, proto_field, expectation):"
data/raw/repos\research\object_detection\dataset_tools,create_coco_tf_record_test.py,"def _assertProtoClose(self, proto_field, expectation):"
data/raw/repos\research\object_detection\dataset_tools,create_coco_tf_record_test.py,def test_create_tf_example(self):
data/raw/repos\research\object_detection\dataset_tools,create_coco_tf_record_test.py,def test_create_tf_example_with_instance_masks(self):
data/raw/repos\research\object_detection\dataset_tools,create_coco_tf_record_test.py,def test_create_tf_example_with_keypoints(self):
data/raw/repos\research\object_detection\dataset_tools,create_coco_tf_record_test.py,def test_create_tf_example_with_dense_pose(self):
data/raw/repos\research\object_detection\dataset_tools,create_coco_tf_record_test.py,def test_create_sharded_tf_record(self):
data/raw/repos\research\object_detection\dataset_tools,create_kitti_tf_record.py,"def prepare_example(image_path, annotations, label_map_dict):"
data/raw/repos\research\object_detection\dataset_tools,create_kitti_tf_record.py,"def filter_annotations(img_all_annotations, used_classes):"
data/raw/repos\research\object_detection\dataset_tools,create_kitti_tf_record.py,def read_annotation_file(filename):
data/raw/repos\research\object_detection\dataset_tools,create_kitti_tf_record.py,def main(_):
data/raw/repos\research\object_detection\dataset_tools,create_kitti_tf_record_test.py,"def _assertProtoEqual(self, proto_field, expectation):"
data/raw/repos\research\object_detection\dataset_tools,create_kitti_tf_record_test.py,def test_dict_to_tf_example(self):
data/raw/repos\research\object_detection\dataset_tools,create_oid_tf_record.py,def main(_):
data/raw/repos\research\object_detection\dataset_tools,create_pascal_tf_record.py,def main(_):
data/raw/repos\research\object_detection\dataset_tools,create_pascal_tf_record_test.py,"def _assertProtoEqual(self, proto_field, expectation):"
data/raw/repos\research\object_detection\dataset_tools,create_pascal_tf_record_test.py,def test_dict_to_tf_example(self):
data/raw/repos\research\object_detection\dataset_tools,create_pet_tf_record.py,def get_class_name_from_filename(file_name):
data/raw/repos\research\object_detection\dataset_tools,create_pet_tf_record.py,def main(_):
data/raw/repos\research\object_detection\dataset_tools,oid_hierarchical_labels_expansion.py,"def _update_dict(initial_dict, update):"
data/raw/repos\research\object_detection\dataset_tools,oid_hierarchical_labels_expansion.py,"def _build_plain_hierarchy(hierarchy, skip_root=False):"
data/raw/repos\research\object_detection\dataset_tools,oid_hierarchical_labels_expansion.py,"def __init__(self, hierarchy):"
data/raw/repos\research\object_detection\dataset_tools,oid_hierarchical_labels_expansion.py,def main(unused_args):
data/raw/repos\research\object_detection\dataset_tools,oid_hierarchical_labels_expansion_test.py,def create_test_data():
data/raw/repos\research\object_detection\dataset_tools,oid_hierarchical_labels_expansion_test.py,def test_bbox_expansion(self):
data/raw/repos\research\object_detection\dataset_tools,oid_hierarchical_labels_expansion_test.py,def test_segm_expansion(self):
data/raw/repos\research\object_detection\dataset_tools,oid_hierarchical_labels_expansion_test.py,def test_labels_expansion(self):
data/raw/repos\research\object_detection\dataset_tools,oid_tfrecord_creation_test.py,def create_test_data():
data/raw/repos\research\object_detection\dataset_tools,oid_tfrecord_creation_test.py,def test_simple(self):
data/raw/repos\research\object_detection\dataset_tools,oid_tfrecord_creation_test.py,def test_no_attributes(self):
data/raw/repos\research\object_detection\dataset_tools,oid_tfrecord_creation_test.py,def test_label_filtering(self):
data/raw/repos\research\object_detection\dataset_tools,seq_example_util.py,def context_float_feature(ndarray):
data/raw/repos\research\object_detection\dataset_tools,seq_example_util.py,def context_int64_feature(ndarray):
data/raw/repos\research\object_detection\dataset_tools,seq_example_util.py,def context_bytes_feature(ndarray):
data/raw/repos\research\object_detection\dataset_tools,seq_example_util.py,def sequence_float_feature(ndarray):
data/raw/repos\research\object_detection\dataset_tools,seq_example_util.py,def sequence_int64_feature(ndarray):
data/raw/repos\research\object_detection\dataset_tools,seq_example_util.py,def sequence_bytes_feature(ndarray):
data/raw/repos\research\object_detection\dataset_tools,seq_example_util.py,def sequence_strings_feature(strings):
data/raw/repos\research\object_detection\dataset_tools,seq_example_util.py,def boxes_to_box_components(bboxes):
data/raw/repos\research\object_detection\dataset_tools,seq_example_util_test.py,"def materialize_tensors(self, list_of_tensors):"
data/raw/repos\research\object_detection\dataset_tools,seq_example_util_test.py,def test_make_unlabeled_example(self):
data/raw/repos\research\object_detection\dataset_tools,seq_example_util_test.py,def test_make_labeled_example(self):
data/raw/repos\research\object_detection\dataset_tools,seq_example_util_test.py,def test_make_labeled_example_with_context_features(self):
data/raw/repos\research\object_detection\dataset_tools,seq_example_util_test.py,def test_make_labeled_example_with_predictions(self):
data/raw/repos\research\object_detection\dataset_tools,tf_record_creation_util.py,"def open_sharded_output_tfrecords(exit_stack, base_path, num_shards):"
data/raw/repos\research\object_detection\dataset_tools,tf_record_creation_util_test.py,def test_sharded_tfrecord_writes(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples.py,"def process(self, tfrecord_entry):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples.py,"def _largest_size_at_most(self, height, width, largest_side):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples.py,"def _resize_image(self, input_example):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples.py,"def _rekey_examples(self, tfrecord_entry):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples.py,"def process(self, grouped_entry):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples.py,"def _sort_image_examples(self, grouped_entry):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples.py,def get_frame_num(example):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples.py,def get_date_captured(example):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples.py,def get_image_id(example):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples.py,"def get_sliding_window(example_list, max_clip_length, stride_length):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples.py,"def process(self, grouped_entry):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples.py,"def _build_context_features(self, example_list):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples.py,"def _add_context_to_example(self, grouped_entry):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples.py,def parse_args(argv):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples.py,"def main(argv=None, save_main_session=True):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,def InMemoryTFRecord(entries):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,def BytesFeature(value):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,def BytesListFeature(value):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,def Int64Feature(value):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,def Int64ListFeature(value):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,def FloatListFeature(value):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,def _create_first_tf_example(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,def _create_second_tf_example(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,"def assert_expected_examples(self, tf_example_list):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,"def assert_expected_sequence_example(self, tf_sequence_example_list):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,"def assert_expected_key(self, key):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,"def assert_sorted(self, example_collection):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,"def assert_context(self, example_collection):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,"def assert_resized(self, example):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,"def assert_size(self, example):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,def test_sliding_window(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,def test_rekey_data_fn(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,def test_rekey_data_fn_w_resize(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,def test_sort_fn(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,def test_add_context_fn(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,def test_add_context_fn_output_sequence_example(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,def test_add_context_fn_output_sequence_example_cliplen(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,def test_beam_pipeline(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,add_context_to_examples_tf2_test.py,def test_beam_pipeline_sequence_example(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,create_cococameratraps_tfexample_main.py,"def process(self, image_id):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,create_cococameratraps_tfexample_main.py,def load_json_data(data_file):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,create_cococameratraps_tfexample_main.py,def parse_args(argv):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,create_cococameratraps_tfexample_main.py,"def main(argv=None, save_main_session=True):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,create_cococameratraps_tfexample_tf2_test.py,"def _write_random_images_to_directory(self, directory, num_frames):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,create_cococameratraps_tfexample_tf2_test.py,"def _create_json_file(self, directory, num_frames, keep_bboxes=False):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,create_cococameratraps_tfexample_tf2_test.py,"def assert_expected_example_bbox(self, example):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,create_cococameratraps_tfexample_tf2_test.py,"def assert_expected_example(self, example):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,create_cococameratraps_tfexample_tf2_test.py,def test_beam_pipeline(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,create_cococameratraps_tfexample_tf2_test.py,def test_beam_pipeline_bbox(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data.py,"def __init__(self, model_dir, confidence_threshold):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data.py,def setup(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data.py,def _load_inference_model(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data.py,"def process(self, tfrecord_entry):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data.py,"def _run_inference_and_generate_detections(self, tfrecord_entry):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data.py,def parse_args(argv):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data.py,"def main(argv=None, save_main_session=True):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,"def __init__(self, conv_weight_scalar=1.0):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,"def preprocess(self, inputs):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,"def predict(self, preprocessed_inputs, true_image_shapes):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,"def postprocess(self, prediction_dict, true_image_shapes):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,"def restore_map(self, checkpoint_path, fine_tune_checkpoint_type):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,"def restore_from_objects(self, fine_tune_checkpoint_type):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,"def loss(self, prediction_dict, true_image_shapes):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,def regularization_losses(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,def updates(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,def InMemoryTFRecord(entries):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,"def _save_checkpoint_from_mock_model(self, checkpoint_path):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,def _export_saved_model(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,def _create_tf_example(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,def BytesFeature(value):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,def Int64Feature(value):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,"def assert_expected_example(self, example):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,def test_generate_detection_data_fn(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_detection_data_tf2_test.py,def test_beam_pipeline(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data.py,def add_keys(serialized_example):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data.py,def drop_keys(key_value_tuple):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data.py,def get_date_captured(example):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data.py,def embed_date_captured(date_captured):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data.py,def embed_position_and_size(box):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data.py,def setup(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data.py,def _load_inference_model(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data.py,"def process(self, tfexample_key_value):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data.py,"def _run_inference_and_generate_embedding(self, tfexample_key_value):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data.py,def parse_args(argv):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data.py,"def main(argv=None, save_main_session=True):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,"def __init__(self, conv_weight_scalar=1.0):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,"def preprocess(self, inputs):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,"def predict(self, preprocessed_inputs, true_image_shapes):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,"def postprocess(self, prediction_dict, true_image_shapes):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,"def restore_map(self, checkpoint_path, fine_tune_checkpoint_type):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,"def restore_from_objects(self, fine_tune_checkpoint_type):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,"def loss(self, prediction_dict, true_image_shapes):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,def regularization_losses(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,def updates(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,def InMemoryTFRecord(entries):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,"def _save_checkpoint_from_mock_model(self, checkpoint_path):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,def _export_saved_model(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,def _create_tf_example(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,def BytesFeature(value):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,def Int64Feature(value):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,def FloatFeature(value):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,"def assert_expected_example(self, example, topk=False, botk=False):"
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,def test_generate_embedding_data_fn(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,def test_generate_embedding_data_with_top_k_boxes(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,def test_generate_embedding_data_with_bottom_k_boxes(self):
data/raw/repos\research\object_detection\dataset_tools\context_rcnn,generate_embedding_data_tf2_test.py,def test_beam_pipeline(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,"def tensors_to_item(self, keys_to_tensors):"
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,"def decode(self, tf_example_string_tensor):"
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,def default_groundtruth_weights():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,def default_groundtruth_instance_mask_weights():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,def true_fn(num_instances):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,def false_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,def expand_field(field_name):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,"def _keypoint_text_handle(self, keys_to_tensors):"
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,"def _reshape_keypoints(self, keys_to_tensors):"
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,"def _reshape_keypoint_depths(self, keys_to_tensors):"
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,"def _reshape_keypoint_depth_weights(self, keys_to_tensors):"
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,"def _reshape_keypoint_visibilities(self, keys_to_tensors):"
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,"def _reshape_instance_masks(self, keys_to_tensors):"
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,"def _reshape_context_features(self, keys_to_tensors):"
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,"def _decode_png_instance_masks(self, keys_to_tensors):"
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,def decode_png_mask(image_buffer):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,"def _dense_pose_part_indices(self, keys_to_tensors):"
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,def pad_parts_tensor(instance_ind):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,"def _dense_pose_surface_coordinates(self, keys_to_tensors):"
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,def pad_surface_coordinates_tensor(instance_ind):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,"def _expand_image_label_hierarchy(self, image_classes, image_confidences):"
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder.py,"def expand_labels(relation_tensor, confidence_value):"
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,"def _create_encoded_and_decoded_data(self, data, encoding_type):"
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def prepare_data_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeAdditionalChannels(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeJpegImage(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeImageKeyAndFilename(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodePngImage(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodePngInstanceMasks(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeEmptyPngInstanceMasks(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeBoundingBox(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeKeypointDepth(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeKeypointDepthNoDepth(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeKeypoint(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeKeypointNoInstance(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeKeypointWithText(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeKeypointWithKptsLabelsNotInText(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeKeypointNoVisibilities(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeDefaultGroundtruthWeights(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeObjectLabel(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeMultiClassScores(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeEmptyMultiClassScores(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeObjectLabelNoText(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeObjectLabelWithText(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeObjectLabelUnrecognizedName(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeObjectLabelWithMappingWithDisplayName(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeObjectLabelUnrecognizedNameWithMappingWithDisplayName(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeObjectLabelWithMappingWithName(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeObjectArea(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeVerifiedNegClasses(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeNotExhaustiveClasses(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeObjectIsCrowd(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeObjectDifficult(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeObjectGroupOf(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeObjectWeight(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeClassConfidence(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeInstanceSegmentation(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testInstancesNotAvailableByDefault(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeInstanceSegmentationWithWeights(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeImageLabels(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn_1():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn_2():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeContextFeatures(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testContextFeaturesNotAvailableByDefault(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testExpandLabels(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeDensePose(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def testDecodeTrack(self):
data/raw/repos\research\object_detection\data_decoders,tf_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_sequence_example_decoder.py,"def tensors_to_item(self, keys_to_tensors):"
data/raw/repos\research\object_detection\data_decoders,tf_sequence_example_decoder.py,"def decode(self, tf_seq_example_string_tensor):"
data/raw/repos\research\object_detection\data_decoders,tf_sequence_example_decoder.py,def default_groundtruth_weights():
data/raw/repos\research\object_detection\data_decoders,tf_sequence_example_decoder.py,"def _reshape_context_features(self, keys_to_tensors):"
data/raw/repos\research\object_detection\data_decoders,tf_sequence_example_decoder_test.py,"def _create_label_map(self, path):"
data/raw/repos\research\object_detection\data_decoders,tf_sequence_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_sequence_example_decoder_test.py,def test_decode_sequence_example(self):
data/raw/repos\research\object_detection\data_decoders,tf_sequence_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_sequence_example_decoder_test.py,def test_decode_sequence_example_context(self):
data/raw/repos\research\object_detection\data_decoders,tf_sequence_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_sequence_example_decoder_test.py,def test_decode_sequence_example_context_image_id_list(self):
data/raw/repos\research\object_detection\data_decoders,tf_sequence_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\data_decoders,tf_sequence_example_decoder_test.py,def test_decode_sequence_example_negative_clip(self):
data/raw/repos\research\object_detection\data_decoders,tf_sequence_example_decoder_test.py,def graph_fn():
data/raw/repos\research\object_detection\inference,detection_inference.py,def build_input(tfrecord_paths):
data/raw/repos\research\object_detection\inference,detection_inference.py,"def build_inference_graph(image_tensor, inference_graph_path):"
data/raw/repos\research\object_detection\inference,detection_inference_tf1_test.py,def get_mock_tfrecord_path():
data/raw/repos\research\object_detection\inference,detection_inference_tf1_test.py,def create_mock_tfrecord():
data/raw/repos\research\object_detection\inference,detection_inference_tf1_test.py,def get_mock_graph_path():
data/raw/repos\research\object_detection\inference,detection_inference_tf1_test.py,def create_mock_graph():
data/raw/repos\research\object_detection\inference,detection_inference_tf1_test.py,def test_simple(self):
data/raw/repos\research\object_detection\inference,detection_inference_tf1_test.py,def test_discard_image(self):
data/raw/repos\research\object_detection\inference,infer_detections.py,def main(_):
data/raw/repos\research\object_detection\legacy,eval.py,def main(unused_argv):
data/raw/repos\research\object_detection\legacy,eval.py,def get_next(config):
data/raw/repos\research\object_detection\legacy,evaluator.py,"def get_evaluators(eval_config, categories):"
data/raw/repos\research\object_detection\legacy,evaluator.py,def _restore_latest_checkpoint(sess):
data/raw/repos\research\object_detection\legacy,train.py,def main(_):
data/raw/repos\research\object_detection\legacy,train.py,def get_next(config):
data/raw/repos\research\object_detection\legacy,trainer.py,def extract_images_and_targets(read_data):
data/raw/repos\research\object_detection\legacy,trainer.py,"def _create_losses(input_queue, create_model_fn, train_config):"
data/raw/repos\research\object_detection\legacy,trainer.py,def initializer_fn(sess):
data/raw/repos\research\object_detection\legacy,trainer_tf1_test.py,def get_input_function():
data/raw/repos\research\object_detection\legacy,trainer_tf1_test.py,def __init__(self):
data/raw/repos\research\object_detection\legacy,trainer_tf1_test.py,"def preprocess(self, inputs):"
data/raw/repos\research\object_detection\legacy,trainer_tf1_test.py,"def predict(self, preprocessed_inputs, true_image_shapes):"
data/raw/repos\research\object_detection\legacy,trainer_tf1_test.py,"def postprocess(self, prediction_dict, true_image_shapes, **params):"
data/raw/repos\research\object_detection\legacy,trainer_tf1_test.py,"def loss(self, prediction_dict, true_image_shapes):"
data/raw/repos\research\object_detection\legacy,trainer_tf1_test.py,def regularization_losses(self):
data/raw/repos\research\object_detection\legacy,trainer_tf1_test.py,"def restore_map(self, fine_tune_checkpoint_type='detection'):"
data/raw/repos\research\object_detection\legacy,trainer_tf1_test.py,"def restore_from_objects(self, fine_tune_checkpoint_type):"
data/raw/repos\research\object_detection\legacy,trainer_tf1_test.py,def updates(self):
data/raw/repos\research\object_detection\legacy,trainer_tf1_test.py,def test_configure_trainer_and_train_two_steps(self):
data/raw/repos\research\object_detection\legacy,trainer_tf1_test.py,def test_configure_trainer_with_multiclass_scores_and_train_two_steps(self):
data/raw/repos\research\object_detection\matchers,argmax_matcher.py,"def _match(self, similarity_matrix, valid_rows):"
data/raw/repos\research\object_detection\matchers,argmax_matcher.py,def _match_when_rows_are_empty():
data/raw/repos\research\object_detection\matchers,argmax_matcher.py,def _match_when_rows_are_non_empty():
data/raw/repos\research\object_detection\matchers,argmax_matcher.py,"def _set_values_using_indicator(self, x, indicator, val):"
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def test_return_correct_matches_with_default_thresholds(self):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def graph_fn(similarity_matrix):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def test_return_correct_matches_with_empty_rows(self):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def graph_fn(similarity_matrix):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def test_return_correct_matches_with_matched_threshold(self):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def graph_fn(similarity):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def test_return_correct_matches_with_matched_and_unmatched_threshold(self):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def graph_fn(similarity):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def test_return_correct_matches_negatives_lower_than_unmatched_false(self):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def graph_fn(similarity):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def test_return_correct_matches_unmatched_row_not_using_force_match(self):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def graph_fn(similarity):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def test_return_correct_matches_unmatched_row_while_using_force_match(self):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def graph_fn(similarity):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def test_return_correct_matches_using_force_match_padded_groundtruth(self):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,"def graph_fn(similarity, valid_rows):"
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def test_valid_arguments_corner_case(self):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def test_invalid_arguments_corner_case_negatives_lower_than_thres_false(self):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def test_invalid_arguments_no_matched_threshold(self):
data/raw/repos\research\object_detection\matchers,argmax_matcher_test.py,def test_invalid_arguments_unmatched_thres_larger_than_matched_thres(self):
data/raw/repos\research\object_detection\matchers,bipartite_matcher.py,"def __init__(self, use_matmul_gather=False):"
data/raw/repos\research\object_detection\matchers,bipartite_matcher.py,"def _match(self, similarity_matrix, valid_rows):"
data/raw/repos\research\object_detection\matchers,bipartite_matcher_tf1_test.py,def test_get_expected_matches_when_all_rows_are_valid(self):
data/raw/repos\research\object_detection\matchers,bipartite_matcher_tf1_test.py,"def graph_fn(similarity_matrix, valid_rows):"
data/raw/repos\research\object_detection\matchers,bipartite_matcher_tf1_test.py,def test_get_expected_matches_with_all_rows_be_default(self):
data/raw/repos\research\object_detection\matchers,bipartite_matcher_tf1_test.py,def graph_fn(similarity_matrix):
data/raw/repos\research\object_detection\matchers,bipartite_matcher_tf1_test.py,def test_get_no_matches_with_zero_valid_rows(self):
data/raw/repos\research\object_detection\matchers,bipartite_matcher_tf1_test.py,"def graph_fn(similarity_matrix, valid_rows):"
data/raw/repos\research\object_detection\matchers,bipartite_matcher_tf1_test.py,def test_get_expected_matches_with_only_one_valid_row(self):
data/raw/repos\research\object_detection\matchers,bipartite_matcher_tf1_test.py,"def graph_fn(similarity_matrix, valid_rows):"
data/raw/repos\research\object_detection\matchers,bipartite_matcher_tf1_test.py,def test_get_expected_matches_with_only_one_valid_row_at_bottom(self):
data/raw/repos\research\object_detection\matchers,bipartite_matcher_tf1_test.py,"def graph_fn(similarity_matrix, valid_rows):"
data/raw/repos\research\object_detection\matchers,hungarian_matcher.py,"def _match(self, similarity_matrix, valid_rows):"
data/raw/repos\research\object_detection\matchers,hungarian_matcher.py,def numpy_wrapper(inputs):
data/raw/repos\research\object_detection\matchers,hungarian_matcher.py,def numpy_matching(input_matrix):
data/raw/repos\research\object_detection\matchers,hungarian_matcher_tf2_test.py,def test_get_expected_matches_when_all_rows_are_valid(self):
data/raw/repos\research\object_detection\matchers,hungarian_matcher_tf2_test.py,def test_get_expected_matches_with_all_rows_be_default(self):
data/raw/repos\research\object_detection\matchers,hungarian_matcher_tf2_test.py,def test_get_no_matches_with_zero_valid_rows(self):
data/raw/repos\research\object_detection\matchers,hungarian_matcher_tf2_test.py,def test_get_expected_matches_with_only_one_valid_row(self):
data/raw/repos\research\object_detection\matchers,hungarian_matcher_tf2_test.py,def test_get_expected_matches_with_only_one_valid_row_at_bottom(self):
data/raw/repos\research\object_detection\matchers,hungarian_matcher_tf2_test.py,def test_get_expected_matches_with_two_valid_rows(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,"def preprocess(self, inputs):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,"def preprocess_reverse(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,def out_stride(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,def num_feature_outputs(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,def classification_backbone(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,def _to_float32(x):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,"def _get_shape(tensor, num_dims):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,def _flatten_spatial_dimensions(batch_images):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,def argmax_feature_map_locations(feature_map):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,"def flattened_indices_from_row_col_indices(row_indices, col_indices, num_cols):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,"def row_col_indices_from_flattened_indices(indices, num_cols):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,def clip_to_window(inputs):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,"def mask_from_true_image_shape(data_shape, true_image_shapes):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,"def get_keypoint_name(task_name, head_name):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,def get_num_instances_from_weights(groundtruth_weights_list):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,"def set_trainability_by_layer_traversal(self, trainable):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,def prediction_head_dict(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,def batched_prediction_tensor_names(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,"def _initialize_target_assigners(self, stride, min_box_overlap_iou):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,"def _compute_segmentation_losses(self, prediction_dict, per_pixel_weights):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,"def _compute_track_losses(self, input_height, input_width, prediction_dict):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,def _should_clip_keypoints(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,"def _rescore_instances(self, classes, scores, keypoint_scores):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,"def preprocess(self, inputs):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,"def predict(self, preprocessed_inputs, _):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,"def postprocess(self, prediction_dict, true_image_shapes, **params):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,"def _postprocess_embeddings(self, prediction_dict, y_indices, x_indices):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,def right_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,def regularization_losses(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,"def restore_from_objects(self, fine_tune_checkpoint_type='detection'):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch.py,def updates(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,"def test_prediction_head(self, use_depthwise):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_row_col_channel_indices_from_flattened_indices(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_row_col_indices_from_flattened_indices(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_flattened_indices_from_row_col_indices(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_get_valid_anchor_weights_in_flattened_image(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_convert_strided_predictions_to_normalized_boxes(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_convert_strided_predictions_to_instance_masks(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_convert_strided_predictions_raises_error_with_one_tensor(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_crop_and_threshold_masks(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_gather_surface_coords_for_parts(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_top_k_feature_map_locations(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_top_k_feature_map_locations_no_pooling(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_top_k_feature_map_locations_very_large(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_top_k_feature_map_locations_per_channel(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_top_k_feature_map_locations_k1(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_top_k_feature_map_locations_k1_per_channel(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_box_prediction(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_offset_prediction(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_keypoint_candidate_prediction(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_prediction_to_single_instance_keypoints(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,"def test_prediction_to_multi_instance_keypoints(self, provide_keypoint_score):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_keypoint_candidate_prediction_per_keypoints(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,"def test_keypoint_candidate_prediction_depth(self, per_keypoint_depth):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_regressed_keypoints_at_object_centers(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,"def test_refine_keypoints(self, candidate_ranking_mode):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_refine_keypoints_with_empty_regressed_keypoints(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_refine_keypoints_without_bbox(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,"def test_refine_keypoints_with_bboxes(self, predict_depth):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_sdr_scaled_ranking_score(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_gaussian_weighted_score(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_pad_to_full_keypoint_dim(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_pad_to_full_instance_dim(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_predicted_embeddings_at_object_centers(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def get_fake_center_params(max_box_predictions=5):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def get_fake_od_params():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def get_fake_mask_params():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def get_fake_densepose_params():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def get_fake_track_params():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def get_fake_temporal_offset_params():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def _logit(p):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_get_keypoint_name(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_get_num_instances_from_weights(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn_1():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn_2():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_construct_prediction_heads(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_initialize_target_assigners(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_predict(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_loss(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,"def test_postprocess(self, target_class_id, with_true_image_shape):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_postprocess_kpts_no_od(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_non_max_suppression(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_non_max_suppression_with_kpts_rescoring(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_postprocess_single_instance(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,"def test_postprocess_single_class_depth(self, per_keypoint_depth):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_mask_object_center_in_postprocess_by_true_image_shape(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_get_instance_indices(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_rescore_instances(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def setUp(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_compute_object_center_loss(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_compute_box_scale_and_offset_loss(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_compute_kp_heatmap_loss(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_compute_kp_offset_loss(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_compute_kp_regression_loss(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,"def test_compute_kp_depth_loss(self, per_keypoint_depth):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_compute_track_embedding_loss(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_restore_map_resnet(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_retore_map_detection(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def predict(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def loss(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def postprocess(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def out_stride(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def num_feature_outputs(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_preprocess(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_preprocess_reverse(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_bgr_ordering(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def test_default_ordering(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def out_stride(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def num_feature_outputs(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,def supported_sub_model_types(self):
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,"def get_sub_model(self, sub_model_type):"
data/raw/repos\research\object_detection\meta_architectures,center_net_meta_arch_tf2_test.py,"def test_outputs_with_correct_shape(self, stride):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_lib.py,"def filter_weight_value(weights, values, valid_mask):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_lib.py,"def compute_valid_mask(num_valid_elements, num_elements):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_lib.py,"def project_features(features, projection_dimension, is_training, normalize):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_lib_tf1_test.py,def test_compute_valid_mask(self):
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_lib_tf1_test.py,def test_filter_weight_value(self):
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_lib_tf1_test.py,"def test_project_features(self, projection_dimension, is_training, normalize):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_lib_tf1_test.py,"def test_compute_box_context_attention(self, is_training):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_lib_tf1_test.py,"def test_compute_box_context_attention_with_self_attention(self, is_training):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_lib_tf2.py,"def __init__(self, projection_dimension, **kwargs):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_lib_tf2.py,"def build(self, input_shape):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_lib_tf2.py,"def call(self, input_features, is_training=False):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_lib_tf2.py,"def build(self, input_shapes):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_lib_tf2.py,"def filter_weight_value(weights, values, valid_mask):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_lib_tf2.py,"def compute_valid_mask(num_valid_elements, num_elements):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_lib_tf2_test.py,def test_compute_valid_mask(self):
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_lib_tf2_test.py,def test_filter_weight_value(self):
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_lib_tf2_test.py,"def test_project_features(self, projection_dimension, is_training, normalize):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch.py,def get_side_inputs(features):
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch_test.py,def __init__(self):
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch_test.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch_test.py,"def _extract_proposal_features(self, preprocessed_inputs, scope):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch_test.py,"def _extract_box_classifier_features(self, proposal_feature_maps, scope):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch_test.py,def __init__(self):
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch_test.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch_test.py,"def get_proposal_feature_extractor_model(self, name):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch_test.py,"def __init__(self, name):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch_test.py,"def build(self, input_shape):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch_test.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch_test.py,"def get_box_classifier_feature_extractor_model(self, name):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch_test.py,"def _get_model(self, box_predictor, **common_kwargs):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch_test.py,"def _build_keras_layer_hyperparams(self, hyperparams_text_proto):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch_test.py,"def image_resizer_fn(image, masks=None):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch_test.py,"def test_prediction_mock_tf1(self, mock_context_rcnn_lib_v1):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch_test.py,"def test_prediction_end_to_end(self, static_shapes):"
data/raw/repos\research\object_detection\meta_architectures,context_rcnn_meta_arch_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def _get_loss_weight(loss_name, config):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def subsample_instances(classes, weights, boxes, masks, num_subsamples):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def _get_deepmac_network_by_type(name, num_init_channels, mask_size=None):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def boxes_batch_normalized_to_absolute_coordinates(boxes, height, width):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def boxes_batch_absolute_to_normalized_coordinates(boxes, height, width):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def _resize_instance_masks_non_empty(masks, shape):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def resize_instance_masks(masks, shape):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def filter_masked_classes(masked_class_ids, classes, weights, masks):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def per_instance_no_class_overlap(classes, boxes, height, width):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,def flatten_first2_dims(tensor):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def unpack_first2_dims(tensor, dim1, dim2):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def crop_and_resize_instance_masks(masks, boxes, mask_size):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def fill_boxes(boxes, height, width, expand=0):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def embedding_projection(x, y):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,def _get_2d_neighbors_kernel():
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def generate_2d_neighbors(input_tensor, dilation=2):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,def normalize_feature_map(feature_map):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def gaussian_pixel_similarity(a, b, theta):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def dotprod_pixel_similarity(a, b):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def dilated_cross_same_mask_label(instance_masks, dilation=2):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def _per_pixel_single_conv(input_tensor, params, channels):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def per_pixel_conditional_conv(input_tensor, parameters, channels, depth):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,def flip_boxes_left_right(boxes):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def transform_images_and_boxes(images, boxes, tx, ty, sx, sy, flip):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def transform_instance_masks(instance_masks, tx, ty, sx, sy, flip):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def __init__(self, resnet_type, num_init_channels):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def __call__(self, inputs):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def __init__(self, num_init_channels, mask_size):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def __call__(self, inputs):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def __init__(self, hidden_size, use_shortcut_linear):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def __call__(self, inputs):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def __init__(self, num_layers, hidden_size, output_size):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def __call__(self, inputs):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,def _is_mask_head_param_free(name):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def __call__(self, instance_embedding, pixel_embedding, training):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,def _batch_gt_list(gt_list):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,def deepmac_proto_to_params(deepmac_config):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def _warmup_weight(current_training_step, warmup_start, warmup_steps):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def _get_mask_head_input(self, boxes, pixel_embedding):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def _get_instance_embeddings(self, boxes, instance_embedding):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def predict(self, preprocessed_inputs, true_image_shapes):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def _predict_mask_logits_from_boxes(self, prediction_dict, boxes):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def _predict_mask_logits_from_gt_boxes(self, prediction_dict):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def _get_groundtruth_mask_output(self, boxes, masks):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def _resize_logits_like_gt(self, logits, gt):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def _aggregate_classification_loss(self, loss, gt, pred, method):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,def jitter_func(boxes):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def _get_lab_image(self, preprocessed_image):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def _maybe_get_gt_batch(self, field):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def _get_consistency_feature_map(self, prediction_dict):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def _compute_masks_loss(self, prediction_dict):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def loss(self, prediction_dict, true_image_shapes, scope=None):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,"def postprocess(self, prediction_dict, true_image_shapes, **params):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch.py,def transform_boxes(elems):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def _logit(probability):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def predict(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def loss(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def postprocess(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def out_stride(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def num_feature_outputs(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,"def __call__(self, instance_embedding, pixel_embedding, training):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def build_meta_arch(**override_params):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_proto_parse(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_subsample_trivial(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_filter_masked_classes(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_fill_boxes(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_flatten_and_unpack(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_crop_and_resize_instance_masks(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_embedding_projection_prob_shape(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,"def test_embedding_projection_value(self, value):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,"def test_res_dense_block(self, conv_shortcut):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,"def test_dense_resnet(self, num_layers):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_generate_2d_neighbors_shape(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_generate_2d_neighbors(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_generate_2d_neighbors_dilation2(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_dilated_similarity_shape(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_dilated_similarity(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_dilated_same_instance_mask_shape(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_dilated_same_instance_mask(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_per_pixel_single_conv_multiple_instance(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_per_pixel_conditional_conv_error(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_per_pixel_conditional_conv_error_tf_func(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_per_pixel_conditional_conv_depth1_error(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_per_pixel_conditional_conv_value_depth1(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_per_pixel_conditional_conv_value_depth2_single(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_per_pixel_conditional_conv_value_depth2_identity(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_per_instance_no_class_overlap(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_mask_network_params_resnet4(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_mask_network_embedding_projection_small(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,"def test_transform_images_and_boxes_identity(self, x, y, height, width):"
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_transform_images_and_boxes(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_transform_images_and_boxes_flip(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_transform_images_and_boxes_tf_function(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_transform_instance_masks(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_augment_image_and_deaugment_mask(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def setUp(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_get_mask_head_input(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_get_mask_head_input_no_crop_resize(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_get_instance_embeddings(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_get_groundtruth_mask_output(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_get_groundtruth_mask_output_no_crop_resize(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_predict(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_predict_self_supervised_deaugmented_mask_logits(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_loss(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_loss_no_crop_resize(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_loss_no_crop_resize_dice(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_empty_masks(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_postprocess(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_postprocess_emb_proj(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_postprocess_emb_proj_fullres(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_postprocess_no_crop_resize_shape(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_transform_boxes_to_feature_coordinates(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_fc_tf_function(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_box_consistency_loss(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_box_consistency_loss_with_tightness(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_box_consistency_loss_gt_count(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_box_consistency_loss_balanced(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_box_consistency_dice_loss(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_feature_consistency_loss_full_res_shape(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_feature_consistency_1_threshold(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_box_consistency_dice_loss_full_res(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_get_lab_image_shape(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_self_supervised_augmented_loss_identity(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_self_supervised_mse_augmented_loss_0(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_self_supervised_mse_loss_scale_equivalent(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_self_supervised_kldiv_augmented_loss_0(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_self_supervised_kldiv_scale_equivalent(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_self_supervision_warmup(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_loss_keys(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_eval_loss_and_postprocess_keys(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_loss_weight_response(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_pointly_supervised_loss(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_ignore_per_class_box_overlap(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,def test_fc_mask_head(self):
data/raw/repos\research\object_detection\meta_architectures,deepmac_meta_arch_test.py,"def test_forward(self, name):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def extract_proposal_features(self, preprocessed_inputs, scope):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def _extract_proposal_features(self, preprocessed_inputs, scope):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def extract_box_classifier_features(self, proposal_feature_maps, scope):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def _extract_box_classifier_features(self, proposal_feature_maps, scope):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def get_proposal_feature_extractor_model(self, name):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def get_box_classifier_feature_extractor_model(self, name):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,def rpn_box_predictor_feature_extractor(single_rpn_features_to_crop):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,def first_stage_feature_extractor_scope(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,def second_stage_feature_extractor_scope(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,def first_stage_box_predictor_scope(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,def second_stage_box_predictor_scope(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,def max_num_proposals(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,def anchors(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,def batched_prediction_tensor_names(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,def feature_extractor(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def preprocess(self, inputs):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def _compute_clip_window(self, image_shapes):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def predict(self, preprocessed_inputs, true_image_shapes, **side_inputs):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def _predict_first_stage(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def _image_batch_shape_2d(self, image_batch_shape_1d):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def _extract_box_classifier_features(self, flattened_feature_maps):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def _predict_third_stage(self, prediction_dict, image_shapes):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def _gather_instance_masks(self, instance_masks, classes):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def _extract_rpn_feature_maps(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def _extract_proposal_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def _predict_rpn_proposals(self, rpn_box_predictor_features):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,def _batch_gather_kept_indices(predictions_tensor):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def _flatten_first_two_dimensions(self, inputs):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def postprocess(self, prediction_dict, true_image_shapes):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,def normalize_boxes(args):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def _format_groundtruth_data(self, image_shapes):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def _batch_decode_boxes(self, box_encodings, anchor_boxes):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def _normalize_and_clip_boxes(self, boxes_and_image_shape):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def loss(self, prediction_dict, true_image_shapes, scope=None):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,def _minibatch_subsample_fn(inputs):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,def regularization_losses(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,"def restore_from_objects(self, fine_tune_checkpoint_type='detection'):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch.py,def updates(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test.py,def test_postprocess_second_stage_only_inference_mode_with_masks(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test.py,def test_postprocess_second_stage_only_inference_mode_with_calibration(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test.py,def test_postprocess_second_stage_only_inference_mode_with_shared_boxes(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test.py,def test_raw_detection_boxes_and_anchor_indices_correct(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test.py,def test_postprocess_third_stage_only_inference_mode(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test.py,def test_output_final_box_features(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def __init__(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def _extract_proposal_features(self, preprocessed_inputs, scope):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def _extract_box_classifier_features(self, proposal_feature_maps, scope):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def __init__(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def _extract_proposal_features(self, preprocessed_inputs, scope):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def _extract_box_classifier_features(self, proposal_feature_maps, scope):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def __init__(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def get_proposal_feature_extractor_model(self, name):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def __init__(self, name):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def build(self, input_shape):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def get_box_classifier_feature_extractor_model(self, name):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def __init__(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def get_proposal_feature_extractor_model(self, name):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def __init__(self, name):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def build(self, input_shape):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def _build_keras_layer_hyperparams(self, hyperparams_text_proto):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def _get_model(self, box_predictor, keras_model=False, **common_kwargs):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def image_resizer_fn(image, masks=None):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def graph_fn(images):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def graph_fn(images):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def test_regularization_losses(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def test_predict_gives_valid_anchors_in_training_mode_first_stage_only(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def compare_results(results, expected_output_shapes):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,"def graph_fn(images, gt_boxes, gt_classes, gt_weights):"
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def test_preprocess_preserves_dynamic_input_shapes(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def test_preprocess_preserves_static_input_shapes(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def test_loss_first_stage_only_mode(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def test_loss_full(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def test_loss_full_zero_padded_proposals(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def test_loss_full_multiple_label_groundtruth(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def test_loss_with_hard_mining(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def test_loss_with_hard_mining_and_losses_mask(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def test_restore_map_for_classification_ckpt(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def test_restore_map_for_detection_ckpt(self):
data/raw/repos\research\object_detection\meta_architectures,faster_rcnn_meta_arch_test_lib.py,def test_load_all_det_checkpoint_vars(self):
data/raw/repos\research\object_detection\meta_architectures,rfcn_meta_arch.py,def regularization_losses(self):
data/raw/repos\research\object_detection\meta_architectures,rfcn_meta_arch.py,def updates(self):
data/raw/repos\research\object_detection\meta_architectures,rfcn_meta_arch_test.py,"def _get_model(self, box_predictor, **common_kwargs):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,def is_keras_model(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def restore_from_classification_checkpoint_fn(self, feature_extractor_scope):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,def is_keras_model(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def _extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def call(self, inputs, **kwargs):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,def feature_extractor(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,def anchors(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,def batched_prediction_tensor_names(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def preprocess(self, inputs):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def _compute_clip_window(self, preprocessed_images, true_image_shapes):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def predict(self, preprocessed_inputs, true_image_shapes):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def _raw_detections_and_feature_map_inds(self, box_encodings, boxlist_list):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def _get_feature_map_spatial_dims(self, feature_maps):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def postprocess(self, prediction_dict, true_image_shapes):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def loss(self, prediction_dict, true_image_shapes, scope=None):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def _minibatch_subsample_fn(self, inputs):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def _summarize_anchor_classification_loss(self, class_ids, cls_losses):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def _summarize_target_assignment(self, groundtruth_boxes_list, match_list):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def _batch_decode(self, box_encodings, anchors):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,def regularization_losses(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,"def restore_from_objects(self, fine_tune_checkpoint_type='detection'):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch.py,def updates(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_preprocess_preserves_shapes_with_dynamic_input_image(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_preprocess_preserves_shape_with_static_input_image(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_predict_result_shapes_on_image_with_dynamic_shape(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_predict_result_shapes_on_image_with_static_shape(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def graph_fn(input_image):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_predict_with_raw_output_fields(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def graph_fn(input_image):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_raw_detection_boxes_agree_predict_postprocess(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_postprocess_results_are_correct(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_postprocess_results_are_correct_static(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def graph_fn(input_image):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_postprocess_results_are_correct_with_calibration(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def graph_fn():
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_loss_results_are_correct(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_loss_results_are_correct_with_normalize_by_codesize_true(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_loss_results_are_correct_with_hard_example_mining(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_loss_results_are_correct_without_add_background_class(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_loss_results_are_correct_with_losses_mask(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_restore_map_for_detection_ckpt(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_restore_map_for_classification_ckpt(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_load_all_det_checkpoint_vars(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_load_checkpoint_vars_tf2(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test.py,def test_loss_results_are_correct_with_random_example_sampling(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test_lib.py,def __init__(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test_lib.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test_lib.py,"def extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test_lib.py,def __init__(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test_lib.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test_lib.py,"def _extract_features(self, preprocessed_inputs, **kwargs):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test_lib.py,def name_scope(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test_lib.py,def num_anchors_per_location(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test_lib.py,"def _generate(self, feature_map_shape_list, im_height, im_width):"
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test_lib.py,def num_anchors(self):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test_lib.py,def image_resizer_fn(image):
data/raw/repos\research\object_detection\meta_architectures,ssd_meta_arch_test_lib.py,"def _get_value_for_matching_key(self, dictionary, suffix):"
data/raw/repos\research\object_detection\metrics,calibration_evaluation.py,"def match_single_image_info(self, image_info):"
data/raw/repos\research\object_detection\metrics,calibration_evaluation.py,"def get_estimator_eval_metric_ops(self, eval_dict):"
data/raw/repos\research\object_detection\metrics,calibration_evaluation.py,"def add_single_ground_truth_image_info(self, image_id, groundtruth_dict):"
data/raw/repos\research\object_detection\metrics,calibration_evaluation.py,"def add_single_detected_image_info(self, image_id, detections_dict):"
data/raw/repos\research\object_detection\metrics,calibration_evaluation.py,def evaluate(self):
data/raw/repos\research\object_detection\metrics,calibration_evaluation.py,def clear(self):
data/raw/repos\research\object_detection\metrics,calibration_evaluation_tf1_test.py,def _get_categories_list():
data/raw/repos\research\object_detection\metrics,calibration_evaluation_tf1_test.py,"def _get_ece(self, ece_op, update_op):"
data/raw/repos\research\object_detection\metrics,calibration_evaluation_tf1_test.py,def testGetECEWithMatchingGroundtruthAndDetections(self):
data/raw/repos\research\object_detection\metrics,calibration_evaluation_tf1_test.py,def testGetECEWithUnmatchedGroundtruthAndDetections(self):
data/raw/repos\research\object_detection\metrics,calibration_evaluation_tf1_test.py,def testGetECEWithBatchedDetections(self):
data/raw/repos\research\object_detection\metrics,calibration_evaluation_tf1_test.py,def testGetECEWhenImagesFilteredByIsAnnotated(self):
data/raw/repos\research\object_detection\metrics,calibration_metrics.py,"def _safe_div(numerator, denominator):"
data/raw/repos\research\object_detection\metrics,calibration_metrics.py,"def _ece_from_bins(bin_counts, bin_true_sum, bin_preds_sum, name):"
data/raw/repos\research\object_detection\metrics,calibration_metrics.py,"def expected_calibration_error(y_true, y_pred, nbins=20):"
data/raw/repos\research\object_detection\metrics,calibration_metrics_tf1_test.py,def _get_calibration_placeholders():
data/raw/repos\research\object_detection\metrics,calibration_metrics_tf1_test.py,def test_expected_calibration_error_all_bins_filled(self):
data/raw/repos\research\object_detection\metrics,calibration_metrics_tf1_test.py,def test_expected_calibration_error_all_bins_not_filled(self):
data/raw/repos\research\object_detection\metrics,calibration_metrics_tf1_test.py,def test_expected_calibration_error_with_multiple_data_streams(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def clear(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,"def dump_detections_to_json_file(self, json_output_path):"
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def evaluate(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,"def add_eval_dict(self, eval_dict):"
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,"def get_estimator_eval_metric_ops(self, eval_dict):"
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def first_value_func():
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def value_func_factory(metric_name):
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def value_func():
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def convert_masks_to_binary(masks):
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,"def add_single_ground_truth_image_info(self, image_id, groundtruth_dict):"
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,"def add_single_detected_image_info(self, image_id, detections_dict):"
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def evaluate(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,"def add_eval_dict(self, eval_dict):"
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,"def get_estimator_eval_metric_ops(self, eval_dict):"
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def first_value_func():
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def value_func_factory(metric_name):
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def value_func():
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def clear(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,"def dump_detections_to_json_file(self, json_output_path):"
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def evaluate(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,"def add_eval_dict(self, eval_dict):"
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,"def get_estimator_eval_metric_ops(self, eval_dict):"
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def first_value_func():
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def value_func_factory(metric_name):
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def value_func():
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def clear(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,"def add_single_ground_truth_image_info(self, image_id, groundtruth_dict):"
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,"def add_single_detected_image_info(self, image_id, detections_dict):"
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def evaluate(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,"def get_estimator_eval_metric_ops(self, eval_dict):"
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def first_value_func():
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def value_func_factory(metric_name):
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def value_func():
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,def _evaluate_all_masks(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation.py,"def _unpack_evaluation_dictionary_items(self, eval_dict):"
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def _get_categories_list():
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def _get_category_keypoints_dict():
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetOneMAPWithMatchingGroundtruthAndDetections(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetOneMAPWithMatchingGroundtruthAndDetectionsSkipCrowd(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetOneMAPWithMatchingGroundtruthAndDetectionsEmptyCrowd(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testRejectionOnDuplicateGroundtruth(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testRejectionOnDuplicateDetections(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testExceptionRaisedWithMissingGroundtruth(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,"def _MatchingGroundtruthAndDetections(self, coco_evaluator):"
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetOneMAPWithMatchingGroundtruthAndDetections(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetMAPWithSkipUnmatchedPredictions(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetOneMAPWithMatchingGroundtruthAndDetectionsIsAnnotated(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetOneMAPWithMatchingGroundtruthAndDetectionsPadded(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetOneMAPWithMatchingGroundtruthAndDetectionsBatched(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetOneMAPWithMatchingGroundtruthAndDetectionsPaddedBatches(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetOneMAPWithMatchingKeypoints(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGroundtruthListValues(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testKeypointVisibilitiesAreOptional(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testFiltersDetectionsFromOtherCategories(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testHandlesUnlabeledKeypointData(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testIgnoresCrowdAnnotations(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetOneMAPWithMatchingKeypoints(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetOneMAPWithMatchingKeypointsAndVisibilities(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetOneMAPWithMatchingKeypointsIsAnnotated(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetOneMAPWithMatchingKeypointsBatched(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetOneMAPWithMatchingGroundtruthAndDetections(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetOneMAPWithMatchingGroundtruthAndDetectionsSkipCrowd(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testAddEvalDict(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetOneMAPWithMatchingGroundtruthAndDetections(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testGetOneMAPWithMatchingGroundtruthAndDetectionsBatched(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def _get_panoptic_test_data():
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def test_panoptic_quality(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testPanopticQualityNoBatch(self):
data/raw/repos\research\object_detection\metrics,coco_evaluation_test.py,def testPanopticQualityBatched(self):
data/raw/repos\research\object_detection\metrics,coco_tools.py,"def __init__(self, dataset, detection_type='bbox'):"
data/raw/repos\research\object_detection\metrics,coco_tools.py,"def LoadAnnotations(self, annotations):"
data/raw/repos\research\object_detection\metrics,coco_tools.py,"def GetCategory(self, category_id):"
data/raw/repos\research\object_detection\metrics,coco_tools.py,def GetAgnosticMode(self):
data/raw/repos\research\object_detection\metrics,coco_tools.py,def GetCategoryIdList(self):
data/raw/repos\research\object_detection\metrics,coco_tools.py,def _ConvertBoxToCOCOFormat(box):
data/raw/repos\research\object_detection\metrics,coco_tools.py,def _RleCompress(masks):
data/raw/repos\research\object_detection\metrics,coco_tools_test.py,def setUp(self):
data/raw/repos\research\object_detection\metrics,coco_tools_test.py,def testCocoWrappers(self):
data/raw/repos\research\object_detection\metrics,coco_tools_test.py,def testExportGroundtruthToCOCO(self):
data/raw/repos\research\object_detection\metrics,coco_tools_test.py,def testExportDetectionsToCOCO(self):
data/raw/repos\research\object_detection\metrics,coco_tools_test.py,def testExportSegmentsToCOCO(self):
data/raw/repos\research\object_detection\metrics,coco_tools_test.py,def testExportKeypointsToCOCO(self):
data/raw/repos\research\object_detection\metrics,coco_tools_test.py,def testSingleImageDetectionBoxesExport(self):
data/raw/repos\research\object_detection\metrics,coco_tools_test.py,def testSingleImageDetectionMaskExport(self):
data/raw/repos\research\object_detection\metrics,coco_tools_test.py,def testSingleImageGroundtruthExport(self):
data/raw/repos\research\object_detection\metrics,coco_tools_test.py,def testSingleImageGroundtruthExportWithKeypoints(self):
data/raw/repos\research\object_detection\metrics,coco_tools_test.py,def testSingleImageDetectionBoxesExportWithKeypoints(self):
data/raw/repos\research\object_detection\metrics,io_utils.py,"def write_csv(fid, metrics):"
data/raw/repos\research\object_detection\metrics,lvis_evaluation.py,def convert_masks_to_binary(masks):
data/raw/repos\research\object_detection\metrics,lvis_evaluation.py,def clear(self):
data/raw/repos\research\object_detection\metrics,lvis_evaluation.py,def evaluate(self):
data/raw/repos\research\object_detection\metrics,lvis_evaluation.py,"def add_eval_dict(self, eval_dict):"
data/raw/repos\research\object_detection\metrics,lvis_evaluation.py,"def get_estimator_eval_metric_ops(self, eval_dict):"
data/raw/repos\research\object_detection\metrics,lvis_evaluation.py,def first_value_func():
data/raw/repos\research\object_detection\metrics,lvis_evaluation.py,def value_func_factory(metric_name):
data/raw/repos\research\object_detection\metrics,lvis_evaluation.py,def value_func():
data/raw/repos\research\object_detection\metrics,lvis_evaluation.py,"def dump_detections_to_json_file(self, json_output_path):"
data/raw/repos\research\object_detection\metrics,lvis_evaluation.py,def mround(match):
data/raw/repos\research\object_detection\metrics,lvis_evaluation_test.py,def _get_categories_list():
data/raw/repos\research\object_detection\metrics,lvis_evaluation_test.py,def testGetOneMAPWithMatchingGroundtruthAndDetections(self):
data/raw/repos\research\object_detection\metrics,lvis_evaluation_test.py,def testAddEvalDict(self):
data/raw/repos\research\object_detection\metrics,lvis_tools.py,def RleCompress(masks):
data/raw/repos\research\object_detection\metrics,lvis_tools.py,def _ConvertBoxToCOCOFormat(box):
data/raw/repos\research\object_detection\metrics,lvis_tools.py,"def __init__(self, dataset, detection_type='bbox'):"
data/raw/repos\research\object_detection\metrics,lvis_tools.py,"def __init__(self, groundtruth=None, detections=None, iou_type='bbox'):"
data/raw/repos\research\object_detection\metrics,lvis_tools.py,def ComputeMetrics(self):
data/raw/repos\research\object_detection\metrics,lvis_tools_test.py,def setUp(self):
data/raw/repos\research\object_detection\metrics,lvis_tools_test.py,def testLVISWrappers(self):
data/raw/repos\research\object_detection\metrics,lvis_tools_test.py,def testSingleImageDetectionMaskExport(self):
data/raw/repos\research\object_detection\metrics,lvis_tools_test.py,def testSingleImageGroundtruthExport(self):
data/raw/repos\research\object_detection\metrics,offline_eval_map_corloc.py,def _generate_sharded_filenames(filename):
data/raw/repos\research\object_detection\metrics,offline_eval_map_corloc.py,def _generate_filenames(filenames):
data/raw/repos\research\object_detection\metrics,offline_eval_map_corloc.py,"def read_data_and_evaluate(input_config, eval_config):"
data/raw/repos\research\object_detection\metrics,offline_eval_map_corloc.py,"def write_metrics(metrics, output_dir):"
data/raw/repos\research\object_detection\metrics,offline_eval_map_corloc.py,def main(argv):
data/raw/repos\research\object_detection\metrics,offline_eval_map_corloc_test.py,def test_generateShardedFilenames(self):
data/raw/repos\research\object_detection\metrics,offline_eval_map_corloc_test.py,def test_generateFilenames(self):
data/raw/repos\research\object_detection\metrics,oid_challenge_evaluation.py,def _load_labelmap(labelmap_path):
data/raw/repos\research\object_detection\metrics,oid_challenge_evaluation.py,def main(unused_argv):
data/raw/repos\research\object_detection\metrics,oid_challenge_evaluation_utils.py,def _to_normalized_box(mask_np):
data/raw/repos\research\object_detection\metrics,oid_challenge_evaluation_utils.py,"def merge_boxes_and_masks(box_data, mask_data):"
data/raw/repos\research\object_detection\metrics,oid_challenge_evaluation_utils.py,"def build_groundtruth_dictionary(data, class_label_map):"
data/raw/repos\research\object_detection\metrics,oid_challenge_evaluation_utils.py,"def build_predictions_dictionary(data, class_label_map):"
data/raw/repos\research\object_detection\metrics,oid_challenge_evaluation_utils_test.py,def encode_mask(mask_to_encode):
data/raw/repos\research\object_detection\metrics,oid_challenge_evaluation_utils_test.py,def testMaskToNormalizedBox(self):
data/raw/repos\research\object_detection\metrics,oid_challenge_evaluation_utils_test.py,def testDecodeToTensors(self):
data/raw/repos\research\object_detection\metrics,oid_challenge_evaluation_utils_test.py,def testDecodeToTensorsNoMasks(self):
data/raw/repos\research\object_detection\metrics,oid_challenge_evaluation_utils_test.py,def testBuildGroundtruthDictionaryBoxes(self):
data/raw/repos\research\object_detection\metrics,oid_challenge_evaluation_utils_test.py,def testBuildPredictionDictionaryBoxes(self):
data/raw/repos\research\object_detection\metrics,oid_challenge_evaluation_utils_test.py,def testBuildGroundtruthDictionaryMasks(self):
data/raw/repos\research\object_detection\metrics,oid_challenge_evaluation_utils_test.py,def testBuildPredictionDictionaryMasks(self):
data/raw/repos\research\object_detection\metrics,oid_vrd_challenge_evaluation.py,def _load_labelmap(labelmap_path):
data/raw/repos\research\object_detection\metrics,oid_vrd_challenge_evaluation.py,def _swap_labelmap_dict(labelmap_dict):
data/raw/repos\research\object_detection\metrics,oid_vrd_challenge_evaluation.py,def main(parsed_args):
data/raw/repos\research\object_detection\metrics,oid_vrd_challenge_evaluation_utils_test.py,def testBuildGroundtruthDictionary(self):
data/raw/repos\research\object_detection\metrics,oid_vrd_challenge_evaluation_utils_test.py,def testBuildPredictionDictionary(self):
data/raw/repos\research\object_detection\metrics,tf_example_parser.py,"def __init__(self, field_name):"
data/raw/repos\research\object_detection\metrics,tf_example_parser.py,"def parse(self, tf_example):"
data/raw/repos\research\object_detection\metrics,tf_example_parser.py,"def __init__(self, field_name):"
data/raw/repos\research\object_detection\metrics,tf_example_parser.py,"def parse(self, tf_example):"
data/raw/repos\research\object_detection\metrics,tf_example_parser.py,"def __init__(self, field_name):"
data/raw/repos\research\object_detection\metrics,tf_example_parser.py,"def parse(self, tf_example):"
data/raw/repos\research\object_detection\metrics,tf_example_parser.py,"def parse(self, tf_example):"
data/raw/repos\research\object_detection\metrics,tf_example_parser.py,def __init__(self):
data/raw/repos\research\object_detection\metrics,tf_example_parser.py,"def parse(self, tf_example):"
data/raw/repos\research\object_detection\metrics,tf_example_parser_test.py,"def _Int64Feature(self, value):"
data/raw/repos\research\object_detection\metrics,tf_example_parser_test.py,"def _FloatFeature(self, value):"
data/raw/repos\research\object_detection\metrics,tf_example_parser_test.py,"def _BytesFeature(self, value):"
data/raw/repos\research\object_detection\metrics,tf_example_parser_test.py,def testParseDetectionsAndGT(self):
data/raw/repos\research\object_detection\metrics,tf_example_parser_test.py,def testParseString(self):
data/raw/repos\research\object_detection\metrics,tf_example_parser_test.py,def testParseFloat(self):
data/raw/repos\research\object_detection\metrics,tf_example_parser_test.py,def testInt64Parser(self):
data/raw/repos\research\object_detection\metrics,tf_example_parser_test.py,def testBoundingBoxParser(self):
data/raw/repos\research\object_detection\models,bidirectional_feature_pyramid_generators.py,"def _get_bifpn_output_node_names(fpn_min_level, fpn_max_level, node_config):"
data/raw/repos\research\object_detection\models,bidirectional_feature_pyramid_generators.py,"def _create_bifpn_combine_op(num_inputs, name, combine_method):"
data/raw/repos\research\object_detection\models,bidirectional_feature_pyramid_generators.py,"def call(self, feature_pyramid):"
data/raw/repos\research\object_detection\models,bidirectional_feature_pyramid_generators_tf2_test.py,def _build_conv_hyperparams(self):
data/raw/repos\research\object_detection\models,bidirectional_feature_pyramid_generators_tf2_test.py,"def test_get_expected_feature_map_shapes(self, bifpn_num_iterations):"
data/raw/repos\research\object_detection\models,bidirectional_feature_pyramid_generators_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,bidirectional_feature_pyramid_generators_tf2_test.py,"def test_get_expected_variable_names(self, bifpn_num_iterations):"
data/raw/repos\research\object_detection\models,bidirectional_feature_pyramid_generators_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,center_net_hourglass_feature_extractor.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\models,center_net_hourglass_feature_extractor.py,def out_stride(self):
data/raw/repos\research\object_detection\models,center_net_hourglass_feature_extractor.py,def num_feature_outputs(self):
data/raw/repos\research\object_detection\models,center_net_hourglass_feature_extractor.py,"def hourglass_10(channel_means, channel_stds, bgr_ordering, **kwargs):"
data/raw/repos\research\object_detection\models,center_net_hourglass_feature_extractor.py,"def hourglass_20(channel_means, channel_stds, bgr_ordering, **kwargs):"
data/raw/repos\research\object_detection\models,center_net_hourglass_feature_extractor.py,"def hourglass_32(channel_means, channel_stds, bgr_ordering, **kwargs):"
data/raw/repos\research\object_detection\models,center_net_hourglass_feature_extractor.py,"def hourglass_52(channel_means, channel_stds, bgr_ordering, **kwargs):"
data/raw/repos\research\object_detection\models,center_net_hourglass_feature_extractor.py,"def hourglass_104(channel_means, channel_stds, bgr_ordering, **kwargs):"
data/raw/repos\research\object_detection\models,center_net_hourglass_feature_extractor_tf2_test.py,def test_center_net_hourglass_feature_extractor(self):
data/raw/repos\research\object_detection\models,center_net_hourglass_feature_extractor_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_feature_extractor.py,"def load_feature_extractor_weights(self, path):"
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_feature_extractor.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_feature_extractor.py,def out_stride(self):
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_feature_extractor.py,def num_feature_outputs(self):
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_feature_extractor.py,def classification_backbone(self):
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_feature_extractor_tf2_test.py,def test_center_net_mobilenet_v2_feature_extractor(self):
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_feature_extractor_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_fpn_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_fpn_feature_extractor.py,"def load_feature_extractor_weights(self, path):"
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_fpn_feature_extractor.py,def classification_backbone(self):
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_fpn_feature_extractor.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_fpn_feature_extractor.py,def out_stride(self):
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_fpn_feature_extractor.py,def num_feature_outputs(self):
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_fpn_feature_extractor_tf2_test.py,def test_center_net_mobilenet_v2_fpn_feature_extractor(self):
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_fpn_feature_extractor_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_fpn_feature_extractor_tf2_test.py,def test_center_net_mobilenet_v2_fpn_feature_extractor_sep_conv(self):
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_fpn_feature_extractor_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_fpn_feature_extractor_tf2_test.py,def test_center_net_mobilenet_v2_fpn_feature_extractor_depth_multiplier(self):
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_fpn_feature_extractor_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_fpn_feature_extractor_tf2_test.py,def test_center_net_mobilenet_v2_fpn_feature_extractor_interpolation(self):
data/raw/repos\research\object_detection\models,center_net_mobilenet_v2_fpn_feature_extractor_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,center_net_resnet_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,center_net_resnet_feature_extractor.py,"def load_feature_extractor_weights(self, path):"
data/raw/repos\research\object_detection\models,center_net_resnet_feature_extractor.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\models,center_net_resnet_feature_extractor.py,def num_feature_outputs(self):
data/raw/repos\research\object_detection\models,center_net_resnet_feature_extractor.py,def out_stride(self):
data/raw/repos\research\object_detection\models,center_net_resnet_feature_extractor.py,def classification_backbone(self):
data/raw/repos\research\object_detection\models,center_net_resnet_feature_extractor.py,"def resnet_v2_101(channel_means, channel_stds, bgr_ordering, **kwargs):"
data/raw/repos\research\object_detection\models,center_net_resnet_feature_extractor.py,"def resnet_v2_50(channel_means, channel_stds, bgr_ordering, **kwargs):"
data/raw/repos\research\object_detection\models,center_net_resnet_feature_extractor_tf2_test.py,def test_output_size(self):
data/raw/repos\research\object_detection\models,center_net_resnet_feature_extractor_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,center_net_resnet_feature_extractor_tf2_test.py,def test_output_size_resnet50(self):
data/raw/repos\research\object_detection\models,center_net_resnet_feature_extractor_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,center_net_resnet_v1_fpn_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,center_net_resnet_v1_fpn_feature_extractor.py,"def load_feature_extractor_weights(self, path):"
data/raw/repos\research\object_detection\models,center_net_resnet_v1_fpn_feature_extractor.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\models,center_net_resnet_v1_fpn_feature_extractor.py,def num_feature_outputs(self):
data/raw/repos\research\object_detection\models,center_net_resnet_v1_fpn_feature_extractor.py,def out_stride(self):
data/raw/repos\research\object_detection\models,center_net_resnet_v1_fpn_feature_extractor.py,def classification_backbone(self):
data/raw/repos\research\object_detection\models,center_net_resnet_v1_fpn_feature_extractor.py,"def resnet_v1_101_fpn(channel_means, channel_stds, bgr_ordering, **kwargs):"
data/raw/repos\research\object_detection\models,center_net_resnet_v1_fpn_feature_extractor.py,"def resnet_v1_50_fpn(channel_means, channel_stds, bgr_ordering, **kwargs):"
data/raw/repos\research\object_detection\models,center_net_resnet_v1_fpn_feature_extractor.py,"def resnet_v1_34_fpn(channel_means, channel_stds, bgr_ordering, **kwargs):"
data/raw/repos\research\object_detection\models,center_net_resnet_v1_fpn_feature_extractor.py,"def resnet_v1_18_fpn(channel_means, channel_stds, bgr_ordering, **kwargs):"
data/raw/repos\research\object_detection\models,center_net_resnet_v1_fpn_feature_extractor_tf2_test.py,"def test_correct_output_size(self, resnet_type):"
data/raw/repos\research\object_detection\models,center_net_resnet_v1_fpn_feature_extractor_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,embedded_ssd_mobilenet_v1_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,embedded_ssd_mobilenet_v1_feature_extractor.py,"def extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,embedded_ssd_mobilenet_v1_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_256(self):
data/raw/repos\research\object_detection\models,embedded_ssd_mobilenet_v1_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_with_dynamic_inputs(self):
data/raw/repos\research\object_detection\models,embedded_ssd_mobilenet_v1_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_enforcing_min_depth(self):
data/raw/repos\research\object_detection\models,embedded_ssd_mobilenet_v1_feature_extractor_tf1_test.py,def test_extract_features_raises_error_with_pad_to_multiple_not_1(self):
data/raw/repos\research\object_detection\models,embedded_ssd_mobilenet_v1_feature_extractor_tf1_test.py,def test_extract_features_raises_error_with_invalid_image_size(self):
data/raw/repos\research\object_detection\models,embedded_ssd_mobilenet_v1_feature_extractor_tf1_test.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\object_detection\models,embedded_ssd_mobilenet_v1_feature_extractor_tf1_test.py,def test_variables_only_created_in_scope(self):
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_feature_extractor.py,"def _extract_proposal_features(self, preprocessed_inputs, scope):"
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_feature_extractor.py,"def _extract_box_classifier_features(self, proposal_feature_maps, scope):"
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_feature_extractor_tf1_test.py,"def _build_feature_extractor(self, first_stage_features_stride):"
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_feature_extractor_tf1_test.py,def test_extract_proposal_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_feature_extractor_tf1_test.py,def test_extract_proposal_features_stride_eight(self):
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_feature_extractor_tf1_test.py,def test_extract_proposal_features_half_size_input(self):
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_feature_extractor_tf1_test.py,def test_extract_proposal_features_dies_on_invalid_stride(self):
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_feature_extractor_tf1_test.py,def test_extract_proposal_features_dies_with_incorrect_rank_inputs(self):
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_feature_extractor_tf1_test.py,def test_extract_box_classifier_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_keras_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_keras_feature_extractor.py,"def get_proposal_feature_extractor_model(self, name=None):"
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_keras_feature_extractor.py,"def get_box_classifier_feature_extractor_model(self, name=None):"
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_keras_feature_extractor_tf2_test.py,"def _build_feature_extractor(self, first_stage_features_stride):"
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_keras_feature_extractor_tf2_test.py,def test_extract_proposal_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_keras_feature_extractor_tf2_test.py,def test_extract_proposal_features_stride_eight(self):
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_keras_feature_extractor_tf2_test.py,def test_extract_proposal_features_half_size_input(self):
data/raw/repos\research\object_detection\models,faster_rcnn_inception_resnet_v2_keras_feature_extractor_tf2_test.py,def test_extract_box_classifier_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,faster_rcnn_inception_v2_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,faster_rcnn_inception_v2_feature_extractor.py,"def _extract_proposal_features(self, preprocessed_inputs, scope):"
data/raw/repos\research\object_detection\models,faster_rcnn_inception_v2_feature_extractor.py,"def _extract_box_classifier_features(self, proposal_feature_maps, scope):"
data/raw/repos\research\object_detection\models,faster_rcnn_inception_v2_feature_extractor_tf1_test.py,"def _build_feature_extractor(self, first_stage_features_stride):"
data/raw/repos\research\object_detection\models,faster_rcnn_inception_v2_feature_extractor_tf1_test.py,def test_extract_proposal_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,faster_rcnn_inception_v2_feature_extractor_tf1_test.py,def test_extract_proposal_features_stride_eight(self):
data/raw/repos\research\object_detection\models,faster_rcnn_inception_v2_feature_extractor_tf1_test.py,def test_extract_proposal_features_half_size_input(self):
data/raw/repos\research\object_detection\models,faster_rcnn_inception_v2_feature_extractor_tf1_test.py,def test_extract_proposal_features_dies_on_invalid_stride(self):
data/raw/repos\research\object_detection\models,faster_rcnn_inception_v2_feature_extractor_tf1_test.py,def test_extract_proposal_features_dies_on_very_small_images(self):
data/raw/repos\research\object_detection\models,faster_rcnn_inception_v2_feature_extractor_tf1_test.py,def test_extract_proposal_features_dies_with_incorrect_rank_inputs(self):
data/raw/repos\research\object_detection\models,faster_rcnn_inception_v2_feature_extractor_tf1_test.py,def test_extract_box_classifier_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,faster_rcnn_mobilenet_v1_feature_extractor.py,def _get_mobilenet_conv_no_last_stride_defs(conv_depth_ratio_in_percentage):
data/raw/repos\research\object_detection\models,faster_rcnn_mobilenet_v1_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,faster_rcnn_mobilenet_v1_feature_extractor.py,"def _extract_proposal_features(self, preprocessed_inputs, scope):"
data/raw/repos\research\object_detection\models,faster_rcnn_mobilenet_v1_feature_extractor.py,"def _extract_box_classifier_features(self, proposal_feature_maps, scope):"
data/raw/repos\research\object_detection\models,faster_rcnn_mobilenet_v1_feature_extractor_tf1_test.py,"def _build_feature_extractor(self, first_stage_features_stride):"
data/raw/repos\research\object_detection\models,faster_rcnn_mobilenet_v1_feature_extractor_tf1_test.py,def test_extract_proposal_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,faster_rcnn_mobilenet_v1_feature_extractor_tf1_test.py,def test_extract_proposal_features_stride_eight(self):
data/raw/repos\research\object_detection\models,faster_rcnn_mobilenet_v1_feature_extractor_tf1_test.py,def test_extract_proposal_features_half_size_input(self):
data/raw/repos\research\object_detection\models,faster_rcnn_mobilenet_v1_feature_extractor_tf1_test.py,def test_extract_proposal_features_dies_on_invalid_stride(self):
data/raw/repos\research\object_detection\models,faster_rcnn_mobilenet_v1_feature_extractor_tf1_test.py,def test_extract_proposal_features_dies_on_very_small_images(self):
data/raw/repos\research\object_detection\models,faster_rcnn_mobilenet_v1_feature_extractor_tf1_test.py,def test_extract_proposal_features_dies_with_incorrect_rank_inputs(self):
data/raw/repos\research\object_detection\models,faster_rcnn_mobilenet_v1_feature_extractor_tf1_test.py,def test_extract_box_classifier_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,faster_rcnn_nas_feature_extractor.py,def nasnet_large_arg_scope_for_detection(is_batch_norm_training=False):
data/raw/repos\research\object_detection\models,faster_rcnn_nas_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,faster_rcnn_nas_feature_extractor.py,"def _extract_proposal_features(self, preprocessed_inputs, scope):"
data/raw/repos\research\object_detection\models,faster_rcnn_nas_feature_extractor.py,"def _extract_box_classifier_features(self, proposal_feature_maps, scope):"
data/raw/repos\research\object_detection\models,faster_rcnn_nas_feature_extractor_tf1_test.py,"def _build_feature_extractor(self, first_stage_features_stride):"
data/raw/repos\research\object_detection\models,faster_rcnn_nas_feature_extractor_tf1_test.py,def test_extract_proposal_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,faster_rcnn_nas_feature_extractor_tf1_test.py,def test_extract_proposal_features_input_size_224(self):
data/raw/repos\research\object_detection\models,faster_rcnn_nas_feature_extractor_tf1_test.py,def test_extract_proposal_features_input_size_112(self):
data/raw/repos\research\object_detection\models,faster_rcnn_nas_feature_extractor_tf1_test.py,def test_extract_proposal_features_dies_on_invalid_stride(self):
data/raw/repos\research\object_detection\models,faster_rcnn_nas_feature_extractor_tf1_test.py,def test_extract_proposal_features_dies_with_incorrect_rank_inputs(self):
data/raw/repos\research\object_detection\models,faster_rcnn_nas_feature_extractor_tf1_test.py,def test_extract_box_classifier_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,faster_rcnn_pnas_feature_extractor.py,def pnasnet_large_arg_scope_for_detection(is_batch_norm_training=False):
data/raw/repos\research\object_detection\models,faster_rcnn_pnas_feature_extractor.py,"def _filter_scaling(reduction_indices, start_cell_num):"
data/raw/repos\research\object_detection\models,faster_rcnn_pnas_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,faster_rcnn_pnas_feature_extractor.py,"def _extract_proposal_features(self, preprocessed_inputs, scope):"
data/raw/repos\research\object_detection\models,faster_rcnn_pnas_feature_extractor.py,"def _extract_box_classifier_features(self, proposal_feature_maps, scope):"
data/raw/repos\research\object_detection\models,faster_rcnn_pnas_feature_extractor_tf1_test.py,"def _build_feature_extractor(self, first_stage_features_stride):"
data/raw/repos\research\object_detection\models,faster_rcnn_pnas_feature_extractor_tf1_test.py,def test_extract_proposal_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,faster_rcnn_pnas_feature_extractor_tf1_test.py,def test_extract_proposal_features_input_size_224(self):
data/raw/repos\research\object_detection\models,faster_rcnn_pnas_feature_extractor_tf1_test.py,def test_extract_proposal_features_input_size_112(self):
data/raw/repos\research\object_detection\models,faster_rcnn_pnas_feature_extractor_tf1_test.py,def test_extract_proposal_features_dies_on_invalid_stride(self):
data/raw/repos\research\object_detection\models,faster_rcnn_pnas_feature_extractor_tf1_test.py,def test_extract_proposal_features_dies_with_incorrect_rank_inputs(self):
data/raw/repos\research\object_detection\models,faster_rcnn_pnas_feature_extractor_tf1_test.py,def test_extract_box_classifier_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,faster_rcnn_pnas_feature_extractor_tf1_test.py,def test_filter_scaling_computation(self):
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_keras_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_keras_feature_extractor.py,"def get_proposal_feature_extractor_model(self, name=None):"
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_keras_feature_extractor.py,"def get_box_classifier_feature_extractor_model(self, name=None):"
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_keras_feature_extractor_tf2_test.py,"def _build_feature_extractor(self, architecture='resnet_v1_50'):"
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_keras_feature_extractor_tf2_test.py,def test_extract_proposal_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_keras_feature_extractor_tf2_test.py,def test_extract_proposal_features_half_size_input(self):
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_keras_feature_extractor_tf2_test.py,def test_extract_proposal_features_dies_with_incorrect_rank_inputs(self):
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_keras_feature_extractor_tf2_test.py,def test_extract_box_classifier_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_feature_extractor.py,"def _extract_proposal_features(self, preprocessed_inputs, scope):"
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_feature_extractor.py,"def _extract_box_classifier_features(self, proposal_feature_maps, scope):"
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_feature_extractor_tf1_test.py,def test_extract_proposal_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_feature_extractor_tf1_test.py,def test_extract_proposal_features_stride_eight(self):
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_feature_extractor_tf1_test.py,def test_extract_proposal_features_half_size_input(self):
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_feature_extractor_tf1_test.py,def test_extract_proposal_features_dies_on_invalid_stride(self):
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_feature_extractor_tf1_test.py,def test_extract_proposal_features_dies_on_very_small_images(self):
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_feature_extractor_tf1_test.py,def test_extract_proposal_features_dies_with_incorrect_rank_inputs(self):
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_feature_extractor_tf1_test.py,def test_extract_box_classifier_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_feature_extractor_tf1_test.py,def test_overwriting_activation_fn(self):
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_fpn_keras_feature_extractor.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_fpn_keras_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_fpn_keras_feature_extractor.py,"def get_proposal_feature_extractor_model(self, name=None):"
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_fpn_keras_feature_extractor.py,"def get_box_classifier_feature_extractor_model(self, name=None):"
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_fpn_keras_feature_extractor_tf2_test.py,def _build_conv_hyperparams(self):
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_fpn_keras_feature_extractor_tf2_test.py,def _build_feature_extractor(self):
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_fpn_keras_feature_extractor_tf2_test.py,def test_extract_proposal_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_fpn_keras_feature_extractor_tf2_test.py,def test_extract_proposal_features_half_size_input(self):
data/raw/repos\research\object_detection\models,faster_rcnn_resnet_v1_fpn_keras_feature_extractor_tf2_test.py,def test_extract_box_classifier_features_returns_expected_size(self):
data/raw/repos\research\object_detection\models,feature_map_generators.py,"def get_depth_fn(depth_multiplier, min_depth):"
data/raw/repos\research\object_detection\models,feature_map_generators.py,def multiply_depth(depth):
data/raw/repos\research\object_detection\models,feature_map_generators.py,"def fixed_padding(features, kernel_size=conv_kernel_size):"
data/raw/repos\research\object_detection\models,feature_map_generators.py,"def call(self, image_features):"
data/raw/repos\research\object_detection\models,feature_map_generators.py,def clip_by_value(features):
data/raw/repos\research\object_detection\models,feature_map_generators.py,def resize_nearest_neighbor(image):
data/raw/repos\research\object_detection\models,feature_map_generators.py,def nearest_neighbor_upsampling(image):
data/raw/repos\research\object_detection\models,feature_map_generators.py,def reshape(inputs):
data/raw/repos\research\object_detection\models,feature_map_generators.py,"def fixed_padding(features, kernel_size=kernel_size):"
data/raw/repos\research\object_detection\models,feature_map_generators.py,"def call(self, image_features):"
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def _build_conv_hyperparams(self):
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def feature_map_generator(image_features):
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def test_get_expected_feature_map_shapes_with_inception_v2(self):
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def test_get_expected_feature_map_shapes_use_explicit_padding(self):
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def test_get_expected_feature_map_shapes_with_inception_v3(self):
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def test_get_expected_variable_names_with_inception_v2(self):
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def _build_conv_hyperparams(self):
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def feature_map_generator(image_features):
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def test_return_min_depth_when_multiplier_is_small(self):
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,def test_return_correct_depth_with_multiplier(self):
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,"def test_get_expected_feature_map_shapes(self, replace_pool_with_conv):"
data/raw/repos\research\object_detection\models,feature_map_generators_test.py,"def test_get_expected_variable_names(self, replace_pool_with_conv):"
data/raw/repos\research\object_detection\models,ssd_efficientnet_bifpn_feature_extractor.py,def _is_tpu_strategy_class(clz):
data/raw/repos\research\object_detection\models,ssd_efficientnet_bifpn_feature_extractor.py,def is_tpu_strategy(strategy):
data/raw/repos\research\object_detection\models,ssd_efficientnet_bifpn_feature_extractor.py,"def build(self, input_shape):"
data/raw/repos\research\object_detection\models,ssd_efficientnet_bifpn_feature_extractor.py,"def preprocess(self, inputs):"
data/raw/repos\research\object_detection\models,ssd_efficientnet_bifpn_feature_extractor.py,"def _extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_efficientnet_bifpn_feature_extractor_tf2_test.py,"def _count_params(model, trainable_only=True):"
data/raw/repos\research\object_detection\models,ssd_efficientnet_bifpn_feature_extractor_tf2_test.py,"def _build_conv_hyperparams(self, add_batch_norm=True):"
data/raw/repos\research\object_detection\models,ssd_feature_extractor_test.py,"def _build_conv_hyperparams(self, add_batch_norm=True):"
data/raw/repos\research\object_detection\models,ssd_feature_extractor_test.py,def conv_hyperparams_fn(self):
data/raw/repos\research\object_detection\models,ssd_feature_extractor_test.py,def graph_fn(image_tensor):
data/raw/repos\research\object_detection\models,ssd_feature_extractor_test.py,"def graph_fn(image_height, image_width):"
data/raw/repos\research\object_detection\models,ssd_feature_extractor_test.py,def graph_fn():
data/raw/repos\research\object_detection\models,ssd_inception_v2_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_inception_v2_feature_extractor.py,"def extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_inception_v2_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_128(self):
data/raw/repos\research\object_detection\models,ssd_inception_v2_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_with_dynamic_inputs(self):
data/raw/repos\research\object_detection\models,ssd_inception_v2_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_299(self):
data/raw/repos\research\object_detection\models,ssd_inception_v2_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_enforcing_min_depth(self):
data/raw/repos\research\object_detection\models,ssd_inception_v2_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_with_pad_to_multiple(self):
data/raw/repos\research\object_detection\models,ssd_inception_v2_feature_extractor_tf1_test.py,def test_extract_features_raises_error_with_invalid_image_size(self):
data/raw/repos\research\object_detection\models,ssd_inception_v2_feature_extractor_tf1_test.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\object_detection\models,ssd_inception_v2_feature_extractor_tf1_test.py,def test_variables_only_created_in_scope(self):
data/raw/repos\research\object_detection\models,ssd_inception_v2_feature_extractor_tf1_test.py,def test_extract_features_with_fewer_layers(self):
data/raw/repos\research\object_detection\models,ssd_inception_v3_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_inception_v3_feature_extractor.py,"def extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_inception_v3_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_128(self):
data/raw/repos\research\object_detection\models,ssd_inception_v3_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_with_dynamic_inputs(self):
data/raw/repos\research\object_detection\models,ssd_inception_v3_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_299(self):
data/raw/repos\research\object_detection\models,ssd_inception_v3_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_enforcing_min_depth(self):
data/raw/repos\research\object_detection\models,ssd_inception_v3_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_with_pad_to_multiple(self):
data/raw/repos\research\object_detection\models,ssd_inception_v3_feature_extractor_tf1_test.py,def test_extract_features_raises_error_with_invalid_image_size(self):
data/raw/repos\research\object_detection\models,ssd_inception_v3_feature_extractor_tf1_test.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\object_detection\models,ssd_inception_v3_feature_extractor_tf1_test.py,def test_variables_only_created_in_scope(self):
data/raw/repos\research\object_detection\models,ssd_inception_v3_feature_extractor_tf1_test.py,def test_extract_features_with_fewer_layers(self):
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor.py,"def _scale_filters(filters, multiplier, base=8):"
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor.py,def _swish6(h):
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor.py,"def _squeeze_and_excite(h, hidden_dim, activation_fn=tf.nn.relu6):"
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor.py,"def mobiledet_cpu_backbone(h, multiplier=1.0):"
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor.py,def _scale(filters):
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor.py,"def mobiledet_dsp_backbone(h, multiplier=1.0):"
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor.py,def _scale(filters):
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor.py,"def mobiledet_edgetpu_backbone(h, multiplier=1.0):"
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor.py,def _scale(filters):
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor.py,"def mobiledet_gpu_backbone(h, multiplier=1.0):"
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor.py,def _scale(filters):
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor.py,"def extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor_tf1_test.py,def test_mobiledet_cpu_returns_correct_shapes(self):
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor_tf1_test.py,def test_mobiledet_dsp_returns_correct_shapes(self):
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor_tf1_test.py,def test_mobiledet_edgetpu_returns_correct_shapes(self):
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor_tf1_test.py,def test_mobiledet_gpu_returns_correct_shapes(self):
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor_tf1_test.py,"def _check_quantization(self, model_fn):"
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor_tf1_test.py,def test_mobiledet_cpu_quantization(self):
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor_tf1_test.py,def model_fn(is_training):
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor_tf1_test.py,def test_mobiledet_dsp_quantization(self):
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor_tf1_test.py,def model_fn(is_training):
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor_tf1_test.py,def test_mobiledet_edgetpu_quantization(self):
data/raw/repos\research\object_detection\models,ssd_mobiledet_feature_extractor_tf1_test.py,def model_fn(is_training):
data/raw/repos\research\object_detection\models,ssd_mobilenet_edgetpu_feature_extractor_testbase.py,def _get_input_sizes(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_edgetpu_feature_extractor_testbase.py,def test_extract_features_returns_correct_shapes_128(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_edgetpu_feature_extractor_testbase.py,def test_extract_features_returns_correct_shapes_299(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_edgetpu_feature_extractor_testbase.py,def test_extract_features_returns_correct_shapes_with_pad_to_multiple(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_edgetpu_feature_extractor_testbase.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_edgetpu_feature_extractor_testbase.py,def test_has_fused_batchnorm(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_edgetpu_feature_extractor_tf1_test.py,def _get_input_sizes(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_feature_extractor.py,"def extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_128(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_299(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_feature_extractor_tf1_test.py,def test_extract_features_with_dynamic_image_shape(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_feature_extractor_tf1_test.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_feature_extractor_tf1_test.py,def test_variables_only_created_in_scope(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_feature_extractor_tf1_test.py,def test_variable_count(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_feature_extractor_tf1_test.py,def test_has_fused_batchnorm(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_feature_extractor_tf1_test.py,def test_extract_features_with_fewer_layers(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_feature_extractor_tf2_test.py,def test_extract_features_returns_correct_shapes_128(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_feature_extractor_tf2_test.py,def test_extract_features_returns_correct_shapes_299(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_feature_extractor_tf2_test.py,def test_extract_features_with_dynamic_image_shape(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_feature_extractor_tf2_test.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_feature_extractor_tf2_test.py,def test_extract_features_with_fewer_layers(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_feature_extractor.py,def _create_modified_mobilenet_config():
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_feature_extractor.py,"def extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_256(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_384(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_feature_extractor_tf1_test.py,def test_extract_features_with_dynamic_image_shape(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_feature_extractor_tf1_test.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_feature_extractor_tf1_test.py,def test_variables_only_created_in_scope(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_feature_extractor_tf1_test.py,def test_variable_count(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_feature_extractor_tf1_test.py,def test_fused_batchnorm(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_feature_extractor_tf2_test.py,def test_extract_features_returns_correct_shapes_256(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_feature_extractor_tf2_test.py,def test_extract_features_returns_correct_shapes_384(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_feature_extractor_tf2_test.py,def test_extract_features_with_dynamic_image_shape(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_feature_extractor_tf2_test.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_keras_feature_extractor.py,def _create_modified_mobilenet_config():
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_keras_feature_extractor.py,"def build(self, input_shape):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_keras_feature_extractor.py,"def fixed_padding(features, kernel_size=kernel_size):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_keras_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_keras_feature_extractor.py,"def _extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_fpn_keras_feature_extractor.py,"def restore_from_classification_checkpoint_fn(self, feature_extractor_scope):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_keras_feature_extractor.py,"def build(self, input_shape):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_keras_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_keras_feature_extractor.py,"def _extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_ppn_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_ppn_feature_extractor.py,"def extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_ppn_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_320(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_ppn_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_300(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_ppn_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_640(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_ppn_feature_extractor_tf1_test.py,def test_extract_features_with_dynamic_image_shape(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_ppn_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_with_pad_to_multiple(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_ppn_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_enforcing_min_depth(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_ppn_feature_extractor_tf1_test.py,def test_extract_features_raises_error_with_invalid_image_size(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_ppn_feature_extractor_tf1_test.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_ppn_feature_extractor_tf1_test.py,def test_variables_only_created_in_scope(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v1_ppn_feature_extractor_tf1_test.py,def test_has_fused_batchnorm(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_feature_extractor.py,"def extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_128(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_299(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_feature_extractor_tf1_test.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_feature_extractor_tf1_test.py,def test_variables_only_created_in_scope(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_feature_extractor_tf1_test.py,def test_variable_count(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_feature_extractor_tf1_test.py,def test_has_fused_batchnorm(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_feature_extractor_tf1_test.py,def test_extract_features_with_fewer_layers(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_feature_extractor_tf2_test.py,def test_extract_features_returns_correct_shapes_128(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_feature_extractor_tf2_test.py,def test_extract_features_returns_correct_shapes_299(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_feature_extractor_tf2_test.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_feature_extractor_tf2_test.py,def test_variables_only_created_in_scope(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_feature_extractor_tf2_test.py,def test_variable_count(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_feature_extractor_tf2_test.py,def test_extract_features_with_fewer_layers(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_fpn_feature_extractor.py,def _create_modified_mobilenet_config():
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_fpn_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_fpn_feature_extractor.py,"def extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_fpn_feature_extractor_tf1_test.py,"def test_extract_features_returns_correct_shapes_256(self, use_depthwise):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_fpn_feature_extractor_tf1_test.py,"def test_extract_features_returns_correct_shapes_384(self, use_depthwise):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_fpn_feature_extractor_tf1_test.py,"def test_variables_only_created_in_scope(self, use_depthwise):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_fpn_feature_extractor_tf1_test.py,"def test_fused_batchnorm(self, use_depthwise):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_fpn_feature_extractor_tf1_test.py,"def test_variable_count(self, use_depthwise):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_fpn_keras_feature_extractor.py,def _create_modified_mobilenet_config():
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_fpn_keras_feature_extractor.py,"def build(self, input_shape):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_fpn_keras_feature_extractor.py,"def fixed_padding(features, kernel_size=kernel_size):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_fpn_keras_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_fpn_keras_feature_extractor.py,"def _extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_keras_feature_extractor.py,"def build(self, input_shape):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_keras_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_keras_feature_extractor.py,"def _extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_mnasfpn_feature_extractor.py,"def _maybe_pad(feature, use_explicit_padding, kernel_size=3):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_mnasfpn_feature_extractor.py,"def _apply_multiplier(d, multiplier, min_depth):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_mnasfpn_feature_extractor.py,"def training_scope(l2_weight_decay=1e-4, is_training=None):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_mnasfpn_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_mnasfpn_feature_extractor.py,"def _verify_config(self, inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_mnasfpn_feature_extractor.py,"def extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_mnasfpn_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_320_256(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_mnasfpn_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_enforcing_min_depth(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v2_mnasfpn_feature_extractor_tf1_test.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v3_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v3_feature_extractor.py,"def extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_mobilenet_v3_feature_extractor_testbase.py,def _get_input_sizes(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v3_feature_extractor_testbase.py,def test_extract_features_returns_correct_shapes_128(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v3_feature_extractor_testbase.py,def test_extract_features_returns_correct_shapes_299(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v3_feature_extractor_testbase.py,def test_extract_features_returns_correct_shapes_with_pad_to_multiple(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v3_feature_extractor_testbase.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v3_feature_extractor_testbase.py,def test_has_fused_batchnorm(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v3_feature_extractor_tf1_test.py,def _get_input_sizes(self):
data/raw/repos\research\object_detection\models,ssd_mobilenet_v3_feature_extractor_tf1_test.py,def _get_input_sizes(self):
data/raw/repos\research\object_detection\models,ssd_pnasnet_feature_extractor.py,def pnasnet_large_arg_scope_for_detection(is_batch_norm_training=False):
data/raw/repos\research\object_detection\models,ssd_pnasnet_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_pnasnet_feature_extractor.py,"def extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_pnasnet_feature_extractor.py,"def restore_from_classification_checkpoint_fn(self, feature_extractor_scope):"
data/raw/repos\research\object_detection\models,ssd_pnasnet_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_128(self):
data/raw/repos\research\object_detection\models,ssd_pnasnet_feature_extractor_tf1_test.py,def test_extract_features_returns_correct_shapes_299(self):
data/raw/repos\research\object_detection\models,ssd_pnasnet_feature_extractor_tf1_test.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\object_detection\models,ssd_pnasnet_feature_extractor_tf1_test.py,def test_extract_features_with_fewer_layers(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_feature_extractor.py,"def _filter_features(self, image_features):"
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_feature_extractor.py,"def extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_feature_extractor_testbase.py,def _resnet_scope_name(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_feature_extractor_testbase.py,def _fpn_scope_name(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_feature_extractor_testbase.py,def test_extract_features_returns_correct_shapes_256(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_feature_extractor_testbase.py,def graph_fn():
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_feature_extractor_testbase.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_feature_extractor_testbase.py,def graph_fn():
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_feature_extractor_testbase.py,def test_variables_only_created_in_scope(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_feature_extractor_testbase.py,def test_variable_count(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_feature_extractor_tf1_test.py,def _resnet_scope_name(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_feature_extractor_tf1_test.py,def _resnet_scope_name(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_feature_extractor_tf1_test.py,def _resnet_scope_name(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_feature_extractor_tf2_test.py,def _resnet_scope_name(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_feature_extractor_tf2_test.py,def _resnet_scope_name(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_feature_extractor_tf2_test.py,def _resnet_scope_name(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_keras_feature_extractor.py,"def build(self, input_shape):"
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_keras_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_resnet_v1_fpn_keras_feature_extractor.py,"def _extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_resnet_v1_ppn_feature_extractor.py,"def _filter_features(self, image_features):"
data/raw/repos\research\object_detection\models,ssd_resnet_v1_ppn_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_resnet_v1_ppn_feature_extractor.py,"def extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_resnet_v1_ppn_feature_extractor_testbase.py,def _scope_name(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_ppn_feature_extractor_testbase.py,def test_extract_features_returns_correct_shapes_289(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_ppn_feature_extractor_testbase.py,def test_extract_features_returns_correct_shapes_with_dynamic_inputs(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_ppn_feature_extractor_testbase.py,def test_extract_features_raises_error_with_invalid_image_size(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_ppn_feature_extractor_testbase.py,def test_preprocess_returns_correct_value_range(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_ppn_feature_extractor_testbase.py,def test_variables_only_created_in_scope(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_ppn_feature_extractor_tf1_test.py,def _scope_name(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_ppn_feature_extractor_tf1_test.py,def _scope_name(self):
data/raw/repos\research\object_detection\models,ssd_resnet_v1_ppn_feature_extractor_tf1_test.py,def _scope_name(self):
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor.py,"def _slice_shape_along_axis(self, shape, axis, groups):"
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor.py,"def _sep_conv(self, net, num_filters, kernel_size, stride, scope):"
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor.py,"def _upsample(self, net, num_filters, upsample_ratio, scope):"
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor.py,"def _downsample(self, net, num_filters, downsample_ratio, scope):"
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor.py,"def _no_resample(self, net, num_filters, scope):"
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor.py,"def _spaghetti_node(self, node, scope):"
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor.py,"def _spaghetti_edge(self, curr_node, prev_node, scope):"
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor.py,"def _spaghetti_stem_node(self, net, node, scope):"
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor.py,"def apply(self, net, scope='spaghetti_net'):"
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor.py,def _spaghettinet_edgetpu_s():
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor.py,def _spaghettinet_edgetpu_m():
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor.py,def _spaghettinet_edgetpu_l():
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor.py,def lookup_spaghetti_arch(arch):
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor.py,"def preprocess(self, resized_inputs):"
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor.py,"def extract_features(self, preprocessed_inputs):"
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor_tf1_test.py,"def _create_feature_extractor(self, arch_name, is_training=True):"
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor_tf1_test.py,def test_spaghettinet_edgetpu_s(self):
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor_tf1_test.py,def test_spaghettinet_edgetpu_m(self):
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor_tf1_test.py,def test_spaghettinet_edgetpu_l(self):
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor_tf1_test.py,"def _check_quantization(self, model_fn):"
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor_tf1_test.py,"def _test_spaghettinet_quantization(self, arch_name):"
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor_tf1_test.py,def model_fn(is_training):
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor_tf1_test.py,def test_spaghettinet_edgetpu_s_quantization(self):
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor_tf1_test.py,def test_spaghettinet_edgetpu_m_quantization(self):
data/raw/repos\research\object_detection\models,ssd_spaghettinet_feature_extractor_tf1_test.py,def test_spaghettinet_edgetpu_l_quantization(self):
data/raw/repos\research\object_detection\models\keras_models,convert_keras_models.py,def init_model(name):
data/raw/repos\research\object_detection\models\keras_models,convert_keras_models.py,def main(_):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,def _get_padding_for_kernel_size(kernel_size):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,def batchnorm():
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,"def __init__(self, out_channels, stride):"
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,"def __init__(self, out_channels_initial_conv, out_channels_residual_block):"
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,"def __init__(self, out_channels_initial_conv, out_channels_residual_block):"
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,"def _apply_blocks(inputs, blocks):"
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,def out_stride(self):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,def num_feature_outputs(self):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,def _layer_depth(layer):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,def _encoder_decoder_depth(network):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,def hourglass_depth(network):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,def hourglass_104():
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,"def hourglass_10(num_channels, initial_downsample=True):"
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,"def hourglass_20(num_channels, initial_downsample=True):"
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,"def hourglass_32(num_channels, initial_downsample=True):"
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,"def hourglass_52(num_channels, initial_downsample=True):"
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,"def hourglass_100(num_channels, initial_downsample=True):"
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,def hourglass_20_uniform_size(num_channels):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network.py,def hourglass_20_no_shortcut(num_channels):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network_tf2_test.py,def test_identity_layer(self):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network_tf2_test.py,def test_skip_conv_layer_stride_1(self):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network_tf2_test.py,def test_skip_conv_layer_stride_2(self):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network_tf2_test.py,"def test_conv_block(self, kernel_size):"
data/raw/repos\research\object_detection\models\keras_models,hourglass_network_tf2_test.py,def test_residual_block_stride_1(self):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network_tf2_test.py,def test_residual_block_stride_2(self):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network_tf2_test.py,def test_input_downsample_block(self):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network_tf2_test.py,def test_input_conv_block(self):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network_tf2_test.py,def test_encoder_decoder_block(self):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network_tf2_test.py,def test_hourglass_feature_extractor(self):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network_tf2_test.py,def test_hourglass_104(self):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network_tf2_test.py,def test_hourglass_10(self):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network_tf2_test.py,def test_hourglass_20(self):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network_tf2_test.py,def test_hourglass_32(self):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network_tf2_test.py,def test_hourglass_52(self):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network_tf2_test.py,def test_hourglass_20_uniform_size(self):
data/raw/repos\research\object_detection\models\keras_models,hourglass_network_tf2_test.py,def test_hourglass_100(self):
data/raw/repos\research\object_detection\models\keras_models,inception_resnet_v2.py,"def Conv2D(self, filters, kernel_size, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,inception_resnet_v2.py,"def MaxPooling2D(self, pool_size, strides, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,inception_resnet_v2.py,"def BatchNormalization(self, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,inception_resnet_v2.py,"def __getattr__(self, item):"
data/raw/repos\research\object_detection\models\keras_models,inception_resnet_v2_tf2_test.py,"def _get_variables(self, layer_names=None):"
data/raw/repos\research\object_detection\models\keras_models,inception_resnet_v2_tf2_test.py,def test_returns_correct_shapes_128(self):
data/raw/repos\research\object_detection\models\keras_models,inception_resnet_v2_tf2_test.py,def test_returns_correct_shapes_128_output_stride_8(self):
data/raw/repos\research\object_detection\models\keras_models,inception_resnet_v2_tf2_test.py,def test_hyperparam_override(self):
data/raw/repos\research\object_detection\models\keras_models,inception_resnet_v2_tf2_test.py,def test_variable_count(self):
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v1.py,"def _fixed_padding(inputs, kernel_size, rate=1):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v1.py,"def _FixedPaddingLayer(self, kernel_size, rate=1):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v1.py,"def Conv2D(self, filters, kernel_size, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v1.py,def padded_conv(features):
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v1.py,"def DepthwiseConv2D(self, kernel_size, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v1.py,def padded_depthwise_conv(features):
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v1.py,"def BatchNormalization(self, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v1.py,"def Input(self, shape):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v1.py,"def ReLU(self, *args, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v1.py,"def ZeroPadding2D(self, padding, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v1.py,"def __getattr__(self, item):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v1_tf2_test.py,def _build_conv_hyperparams(self):
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v1_tf2_test.py,"def _get_variables(self, depth_multiplier, layer_names=None):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v1_tf2_test.py,def test_returns_correct_shapes_128(self):
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v1_tf2_test.py,def test_returns_correct_shapes_299(self):
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v1_tf2_test.py,def test_hyperparam_override(self):
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v1_tf2_test.py,def test_variable_count(self):
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v2.py,"def _make_divisible(v, divisor, min_value=None):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v2.py,"def _FixedPaddingLayer(self, kernel_size):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v2.py,"def Conv2D(self, filters, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v2.py,def padded_conv(features):
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v2.py,"def DepthwiseConv2D(self, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v2.py,def padded_depthwise_conv(features):
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v2.py,"def BatchNormalization(self, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v2.py,"def Input(self, shape):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v2.py,"def ReLU(self, *args, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v2.py,"def ZeroPadding2D(self, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v2.py,"def __getattr__(self, item):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v2_tf2_test.py,def _build_conv_hyperparams(self):
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v2_tf2_test.py,"def _get_variables(self, depth_multiplier, layer_names=None):"
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v2_tf2_test.py,def test_returns_correct_shapes_128(self):
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v2_tf2_test.py,def test_returns_correct_shapes_299(self):
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v2_tf2_test.py,def test_hyperparam_override(self):
data/raw/repos\research\object_detection\models\keras_models,mobilenet_v2_tf2_test.py,def test_variable_count(self):
data/raw/repos\research\object_detection\models\keras_models,model_utils.py,"def get_conv_def(conv_defs, layer_name):"
data/raw/repos\research\object_detection\models\keras_models,model_utils.py,"def input_layer(shape, placeholder_with_default):"
data/raw/repos\research\object_detection\models\keras_models,nonlocal_block.py,"def build(self, input_shape):"
data/raw/repos\research\object_detection\models\keras_models,nonlocal_block.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\models\keras_models,nonlocal_block_tf2_test.py,"def test_run_nonlocal_block(self, pool_size, add_coord_conv):"
data/raw/repos\research\object_detection\models\keras_models,nonlocal_block_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\models\keras_models,resnet_v1.py,"def _fixed_padding(inputs, kernel_size, rate=1):"
data/raw/repos\research\object_detection\models\keras_models,resnet_v1.py,"def _FixedPaddingLayer(self, kernel_size, rate=1):"
data/raw/repos\research\object_detection\models\keras_models,resnet_v1.py,"def Conv2D(self, filters, kernel_size, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,resnet_v1.py,def padded_conv(features):
data/raw/repos\research\object_detection\models\keras_models,resnet_v1.py,"def Activation(self, *args, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,resnet_v1.py,"def BatchNormalization(self, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,resnet_v1.py,"def Input(self, shape):"
data/raw/repos\research\object_detection\models\keras_models,resnet_v1.py,"def MaxPooling2D(self, pool_size, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,resnet_v1.py,"def ZeroPadding2D(self, padding, **kwargs):"
data/raw/repos\research\object_detection\models\keras_models,resnet_v1.py,"def __getattr__(self, item):"
data/raw/repos\research\object_detection\models\keras_models,resnet_v1.py,"def stack_basic(x, filters, blocks, stride1=2, name=None):"
data/raw/repos\research\object_detection\models\keras_models,resnet_v1.py,def stack_fn(x):
data/raw/repos\research\object_detection\models\keras_models,resnet_v1.py,def stack_fn(x):
data/raw/repos\research\object_detection\models\keras_models,resnet_v1_tf2_test.py,def _build_conv_hyperparams(self):
data/raw/repos\research\object_detection\models\keras_models,resnet_v1_tf2_test.py,"def _get_variables(self, model_index):"
data/raw/repos\research\object_detection\models\keras_models,resnet_v1_tf2_test.py,def test_returns_correct_shapes_224(self):
data/raw/repos\research\object_detection\models\keras_models,resnet_v1_tf2_test.py,def test_hyperparam_override(self):
data/raw/repos\research\object_detection\models\keras_models,resnet_v1_tf2_test.py,def test_variable_count(self):
data/raw/repos\research\object_detection\models\keras_models,resnet_v1_tf2_test.py,"def test_output_shapes(self, resnet_type, output_layer_names):"
data/raw/repos\research\object_detection\models\keras_models\base_models,original_mobilenet_v2.py,def relu6(x):
data/raw/repos\research\object_detection\models\keras_models\base_models,original_mobilenet_v2.py,def preprocess_input(x):
data/raw/repos\research\object_detection\models\keras_models\base_models,original_mobilenet_v2.py,"def _make_divisible(v, divisor, min_value=None):"
data/raw/repos\research\object_detection\models\keras_models\base_models,original_mobilenet_v2.py,"def _inverted_res_block(inputs, expansion, stride, alpha, filters, block_id):"
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor.py,def __enter__(self):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor.py,"def __exit__(self, exc_type, exc_value, traceback):"
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor.py,def num_classes(self):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor.py,"def _predict(self, image_features, num_predictions_per_location_list):"
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor.py,def _arg_scope_func_key(op):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor.py,def num_classes(self):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor.py,"def _compute_base_tower(self, tower_name_scope, image_feature, feature_index):"
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor.py,"def _predict(self, image_features, num_predictions_per_location_list):"
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def _build_arg_scope_with_conv_hyperparams(self):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def test_get_boxes_for_five_aspect_ratios_per_location(self):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def test_get_boxes_for_one_aspect_ratio_per_location(self):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def test_use_depthwise_convolution(self):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def test_no_dangling_outputs(self):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def _build_arg_scope_with_conv_hyperparams(self):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def _build_conv_arg_scope_no_batch_norm(self):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def test_get_boxes_for_five_aspect_ratios_per_location(self):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def test_bias_predictions_to_background_with_sigmoid_score_conversion(self):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,"def graph_fn(image_features1, image_features2):"
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,"def graph_fn(image_features1, image_features2, image_features3):"
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,"def graph_fn(image_features1, image_features2):"
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,"def graph_fn(image_features1, image_features2):"
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,"def graph_fn(image_features1, image_features2):"
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def test_no_batchnorm_params_when_batchnorm_is_not_configured(self):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,"def graph_fn(image_features1, image_features2):"
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,"def graph_fn(image_features1, image_features2):"
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,"def graph_fn(image_features1, image_features2):"
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def test_other_heads_predictions(self):
data/raw/repos\research\object_detection\predictors,convolutional_box_predictor_tf1_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor.py,def __enter__(self):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor.py,"def __exit__(self, exc_type, exc_value, traceback):"
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor.py,"def build(self, input_shapes):"
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor.py,"def _predict(self, image_features, **kwargs):"
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor.py,"def _compute_base_tower(self, tower_name_scope, feature_index):"
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor.py,"def build(self, input_shapes):"
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor.py,"def _build_layers(tower_name_scope, feature_index):"
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor.py,"def _predict(self, image_features, **kwargs):"
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor.py,"def _apply_layers(base_tower_layers, image_feature):"
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,def _build_conv_hyperparams(self):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,def test_get_boxes_for_five_aspect_ratios_per_location(self):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,def test_get_boxes_for_one_aspect_ratio_per_location(self):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,def test_use_depthwise_convolution(self):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,"def _build_conv_hyperparams(self, add_batch_norm=True):"
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,def test_get_boxes_for_five_aspect_ratios_per_location(self):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,def test_bias_predictions_to_background_with_sigmoid_score_conversion(self):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,"def graph_fn(image_features1, image_features2):"
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,"def graph_fn(image_features1, image_features2, image_features3):"
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,"def graph_fn(image_features1, image_features2):"
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,"def graph_fn(image_features1, image_features2):"
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,"def graph_fn(image_features1, image_features2):"
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,def test_no_batchnorm_params_when_batchnorm_is_not_configured(self):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,"def graph_fn(image_features1, image_features2):"
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,"def graph_fn(image_features1, image_features2):"
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,"def graph_fn(image_features1, image_features2):"
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,def test_other_heads_predictions(self):
data/raw/repos\research\object_detection\predictors,convolutional_keras_box_predictor_tf2_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,mask_rcnn_box_predictor.py,def num_classes(self):
data/raw/repos\research\object_detection\predictors,mask_rcnn_box_predictor.py,def get_second_stage_prediction_heads(self):
data/raw/repos\research\object_detection\predictors,mask_rcnn_box_predictor.py,def get_third_stage_prediction_heads(self):
data/raw/repos\research\object_detection\predictors,mask_rcnn_box_predictor_tf1_test.py,def test_get_boxes_with_five_classes(self):
data/raw/repos\research\object_detection\predictors,mask_rcnn_box_predictor_tf1_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,mask_rcnn_box_predictor_tf1_test.py,def test_get_boxes_with_five_classes_share_box_across_classes(self):
data/raw/repos\research\object_detection\predictors,mask_rcnn_box_predictor_tf1_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,mask_rcnn_box_predictor_tf1_test.py,def test_value_error_on_predict_instance_masks_with_no_conv_hyperparms(self):
data/raw/repos\research\object_detection\predictors,mask_rcnn_box_predictor_tf1_test.py,def test_get_instance_masks(self):
data/raw/repos\research\object_detection\predictors,mask_rcnn_box_predictor_tf1_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,mask_rcnn_box_predictor_tf1_test.py,def test_do_not_return_instance_masks_without_request(self):
data/raw/repos\research\object_detection\predictors,mask_rcnn_keras_box_predictor.py,def num_classes(self):
data/raw/repos\research\object_detection\predictors,mask_rcnn_keras_box_predictor.py,def get_second_stage_prediction_heads(self):
data/raw/repos\research\object_detection\predictors,mask_rcnn_keras_box_predictor.py,def get_third_stage_prediction_heads(self):
data/raw/repos\research\object_detection\predictors,mask_rcnn_keras_box_predictor_tf2_test.py,def test_get_boxes_with_five_classes(self):
data/raw/repos\research\object_detection\predictors,mask_rcnn_keras_box_predictor_tf2_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,mask_rcnn_keras_box_predictor_tf2_test.py,def test_get_boxes_with_five_classes_share_box_across_classes(self):
data/raw/repos\research\object_detection\predictors,mask_rcnn_keras_box_predictor_tf2_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,mask_rcnn_keras_box_predictor_tf2_test.py,def test_get_instance_masks(self):
data/raw/repos\research\object_detection\predictors,mask_rcnn_keras_box_predictor_tf2_test.py,def graph_fn(image_features):
data/raw/repos\research\object_detection\predictors,mask_rcnn_keras_box_predictor_tf2_test.py,def test_do_not_return_instance_masks_without_request(self):
data/raw/repos\research\object_detection\predictors,rfcn_box_predictor.py,def num_classes(self):
data/raw/repos\research\object_detection\predictors,rfcn_box_predictor_tf1_test.py,def _build_arg_scope_with_conv_hyperparams(self):
data/raw/repos\research\object_detection\predictors,rfcn_box_predictor_tf1_test.py,def test_get_correct_box_encoding_and_class_prediction_shapes(self):
data/raw/repos\research\object_detection\predictors,rfcn_box_predictor_tf1_test.py,"def graph_fn(image_features, proposal_boxes):"
data/raw/repos\research\object_detection\predictors,rfcn_keras_box_predictor.py,def num_classes(self):
data/raw/repos\research\object_detection\predictors,rfcn_keras_box_predictor.py,"def _predict(self, image_features, proposal_boxes, **kwargs):"
data/raw/repos\research\object_detection\predictors,rfcn_keras_box_predictor_tf2_test.py,def _build_conv_hyperparams(self):
data/raw/repos\research\object_detection\predictors,rfcn_keras_box_predictor_tf2_test.py,def test_get_correct_box_encoding_and_class_prediction_shapes(self):
data/raw/repos\research\object_detection\predictors,rfcn_keras_box_predictor_tf2_test.py,"def graph_fn(image_features, proposal_boxes):"
data/raw/repos\research\object_detection\predictors\heads,box_head.py,"def predict(self, features, num_predictions_per_location=1):"
data/raw/repos\research\object_detection\predictors\heads,box_head.py,"def predict(self, features, num_predictions_per_location):"
data/raw/repos\research\object_detection\predictors\heads,box_head.py,"def predict(self, features, num_predictions_per_location):"
data/raw/repos\research\object_detection\predictors\heads,box_head_tf1_test.py,def test_prediction_size(self):
data/raw/repos\research\object_detection\predictors\heads,box_head_tf1_test.py,def test_prediction_size(self):
data/raw/repos\research\object_detection\predictors\heads,box_head_tf1_test.py,def test_prediction_size(self):
data/raw/repos\research\object_detection\predictors\heads,class_head.py,"def predict(self, features, num_predictions_per_location=1):"
data/raw/repos\research\object_detection\predictors\heads,class_head.py,"def predict(self, features, num_predictions_per_location):"
data/raw/repos\research\object_detection\predictors\heads,class_head.py,"def predict(self, features, num_predictions_per_location):"
data/raw/repos\research\object_detection\predictors\heads,class_head_tf1_test.py,def test_prediction_size(self):
data/raw/repos\research\object_detection\predictors\heads,class_head_tf1_test.py,def test_scope_name(self):
data/raw/repos\research\object_detection\predictors\heads,class_head_tf1_test.py,def test_prediction_size(self):
data/raw/repos\research\object_detection\predictors\heads,class_head_tf1_test.py,def test_scope_name(self):
data/raw/repos\research\object_detection\predictors\heads,class_head_tf1_test.py,def test_prediction_size(self):
data/raw/repos\research\object_detection\predictors\heads,class_head_tf1_test.py,def test_scope_name(self):
data/raw/repos\research\object_detection\predictors\heads,class_head_tf1_test.py,def test_softmax_score_converter(self):
data/raw/repos\research\object_detection\predictors\heads,class_head_tf1_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,head.py,def __init__(self):
data/raw/repos\research\object_detection\predictors\heads,head.py,"def predict(self, features, num_predictions_per_location):"
data/raw/repos\research\object_detection\predictors\heads,head.py,"def call(self, features):"
data/raw/repos\research\object_detection\predictors\heads,head.py,"def _predict(self, features):"
data/raw/repos\research\object_detection\predictors\heads,keras_box_head.py,"def _predict(self, features):"
data/raw/repos\research\object_detection\predictors\heads,keras_box_head.py,"def _predict(self, features):"
data/raw/repos\research\object_detection\predictors\heads,keras_box_head.py,"def _predict(self, features):"
data/raw/repos\research\object_detection\predictors\heads,keras_box_head_tf2_test.py,def _build_conv_hyperparams(self):
data/raw/repos\research\object_detection\predictors\heads,keras_box_head_tf2_test.py,def test_prediction_size_depthwise_false(self):
data/raw/repos\research\object_detection\predictors\heads,keras_box_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_box_head_tf2_test.py,def test_prediction_size_depthwise_true(self):
data/raw/repos\research\object_detection\predictors\heads,keras_box_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_box_head_tf2_test.py,def test_prediction_size(self):
data/raw/repos\research\object_detection\predictors\heads,keras_box_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_box_head_tf2_test.py,def _build_conv_hyperparams(self):
data/raw/repos\research\object_detection\predictors\heads,keras_box_head_tf2_test.py,def test_prediction_size_depthwise_false(self):
data/raw/repos\research\object_detection\predictors\heads,keras_box_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_box_head_tf2_test.py,def test_prediction_size_depthwise_true(self):
data/raw/repos\research\object_detection\predictors\heads,keras_box_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_box_head_tf2_test.py,def test_variable_count_depth_wise_true(self):
data/raw/repos\research\object_detection\predictors\heads,keras_box_head_tf2_test.py,def test_variable_count_depth_wise_False(self):
data/raw/repos\research\object_detection\predictors\heads,keras_class_head.py,"def _predict(self, features):"
data/raw/repos\research\object_detection\predictors\heads,keras_class_head.py,"def _predict(self, features):"
data/raw/repos\research\object_detection\predictors\heads,keras_class_head.py,"def _predict(self, features):"
data/raw/repos\research\object_detection\predictors\heads,keras_class_head_tf2_test.py,def _build_conv_hyperparams(self):
data/raw/repos\research\object_detection\predictors\heads,keras_class_head_tf2_test.py,def test_prediction_size_depthwise_false(self):
data/raw/repos\research\object_detection\predictors\heads,keras_class_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_class_head_tf2_test.py,def test_prediction_size_depthwise_true(self):
data/raw/repos\research\object_detection\predictors\heads,keras_class_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_class_head_tf2_test.py,def test_prediction_size(self):
data/raw/repos\research\object_detection\predictors\heads,keras_class_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_class_head_tf2_test.py,def _build_conv_hyperparams(self):
data/raw/repos\research\object_detection\predictors\heads,keras_class_head_tf2_test.py,def test_prediction_size_depthwise_false(self):
data/raw/repos\research\object_detection\predictors\heads,keras_class_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_class_head_tf2_test.py,def test_prediction_size_depthwise_true(self):
data/raw/repos\research\object_detection\predictors\heads,keras_class_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_class_head_tf2_test.py,def test_variable_count_depth_wise_true(self):
data/raw/repos\research\object_detection\predictors\heads,keras_class_head_tf2_test.py,def test_variable_count_depth_wise_False(self):
data/raw/repos\research\object_detection\predictors\heads,keras_class_head_tf2_test.py,def test_softmax_score_converter(self):
data/raw/repos\research\object_detection\predictors\heads,keras_class_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head.py,"def _predict(self, features):"
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head.py,"def build(self, input_shapes):"
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head.py,"def _predict(self, features):"
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head.py,"def _predict(self, features):"
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def _build_conv_hyperparams(self):
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def test_prediction_size_use_depthwise_false(self):
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def test_prediction_size_use_depthwise_true(self):
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def test_class_agnostic_prediction_size_use_depthwise_false(self):
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def test_class_agnostic_prediction_size_use_depthwise_true(self):
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def test_prediction_size(self):
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def test_prediction_size_with_convolve_then_upsample(self):
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def _build_conv_hyperparams(self):
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def test_prediction_size(self):
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def test_class_agnostic_prediction_size(self):
data/raw/repos\research\object_detection\predictors\heads,keras_mask_head_tf2_test.py,def graph_fn():
data/raw/repos\research\object_detection\predictors\heads,keypoint_head.py,"def predict(self, features, num_predictions_per_location=1):"
data/raw/repos\research\object_detection\predictors\heads,keypoint_head_tf1_test.py,def test_prediction_size(self):
data/raw/repos\research\object_detection\predictors\heads,mask_head.py,"def predict(self, features, num_predictions_per_location=1):"
data/raw/repos\research\object_detection\predictors\heads,mask_head.py,"def predict(self, features, num_predictions_per_location):"
data/raw/repos\research\object_detection\predictors\heads,mask_head.py,"def predict(self, features, num_predictions_per_location):"
data/raw/repos\research\object_detection\predictors\heads,mask_head_tf1_test.py,def test_prediction_size(self):
data/raw/repos\research\object_detection\predictors\heads,mask_head_tf1_test.py,def test_prediction_size_with_convolve_then_upsample(self):
data/raw/repos\research\object_detection\predictors\heads,mask_head_tf1_test.py,def test_prediction_size(self):
data/raw/repos\research\object_detection\predictors\heads,mask_head_tf1_test.py,def test_class_agnostic_prediction_size(self):
data/raw/repos\research\object_detection\predictors\heads,mask_head_tf1_test.py,def test_prediction_size(self):
data/raw/repos\research\object_detection\predictors\heads,mask_head_tf1_test.py,def test_class_agnostic_prediction_size(self):
data/raw/repos\research\object_detection\tpu_exporters,export_saved_model_tpu.py,def main(argv):
data/raw/repos\research\object_detection\tpu_exporters,export_saved_model_tpu_lib.py,def parse_pipeline_config(pipeline_config_file):
data/raw/repos\research\object_detection\tpu_exporters,export_saved_model_tpu_lib_tf1_test.py,def get_path(path_suffix):
data/raw/repos\research\object_detection\tpu_exporters,faster_rcnn.py,def modify_config(pipeline_config):
data/raw/repos\research\object_detection\tpu_exporters,faster_rcnn.py,def get_prediction_tensor_shapes(pipeline_config):
data/raw/repos\research\object_detection\tpu_exporters,faster_rcnn.py,"def tpu_subgraph_predict_fn(preprocessed_inputs, true_image_shapes):"
data/raw/repos\research\object_detection\tpu_exporters,faster_rcnn.py,def tpu_subgraph_predict():
data/raw/repos\research\object_detection\tpu_exporters,ssd.py,def get_prediction_tensor_shapes(pipeline_config):
data/raw/repos\research\object_detection\tpu_exporters,ssd.py,"def recover_shape(preprocessed_inputs, prediction_outputs, shapes_info):"
data/raw/repos\research\object_detection\tpu_exporters,ssd.py,"def predict_tpu_subgraph(preprocessed_inputs, true_image_shapes):"
data/raw/repos\research\object_detection\tpu_exporters,ssd.py,def predict_tpu():
data/raw/repos\research\object_detection\tpu_exporters,utils.py,def bfloat16_to_float32(tensor):
data/raw/repos\research\object_detection\tpu_exporters,utils.py,def bfloat16_to_float32_nested(bfloat16_tensor_dict):
data/raw/repos\research\object_detection\tpu_exporters,utils_test.py,def testBfloat16ToFloat32(self):
data/raw/repos\research\object_detection\tpu_exporters,utils_test.py,def testOtherDtypesNotConverted(self):
data/raw/repos\research\object_detection\tpu_exporters,utils_test.py,def testBfloat16ToFloat32Nested(self):
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def policy_v0():
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def policy_v1():
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def policy_vtest():
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def policy_v2():
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def policy_v3():
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def blend(image1, image2, factor):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def cutout(image, pad_size, replace=0):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def solarize(image, threshold=128):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def solarize_add(image, addition=0, threshold=128):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def color(image, factor):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def contrast(image, factor):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def brightness(image, factor):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def posterize(image, bits):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def rotate(image, degrees, replace):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def clip_y(val):
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def clip_x(val):
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def _clip_bbox(min_y, min_x, max_y, max_x):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def _check_bbox_area(min_y, min_x, max_y, max_x, delta=0.05):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def _adjust_bbox_boundaries(min_coord, max_coord):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def _scale_bbox_only_op_probability(prob):
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def _apply_bbox_augmentation(image, bbox, augmentation_func, *args):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def _concat_bbox(bbox, bboxes):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def rotate_only_bboxes(image, bboxes, prob, degrees, replace):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def shear_x_only_bboxes(image, bboxes, prob, level, replace):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def shear_y_only_bboxes(image, bboxes, prob, level, replace):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def translate_x_only_bboxes(image, bboxes, prob, pixels, replace):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def translate_y_only_bboxes(image, bboxes, prob, pixels, replace):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def flip_only_bboxes(image, bboxes, prob):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def solarize_only_bboxes(image, bboxes, prob, threshold):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def equalize_only_bboxes(image, bboxes, prob):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def cutout_only_bboxes(image, bboxes, prob, pad_size, replace):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def _rotate_bbox(bbox, image_height, image_width, degrees):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def rotate_with_bboxes(image, bboxes, degrees, replace):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def translate_x(image, pixels, replace):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def translate_y(image, pixels, replace):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def _shift_bbox(bbox, image_height, image_width, pixels, shift_horizontal):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def translate_bbox(image, bboxes, pixels, replace, shift_horizontal):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def shear_x(image, level, replace):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def shear_y(image, level, replace):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def _shear_bbox(bbox, image_height, image_width, level, shear_horizontal):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def shear_with_bboxes(image, bboxes, level, replace, shear_horizontal):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def autocontrast(image):
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def scale_channel(image):
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def scale_values(im):
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def sharpness(image, factor):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def equalize(image):
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def scale_channel(im, c):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def build_lut(histo, step):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def wrap(image):
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def unwrap(image, replace):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def _cutout_inside_bbox(image, bbox, pad_fraction):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def bbox_cutout(image, bboxes, pad_fraction, replace_with_mean):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def apply_bbox_cutout(image, bboxes, pad_fraction):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def _randomly_negate_tensor(tensor):
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def _rotate_level_to_arg(level):
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def _shrink_level_to_arg(level):
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def _enhance_level_to_arg(level):
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def _shear_level_to_arg(level):
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def _translate_level_to_arg(level, translate_const):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def _bbox_cutout_level_to_arg(level, hparams):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def level_to_arg(hparams):
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def bbox_wrapper(func):
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def wrapper(images, bboxes, *args, **kwargs):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def _parse_policy_info(name, prob, level, replace_value, augmentation_hparams):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def _apply_func_with_prob(func, image, args, prob, bboxes):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def select_and_apply_random_policy(policies, image, bboxes):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,def make_final_policy(tf_policy_):
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def final_policy(image_, bboxes_):"
data/raw/repos\research\object_detection\utils,autoaugment_utils.py,"def distort_image_with_autoaugment(image, bboxes, augmentation_name):"
data/raw/repos\research\object_detection\utils,bifpn_utils.py,"def create_upsample_feature_map_ops(scale, use_native_resize_op, name):"
data/raw/repos\research\object_detection\utils,bifpn_utils.py,def resize_nearest_neighbor(image):
data/raw/repos\research\object_detection\utils,bifpn_utils.py,def nearest_neighbor_upsampling(image):
data/raw/repos\research\object_detection\utils,bifpn_utils.py,"def __init__(self, combine_method, **kwargs):"
data/raw/repos\research\object_detection\utils,bifpn_utils.py,"def _combine_weighted_sum(self, inputs):"
data/raw/repos\research\object_detection\utils,bifpn_utils.py,"def _combine_attention(self, inputs):"
data/raw/repos\research\object_detection\utils,bifpn_utils.py,"def _combine_fast_attention(self, inputs):"
data/raw/repos\research\object_detection\utils,bifpn_utils.py,"def build(self, input_shape):"
data/raw/repos\research\object_detection\utils,bifpn_utils.py,"def call(self, inputs):"
data/raw/repos\research\object_detection\utils,bifpn_utils.py,"def compute_output_shape(self, input_shape):"
data/raw/repos\research\object_detection\utils,category_util.py,def load_categories_from_csv_file(csv_path):
data/raw/repos\research\object_detection\utils,category_util.py,"def save_categories_to_csv_file(categories, csv_path):"
data/raw/repos\research\object_detection\utils,category_util_test.py,def test_load_categories_from_csv_file(self):
data/raw/repos\research\object_detection\utils,category_util_test.py,def test_save_categories_to_csv_file(self):
data/raw/repos\research\object_detection\utils,colab_utils.py,def image_from_numpy(image):
data/raw/repos\research\object_detection\utils,colab_utils.py,"def draw_bbox(image_urls, callbackId):"
data/raw/repos\research\object_detection\utils,colab_utils.py,def dictToList(input_bbox):
data/raw/repos\research\object_detection\utils,colab_utils.py,"def callbackFunction(annotations: List[List[Dict[str, float]]]):"
data/raw/repos\research\object_detection\utils,config_util.py,def get_image_resizer_config(model_config):
data/raw/repos\research\object_detection\utils,config_util.py,def get_spatial_image_size(image_resizer_config):
data/raw/repos\research\object_detection\utils,config_util.py,def get_max_num_context_features(model_config):
data/raw/repos\research\object_detection\utils,config_util.py,def get_context_feature_length(model_config):
data/raw/repos\research\object_detection\utils,config_util.py,"def get_configs_from_pipeline_file(pipeline_config_path, config_override=None):"
data/raw/repos\research\object_detection\utils,config_util.py,def update_fine_tune_checkpoint_type(train_config):
data/raw/repos\research\object_detection\utils,config_util.py,def create_configs_from_pipeline_proto(pipeline_config):
data/raw/repos\research\object_detection\utils,config_util.py,def get_graph_rewriter_config_from_file(graph_rewriter_config_file):
data/raw/repos\research\object_detection\utils,config_util.py,def create_pipeline_proto_from_configs(configs):
data/raw/repos\research\object_detection\utils,config_util.py,"def save_pipeline_config(pipeline_config, directory):"
data/raw/repos\research\object_detection\utils,config_util.py,def get_number_of_classes(model_config):
data/raw/repos\research\object_detection\utils,config_util.py,def get_optimizer_type(train_config):
data/raw/repos\research\object_detection\utils,config_util.py,def get_learning_rate_type(optimizer_config):
data/raw/repos\research\object_detection\utils,config_util.py,def _is_generic_key(key):
data/raw/repos\research\object_detection\utils,config_util.py,def _check_and_convert_legacy_input_config_key(key):
data/raw/repos\research\object_detection\utils,config_util.py,"def check_and_parse_input_config_key(configs, key):"
data/raw/repos\research\object_detection\utils,config_util.py,"def merge_external_params_with_configs(configs, hparams=None, kwargs_dict=None):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _maybe_update_config_with_key_value(configs, key, value):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_tf_record_input_path(input_config, input_path):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_initial_learning_rate(configs, learning_rate):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_batch_size(configs, batch_size):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _validate_message_has_field(message, field):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_generic(configs, key, value):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_momentum_optimizer_value(configs, momentum):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_classification_localization_weight_ratio(configs, ratio):"
data/raw/repos\research\object_detection\utils,config_util.py,def _get_classification_loss(model_config):
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_focal_loss_gamma(configs, gamma):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_focal_loss_alpha(configs, alpha):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_train_steps(configs, train_steps):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_all_eval_input_configs(configs, field, value):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_label_map_path(configs, label_map_path):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_mask_type(configs, mask_type):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_use_moving_averages(configs, use_moving_averages):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_retain_original_images(eval_config, retain_original_images):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_use_bfloat16(configs, use_bfloat16):"
data/raw/repos\research\object_detection\utils,config_util.py,"def remove_unnecessary_ema(variables_to_restore, no_ema_collection=None):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_num_classes(model_config, num_classes):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_sample_from_datasets_weights(input_reader_config, weights):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_peak_max_pool_kernel_size(model_config, kernel_size):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_candidate_search_scale(model_config, search_scale):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_candidate_ranking_mode(model_config, mode):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_score_distance_offset(model_config, offset):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_box_scale(model_config, box_scale):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_keypoint_candidate_score_threshold(model_config, threshold):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_rescore_instances(model_config, should_rescore):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_unmatched_keypoint_score(model_config, score):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_score_distance_multiplier(model_config, score_distance_multiplier):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_std_dev_multiplier(model_config, std_dev_multiplier):"
data/raw/repos\research\object_detection\utils,config_util.py,"def _update_rescoring_threshold(model_config, rescoring_threshold):"
data/raw/repos\research\object_detection\utils,config_util_test.py,"def _write_config(config, config_path):"
data/raw/repos\research\object_detection\utils,config_util_test.py,"def _update_optimizer_with_constant_learning_rate(optimizer, learning_rate):"
data/raw/repos\research\object_detection\utils,config_util_test.py,"def _create_and_load_test_configs(self, pipeline_config):"
data/raw/repos\research\object_detection\utils,config_util_test.py,def test_get_configs_from_pipeline_file(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def test_create_configs_from_pipeline_proto(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def test_create_pipeline_proto_from_configs(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def test_save_pipeline_config(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def test_get_configs_from_multiple_files(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,"def _assertOptimizerWithNewLearningRate(self, optimizer_name):"
data/raw/repos\research\object_detection\utils,config_util_test.py,def testRMSPropWithNewLearingRate(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testMomentumOptimizerWithNewLearningRate(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testAdamOptimizerWithNewLearningRate(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testGenericConfigOverride(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testNewBatchSize(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testNewBatchSizeWithClipping(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testOverwriteBatchSizeWithKeyValue(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testOverwriteSampleFromDatasetWeights(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testOverwriteSampleFromDatasetWeightsWrongLength(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testKeyValueOverrideBadKey(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testOverwriteBatchSizeWithBadValueType(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testNewMomentumOptimizerValue(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testNewClassificationLocalizationWeightRatio(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testNewFocalLossParameters(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testMergingKeywordArguments(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testGetNumberOfClasses(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testNewTrainInputPath(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testNewTrainInputPathList(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testNewLabelMapPath(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testDontOverwriteEmptyLabelMapPath(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testNewMaskType(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testUseMovingAverageForEval(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def  testGetImageResizerConfig(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testGetSpatialImageSizeFromFixedShapeResizerConfig(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testGetSpatialImageSizeFromAspectPreservingResizerConfig(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testGetSpatialImageSizeFromAspectPreservingResizerDynamic(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testGetSpatialImageSizeFromConditionalShapeResizer(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testGetMaxNumContextFeaturesFromModelConfig(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testGetContextFeatureLengthFromModelConfig(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testEvalShuffle(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testTrainShuffle(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testOverWriteRetainOriginalImages(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testOverwriteAllEvalSampling(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testOverwriteAllEvalNumEpochs(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testUpdateMaskTypeForAllInputConfigs(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testErrorOverwritingMultipleInputConfig(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testCheckAndParseInputConfigKey(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testUpdateInputReaderConfigSuccess(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testUpdateInputReaderConfigErrors(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testOverWriteRetainOriginalImageAdditionalChannels(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testUpdateNumClasses(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testRemoveUnnecessaryEma(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testUpdateRescoreInstances(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testUpdateRescoreInstancesWithBooleanString(self):
data/raw/repos\research\object_detection\utils,config_util_test.py,def testUpdateRescoreInstancesWithMultipleTasks(self):
data/raw/repos\research\object_detection\utils,context_manager.py,def __enter__(self):
data/raw/repos\research\object_detection\utils,context_manager.py,"def __exit__(self, exec_type, exec_value, traceback):"
data/raw/repos\research\object_detection\utils,context_manager_test.py,def test_identity_context_manager(self):
data/raw/repos\research\object_detection\utils,dataset_util.py,def int64_feature(value):
data/raw/repos\research\object_detection\utils,dataset_util.py,def int64_list_feature(value):
data/raw/repos\research\object_detection\utils,dataset_util.py,def bytes_feature(value):
data/raw/repos\research\object_detection\utils,dataset_util.py,def bytes_list_feature(value):
data/raw/repos\research\object_detection\utils,dataset_util.py,def float_feature(value):
data/raw/repos\research\object_detection\utils,dataset_util.py,def float_list_feature(value):
data/raw/repos\research\object_detection\utils,dataset_util.py,def read_examples_list(path):
data/raw/repos\research\object_detection\utils,dataset_util.py,def recursive_parse_xml_to_dict(xml):
data/raw/repos\research\object_detection\utils,dataset_util_test.py,def test_read_examples_list(self):
data/raw/repos\research\object_detection\utils,json_utils.py,"def FormatFloat(json_str, float_digits):"
data/raw/repos\research\object_detection\utils,json_utils.py,def MRound(match):
data/raw/repos\research\object_detection\utils,json_utils.py,"def Dump(obj, fid, float_digits=-1, **params):"
data/raw/repos\research\object_detection\utils,json_utils.py,"def Dumps(obj, float_digits=-1, **params):"
data/raw/repos\research\object_detection\utils,json_utils.py,def PrettyParams(**params):
data/raw/repos\research\object_detection\utils,json_utils_test.py,def testDumpReasonablePrecision(self):
data/raw/repos\research\object_detection\utils,json_utils_test.py,def testDumpPassExtraParams(self):
data/raw/repos\research\object_detection\utils,json_utils_test.py,def testDumpZeroPrecision(self):
data/raw/repos\research\object_detection\utils,json_utils_test.py,def testDumpUnspecifiedPrecision(self):
data/raw/repos\research\object_detection\utils,json_utils_test.py,def testDumpsReasonablePrecision(self):
data/raw/repos\research\object_detection\utils,json_utils_test.py,def testDumpsPassExtraParams(self):
data/raw/repos\research\object_detection\utils,json_utils_test.py,def testDumpsZeroPrecision(self):
data/raw/repos\research\object_detection\utils,json_utils_test.py,def testDumpsUnspecifiedPrecision(self):
data/raw/repos\research\object_detection\utils,json_utils_test.py,def testPrettyParams(self):
data/raw/repos\research\object_detection\utils,json_utils_test.py,def testPrettyParamsExtraParamsInside(self):
data/raw/repos\research\object_detection\utils,json_utils_test.py,def testPrettyParamsExtraParamsOutside(self):
data/raw/repos\research\object_detection\utils,label_map_util.py,def _validate_label_map(label_map):
data/raw/repos\research\object_detection\utils,label_map_util.py,def create_category_index(categories):
data/raw/repos\research\object_detection\utils,label_map_util.py,def get_max_label_map_index(label_map):
data/raw/repos\research\object_detection\utils,label_map_util.py,"def load_labelmap(path, validator=None):"
data/raw/repos\research\object_detection\utils,label_map_util.py,def get_keypoint_label_map_dict(label_map_path_or_proto):
data/raw/repos\research\object_detection\utils,label_map_util.py,def get_graph_relations_tensor(graph_relations):
data/raw/repos\research\object_detection\utils,label_map_util.py,"def create_categories_from_labelmap(label_map_path, use_display_name=True):"
data/raw/repos\research\object_detection\utils,label_map_util.py,"def create_category_index_from_labelmap(label_map_path, use_display_name=True):"
data/raw/repos\research\object_detection\utils,label_map_util.py,def create_class_agnostic_category_index():
data/raw/repos\research\object_detection\utils,label_map_util_test.py,"def _generate_label_map(self, num_classes):"
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_get_label_map_dict(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_get_keypoint_label_map_dict(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_get_keypoint_label_map_dict_invalid(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_get_label_map_dict_from_proto(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_get_label_map_dict_display(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_load_bad_label_map(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_load_label_map_with_background(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_get_label_map_dict_with_fill_in_gaps_and_background(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_keep_categories_with_unique_id(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_convert_label_map_to_categories_no_label_map(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_convert_label_map_to_categories_lvis_frequency_and_counts(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_convert_label_map_to_categories(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_convert_label_map_with_keypoints_to_categories(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_disallow_duplicate_keypoint_ids(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_convert_label_map_to_categories_with_few_classes(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_get_max_label_map_index(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_create_category_index(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_create_categories_from_labelmap(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_create_category_index_from_labelmap(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_create_category_index_from_labelmap_display(self):
data/raw/repos\research\object_detection\utils,label_map_util_test.py,def test_get_label_map_hierarchy_lut(self):
data/raw/repos\research\object_detection\utils,learning_schedules.py,def _learning_rate_return_value(eager_decay_rate):
data/raw/repos\research\object_detection\utils,learning_schedules.py,def eager_decay_rate():
data/raw/repos\research\object_detection\utils,learning_schedules.py,def eager_decay_rate():
data/raw/repos\research\object_detection\utils,learning_schedules.py,def eager_decay_rate():
data/raw/repos\research\object_detection\utils,learning_schedules.py,"def manual_stepping(global_step, boundaries, rates, warmup=False):"
data/raw/repos\research\object_detection\utils,learning_schedules.py,def eager_decay_rate():
data/raw/repos\research\object_detection\utils,learning_schedules_test.py,def testExponentialDecayWithBurnin(self):
data/raw/repos\research\object_detection\utils,learning_schedules_test.py,def graph_fn(global_step):
data/raw/repos\research\object_detection\utils,learning_schedules_test.py,def testExponentialDecayWithWarmup(self):
data/raw/repos\research\object_detection\utils,learning_schedules_test.py,def graph_fn(global_step):
data/raw/repos\research\object_detection\utils,learning_schedules_test.py,def testCosineDecayWithWarmup(self):
data/raw/repos\research\object_detection\utils,learning_schedules_test.py,def graph_fn(global_step):
data/raw/repos\research\object_detection\utils,learning_schedules_test.py,def testCosineDecayAfterTotalSteps(self):
data/raw/repos\research\object_detection\utils,learning_schedules_test.py,def graph_fn(global_step):
data/raw/repos\research\object_detection\utils,learning_schedules_test.py,def testCosineDecayWithHoldBaseLearningRateSteps(self):
data/raw/repos\research\object_detection\utils,learning_schedules_test.py,def graph_fn(global_step):
data/raw/repos\research\object_detection\utils,learning_schedules_test.py,def testManualStepping(self):
data/raw/repos\research\object_detection\utils,learning_schedules_test.py,def graph_fn(global_step):
data/raw/repos\research\object_detection\utils,learning_schedules_test.py,def testManualSteppingWithWarmup(self):
data/raw/repos\research\object_detection\utils,learning_schedules_test.py,def graph_fn(global_step):
data/raw/repos\research\object_detection\utils,learning_schedules_test.py,def testManualSteppingWithZeroBoundaries(self):
data/raw/repos\research\object_detection\utils,learning_schedules_test.py,def graph_fn(global_step):
data/raw/repos\research\object_detection\utils,metrics.py,"def compute_precision_recall(scores, labels, num_gt):"
data/raw/repos\research\object_detection\utils,metrics.py,"def compute_average_precision(precision, recall):"
data/raw/repos\research\object_detection\utils,metrics.py,"def compute_median_rank_at_k(tp_fp_list, k):"
data/raw/repos\research\object_detection\utils,metrics.py,"def compute_recall_at_k(tp_fp_list, num_gt, k):"
data/raw/repos\research\object_detection\utils,metrics_test.py,def test_compute_cor_loc(self):
data/raw/repos\research\object_detection\utils,metrics_test.py,def test_compute_cor_loc_nans(self):
data/raw/repos\research\object_detection\utils,metrics_test.py,def test_compute_precision_recall(self):
data/raw/repos\research\object_detection\utils,metrics_test.py,def test_compute_precision_recall_float(self):
data/raw/repos\research\object_detection\utils,metrics_test.py,def test_compute_average_precision(self):
data/raw/repos\research\object_detection\utils,metrics_test.py,def test_compute_precision_recall_and_ap_no_groundtruth(self):
data/raw/repos\research\object_detection\utils,metrics_test.py,def test_compute_recall_at_k(self):
data/raw/repos\research\object_detection\utils,metrics_test.py,def test_compute_median_rank_at_k(self):
data/raw/repos\research\object_detection\utils,model_util.py,"def extract_submodel(model, inputs, outputs, name=None):"
data/raw/repos\research\object_detection\utils,model_util.py,def _recurse_in_model(tensor):
data/raw/repos\research\object_detection\utils,model_util_tf2_test.py,def test_simple_model(self):
data/raw/repos\research\object_detection\utils,np_box_list.py,"def __init__(self, data):"
data/raw/repos\research\object_detection\utils,np_box_list.py,def num_boxes(self):
data/raw/repos\research\object_detection\utils,np_box_list.py,def get_extra_fields(self):
data/raw/repos\research\object_detection\utils,np_box_list.py,"def has_field(self, field):"
data/raw/repos\research\object_detection\utils,np_box_list.py,"def add_field(self, field, field_data):"
data/raw/repos\research\object_detection\utils,np_box_list.py,def get(self):
data/raw/repos\research\object_detection\utils,np_box_list.py,"def get_field(self, field):"
data/raw/repos\research\object_detection\utils,np_box_list.py,def get_coordinates(self):
data/raw/repos\research\object_detection\utils,np_box_list.py,"def _is_valid_boxes(self, data):"
data/raw/repos\research\object_detection\utils,np_box_list_ops.py,def area(boxlist):
data/raw/repos\research\object_detection\utils,np_box_list_ops.py,"def intersection(boxlist1, boxlist2):"
data/raw/repos\research\object_detection\utils,np_box_list_ops.py,"def iou(boxlist1, boxlist2):"
data/raw/repos\research\object_detection\utils,np_box_list_ops.py,"def ioa(boxlist1, boxlist2):"
data/raw/repos\research\object_detection\utils,np_box_list_ops.py,"def gather(boxlist, indices, fields=None):"
data/raw/repos\research\object_detection\utils,np_box_list_ops.py,"def sort_by_field(boxlist, field, order=SortOrder.DESCEND):"
data/raw/repos\research\object_detection\utils,np_box_list_ops.py,"def scale(boxlist, y_scale, x_scale):"
data/raw/repos\research\object_detection\utils,np_box_list_ops.py,"def clip_to_window(boxlist, window, filter_nonoverlapping=True):"
data/raw/repos\research\object_detection\utils,np_box_list_ops.py,"def prune_non_overlapping_boxes(boxlist1, boxlist2, minoverlap=0.0):"
data/raw/repos\research\object_detection\utils,np_box_list_ops.py,"def prune_outside_window(boxlist, window):"
data/raw/repos\research\object_detection\utils,np_box_list_ops.py,"def concatenate(boxlists, fields=None):"
data/raw/repos\research\object_detection\utils,np_box_list_ops.py,"def filter_scores_greater_than(boxlist, thresh):"
data/raw/repos\research\object_detection\utils,np_box_list_ops.py,"def change_coordinate_frame(boxlist, window):"
data/raw/repos\research\object_detection\utils,np_box_list_ops.py,"def _copy_extra_fields(boxlist_to_copy_to, boxlist_to_copy_from):"
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_area(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_intersection(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_iou(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_ioa(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_scale(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_clip_to_window(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_prune_outside_window(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_concatenate(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_change_coordinate_frame(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_filter_scores_greater_than(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_gather_with_out_of_range_indices(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_gather_with_invalid_multidimensional_indices(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_gather_without_fields_specified(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_gather_with_invalid_field_specified(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_gather_with_fields_specified(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_with_invalid_field(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_with_invalid_sorting_order(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_with_descending_sorting(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_with_ascending_sorting(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_with_no_scores_field(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_nms_disabled_max_output_size_equals_three(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_select_from_three_clusters(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_select_at_most_two_from_three_clusters(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_select_at_most_thirty_from_three_clusters(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_select_from_ten_indentical_boxes(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_different_iou_threshold(self):
data/raw/repos\research\object_detection\utils,np_box_list_ops_test.py,def test_multiclass_nms(self):
data/raw/repos\research\object_detection\utils,np_box_list_test.py,def test_invalid_box_data(self):
data/raw/repos\research\object_detection\utils,np_box_list_test.py,def test_has_field_with_existed_field(self):
data/raw/repos\research\object_detection\utils,np_box_list_test.py,def test_has_field_with_nonexisted_field(self):
data/raw/repos\research\object_detection\utils,np_box_list_test.py,def test_get_field_with_existed_field(self):
data/raw/repos\research\object_detection\utils,np_box_list_test.py,def test_get_field_with_nonexited_field(self):
data/raw/repos\research\object_detection\utils,np_box_list_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,np_box_list_test.py,def test_add_already_existed_field(self):
data/raw/repos\research\object_detection\utils,np_box_list_test.py,def test_add_invalid_field_data(self):
data/raw/repos\research\object_detection\utils,np_box_list_test.py,def test_add_single_dimensional_field_data(self):
data/raw/repos\research\object_detection\utils,np_box_list_test.py,def test_add_multi_dimensional_field_data(self):
data/raw/repos\research\object_detection\utils,np_box_list_test.py,def test_get_extra_fields(self):
data/raw/repos\research\object_detection\utils,np_box_list_test.py,def test_get_coordinates(self):
data/raw/repos\research\object_detection\utils,np_box_list_test.py,def test_num_boxes(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list.py,"def __init__(self, box_data, mask_data):"
data/raw/repos\research\object_detection\utils,np_box_mask_list.py,def get_masks(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops.py,def box_list_to_box_mask_list(boxlist):
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops.py,def area(box_mask_list):
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops.py,"def intersection(box_mask_list1, box_mask_list2):"
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops.py,"def iou(box_mask_list1, box_mask_list2):"
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops.py,"def ioa(box_mask_list1, box_mask_list2):"
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops.py,"def gather(box_mask_list, indices, fields=None):"
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops.py,"def prune_non_overlapping_masks(box_mask_list1, box_mask_list2, minoverlap=0.0):"
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops.py,"def concatenate(box_mask_lists, fields=None):"
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops.py,"def filter_scores_greater_than(box_mask_list, thresh):"
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops_test.py,def test_area(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops_test.py,def test_intersection(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops_test.py,def test_iou(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops_test.py,def test_ioa(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops_test.py,def test_with_no_scores_field(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops_test.py,def test_nms_disabled_max_output_size_equals_one(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_ops_test.py,def test_multiclass_nms(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_test.py,def test_invalid_box_mask_data(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_test.py,def test_has_field_with_existed_field(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_test.py,def test_has_field_with_nonexisted_field(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_test.py,def test_get_field_with_existed_field(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_test.py,def test_get_field_with_nonexited_field(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_test.py,def test_add_already_existed_field_bbox(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_test.py,def test_add_already_existed_field_mask(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_test.py,def test_add_invalid_field_data(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_test.py,def test_add_single_dimensional_field_data(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_test.py,def test_add_multi_dimensional_field_data(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_test.py,def test_get_extra_fields(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_test.py,def test_get_coordinates(self):
data/raw/repos\research\object_detection\utils,np_box_mask_list_test.py,def test_num_boxes(self):
data/raw/repos\research\object_detection\utils,np_box_ops.py,def area(boxes):
data/raw/repos\research\object_detection\utils,np_box_ops.py,"def intersection(boxes1, boxes2):"
data/raw/repos\research\object_detection\utils,np_box_ops.py,"def iou(boxes1, boxes2):"
data/raw/repos\research\object_detection\utils,np_box_ops.py,"def ioa(boxes1, boxes2):"
data/raw/repos\research\object_detection\utils,np_box_ops_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,np_box_ops_test.py,def testArea(self):
data/raw/repos\research\object_detection\utils,np_box_ops_test.py,def testIntersection(self):
data/raw/repos\research\object_detection\utils,np_box_ops_test.py,def testIOU(self):
data/raw/repos\research\object_detection\utils,np_box_ops_test.py,def testIOA(self):
data/raw/repos\research\object_detection\utils,np_mask_ops.py,def area(masks):
data/raw/repos\research\object_detection\utils,np_mask_ops.py,"def intersection(masks1, masks2):"
data/raw/repos\research\object_detection\utils,np_mask_ops.py,"def iou(masks1, masks2):"
data/raw/repos\research\object_detection\utils,np_mask_ops.py,"def ioa(masks1, masks2):"
data/raw/repos\research\object_detection\utils,np_mask_ops_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,np_mask_ops_test.py,def testArea(self):
data/raw/repos\research\object_detection\utils,np_mask_ops_test.py,def testIntersection(self):
data/raw/repos\research\object_detection\utils,np_mask_ops_test.py,def testIOU(self):
data/raw/repos\research\object_detection\utils,np_mask_ops_test.py,def testIOA(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def __init__(self, categories):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def observe_result_dict_for_single_example(self, eval_dict):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def add_single_ground_truth_image_info(self, image_id, groundtruth_dict):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def add_single_detected_image_info(self, image_id, detections_dict):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def get_estimator_eval_metric_ops(self, eval_dict):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,def evaluate(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,def clear(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,def get_internal_state(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def merge_internal_state(self, image_ids, state_tuple):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,def _build_metric_names(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def add_single_ground_truth_image_info(self, image_id, groundtruth_dict):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def add_single_detected_image_info(self, image_id, detections_dict):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,def evaluate(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,def clear(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def add_eval_dict(self, eval_dict):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def update_op(image_id, *eval_dict_batched_as_list):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def get_estimator_eval_metric_ops(self, eval_dict):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,def first_value_func():
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,def value_func_factory(metric_name):
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,def value_func():
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def __init__(self, categories, matching_iou_threshold=0.5):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def add_single_ground_truth_image_info(self, image_id, groundtruth_dict):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def add_single_detected_image_info(self, image_id, detections_dict):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def __init__(self, categories, matching_iou_threshold=0.5):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def __init__(self, categories, matching_iou_threshold=0.5):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def add_single_ground_truth_image_info(self, image_id, groundtruth_dict):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def add_single_ground_truth_image_info(self, image_id, groundtruth_dict):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def add_single_detected_image_info(self, image_id, detections_dict):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,def clear(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,def _initialize_detections(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,def clear_detections(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,def get_internal_state(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,"def merge_internal_state(self, state_tuple):"
data/raw/repos\research\object_detection\utils,object_detection_evaluation.py,def evaluate(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def test_returns_correct_metric_values(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def test_returns_correct_detection_metric_values(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def test_returns_correct_instance_segm_metric_values(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def test_returns_correct_metric_values_on_boxes(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def test_returns_correct_metric_values_on_masks(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def create_and_add_common_ground_truth(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def add_common_detected(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def test_returns_correct_metric_values(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def test_returns_correct_metric_values_with_difficult_list(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def create_and_add_common_ground_truth(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def add_common_detected(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def test_returns_correct_metric_values(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def test_returns_correct_metric_values_with_difficult_list(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def test_returns_correct_metric_values_partial_labels(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def test_value_error_on_zero_classes(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def test_add_single_ground_truth_image_info(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def test_add_single_detected_image_info(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def test_evaluate(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def test_merge_internal_state(self):
data/raw/repos\research\object_detection\utils,object_detection_evaluation_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,ops.py,"def expanded_shape(orig_shape, start_dim, num_dims):"
data/raw/repos\research\object_detection\utils,ops.py,def _to_absolute_coordinates(normalized_boxes):
data/raw/repos\research\object_detection\utils,ops.py,"def meshgrid(x, y):"
data/raw/repos\research\object_detection\utils,ops.py,"def fixed_padding(inputs, kernel_size, rate=1):"
data/raw/repos\research\object_detection\utils,ops.py,"def pad_to_multiple(tensor, multiple):"
data/raw/repos\research\object_detection\utils,ops.py,"def padded_one_hot_encoding(indices, depth, left_pad):"
data/raw/repos\research\object_detection\utils,ops.py,def one_hot_and_pad():
data/raw/repos\research\object_detection\utils,ops.py,"def dense_to_sparse_boxes(dense_locations, dense_num_boxes, num_classes):"
data/raw/repos\research\object_detection\utils,ops.py,"def reduce_sum_trailing_dimensions(tensor, ndims):"
data/raw/repos\research\object_detection\utils,ops.py,"def retain_groundtruth(tensor_dict, valid_indices):"
data/raw/repos\research\object_detection\utils,ops.py,def retain_groundtruth_with_positive_classes(tensor_dict):
data/raw/repos\research\object_detection\utils,ops.py,def replace_nan_groundtruth_label_scores_with_ones(label_scores):
data/raw/repos\research\object_detection\utils,ops.py,def filter_groundtruth_with_crowd_boxes(tensor_dict):
data/raw/repos\research\object_detection\utils,ops.py,def filter_groundtruth_with_nan_box_coordinates(tensor_dict):
data/raw/repos\research\object_detection\utils,ops.py,def filter_unrecognized_classes(tensor_dict):
data/raw/repos\research\object_detection\utils,ops.py,def _position_sensitive_crop_fn(inputs):
data/raw/repos\research\object_detection\utils,ops.py,def reframe_image_corners_relative_to_boxes(boxes):
data/raw/repos\research\object_detection\utils,ops.py,def reframe_box_masks_to_image_masks_default():
data/raw/repos\research\object_detection\utils,ops.py,def map_box_encodings(i):
data/raw/repos\research\object_detection\utils,ops.py,"def matmul_gather_on_zeroth_axis(params, indices, scope=None):"
data/raw/repos\research\object_detection\utils,ops.py,"def fpn_feature_levels(num_levels, unit_scale_index, image_ratio, boxes):"
data/raw/repos\research\object_detection\utils,ops.py,def bfloat16_to_float32_nested(input_nested):
data/raw/repos\research\object_detection\utils,ops.py,"def gather_with_padding_values(input_tensor, indices, padding_value):"
data/raw/repos\research\object_detection\utils,ops.py,def tile_context_tensors(tensor_dict):
data/raw/repos\research\object_detection\utils,ops.py,def decode_image(tensor_dict):
data/raw/repos\research\object_detection\utils,ops.py,"def giou(boxes1, boxes2):"
data/raw/repos\research\object_detection\utils,ops.py,def center_to_corner_coordinate(input_tensor):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_normalized_to_image_coordinates(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn(normalized_boxes):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_reduce_sum_trailing_dimensions(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn(input_tensor):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_meshgrid_numpy_comparison(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_meshgrid_multidimensional(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_3x3_kernel(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_5x5_kernel(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_3x3_atrous_kernel(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_zero_padding(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_no_padding(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_non_square_padding(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_padding(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_correct_one_hot_tensor_with_no_pad(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_correct_one_hot_tensor_with_pad_one(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_correct_one_hot_tensor_with_pad_three(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_correct_padded_one_hot_tensor_with_empty_indices(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_return_none_on_zero_depth(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_raise_value_error_on_rank_two_input(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_raise_value_error_on_negative_pad(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_raise_value_error_on_float_pad(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_raise_value_error_on_float_depth(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_return_all_boxes_when_all_input_boxes_are_valid(self):
data/raw/repos\research\object_detection\utils,ops_test.py,"def graph_fn(dense_location, dense_num_boxes):"
data/raw/repos\research\object_detection\utils,ops_test.py,def test_return_only_valid_boxes_when_input_contains_invalid_boxes(self):
data/raw/repos\research\object_detection\utils,ops_test.py,"def graph_fn(dense_location, dense_num_boxes):"
data/raw/repos\research\object_detection\utils,ops_test.py,def test_indices_to_dense_vector(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_indices_to_dense_vector_size_at_inference(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn(tf_all_indices):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_indices_to_dense_vector_int(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_indices_to_dense_vector_custom_values(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_indices_to_dense_vector_all_indices_as_input(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_indices_to_dense_vector_empty_indices_as_input(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_filter_groundtruth(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_filter_with_missing_fields(self):
data/raw/repos\research\object_detection\utils,ops_test.py,"def graph_fn(input_boxes, input_classes, valid_indices):"
data/raw/repos\research\object_detection\utils,ops_test.py,def test_filter_with_empty_fields(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_filter_with_empty_groundtruth_boxes(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_filter_groundtruth_with_positive_classes(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_replace_nan_groundtruth_label_scores_with_ones(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_input_equals_output_when_no_nans(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_filter_groundtruth_with_crowd_boxes(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_filter_groundtruth_with_nan_box_coordinates(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_filter_unrecognized_classes(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_create_normalize_to_target(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_invalid_dim(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_invalid_target_norm_values(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_correct_output_shape(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn(inputs):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_correct_initial_output_values(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_multiple_target_norm_values(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_position_sensitive(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_position_sensitive_with_equal_channels(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_raise_value_error_on_num_bins_less_than_one(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_raise_value_error_on_non_divisible_crop_size(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_raise_value_error_on_non_divisible_num_channels(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_position_sensitive_with_global_pool_false(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_position_sensitive_with_global_pool_false_and_do_global_pool(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_raise_value_error_on_non_square_block_size(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_position_sensitive_with_single_bin(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_position_sensitive_with_global_pool_false_and_known_boxes(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_position_sensitive_with_global_pool_false_and_single_bin(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_reframe_image_corners_relative_to_boxes(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,"def testZeroImageOnEmptyMask(self, mask_dtype, mask_dtype_np, resize_method):"
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,"def testZeroBoxMasks(self, mask_dtype, mask_dtype_np, resize_method):"
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def testBoxWithZeroArea(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def testMergeBoxesWithMultipleLabels(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def testMergeBoxesWithMultipleLabelsCornerCase(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def testMergeBoxesWithEmptyInputs(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def testMergeBoxesWithMultipleLabelsUsesInt64(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def assert_dtype_is_int64(op_name):
data/raw/repos\research\object_detection\utils,ops_test.py,def assert_t_is_int64(op_name):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_upsampling_with_single_scale(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn(inputs):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_upsampling_with_separate_height_width_scales(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn(inputs):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_gather_2d(self):
data/raw/repos\research\object_detection\utils,ops_test.py,"def graph_fn(params, indices):"
data/raw/repos\research\object_detection\utils,ops_test.py,def test_gather_3d(self):
data/raw/repos\research\object_detection\utils,ops_test.py,"def graph_fn(params, indices):"
data/raw/repos\research\object_detection\utils,ops_test.py,def test_gather_with_many_indices(self):
data/raw/repos\research\object_detection\utils,ops_test.py,"def graph_fn(params, indices):"
data/raw/repos\research\object_detection\utils,ops_test.py,def test_gather_with_dynamic_shape_input(self):
data/raw/repos\research\object_detection\utils,ops_test.py,"def graph_fn(params, indices):"
data/raw/repos\research\object_detection\utils,ops_test.py,def test_correct_fpn_levels(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn(boxes):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_convert_list(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_convert_tensor_dict(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def test_gather_with_padding_values(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_giou_with_no_overlap(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_giou_with_overlaps(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_giou_with_perfect_overlap(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_giou_with_zero_area_boxes(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_giou_different_with_l1_same(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,ops_test.py,def test_coord_conv(self):
data/raw/repos\research\object_detection\utils,ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,patch_ops.py,"def get_patch_mask(y, x, patch_size, image_shape):"
data/raw/repos\research\object_detection\utils,patch_ops_test.py,def testMaskShape(self):
data/raw/repos\research\object_detection\utils,patch_ops_test.py,def testHandleImageShapeWithChannels(self):
data/raw/repos\research\object_detection\utils,patch_ops_test.py,def testMaskDType(self):
data/raw/repos\research\object_detection\utils,patch_ops_test.py,def testMaskAreaWithEvenPatchSize(self):
data/raw/repos\research\object_detection\utils,patch_ops_test.py,def testMaskAreaWithEvenPatchSize4(self):
data/raw/repos\research\object_detection\utils,patch_ops_test.py,def testMaskAreaWithOddPatchSize(self):
data/raw/repos\research\object_detection\utils,patch_ops_test.py,def testMaskAreaPartiallyOutsideImage(self):
data/raw/repos\research\object_detection\utils,patch_ops_test.py,"def testStaticCoordinatesOutsideImageRaisesError(self, y, x):"
data/raw/repos\research\object_detection\utils,patch_ops_test.py,def testDynamicCoordinatesOutsideImageRaisesError(self):
data/raw/repos\research\object_detection\utils,patch_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,patch_ops_test.py,"def testStaticNonPositivePatchSizeRaisesError(self, patch_size):"
data/raw/repos\research\object_detection\utils,patch_ops_test.py,def testDynamicNonPositivePatchSizeRaisesError(self):
data/raw/repos\research\object_detection\utils,patch_ops_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,per_image_evaluation.py,"def compute_match_ioa(ioa, is_box):"
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_match_to_gt_box_0(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_mask_match_to_gt_mask_0(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_match_to_gt_box_1(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_mask_match_to_gt_mask_1(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_match_to_non_group_of_and_group_of_box(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_mask_match_to_non_group_of_and_group_of_box(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_match_two_to_group_of_box(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_mask_match_two_to_group_of_box(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_match_to_non_group_of_and_group_of_box(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_mask_match_to_non_group_of_and_group_of_box(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_match_two_to_group_of_box(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_mask_match_two_to_group_of_box(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_no_true_positives(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_mask_no_true_positives(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_one_true_positives_with_large_iou_threshold(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_mask_one_true_positives_with_large_iou_threshold(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_one_true_positives_with_very_small_iou_threshold(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_two_true_positives_with_large_iou_threshold(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_mask_tp_and_ignore(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_mask_one_tp_one_fp(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_two_mask_one_gt_one_ignore(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_two_mask_one_gt_one_fp(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_tp_fp(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_compute_corloc_with_normal_iou_threshold(self):
data/raw/repos\research\object_detection\utils,per_image_evaluation_test.py,def test_compute_corloc_with_very_large_iou_threshold(self):
data/raw/repos\research\object_detection\utils,per_image_vrd_evaluation.py,"def __init__(self, matching_iou_threshold=0.5):"
data/raw/repos\research\object_detection\utils,per_image_vrd_evaluation_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,per_image_vrd_evaluation_test.py,def test_tp_fp_eval(self):
data/raw/repos\research\object_detection\utils,per_image_vrd_evaluation_test.py,def test_tp_fp_eval_empty_gt(self):
data/raw/repos\research\object_detection\utils,per_image_vrd_evaluation_test.py,def setUp(self):
data/raw/repos\research\object_detection\utils,per_image_vrd_evaluation_test.py,def test_tp_fp_eval(self):
data/raw/repos\research\object_detection\utils,shape_utils.py,def _is_tensor(t):
data/raw/repos\research\object_detection\utils,shape_utils.py,"def _set_dim_0(t, d0):"
data/raw/repos\research\object_detection\utils,shape_utils.py,"def pad_tensor(t, length):"
data/raw/repos\research\object_detection\utils,shape_utils.py,"def clip_tensor(t, length):"
data/raw/repos\research\object_detection\utils,shape_utils.py,"def pad_or_clip_tensor(t, length):"
data/raw/repos\research\object_detection\utils,shape_utils.py,"def pad_or_clip_nd(tensor, output_shape):"
data/raw/repos\research\object_detection\utils,shape_utils.py,def combined_static_and_dynamic_shape(tensor):
data/raw/repos\research\object_detection\utils,shape_utils.py,"def check_min_image_dim(min_dim, image_tensor):"
data/raw/repos\research\object_detection\utils,shape_utils.py,"def assert_shape_equal(shape_a, shape_b):"
data/raw/repos\research\object_detection\utils,shape_utils.py,"def assert_shape_equal_along_first_dimension(shape_a, shape_b):"
data/raw/repos\research\object_detection\utils,shape_utils.py,"def assert_box_normalized(boxes, maximum_normalized_coordinate=1.1):"
data/raw/repos\research\object_detection\utils,shape_utils.py,"def flatten_dimensions(inputs, first, last):"
data/raw/repos\research\object_detection\utils,shape_utils.py,"def flatten_first_n_dimensions(inputs, n):"
data/raw/repos\research\object_detection\utils,shape_utils.py,"def expand_first_dimension(inputs, dims):"
data/raw/repos\research\object_detection\utils,shape_utils.py,"def resize_images_and_return_shapes(inputs, image_resizer_fn):"
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_pad_tensor_using_integer_input(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_pad_tensor_using_tensor_input(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_clip_tensor_using_integer_input(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_clip_tensor_using_tensor_input(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_pad_or_clip_tensor_using_integer_input(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_pad_or_clip_tensor_using_tensor_input(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_combined_static_dynamic_shape(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_pad_or_clip_nd_tensor(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def graph_fn(input_tensor):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_with_dynamic_shape(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def fn(input_tensor):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def graph_fn(input_tensor):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_with_static_shape(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def fn(input_tensor):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_with_multiple_dynamic_shapes(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def fn(elems):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,"def graph_fn(input_tensor, scalar_index_tensor):"
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_with_multiple_static_shapes(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def fn(elems):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_fails_with_nested_input(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def fn(input_tensor):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_check_min_image_dim_static_shape(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_check_min_image_dim_dynamic_shape(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def graph_fn(input_tensor):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_unequal_static_shape_raises_exception(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_equal_static_shape_succeeds(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_unequal_dynamic_shape_raises_tf_assert(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,"def graph_fn(tensor_a, tensor_b):"
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_equal_dynamic_shape_succeeds(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,"def graph_fn(tensor_a, tensor_b):"
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_unequal_static_shape_along_first_dim_raises_exception(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_equal_static_shape_along_first_dim_succeeds(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_unequal_dynamic_shape_along_first_dim_raises_tf_assert(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,"def graph_fn(tensor_a, tensor_b):"
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_equal_dynamic_shape_along_first_dim_succeeds(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,"def graph_fn(tensor_a, tensor_b):"
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_flatten_given_dims(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_raises_value_error_incorrect_dimensions(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_flatten_first_two_dimensions(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_expand_first_dimension(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def test_expand_first_dimension_with_incompatible_dims(self):
data/raw/repos\research\object_detection\utils,shape_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,spatial_transform_ops.py,"def _coordinate_vector_1d(start, end, size, align_endpoints):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops.py,"def box_grid_coordinate_vectors(boxes, size_y, size_x, align_corners=False):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops.py,"def feature_grid_coordinate_vectors(box_grid_y, box_grid_x):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops.py,"def _valid_indicator(feature_grid_y, feature_grid_x, true_feature_shapes):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops.py,def pad_to_max_size(features):
data/raw/repos\research\object_detection\utils,spatial_transform_ops.py,"def _gather_valid_indices(tensor, indices, padding_value=0.0):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops.py,"def native_crop_and_resize(image, boxes, crop_size, scope=None):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops.py,def get_box_inds(proposals):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_4x4_grid(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def graph_fn(boxes):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_2x2_grid(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def graph_fn(boxes):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_2x4_grid(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def graph_fn(boxes):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_2x4_grid_with_aligned_corner(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def graph_fn(boxes):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_offgrid_boxes(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def graph_fn(boxes):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_snap_box_points_to_nearest_4_pixels(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(box_grid_y, box_grid_x):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_snap_box_points_outside_pixel_grid_to_nearest_neighbor(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(box_grid_y, box_grid_x):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_feature_point_indices(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(feature_grid_y, feature_grid_x, box_levels):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_perfectly_aligned_cell_center_and_feature_pixels(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image, boxes, levels):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_interpolation_with_4_points_per_bin(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image, boxes, levels):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_1x1_crop_on_2x2_features(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image, boxes, levels):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_3x3_crops_on_2x2_features(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image, boxes, levels):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_2x2_crops_on_3x3_features(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image, boxes, levels):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_2x2_crop_on_4x4_features(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image, boxes, levels):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_extrapolate_3x3_crop_on_2x2_features(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image, boxes, levels):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_extrapolate_with_non_zero_value(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image, boxes, levels):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_multilevel_roi_align(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(feature1, feature2, feature3, feature4, boxes, levels):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def test_large_input(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def crop_and_resize_fn():
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def testMatMulCropAndResize2x2To1x1(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image, boxes):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def testMatMulCropAndResize2x2To1x1Flipped(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image, boxes):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def testMatMulCropAndResize2x2To3x3(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image, boxes):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def testMatMulCropAndResize2x2To3x3Flipped(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image, boxes):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def testMatMulCropAndResize3x3To2x2(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image, boxes):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def testMatMulCropAndResize3x3To2x2_2Channels(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image, boxes):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def testBatchMatMulCropAndResize3x3To2x2_2Channels(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image, boxes):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def testMatMulCropAndResize3x3To2x2Flipped(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image, boxes):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def testMultilevelMatMulCropAndResize(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image1, image2, boxes, box_levels):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def testBatchCropAndResize3x3To2x2_2Channels(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image, boxes):"
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,def testMultilevelBatchCropAndResize3x3To2x2_2Channels(self):
data/raw/repos\research\object_detection\utils,spatial_transform_ops_test.py,"def graph_fn(image1, image2, boxes, box_levels):"
data/raw/repos\research\object_detection\utils,static_shape.py,def get_dim_as_int(dim):
data/raw/repos\research\object_detection\utils,static_shape.py,def get_batch_size(tensor_shape):
data/raw/repos\research\object_detection\utils,static_shape.py,def get_height(tensor_shape):
data/raw/repos\research\object_detection\utils,static_shape.py,def get_width(tensor_shape):
data/raw/repos\research\object_detection\utils,static_shape.py,def get_depth(tensor_shape):
data/raw/repos\research\object_detection\utils,static_shape_test.py,def test_return_correct_batchSize(self):
data/raw/repos\research\object_detection\utils,static_shape_test.py,def test_return_correct_height(self):
data/raw/repos\research\object_detection\utils,static_shape_test.py,def test_return_correct_width(self):
data/raw/repos\research\object_detection\utils,static_shape_test.py,def test_return_correct_depth(self):
data/raw/repos\research\object_detection\utils,static_shape_test.py,def test_die_on_tensor_shape_with_rank_three(self):
data/raw/repos\research\object_detection\utils,target_assigner_utils.py,"def image_shape_to_grids(height, width):"
data/raw/repos\research\object_detection\utils,target_assigner_utils.py,def _get_yx_indices_offset_by_radius(radius):
data/raw/repos\research\object_detection\utils,target_assigner_utils.py,"def get_surrounding_grids(height, width, y_coordinates, x_coordinates, radius):"
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def test_image_shape_to_grids(self):
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,"def test_coordinates_to_heatmap(self, sparse):"
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def test_compute_floor_offsets_with_indices_onlysource(self):
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def test_compute_floor_offsets_with_indices_and_targets(self):
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def test_compute_floor_offsets_with_indices_multisources(self):
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def test_get_valid_keypoints_mask(self):
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def test_get_valid_keypoints_with_mask(self):
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def test_blackout_pixel_weights_by_box_regions(self):
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def test_blackout_pixel_weights_by_box_regions_with_weights(self):
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def test_blackout_pixel_weights_by_box_regions_zero_instance(self):
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def test_get_surrounding_grids(self):
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def test_coordinates_to_iou(self):
data/raw/repos\research\object_detection\utils,target_assigner_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,test_case.py,"def maybe_extract_single_output(self, outputs):"
data/raw/repos\research\object_detection\utils,test_case.py,def has_tpu(self):
data/raw/repos\research\object_detection\utils,test_case.py,def is_tf2(self):
data/raw/repos\research\object_detection\utils,test_case.py,"def execute_tpu_tf1(self, compute_fn, inputs, graph=None):"
data/raw/repos\research\object_detection\utils,test_case.py,"def wrap_graph_fn(*args, **kwargs):"
data/raw/repos\research\object_detection\utils,test_case.py,"def execute_tpu_tf2(self, compute_fn, inputs):"
data/raw/repos\research\object_detection\utils,test_case.py,def run():
data/raw/repos\research\object_detection\utils,test_case.py,"def execute_cpu_tf1(self, compute_fn, inputs, graph=None):"
data/raw/repos\research\object_detection\utils,test_case.py,"def execute_cpu_tf2(self, compute_fn, inputs):"
data/raw/repos\research\object_detection\utils,test_case.py,def run():
data/raw/repos\research\object_detection\utils,test_case.py,"def execute_cpu(self, compute_fn, inputs, graph=None):"
data/raw/repos\research\object_detection\utils,test_case.py,"def execute_tpu(self, compute_fn, inputs, graph=None):"
data/raw/repos\research\object_detection\utils,test_case.py,"def execute_tf2(self, compute_fn, inputs):"
data/raw/repos\research\object_detection\utils,test_case.py,"def execute_tf1(self, compute_fn, inputs, graph=None):"
data/raw/repos\research\object_detection\utils,test_case.py,"def execute(self, compute_fn, inputs, graph=None):"
data/raw/repos\research\object_detection\utils,test_case_test.py,def test_simple(self):
data/raw/repos\research\object_detection\utils,test_case_test.py,"def graph_fn(tensora, tensorb):"
data/raw/repos\research\object_detection\utils,test_case_test.py,def test_two_outputs(self):
data/raw/repos\research\object_detection\utils,test_case_test.py,"def graph_fn(tensora, tensorb):"
data/raw/repos\research\object_detection\utils,test_case_test.py,def test_function_with_tf_assert(self):
data/raw/repos\research\object_detection\utils,test_case_test.py,def compute_fn(image):
data/raw/repos\research\object_detection\utils,test_case_test.py,def test_tf2_only_test(self):
data/raw/repos\research\object_detection\utils,test_case_test.py,"def graph_fn(tensora, tensorb):"
data/raw/repos\research\object_detection\utils,test_case_test.py,def test_tpu_only_test(self):
data/raw/repos\research\object_detection\utils,test_case_test.py,"def graph_fn(tensora, tensorb):"
data/raw/repos\research\object_detection\utils,test_utils.py,def code_size(self):
data/raw/repos\research\object_detection\utils,test_utils.py,"def _encode(self, boxes, anchors):"
data/raw/repos\research\object_detection\utils,test_utils.py,"def _decode(self, rel_codes, anchors):"
data/raw/repos\research\object_detection\utils,test_utils.py,"def __init__(self, num_classes):"
data/raw/repos\research\object_detection\utils,test_utils.py,"def predict(self, features):"
data/raw/repos\research\object_detection\utils,test_utils.py,"def __init__(self, is_training, num_classes, add_background_class=True):"
data/raw/repos\research\object_detection\utils,test_utils.py,"def _predict(self, image_features, num_predictions_per_location):"
data/raw/repos\research\object_detection\utils,test_utils.py,"def __init__(self, is_training, num_classes, add_background_class=True):"
data/raw/repos\research\object_detection\utils,test_utils.py,"def _predict(self, image_features, **kwargs):"
data/raw/repos\research\object_detection\utils,test_utils.py,def name_scope(self):
data/raw/repos\research\object_detection\utils,test_utils.py,def num_anchors_per_location(self):
data/raw/repos\research\object_detection\utils,test_utils.py,"def _generate(self, feature_map_shape_list):"
data/raw/repos\research\object_detection\utils,test_utils.py,"def _match(self, similarity_matrix, valid_rows):"
data/raw/repos\research\object_detection\utils,test_utils.py,"def create_diagonal_gradient_image(height, width, depth):"
data/raw/repos\research\object_detection\utils,test_utils.py,"def create_random_boxes(num_boxes, max_height, max_width):"
data/raw/repos\research\object_detection\utils,test_utils.py,"def first_rows_close_as_set(a, b, k=None, rtol=1e-6, atol=1e-6):"
data/raw/repos\research\object_detection\utils,test_utils.py,def test_model(self):
data/raw/repos\research\object_detection\utils,test_utils.py,def compute_fn():
data/raw/repos\research\object_detection\utils,test_utils.py,def __init__(self):
data/raw/repos\research\object_detection\utils,test_utils.py,def __enter__(self):
data/raw/repos\research\object_detection\utils,test_utils.py,"def __exit__(self, ttype, value, traceback):"
data/raw/repos\research\object_detection\utils,test_utils.py,"def image_with_dynamic_shape(height, width, channels):"
data/raw/repos\research\object_detection\utils,test_utils.py,"def keypoints_with_dynamic_shape(num_instances, num_keypoints, num_coordinates):"
data/raw/repos\research\object_detection\utils,test_utils_test.py,def test_diagonal_gradient_image(self):
data/raw/repos\research\object_detection\utils,test_utils_test.py,def test_random_boxes(self):
data/raw/repos\research\object_detection\utils,test_utils_test.py,def test_first_rows_close_as_set(self):
data/raw/repos\research\object_detection\utils,tf_version.py,def is_tf1():
data/raw/repos\research\object_detection\utils,tf_version.py,def is_tf2():
data/raw/repos\research\object_detection\utils,variables_helper.py,"def filter_variables(variables, filter_regex_list, invert=False):"
data/raw/repos\research\object_detection\utils,variables_helper.py,"def multiply_gradients_matching_regex(grads_and_vars, regex_list, multiplier):"
data/raw/repos\research\object_detection\utils,variables_helper.py,"def freeze_gradients_matching_regex(grads_and_vars, regex_list):"
data/raw/repos\research\object_detection\utils,variables_helper.py,def get_global_variables_safely():
data/raw/repos\research\object_detection\utils,variables_helper.py,"def ensure_checkpoint_supported(checkpoint_path, checkpoint_type, model_dir):"
data/raw/repos\research\object_detection\utils,variables_helper_tf1_test.py,def _create_variables(self):
data/raw/repos\research\object_detection\utils,variables_helper_tf1_test.py,def test_return_all_variables_when_empty_regex(self):
data/raw/repos\research\object_detection\utils,variables_helper_tf1_test.py,def test_return_variables_which_do_not_match_single_regex(self):
data/raw/repos\research\object_detection\utils,variables_helper_tf1_test.py,def test_return_variables_which_do_not_match_any_regex_in_list(self):
data/raw/repos\research\object_detection\utils,variables_helper_tf1_test.py,def test_return_variables_matching_empty_regex_list(self):
data/raw/repos\research\object_detection\utils,variables_helper_tf1_test.py,def test_return_variables_matching_some_regex_in_list(self):
data/raw/repos\research\object_detection\utils,variables_helper_tf1_test.py,def _create_grads_and_vars(self):
data/raw/repos\research\object_detection\utils,variables_helper_tf1_test.py,def test_multiply_all_feature_extractor_variables(self):
data/raw/repos\research\object_detection\utils,variables_helper_tf1_test.py,def test_multiply_all_bias_variables(self):
data/raw/repos\research\object_detection\utils,variables_helper_tf1_test.py,def _create_grads_and_vars(self):
data/raw/repos\research\object_detection\utils,variables_helper_tf1_test.py,def test_freeze_all_feature_extractor_variables(self):
data/raw/repos\research\object_detection\utils,variables_helper_tf1_test.py,def test_return_all_variables_from_checkpoint(self):
data/raw/repos\research\object_detection\utils,variables_helper_tf1_test.py,def test_return_all_variables_from_checkpoint_with_partition(self):
data/raw/repos\research\object_detection\utils,variables_helper_tf1_test.py,def test_return_variables_available_in_checkpoint(self):
data/raw/repos\research\object_detection\utils,variables_helper_tf1_test.py,def test_return_variables_available_an_checkpoint_with_dict_inputs(self):
data/raw/repos\research\object_detection\utils,variables_helper_tf1_test.py,def test_return_variables_with_correct_sizes(self):
data/raw/repos\research\object_detection\utils,visualization_utils.py,def _get_multiplier_for_color_randomness():
data/raw/repos\research\object_detection\utils,visualization_utils.py,"def save_image_array_as_png(image, output_path):"
data/raw/repos\research\object_detection\utils,visualization_utils.py,def encode_image_array_as_png_str(image):
data/raw/repos\research\object_detection\utils,visualization_utils.py,def visualization_py_func_fn(*args):
data/raw/repos\research\object_detection\utils,visualization_utils.py,"def draw_heatmaps_on_image(image, heatmaps):"
data/raw/repos\research\object_detection\utils,visualization_utils.py,"def draw_heatmaps_on_image_array(image, heatmaps):"
data/raw/repos\research\object_detection\utils,visualization_utils.py,def draw_heatmaps(image_and_heatmaps):
data/raw/repos\research\object_detection\utils,visualization_utils.py,"def _resize_original_image(image, image_shape):"
data/raw/repos\research\object_detection\utils,visualization_utils.py,def draw_boxes(image_and_detections):
data/raw/repos\research\object_detection\utils,visualization_utils.py,"def draw_densepose_py_func(image, detection_masks, surface_coords, scores):"
data/raw/repos\research\object_detection\utils,visualization_utils.py,"def draw_mask_on_image_array(image, mask, color='red', alpha=0.4):"
data/raw/repos\research\object_detection\utils,visualization_utils.py,"def draw_part_mask_on_image_array(image, mask, alpha=0.4, num_parts=24):"
data/raw/repos\research\object_detection\utils,visualization_utils.py,"def add_cdf_image_summary(values, name):"
data/raw/repos\research\object_detection\utils,visualization_utils.py,def cdf_plot(values):
data/raw/repos\research\object_detection\utils,visualization_utils.py,"def add_hist_image_summary(values, bins, name):"
data/raw/repos\research\object_detection\utils,visualization_utils.py,"def hist_plot(values, bins):"
data/raw/repos\research\object_detection\utils,visualization_utils.py,def clear(self):
data/raw/repos\research\object_detection\utils,visualization_utils.py,"def add_images(self, images):"
data/raw/repos\research\object_detection\utils,visualization_utils.py,"def get_estimator_eval_metric_ops(self, eval_dict):"
data/raw/repos\research\object_detection\utils,visualization_utils.py,def get_images():
data/raw/repos\research\object_detection\utils,visualization_utils.py,"def image_summary_or_default_string(summary_name, image):"
data/raw/repos\research\object_detection\utils,visualization_utils.py,"def images_from_evaluation_dict(self, eval_dict):"
data/raw/repos\research\object_detection\utils,visualization_utils.py,"def images_from_evaluation_dict(self, eval_dict):"
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,"def get_iterator_next_for_testing(dataset, is_tf2):"
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_get_prime_multiplier_for_color_randomness(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def create_colorful_test_image(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def create_test_image_with_five_channels(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def create_test_grayscale_image(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_draw_bounding_box_on_image(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_draw_bounding_box_on_image_array(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_draw_bounding_boxes_on_image(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_draw_bounding_boxes_on_image_array(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_draw_bounding_boxes_on_image_tensors(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_draw_bounding_boxes_on_image_tensors_with_track_ids(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_draw_bounding_boxes_on_image_tensors_with_additional_channels(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_draw_bounding_boxes_on_image_tensors_grayscale(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_draw_keypoints_on_image(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_draw_keypoints_on_image_with_default_keypoint_scores(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_draw_keypoints_on_image_array(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_draw_mask_on_image_array(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_draw_part_mask_on_image_array(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_draw_float_channel_on_image_array(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_draw_heatmaps_on_image(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_draw_heatmaps_on_image_array(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_draw_heatmaps_on_image_tensors(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_add_cdf_image_summary(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_add_hist_image_summary(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def graph_fn():
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_eval_metric_ops(self):
data/raw/repos\research\object_detection\utils,visualization_utils_test.py,def test_visualize_boxes_and_labels_on_image_array(self):
data/raw/repos\research\object_detection\utils,vrd_evaluation.py,"def __init__(self, matching_iou_threshold=0.5, metric_prefix=None):"
data/raw/repos\research\object_detection\utils,vrd_evaluation.py,"def _process_groundtruth_boxes(self, groundtruth_box_tuples):"
data/raw/repos\research\object_detection\utils,vrd_evaluation.py,"def _process_detection_boxes(self, detections_box_tuples):"
data/raw/repos\research\object_detection\utils,vrd_evaluation.py,"def add_single_ground_truth_image_info(self, image_id, groundtruth_dict):"
data/raw/repos\research\object_detection\utils,vrd_evaluation.py,"def add_single_detected_image_info(self, image_id, detections_dict):"
data/raw/repos\research\object_detection\utils,vrd_evaluation.py,"def evaluate(self, relationships=None):"
data/raw/repos\research\object_detection\utils,vrd_evaluation.py,def clear(self):
data/raw/repos\research\object_detection\utils,vrd_evaluation.py,"def __init__(self, matching_iou_threshold=0.5):"
data/raw/repos\research\object_detection\utils,vrd_evaluation.py,"def _process_groundtruth_boxes(self, groundtruth_box_tuples):"
data/raw/repos\research\object_detection\utils,vrd_evaluation.py,"def _process_detection_boxes(self, detections_box_tuples):"
data/raw/repos\research\object_detection\utils,vrd_evaluation.py,"def __init__(self, matching_iou_threshold=0.5):"
data/raw/repos\research\object_detection\utils,vrd_evaluation.py,"def _process_groundtruth_boxes(self, groundtruth_box_tuples):"
data/raw/repos\research\object_detection\utils,vrd_evaluation.py,"def _process_detection_boxes(self, detections_box_tuples):"
data/raw/repos\research\object_detection\utils,vrd_evaluation.py,"def __init__(self, matching_iou_threshold=0.5):"
data/raw/repos\research\object_detection\utils,vrd_evaluation.py,def clear_detections(self):
data/raw/repos\research\object_detection\utils,vrd_evaluation.py,"def _update_groundtruth_statistics(self, groundtruth_class_tuples):"
data/raw/repos\research\object_detection\utils,vrd_evaluation.py,def evaluate(self):
data/raw/repos\research\object_detection\utils,vrd_evaluation_test.py,def test_vrdrelation_evaluator(self):
data/raw/repos\research\object_detection\utils,vrd_evaluation_test.py,def test_vrdphrase_evaluator(self):
data/raw/repos\research\object_detection\utils,vrd_evaluation_test.py,def setUp(self):
data/raw/repos\research\pcl_rl,baseline.py,"def f_transform(q_values, tau):"
data/raw/repos\research\pcl_rl,controller.py,"def find_best_eps_lambda(rewards, lengths):"
data/raw/repos\research\pcl_rl,controller.py,def calc_divergence(eps_lambda):
data/raw/repos\research\pcl_rl,controller.py,"def setup(self, train=True):"
data/raw/repos\research\pcl_rl,controller.py,def initial_internal_state(self):
data/raw/repos\research\pcl_rl,controller.py,"def _sample_episodes(self, sess, greedy=False):"
data/raw/repos\research\pcl_rl,controller.py,"def sample_episodes(self, sess, greedy=False):"
data/raw/repos\research\pcl_rl,controller.py,"def train(self, sess):"
data/raw/repos\research\pcl_rl,controller.py,"def eval(self, sess):"
data/raw/repos\research\pcl_rl,controller.py,"def convert_to_batched_episodes(self, episodes, max_length=None):"
data/raw/repos\research\pcl_rl,controller.py,"def get_from_replay_buffer(self, batch_size):"
data/raw/repos\research\pcl_rl,controller.py,"def seed_replay_buffer(self, episodes):"
data/raw/repos\research\pcl_rl,env_spec.py,def get_space(space):
data/raw/repos\research\pcl_rl,env_spec.py,def get_spaces(spaces):
data/raw/repos\research\pcl_rl,env_spec.py,"def sampling_dim(self, dim, typ):"
data/raw/repos\research\pcl_rl,env_spec.py,"def convert_actions_to_env(self, actions):"
data/raw/repos\research\pcl_rl,env_spec.py,"def convert_env_actions_to_actions(self, actions):"
data/raw/repos\research\pcl_rl,env_spec.py,"def convert_obs_to_list(self, obs):"
data/raw/repos\research\pcl_rl,env_spec.py,"def convert_action_to_gym(self, action):"
data/raw/repos\research\pcl_rl,env_spec.py,"def initial_obs(self, batch_size):"
data/raw/repos\research\pcl_rl,env_spec.py,"def initial_act(self, batch_size=None):"
data/raw/repos\research\pcl_rl,env_spec.py,"def is_discrete(self, typ):"
data/raw/repos\research\pcl_rl,env_spec.py,"def is_box(self, typ):"
data/raw/repos\research\pcl_rl,expert_paths.py,"def sample_expert_path(env_str, env_spec):"
data/raw/repos\research\pcl_rl,full_episode_objective.py,"def get_bonus(self, total_rewards, total_log_probs):"
data/raw/repos\research\pcl_rl,full_episode_objective.py,"def get_bonus(self, total_rewards, total_log_probs):"
data/raw/repos\research\pcl_rl,gym_wrapper.py,def get_env(env_str):
data/raw/repos\research\pcl_rl,gym_wrapper.py,"def __init__(self, env_str, distinct=1, count=1, seeds=None):"
data/raw/repos\research\pcl_rl,gym_wrapper.py,def get_seeds(self):
data/raw/repos\research\pcl_rl,gym_wrapper.py,def reset(self):
data/raw/repos\research\pcl_rl,gym_wrapper.py,"def reset_if(self, predicate=None):"
data/raw/repos\research\pcl_rl,gym_wrapper.py,def all_done(self):
data/raw/repos\research\pcl_rl,gym_wrapper.py,"def step(self, actions):"
data/raw/repos\research\pcl_rl,gym_wrapper.py,"def env_step(env, action):"
data/raw/repos\research\pcl_rl,gym_wrapper.py,def get_one(self):
data/raw/repos\research\pcl_rl,gym_wrapper.py,def __len__(self):
data/raw/repos\research\pcl_rl,model.py,def setup_placeholders(self):
data/raw/repos\research\pcl_rl,model.py,"def setup(self, train=True):"
data/raw/repos\research\pcl_rl,objective.py,"def __init__(self, learning_rate, clip_norm):"
data/raw/repos\research\pcl_rl,objective.py,"def get_optimizer(self, learning_rate):"
data/raw/repos\research\pcl_rl,objective.py,"def training_ops(self, loss, learning_rate=None):"
data/raw/repos\research\pcl_rl,objective.py,"def discounted_future_sum(values, discount, rollout):"
data/raw/repos\research\pcl_rl,objective.py,"def discounted_two_sided_sum(values, discount, rollout):"
data/raw/repos\research\pcl_rl,objective.py,"def shift_values(values, discount, rollout, final_values=0.0):"
data/raw/repos\research\pcl_rl,optimizers.py,def var_size(v):
data/raw/repos\research\pcl_rl,optimizers.py,"def gradients(loss, var_list):"
data/raw/repos\research\pcl_rl,optimizers.py,"def flatgrad(loss, var_list):"
data/raw/repos\research\pcl_rl,optimizers.py,def get_flat(var_list):
data/raw/repos\research\pcl_rl,optimizers.py,"def set_from_flat(var_list, flat_theta):"
data/raw/repos\research\pcl_rl,optimizers.py,"def __init__(self, max_iter=25, mix_frac=1.0):"
data/raw/repos\research\pcl_rl,optimizers.py,def setup_placeholders(self):
data/raw/repos\research\pcl_rl,optimizers.py,"def optimize(self, sess, feed_dict):"
data/raw/repos\research\pcl_rl,optimizers.py,def calc_loss_and_grad(theta):
data/raw/repos\research\pcl_rl,optimizers.py,"def __init__(self, learning_rate=0.001, max_iter=25, mix_frac=1.0):"
data/raw/repos\research\pcl_rl,optimizers.py,def get_optimizer(self):
data/raw/repos\research\pcl_rl,optimizers.py,def setup_placeholders(self):
data/raw/repos\research\pcl_rl,optimizers.py,"def optimize(self, sess, feed_dict):"
data/raw/repos\research\pcl_rl,optimizers.py,"def __init__(self, mix_frac=1.0):"
data/raw/repos\research\pcl_rl,optimizers.py,def setup_placeholders(self):
data/raw/repos\research\pcl_rl,optimizers.py,"def optimize(self, sess, feed_dict):"
data/raw/repos\research\pcl_rl,policy.py,def input_dim(self):
data/raw/repos\research\pcl_rl,policy.py,def output_dim(self):
data/raw/repos\research\pcl_rl,policy.py,def get_cell(self):
data/raw/repos\research\pcl_rl,policy.py,"def core(self, obs, prev_internal_state, prev_actions):"
data/raw/repos\research\pcl_rl,policy.py,"def sample_actions(self, output, actions=None, greedy=False):"
data/raw/repos\research\pcl_rl,policy.py,"def get_kl(self, my_logits, other_logits):"
data/raw/repos\research\pcl_rl,policy.py,"def single_step(self, prev, cur, greedy=False):"
data/raw/repos\research\pcl_rl,policy.py,"def sample_step(self, obs, prev_internal_state, prev_actions, greedy=False):"
data/raw/repos\research\pcl_rl,policy.py,"def multi_step(self, all_obs, initial_state, all_actions):"
data/raw/repos\research\pcl_rl,policy.py,"def get_initializer(self, batch_size, initial_state, initial_actions):"
data/raw/repos\research\pcl_rl,policy.py,"def calculate_kl(self, my_logits, other_logits):"
data/raw/repos\research\pcl_rl,policy.py,def get_cell(self):
data/raw/repos\research\pcl_rl,policy.py,"def mlp(cell_input, prev_internal_state):"
data/raw/repos\research\pcl_rl,policy.py,"def single_step(self, obs, actions, prev_actions, greedy=False):"
data/raw/repos\research\pcl_rl,policy.py,"def sample_step(self, obs, prev_internal_state, prev_actions, greedy=False):"
data/raw/repos\research\pcl_rl,policy.py,"def multi_step(self, all_obs, initial_state, all_actions):"
data/raw/repos\research\pcl_rl,replay_buffer.py,"def __init__(self, max_size):"
data/raw/repos\research\pcl_rl,replay_buffer.py,def __len__(self):
data/raw/repos\research\pcl_rl,replay_buffer.py,"def seed_buffer(self, episodes):"
data/raw/repos\research\pcl_rl,replay_buffer.py,"def add(self, episodes, *args):"
data/raw/repos\research\pcl_rl,replay_buffer.py,"def remove_n(self, n):"
data/raw/repos\research\pcl_rl,replay_buffer.py,"def get_batch(self, n):"
data/raw/repos\research\pcl_rl,replay_buffer.py,"def update_last_batch(self, delta):"
data/raw/repos\research\pcl_rl,replay_buffer.py,def __len__(self):
data/raw/repos\research\pcl_rl,replay_buffer.py,"def add(self, episodes, priorities, new_idxs=None):"
data/raw/repos\research\pcl_rl,replay_buffer.py,"def remove_n(self, n):"
data/raw/repos\research\pcl_rl,replay_buffer.py,def sampling_distribution(self):
data/raw/repos\research\pcl_rl,replay_buffer.py,"def get_batch(self, n):"
data/raw/repos\research\pcl_rl,replay_buffer.py,"def update_last_batch(self, delta):"
data/raw/repos\research\pcl_rl,trainer.py,def __init__(self):
data/raw/repos\research\pcl_rl,trainer.py,def hparams_string(self):
data/raw/repos\research\pcl_rl,trainer.py,def get_objective(self):
data/raw/repos\research\pcl_rl,trainer.py,def get_policy(self):
data/raw/repos\research\pcl_rl,trainer.py,def get_baseline(self):
data/raw/repos\research\pcl_rl,trainer.py,def get_trust_region_p_opt(self):
data/raw/repos\research\pcl_rl,trainer.py,def get_value_opt(self):
data/raw/repos\research\pcl_rl,trainer.py,def get_model(self):
data/raw/repos\research\pcl_rl,trainer.py,def get_replay_buffer(self):
data/raw/repos\research\pcl_rl,trainer.py,def get_buffer_seeds(self):
data/raw/repos\research\pcl_rl,trainer.py,"def get_controller(self, env):"
data/raw/repos\research\pcl_rl,trainer.py,"def do_before_step(self, step):"
data/raw/repos\research\pcl_rl,trainer.py,def run(self):
data/raw/repos\research\pcl_rl,trainer.py,"def init_fn(sess, saver):"
data/raw/repos\research\pcl_rl,trainer.py,def main(unused_argv):
data/raw/repos\research\pcl_rl,trust_region.py,def var_size(v):
data/raw/repos\research\pcl_rl,trust_region.py,"def gradients(loss, var_list):"
data/raw/repos\research\pcl_rl,trust_region.py,"def flatgrad(loss, var_list):"
data/raw/repos\research\pcl_rl,trust_region.py,def get_flat(var_list):
data/raw/repos\research\pcl_rl,trust_region.py,"def set_from_flat(var_list, flat_theta):"
data/raw/repos\research\pcl_rl,trust_region.py,"def __init__(self, max_divergence=0.1, cg_damping=0.1):"
data/raw/repos\research\pcl_rl,trust_region.py,def setup_placeholders(self):
data/raw/repos\research\pcl_rl,trust_region.py,"def optimize(self, sess, feed_dict):"
data/raw/repos\research\pcl_rl,trust_region.py,def calc_fisher_vector_product(tangent):
data/raw/repos\research\pcl_rl,trust_region.py,def calc_loss(theta):
data/raw/repos\research\pcl_rl,trust_region.py,"def conjugate_gradient(f_Ax, b, cg_iters=10, residual_tol=1e-10):"
data/raw/repos\research\pcl_rl,trust_region.py,"def linesearch(f, x, fullstep, expected_improve_rate):"
data/raw/repos\research\rebar,datasets.py,def load_data(hparams):
data/raw/repos\research\rebar,datasets.py,def read_MNIST(binarize=False):
data/raw/repos\research\rebar,datasets.py,def read_omniglot(binarize=False):
data/raw/repos\research\rebar,datasets.py,def reshape_data(data):
data/raw/repos\research\rebar,download_data.py,def load_mnist_float(local_filename):
data/raw/repos\research\rebar,logger.py,def __init__(self):
data/raw/repos\research\rebar,logger.py,"def log(self, key, value):"
data/raw/repos\research\rebar,logger.py,def flush(self):
data/raw/repos\research\rebar,rebar.py,"def initialize(self, sess):"
data/raw/repos\research\rebar,rebar.py,"def _create_eta(self, shape=[], collection='CV'):"
data/raw/repos\research\rebar,rebar.py,"def _create_transformation(self, input, n_output, reuse, scope_prefix):"
data/raw/repos\research\rebar,rebar.py,"def _recognition_network(self, sampler=None, log_likelihood_func=None):"
data/raw/repos\research\rebar,rebar.py,"def _generator_network(self, samples, logQ, log_likelihood_func=None):"
data/raw/repos\research\rebar,rebar.py,def _create_loss(self):
data/raw/repos\research\rebar,rebar.py,"def _reshape(self, t):"
data/raw/repos\research\rebar,rebar.py,"def compute_tensor_variance(self, t):"
data/raw/repos\research\rebar,rebar.py,"def _create_train_op(self, grads_and_vars, extra_grads_and_vars=[]):"
data/raw/repos\research\rebar,rebar.py,def _create_network(self):
data/raw/repos\research\rebar,rebar.py,"def partial_fit(self, X, n_samples=1):"
data/raw/repos\research\rebar,rebar.py,"def partial_grad(self, X, n_samples=1):"
data/raw/repos\research\rebar,rebar.py,"def partial_eval(self, X, n_samples=5):"
data/raw/repos\research\rebar,rebar.py,"def _mean_sample(self, log_alpha, _, layer):"
data/raw/repos\research\rebar,rebar.py,def _generate_randomness(self):
data/raw/repos\research\rebar,rebar.py,"def _u_to_v(self, log_alpha, u, eps = 1e-8):"
data/raw/repos\research\rebar,rebar.py,"def _random_sample(self, log_alpha, u, layer):"
data/raw/repos\research\rebar,rebar.py,"def _random_sample_soft(self, log_alpha, u, layer, temperature=None):"
data/raw/repos\research\rebar,rebar.py,"def _random_sample_soft_v(self, log_alpha, _, layer, temperature=None):"
data/raw/repos\research\rebar,rebar.py,def get_gumbel_gradient(self):
data/raw/repos\research\rebar,rebar.py,"def _random_sample_switch(self, log_alpha, u, layer, switch_layer, temperature=None):"
data/raw/repos\research\rebar,rebar.py,"def _random_sample_switch_v(self, log_alpha, u, layer, switch_layer, temperature=None):"
data/raw/repos\research\rebar,rebar.py,def get_nvil_gradient(self):
data/raw/repos\research\rebar,rebar.py,def get_simple_muprop_gradient(self):
data/raw/repos\research\rebar,rebar.py,def get_muprop_gradient(self):
data/raw/repos\research\rebar,rebar.py,"def _create_gumbel_control_variate(self, logQHard, temperature=None):"
data/raw/repos\research\rebar,rebar.py,"def _create_gumbel_control_variate_quadratic(self, logQHard, temperature=None):"
data/raw/repos\research\rebar,rebar.py,def _create_hard_elbo(self):
data/raw/repos\research\rebar,rebar.py,"def multiply_by_eta(self, h_grads, eta):"
data/raw/repos\research\rebar,rebar.py,"def multiply_by_eta_per_layer(self, h_grads, eta):"
data/raw/repos\research\rebar,rebar.py,"def multiply_by_eta_per_unit(self, h_grads, eta):"
data/raw/repos\research\rebar,rebar.py,def get_dynamic_rebar_gradient(self):
data/raw/repos\research\rebar,rebar.py,def get_rebar_gradient(self):
data/raw/repos\research\rebar,rebar.py,def _create_loss(self):
data/raw/repos\research\rebar,rebar.py,def _create_network(self):
data/raw/repos\research\rebar,rebar.py,def _create_loss(self):
data/raw/repos\research\rebar,rebar.py,def _create_network(self):
data/raw/repos\research\rebar,rebar.py,def _create_loss(self):
data/raw/repos\research\rebar,rebar.py,def _create_network(self):
data/raw/repos\research\rebar,rebar.py,def _create_loss(self):
data/raw/repos\research\rebar,rebar.py,def _create_network(self):
data/raw/repos\research\rebar,rebar.py,def _create_loss(self):
data/raw/repos\research\rebar,rebar.py,def _create_network(self):
data/raw/repos\research\rebar,rebar.py,"def compute_gradient_moments(self, grads_and_vars):"
data/raw/repos\research\rebar,rebar.py,def _create_loss(self):
data/raw/repos\research\rebar,rebar.py,def _create_network(self):
data/raw/repos\research\rebar,rebar.py,"def _random_sample_soft(self, log_alpha, u, layer, temperature=None):"
data/raw/repos\research\rebar,rebar.py,def _create_loss(self):
data/raw/repos\research\rebar,rebar_train.py,"def manual_scalar_summary(name, value):"
data/raw/repos\research\rebar,rebar_train.py,"def eval(sbn, eval_xs, n_samples=100, batch_size=5):"
data/raw/repos\research\rebar,rebar_train.py,"def train(sbn, train_xs, valid_xs, test_xs, training_steps, debug=False):"
data/raw/repos\research\rebar,rebar_train.py,def main():
data/raw/repos\research\rebar,utils.py,"def exp_moving_average(x, alpha=0.9):"
data/raw/repos\research\rebar,utils.py,def sanitize(s):
data/raw/repos\research\rebar,utils.py,def softplus(x):
data/raw/repos\research\rebar,utils.py,"def safe_log_prob(x, eps=1e-8):"
data/raw/repos\research\rebar,utils.py,def rms(x):
data/raw/repos\research\rebar,utils.py,def center(x):
data/raw/repos\research\rebar,utils.py,"def vectorize(grads_and_vars, set_none_to_zero=False, skip_none=False):"
data/raw/repos\research\rebar,utils.py,"def add_grads_and_vars(a, b):"
data/raw/repos\research\rebar,utils.py,"def binary_log_likelihood(y, log_y_hat):"
data/raw/repos\research\rebar,utils.py,"def cov(a, b):"
data/raw/repos\research\rebar,utils.py,"def corr(a, b):"
data/raw/repos\research\rebar,utils.py,"def logSumExp(t, axis=0, keep_dims = False):"
data/raw/repos\research\seq_flow_lite,export_to_tflite.py,def load_runner_config():
data/raw/repos\research\seq_flow_lite,export_to_tflite.py,def main(_):
data/raw/repos\research\seq_flow_lite,input_fn_reader.py,"def imdb_reviews(features, _):"
data/raw/repos\research\seq_flow_lite,input_fn_reader.py,"def civil_comments(features, runner_config):"
data/raw/repos\research\seq_flow_lite,input_fn_reader.py,"def goemotions(features, runner_config):"
data/raw/repos\research\seq_flow_lite,input_fn_reader.py,"def create_input_fn(runner_config, mode, drop_remainder):"
data/raw/repos\research\seq_flow_lite,input_fn_reader.py,"def _post_processor(features, batch_size):"
data/raw/repos\research\seq_flow_lite,input_fn_reader.py,def _input_fn(params):
data/raw/repos\research\seq_flow_lite,metric_functions.py,"def classification_metric(per_example_loss, label_ids, logits):"
data/raw/repos\research\seq_flow_lite,metric_functions.py,"def labeling_metric(per_example_loss, label_ids, logits):"
data/raw/repos\research\seq_flow_lite,trainer.py,def load_runner_config():
data/raw/repos\research\seq_flow_lite,trainer.py,"def create_model(model, model_config, features, mode, model_name):"
data/raw/repos\research\seq_flow_lite,trainer.py,"def create_optimizer(loss, runner_config, params):"
data/raw/repos\research\seq_flow_lite,trainer.py,def model_fn_builder(runner_config):
data/raw/repos\research\seq_flow_lite,trainer.py,"def model_fn(features, mode, params):"
data/raw/repos\research\seq_flow_lite,trainer.py,def main(_):
data/raw/repos\research\seq_flow_lite,trainer_v2.py,def load_runner_config():
data/raw/repos\research\seq_flow_lite,trainer_v2.py,"def compute_loss(logits, labels, model_config, mode):"
data/raw/repos\research\seq_flow_lite,trainer_v2.py,"def model_fn_builder(runner_config, mode):"
data/raw/repos\research\seq_flow_lite,trainer_v2.py,def main(_):
data/raw/repos\research\seq_flow_lite,trainer_v2.py,def train_step(features):
data/raw/repos\research\seq_flow_lite\demo\colab,setup.py,def initialize_options(self):
data/raw/repos\research\seq_flow_lite\demo\colab,setup.py,def finalize_options(self):
data/raw/repos\research\seq_flow_lite\demo\colab,setup.py,def run(self):
data/raw/repos\research\seq_flow_lite\layers,base_layers.py,"def __init__(self, parameters, **kwargs):"
data/raw/repos\research\seq_flow_lite\layers,base_layers.py,"def _assert_rank_and_type(self, tensor, rank, dtype=tf.float32):"
data/raw/repos\research\seq_flow_lite\layers,base_layers.py,"def add_weight_wrapper(self, shape):"
data/raw/repos\research\seq_flow_lite\layers,base_layers.py,"def quantize_parameter(self, tensor, num_bits=8):"
data/raw/repos\research\seq_flow_lite\layers,base_layers.py,"def add_bias(self, shape):"
data/raw/repos\research\seq_flow_lite\layers,base_layers.py,"def add_reg_loss(self, weight):"
data/raw/repos\research\seq_flow_lite\layers,base_layers.py,"def assign_moving_average(self, var, update, ema_decay):"
data/raw/repos\research\seq_flow_lite\layers,base_layers.py,"def quantize_tensor(self, tf_only):"
data/raw/repos\research\seq_flow_lite\layers,base_layers.py,"def qrange_sigmoid(self, tensor, tf_only=False):"
data/raw/repos\research\seq_flow_lite\layers,base_layers.py,"def qrange_tanh(self, tensor, tf_only=False):"
data/raw/repos\research\seq_flow_lite\layers,base_layers.py,"def quantized_tanh(self, tensor, tf_only=False):"
data/raw/repos\research\seq_flow_lite\layers,base_layers.py,"def quantized_sigmoid(self, tensor, tf_only=False):"
data/raw/repos\research\seq_flow_lite\layers,base_layers.py,"def get_batch_dimension(self, tensor):"
data/raw/repos\research\seq_flow_lite\layers,base_layers.py,"def inverse_normalizer(self, mask):"
data/raw/repos\research\seq_flow_lite\layers,base_layers.py,"def random_drop_to_zero(self, tensor, zero_probability):"
data/raw/repos\research\seq_flow_lite\layers,base_layers.py,def clone_initializer(initializer):
data/raw/repos\research\seq_flow_lite\layers,conv_layers.py,"def _unpack(self, value):"
data/raw/repos\research\seq_flow_lite\layers,conv_layers.py,"def build(self, input_shapes):"
data/raw/repos\research\seq_flow_lite\layers,conv_layers.py,"def _create_normalizer(self, normalization_fn, **kwargs):"
data/raw/repos\research\seq_flow_lite\layers,conv_layers.py,"def _conv_r4(self, inputs, normalize_method):"
data/raw/repos\research\seq_flow_lite\layers,conv_layers.py,"def _conv_r3(self, inputs, normalize_method):"
data/raw/repos\research\seq_flow_lite\layers,conv_layers.py,"def call(self, inputs):"
data/raw/repos\research\seq_flow_lite\layers,conv_layers.py,def normalize_method(tensor):
data/raw/repos\research\seq_flow_lite\layers,conv_layers.py,"def _do_call(self, inputs, normalize_method):"
data/raw/repos\research\seq_flow_lite\layers,conv_layers.py,"def quantize_using_output_range(self, tensor):"
data/raw/repos\research\seq_flow_lite\layers,conv_layers.py,"def _create_normalizer(self, normalization_fn, **kwargs):"
data/raw/repos\research\seq_flow_lite\layers,conv_layers.py,"def call(self, inputs, mask, inverse_normalizer):"
data/raw/repos\research\seq_flow_lite\layers,conv_layers.py,def normalize_method(tensor):
data/raw/repos\research\seq_flow_lite\layers,dense_layers.py,"def build(self, input_shapes):"
data/raw/repos\research\seq_flow_lite\layers,dense_layers.py,"def _create_normalizer(self, normalization_fn, **kwargs):"
data/raw/repos\research\seq_flow_lite\layers,dense_layers.py,"def _dense_r2(self, inputs, normalize_method):"
data/raw/repos\research\seq_flow_lite\layers,dense_layers.py,"def _dense_r34(self, inputs, normalize_method):"
data/raw/repos\research\seq_flow_lite\layers,dense_layers.py,"def call(self, inputs):"
data/raw/repos\research\seq_flow_lite\layers,dense_layers.py,def normalize_method(tensor):
data/raw/repos\research\seq_flow_lite\layers,dense_layers.py,"def _do_call(self, inputs, normalize_method):"
data/raw/repos\research\seq_flow_lite\layers,dense_layers.py,"def quantize_using_output_range(self, tensor):"
data/raw/repos\research\seq_flow_lite\layers,dense_layers.py,"def _create_normalizer(self, normalization_fn, **kwargs):"
data/raw/repos\research\seq_flow_lite\layers,dense_layers.py,"def call(self, inputs, mask, inverse_normalizer=None):"
data/raw/repos\research\seq_flow_lite\layers,dense_layers.py,def normalize_method(tensor):
data/raw/repos\research\seq_flow_lite\layers,embedding_layers.py,"def build(self, input_shapes):"
data/raw/repos\research\seq_flow_lite\layers,embedding_layers.py,"def call(self, indices):"
data/raw/repos\research\seq_flow_lite\layers,embedding_layers.py,"def __init__(self, **kwargs):"
data/raw/repos\research\seq_flow_lite\layers,embedding_layers.py,"def fully_connected(self, inputs, bias=None, weights_scale_factor=None):"
data/raw/repos\research\seq_flow_lite\layers,misc_layers.py,"def __init__(self, scalar=True, normalize=True, **kwargs):"
data/raw/repos\research\seq_flow_lite\layers,misc_layers.py,"def build(self, input_shapes):"
data/raw/repos\research\seq_flow_lite\layers,misc_layers.py,"def call(self, inputs, mask, inverse_normalizer):"
data/raw/repos\research\seq_flow_lite\layers,misc_layers.py,"def __init__(self, **kwargs):"
data/raw/repos\research\seq_flow_lite\layers,misc_layers.py,"def call(self, keys, queries, sequence_length):"
data/raw/repos\research\seq_flow_lite\layers,misc_layers.py,"def call(self, inputs, seq_length):"
data/raw/repos\research\seq_flow_lite\layers,normalization_layers.py,"def __init__(self, ema_decay=0.999, **kwargs):"
data/raw/repos\research\seq_flow_lite\layers,normalization_layers.py,"def build(self, input_shapes):"
data/raw/repos\research\seq_flow_lite\layers,normalization_layers.py,"def call(self, inputs):"
data/raw/repos\research\seq_flow_lite\layers,normalization_layers.py,"def _batch_norm(self, inputs, mean_mom, var_mom):"
data/raw/repos\research\seq_flow_lite\layers,normalization_layers.py,"def __init__(self, rank=2, **kwargs):"
data/raw/repos\research\seq_flow_lite\layers,normalization_layers.py,"def _reduce(self, tensor, multiplier):"
data/raw/repos\research\seq_flow_lite\layers,normalization_layers.py,"def call(self, inputs, mask, inverse_normalizer):"
data/raw/repos\research\seq_flow_lite\layers,normalization_layers.py,"def __init__(self, axes=None, **kwargs):"
data/raw/repos\research\seq_flow_lite\layers,normalization_layers.py,"def build(self, input_shape):"
data/raw/repos\research\seq_flow_lite\layers,normalization_layers.py,"def call(self, tensor):"
data/raw/repos\research\seq_flow_lite\layers,projection_layers.py,"def __init__(self, model_config, mode, **kwargs):"
data/raw/repos\research\seq_flow_lite\layers,projection_layers.py,"def _get_params(varname, default_value=None):"
data/raw/repos\research\seq_flow_lite\layers,projection_layers.py,"def call(self, inputs):"
data/raw/repos\research\seq_flow_lite\layers,projection_layers.py,"def __init__(self, model_config, mode, **kwargs):"
data/raw/repos\research\seq_flow_lite\layers,projection_layers.py,"def _get_params(varname, default_value=None):"
data/raw/repos\research\seq_flow_lite\layers,projection_layers.py,"def call(self, inputs):"
data/raw/repos\research\seq_flow_lite\layers,qrnn_layers.py,"def __init__(self, forward=True, **kwargs):"
data/raw/repos\research\seq_flow_lite\layers,qrnn_layers.py,"def call(self, multiplier, constant):"
data/raw/repos\research\seq_flow_lite\layers,qrnn_layers.py,"def _qrnn_pooling(self, multipler, constant):"
data/raw/repos\research\seq_flow_lite\layers,qrnn_layers.py,"def _step(index, state, states):"
data/raw/repos\research\seq_flow_lite\layers,qrnn_layers.py,"def _termination(index, state, states):"
data/raw/repos\research\seq_flow_lite\layers,qrnn_layers.py,"def call(self, gates, mask):"
data/raw/repos\research\seq_flow_lite\layers,qrnn_layers.py,"def _qrnn_preprocess(self, gates):"
data/raw/repos\research\seq_flow_lite\layers,qrnn_layers.py,"def _qrnn_postprocess(self, states, multiplier):"
data/raw/repos\research\seq_flow_lite\layers,qrnn_layers.py,"def _qrnn_zoneout(self, multipler, constant):"
data/raw/repos\research\seq_flow_lite\layers,qrnn_layers.py,"def _create_qrnn_pooling_unidirectional(self, gates, mask):"
data/raw/repos\research\seq_flow_lite\layers,qrnn_layers.py,"def call(self, inputs, mask, inverse_normalizer=None):"
data/raw/repos\research\seq_flow_lite\layers,qrnn_layers.py,"def call(self, inputs, mask, inverse_normalizer=None):"
data/raw/repos\research\seq_flow_lite\layers,qrnn_layers.py,"def call(self, inputs, mask, inverse_normalizer=None):"
data/raw/repos\research\seq_flow_lite\layers,qrnn_layers.py,"def call(self, inputs, maskr3, inverse_normalizer):"
data/raw/repos\research\seq_flow_lite\layers,qrnn_layers.py,"def _apply_qrnn_stack(self, inputs, mask3, inverse_normalizer):"
data/raw/repos\research\seq_flow_lite\layers,qrnn_layers.py,"def call(self, inputs, sequence_length):"
data/raw/repos\research\seq_flow_lite\layers,quantization_layers.py,"def __init__(self, ema_decay=0.99, num_bits=8, **kwargs):"
data/raw/repos\research\seq_flow_lite\layers,quantization_layers.py,"def build(self, input_shapes):"
data/raw/repos\research\seq_flow_lite\layers,quantization_layers.py,"def call(self, inputs):"
data/raw/repos\research\seq_flow_lite\layers,quantization_layers.py,"def quantize_using_range(self, inputs):"
data/raw/repos\research\seq_flow_lite\layers,quantization_layers.py,"def __init__(self, axis=2, **kwargs):"
data/raw/repos\research\seq_flow_lite\layers,quantization_layers.py,"def _reduce_list(self, tensor_list, functor):"
data/raw/repos\research\seq_flow_lite\layers,quantization_layers.py,"def call(self, tensors):"
data/raw/repos\research\seq_flow_lite\layers,transformer_layers.py,"def call(self, inputs, mask, inverse_normalizer, attn_mask=None):"
data/raw/repos\research\seq_flow_lite\layers,transformer_layers.py,"def call(self, inputs, mask, inverse_normalizer, attn_mask=None):"
data/raw/repos\research\seq_flow_lite\layers,transformer_layers.py,"def call(self, inputs, mask, inverse_normalizer, attn_mask=None):"
data/raw/repos\research\seq_flow_lite\layers,transformer_layers.py,"def call(self, input_indices, sequence_length):"
data/raw/repos\research\seq_flow_lite\layers,transformer_layers.py,"def call(self, inputs, sequence_length):"
data/raw/repos\research\seq_flow_lite\layers,transformer_layers.py,"def call(self, inputs, sequence_length):"
data/raw/repos\research\seq_flow_lite\layers,transformer_layers.py,"def get_uniform_attention(self, attn_mask=None):"
data/raw/repos\research\seq_flow_lite\models,byteqrnn.py,"def __init__(self, config, mode, **kwargs):"
data/raw/repos\research\seq_flow_lite\models,byteqrnn.py,"def _get_params(varname, default_value=None):"
data/raw/repos\research\seq_flow_lite\models,byteqrnn.py,"def call(self, token_ids, seq_length):"
data/raw/repos\research\seq_flow_lite\models,charformer.py,"def __init__(self, config, mode, **kwargs):"
data/raw/repos\research\seq_flow_lite\models,charformer.py,"def _get_params(varname, default_value=None):"
data/raw/repos\research\seq_flow_lite\models,charformer.py,"def call(self, token_ids, seq_length):"
data/raw/repos\research\seq_flow_lite\models,pqrnn.py,"def __init__(self, config, mode, **kwargs):"
data/raw/repos\research\seq_flow_lite\models,pqrnn.py,"def _get_params(varname, default_value=None):"
data/raw/repos\research\seq_flow_lite\models,pqrnn.py,"def call(self, projection, seq_length):"
data/raw/repos\research\seq_flow_lite\models,pqrnn.py,"def __init__(self, config, mode, **kwargs):"
data/raw/repos\research\seq_flow_lite\models,pqrnn.py,"def call(self, inputs):"
data/raw/repos\research\seq_flow_lite\models,prado.py,"def __init__(self, invalid_value, ngram=2, skip_bigram=None, **kwargs):"
data/raw/repos\research\seq_flow_lite\models,prado.py,"def call(self, inputs, mask, inverse_normalizer):"
data/raw/repos\research\seq_flow_lite\models,prado.py,"def quantize_parameter(self, weight, num_bits=8):"
data/raw/repos\research\seq_flow_lite\models,prado.py,"def __init__(self, filters, ngram=2, skip_bigram=None, **kwargs):"
data/raw/repos\research\seq_flow_lite\models,prado.py,"def call(self, values_in, attention_in, mask, inverse_normalizer):"
data/raw/repos\research\seq_flow_lite\models,prado.py,"def __init__(self, config, mode, **kwargs):"
data/raw/repos\research\seq_flow_lite\models,prado.py,"def _get_params(varname, default_value=None):"
data/raw/repos\research\seq_flow_lite\models,prado.py,"def _add_attention_pool_layer(self, channels, ngram, skip_bigram=None):"
data/raw/repos\research\seq_flow_lite\models,prado.py,"def _apply_fc_dropout(self, layer, inputs, mask, inverse_normalizer):"
data/raw/repos\research\seq_flow_lite\models,prado.py,"def call(self, projection, seq_length):"
data/raw/repos\research\seq_flow_lite\models,prado.py,"def __init__(self, config, mode, **kwargs):"
data/raw/repos\research\seq_flow_lite\models,prado.py,"def call(self, inputs):"
data/raw/repos\research\seq_flow_lite\models,transformer_encoder.py,"def __init__(self, config, mode):"
data/raw/repos\research\seq_flow_lite\models,transformer_encoder.py,"def _get_params(varname, default_value=None):"
data/raw/repos\research\seq_flow_lite\models,transformer_encoder.py,"def build(self, input_shape):"
data/raw/repos\research\seq_flow_lite\models,transformer_encoder.py,"def call(self, indices, sequence_length):"
data/raw/repos\research\seq_flow_lite\models,transformer_encoder.py,"def build(self, input_shape):"
data/raw/repos\research\seq_flow_lite\models,transformer_encoder.py,"def call(self, embeddings, sequence_length):"
data/raw/repos\research\seq_flow_lite\models,transformer_encoder.py,"def __init__(self, config, mode):"
data/raw/repos\research\seq_flow_lite\models,transformer_encoder.py,"def build(self, input_shape):"
data/raw/repos\research\seq_flow_lite\models,transformer_encoder.py,"def call(self, embeddings, sequence_length):"
data/raw/repos\research\seq_flow_lite\models,transformer_uniform_attn_decoder.py,"def __init__(self, config, mode):"
data/raw/repos\research\seq_flow_lite\models,transformer_uniform_attn_decoder.py,"def _get_params(varname, default_value=None):"
data/raw/repos\research\seq_flow_lite\models,transformer_uniform_attn_decoder.py,"def training_inputs(self, input_ids, input_mask):"
data/raw/repos\research\seq_flow_lite\models,transformer_uniform_attn_decoder.py,"def model_outputs(self, layer_in):"
data/raw/repos\research\seq_flow_lite\models,transformer_uniform_attn_decoder.py,"def beam_search_tile(output, tile_pattern, final_shape):"
data/raw/repos\research\seq_flow_lite\models,transformer_uniform_attn_decoder.py,"def symbols_to_logits_fn(ids, step, cache):"
data/raw/repos\research\seq_flow_lite\models\sgnn,run_tflite.py,def main(argv):
data/raw/repos\research\seq_flow_lite\models\sgnn,sgnn.py,def preprocess(text):
data/raw/repos\research\seq_flow_lite\models\sgnn,sgnn.py,"def get_ngrams(tokens, n):"
data/raw/repos\research\seq_flow_lite\models\sgnn,sgnn.py,"def project(ngrams, hash_seed, buckets):"
data/raw/repos\research\seq_flow_lite\models\sgnn,sgnn.py,"def fused_project(ngrams, hash_seed, buckets):"
data/raw/repos\research\seq_flow_lite\models\sgnn,sgnn.py,"def func(ngrams_values, *ngrams_row_splits):"
data/raw/repos\research\seq_flow_lite\models\sgnn,sgnn.py,"def sgnn(texts, hash_seed, ngram_size):"
data/raw/repos\research\seq_flow_lite\models\sgnn,sgnn.py,"def __init__(self, seed, ngram_size, **kwargs):"
data/raw/repos\research\seq_flow_lite\models\sgnn,sgnn.py,def get_config(self):
data/raw/repos\research\seq_flow_lite\models\sgnn,sgnn.py,"def call(self, x):"
data/raw/repos\research\seq_flow_lite\models\sgnn,sgnn.py,"def compute_output_shape(self, input_shape):"
data/raw/repos\research\seq_flow_lite\models\sgnn,sgnn.py,"def keras_model(hash_seed, ngram_size, fc_size_list, hparams):"
data/raw/repos\research\seq_flow_lite\models\sgnn,sgnn_test.py,def test_preprocess(self):
data/raw/repos\research\seq_flow_lite\models\sgnn,sgnn_test.py,def test_get_ngram(self):
data/raw/repos\research\seq_flow_lite\models\sgnn,sgnn_test.py,def test_project(self):
data/raw/repos\research\seq_flow_lite\models\sgnn,sgnn_test.py,def test_sgnn(self):
data/raw/repos\research\seq_flow_lite\models\sgnn,sgnn_test.py,def test_keras_model(self):
data/raw/repos\research\seq_flow_lite\models\sgnn,train.py,"def dataset_fn(batch_size, is_training, split, try_gcs, max_input_len):"
data/raw/repos\research\seq_flow_lite\models\sgnn,train.py,def _get_text(item):
data/raw/repos\research\seq_flow_lite\models\sgnn,train.py,"def save_and_convert(model, output_dir):"
data/raw/repos\research\seq_flow_lite\models\sgnn,train.py,def train_and_evaluate():
data/raw/repos\research\seq_flow_lite\models\sgnn,train.py,def main(_):
data/raw/repos\research\seq_flow_lite\tf_ops,denylist_op_test.py,def test_correct(self):
data/raw/repos\research\seq_flow_lite\tf_ops,denylist_op_test.py,def test_correct(self):
data/raw/repos\research\seq_flow_lite\tf_ops,denylist_op_test.py,def test_correct(self):
data/raw/repos\research\seq_flow_lite\utils,misc_utils.py,"def random_substr(str_tensor, max_words):"
data/raw/repos\research\seq_flow_lite\utils,tflite_utils.py,"def _dump_graph_in_text_format(filename, graph_def):"
data/raw/repos\research\seq_flow_lite\utils,tflite_utils.py,"def get_mean_stddev_values(min_value_of_features, max_value_of_features):"
data/raw/repos\research\seq_flow_lite\utils,tflite_utils.py,def op_details(self):
data/raw/repos\research\seq_flow_lite\utils,tflite_utils.py,def op_histogram(self):
data/raw/repos\research\seq_flow_lite\utils,tflite_utils.py,"def check_op_histogram(self, expected):"
data/raw/repos\research\seq_flow_lite\utils,tflite_utils.py,"def set_output_quantized_for_custom_ops(graph_def, use_mlir=True):"
data/raw/repos\research\slim,download_and_convert_data.py,def main(_):
data/raw/repos\research\slim,eval_image_classifier.py,def main(_):
data/raw/repos\research\slim,export_inference_graph.py,def main(_):
data/raw/repos\research\slim,export_inference_graph_test.py,def testExportInferenceGraph(self):
data/raw/repos\research\slim,train_image_classifier.py,"def _configure_learning_rate(num_samples_per_epoch, global_step):"
data/raw/repos\research\slim,train_image_classifier.py,def _configure_optimizer(learning_rate):
data/raw/repos\research\slim,train_image_classifier.py,def _get_init_fn():
data/raw/repos\research\slim,train_image_classifier.py,def _get_variables_to_train():
data/raw/repos\research\slim,train_image_classifier.py,def main(_):
data/raw/repos\research\slim,train_image_classifier.py,def clone_fn(batch_queue):
data/raw/repos\research\slim\datasets,build_imagenet_data.py,def _int64_feature(value):
data/raw/repos\research\slim\datasets,build_imagenet_data.py,def _float_feature(value):
data/raw/repos\research\slim\datasets,build_imagenet_data.py,def _bytes_feature(value):
data/raw/repos\research\slim\datasets,build_imagenet_data.py,def __init__(self):
data/raw/repos\research\slim\datasets,build_imagenet_data.py,"def png_to_jpeg(self, image_data):"
data/raw/repos\research\slim\datasets,build_imagenet_data.py,"def cmyk_to_rgb(self, image_data):"
data/raw/repos\research\slim\datasets,build_imagenet_data.py,"def decode_jpeg(self, image_data):"
data/raw/repos\research\slim\datasets,build_imagenet_data.py,def _is_png(filename):
data/raw/repos\research\slim\datasets,build_imagenet_data.py,def _is_cmyk(filename):
data/raw/repos\research\slim\datasets,build_imagenet_data.py,"def _process_image(filename, coder):"
data/raw/repos\research\slim\datasets,build_imagenet_data.py,"def _find_image_files(data_dir, labels_file):"
data/raw/repos\research\slim\datasets,build_imagenet_data.py,"def _find_human_readable_labels(synsets, synset_to_human):"
data/raw/repos\research\slim\datasets,build_imagenet_data.py,"def _find_image_bounding_boxes(filenames, image_to_bboxes):"
data/raw/repos\research\slim\datasets,build_imagenet_data.py,def _build_synset_lookup(imagenet_metadata_file):
data/raw/repos\research\slim\datasets,build_imagenet_data.py,def _build_bounding_box_lookup(bounding_box_file):
data/raw/repos\research\slim\datasets,build_imagenet_data.py,def main(unused_argv):
data/raw/repos\research\slim\datasets,cifar10.py,"def get_split(split_name, dataset_dir, file_pattern=None, reader=None):"
data/raw/repos\research\slim\datasets,dataset_factory.py,"def get_dataset(name, split_name, dataset_dir, file_pattern=None, reader=None):"
data/raw/repos\research\slim\datasets,dataset_utils.py,def int64_feature(values):
data/raw/repos\research\slim\datasets,dataset_utils.py,def bytes_list_feature(values):
data/raw/repos\research\slim\datasets,dataset_utils.py,def float_list_feature(values):
data/raw/repos\research\slim\datasets,dataset_utils.py,def bytes_feature(values):
data/raw/repos\research\slim\datasets,dataset_utils.py,def float_feature(values):
data/raw/repos\research\slim\datasets,dataset_utils.py,"def image_to_tfexample(image_data, image_format, height, width, class_id):"
data/raw/repos\research\slim\datasets,dataset_utils.py,"def download_url(url, dataset_dir):"
data/raw/repos\research\slim\datasets,dataset_utils.py,"def _progress(count, block_size, total_size):"
data/raw/repos\research\slim\datasets,dataset_utils.py,"def download_and_uncompress_tarball(tarball_url, dataset_dir):"
data/raw/repos\research\slim\datasets,dataset_utils.py,"def download_and_uncompress_zipfile(zip_url, dataset_dir):"
data/raw/repos\research\slim\datasets,dataset_utils.py,"def has_labels(dataset_dir, filename=LABELS_FILENAME):"
data/raw/repos\research\slim\datasets,dataset_utils.py,"def read_label_file(dataset_dir, filename=LABELS_FILENAME):"
data/raw/repos\research\slim\datasets,dataset_utils.py,"def open_sharded_output_tfrecords(exit_stack, base_path, num_shards):"
data/raw/repos\research\slim\datasets,download_and_convert_cifar10.py,"def _add_to_tfrecord(filename, tfrecord_writer, offset=0):"
data/raw/repos\research\slim\datasets,download_and_convert_cifar10.py,"def _get_output_filename(dataset_dir, split_name):"
data/raw/repos\research\slim\datasets,download_and_convert_cifar10.py,def _download_and_uncompress_dataset(dataset_dir):
data/raw/repos\research\slim\datasets,download_and_convert_cifar10.py,"def _progress(count, block_size, total_size):"
data/raw/repos\research\slim\datasets,download_and_convert_cifar10.py,def _clean_up_temporary_files(dataset_dir):
data/raw/repos\research\slim\datasets,download_and_convert_cifar10.py,def run(dataset_dir):
data/raw/repos\research\slim\datasets,download_and_convert_flowers.py,def __init__(self):
data/raw/repos\research\slim\datasets,download_and_convert_flowers.py,"def read_image_dims(self, sess, image_data):"
data/raw/repos\research\slim\datasets,download_and_convert_flowers.py,"def decode_jpeg(self, sess, image_data):"
data/raw/repos\research\slim\datasets,download_and_convert_flowers.py,def _get_filenames_and_classes(dataset_dir):
data/raw/repos\research\slim\datasets,download_and_convert_flowers.py,"def _get_dataset_filename(dataset_dir, split_name, shard_id):"
data/raw/repos\research\slim\datasets,download_and_convert_flowers.py,"def _convert_dataset(split_name, filenames, class_names_to_ids, dataset_dir):"
data/raw/repos\research\slim\datasets,download_and_convert_flowers.py,def _clean_up_temporary_files(dataset_dir):
data/raw/repos\research\slim\datasets,download_and_convert_flowers.py,def _dataset_exists(dataset_dir):
data/raw/repos\research\slim\datasets,download_and_convert_flowers.py,def run(dataset_dir):
data/raw/repos\research\slim\datasets,download_and_convert_mnist.py,"def _extract_images(filename, num_images):"
data/raw/repos\research\slim\datasets,download_and_convert_mnist.py,"def _extract_labels(filename, num_labels):"
data/raw/repos\research\slim\datasets,download_and_convert_mnist.py,"def _get_output_filename(dataset_dir, split_name):"
data/raw/repos\research\slim\datasets,download_and_convert_mnist.py,def _download_dataset(dataset_dir):
data/raw/repos\research\slim\datasets,download_and_convert_mnist.py,"def _progress(count, block_size, total_size):"
data/raw/repos\research\slim\datasets,download_and_convert_mnist.py,def _clean_up_temporary_files(dataset_dir):
data/raw/repos\research\slim\datasets,download_and_convert_mnist.py,def run(dataset_dir):
data/raw/repos\research\slim\datasets,download_and_convert_visualwakewords.py,"def run(dataset_dir, small_object_area_threshold, foreground_class_of_interest):"
data/raw/repos\research\slim\datasets,download_and_convert_visualwakewords_lib.py,def download_coco_dataset(dataset_dir):
data/raw/repos\research\slim\datasets,download_and_convert_visualwakewords_lib.py,"def _create_tf_example(image, annotations, image_dir):"
data/raw/repos\research\slim\datasets,flowers.py,"def get_split(split_name, dataset_dir, file_pattern=None, reader=None):"
data/raw/repos\research\slim\datasets,imagenet.py,def create_readable_names_for_imagenet_labels():
data/raw/repos\research\slim\datasets,imagenet.py,"def get_split(split_name, dataset_dir, file_pattern=None, reader=None):"
data/raw/repos\research\slim\datasets,mnist.py,"def get_split(split_name, dataset_dir, file_pattern=None, reader=None):"
data/raw/repos\research\slim\datasets,process_bounding_boxes.py,"def GetItem(name, root, index=0):"
data/raw/repos\research\slim\datasets,process_bounding_boxes.py,"def GetInt(name, root, index=0):"
data/raw/repos\research\slim\datasets,process_bounding_boxes.py,def FindNumberBoundingBoxes(root):
data/raw/repos\research\slim\datasets,process_bounding_boxes.py,def ProcessXMLAnnotation(xml_file):
data/raw/repos\research\slim\datasets,visualwakewords.py,"def get_split(split_name, dataset_dir, file_pattern=None, reader=None):"
data/raw/repos\research\slim\deployment,model_deploy.py,def model_fn(inputs_queue):
data/raw/repos\research\slim\deployment,model_deploy.py,"def create_clones(config, model_fn, args=None, kwargs=None):"
data/raw/repos\research\slim\deployment,model_deploy.py,"def _gather_clone_loss(clone, num_clones, regularization_losses):"
data/raw/repos\research\slim\deployment,model_deploy.py,def _sum_clones_gradients(clone_grads):
data/raw/repos\research\slim\deployment,model_deploy.py,def _add_gradients_summaries(grads_and_vars):
data/raw/repos\research\slim\deployment,model_deploy.py,def num_clones(self):
data/raw/repos\research\slim\deployment,model_deploy.py,def clone_on_cpu(self):
data/raw/repos\research\slim\deployment,model_deploy.py,def replica_id(self):
data/raw/repos\research\slim\deployment,model_deploy.py,def num_replicas(self):
data/raw/repos\research\slim\deployment,model_deploy.py,def num_ps_tasks(self):
data/raw/repos\research\slim\deployment,model_deploy.py,def ps_device(self):
data/raw/repos\research\slim\deployment,model_deploy.py,def worker_device(self):
data/raw/repos\research\slim\deployment,model_deploy.py,def caching_device(self):
data/raw/repos\research\slim\deployment,model_deploy.py,"def clone_device(self, clone_index):"
data/raw/repos\research\slim\deployment,model_deploy.py,"def clone_scope(self, clone_index):"
data/raw/repos\research\slim\deployment,model_deploy.py,def optimizer_device(self):
data/raw/repos\research\slim\deployment,model_deploy.py,def inputs_device(self):
data/raw/repos\research\slim\deployment,model_deploy.py,def variables_device(self):
data/raw/repos\research\slim\deployment,model_deploy.py,"def __init__(self, device, tasks):"
data/raw/repos\research\slim\deployment,model_deploy.py,"def choose(self, op):"
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testDefaults(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testCPUonly(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testMultiGPU(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testPS(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testMultiGPUPS(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testReplicasPS(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testReplicasMultiGPUPS(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testVariablesPS(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,"def LogisticClassifier(inputs, labels, scope=None, reuse=None):"
data/raw/repos\research\slim\deployment,model_deploy_test.py,"def BatchNormClassifier(inputs, labels, scope=None, reuse=None):"
data/raw/repos\research\slim\deployment,model_deploy_test.py,def setUp(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testCreateLogisticClassifier(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testCreateSingleclone(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testCreateMulticlone(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testCreateOnecloneWithPS(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testCreateMulticloneWithPS(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def setUp(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testCreateLogisticClassifier(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testCreateSingleclone(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testCreateMulticlone(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testCreateMulticloneCPU(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testCreateOnecloneWithPS(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def setUp(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,"def _addBesselsCorrection(self, sample_size, expected_var):"
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testLocalTrainOp(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testNoSummariesOnGPU(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def ModelFn():
data/raw/repos\research\slim\deployment,model_deploy_test.py,def testNoSummariesOnGPUForEvals(self):
data/raw/repos\research\slim\deployment,model_deploy_test.py,def ModelFn():
data/raw/repos\research\slim\nets,alexnet.py,def alexnet_v2_arg_scope(weight_decay=0.0005):
data/raw/repos\research\slim\nets,alexnet_test.py,def testBuild(self):
data/raw/repos\research\slim\nets,alexnet_test.py,def testFullyConvolutional(self):
data/raw/repos\research\slim\nets,alexnet_test.py,def testGlobalPool(self):
data/raw/repos\research\slim\nets,alexnet_test.py,def testEndPoints(self):
data/raw/repos\research\slim\nets,alexnet_test.py,def testNoClasses(self):
data/raw/repos\research\slim\nets,alexnet_test.py,def testModelVariables(self):
data/raw/repos\research\slim\nets,alexnet_test.py,def testEvaluation(self):
data/raw/repos\research\slim\nets,alexnet_test.py,def testTrainEvalWithReuse(self):
data/raw/repos\research\slim\nets,alexnet_test.py,def testForward(self):
data/raw/repos\research\slim\nets,cifarnet.py,def cifarnet_arg_scope(weight_decay=0.004):
data/raw/repos\research\slim\nets,cyclegan.py,def _dynamic_or_static_shape(tensor):
data/raw/repos\research\slim\nets,cyclegan_test.py,def test_generator_inference(self):
data/raw/repos\research\slim\nets,cyclegan_test.py,"def _test_generator_graph_helper(self, shape):"
data/raw/repos\research\slim\nets,cyclegan_test.py,def test_generator_graph_small(self):
data/raw/repos\research\slim\nets,cyclegan_test.py,def test_generator_graph_medium(self):
data/raw/repos\research\slim\nets,cyclegan_test.py,def test_generator_graph_nonsquare(self):
data/raw/repos\research\slim\nets,cyclegan_test.py,def test_generator_unknown_batch_dim(self):
data/raw/repos\research\slim\nets,cyclegan_test.py,"def _input_and_output_same_shape_helper(self, kernel_size):"
data/raw/repos\research\slim\nets,cyclegan_test.py,def input_and_output_same_shape_kernel3(self):
data/raw/repos\research\slim\nets,cyclegan_test.py,def input_and_output_same_shape_kernel4(self):
data/raw/repos\research\slim\nets,cyclegan_test.py,def input_and_output_same_shape_kernel5(self):
data/raw/repos\research\slim\nets,cyclegan_test.py,def input_and_output_same_shape_kernel6(self):
data/raw/repos\research\slim\nets,cyclegan_test.py,"def _error_if_height_not_multiple_of_four_helper(self, height):"
data/raw/repos\research\slim\nets,cyclegan_test.py,def test_error_if_height_not_multiple_of_four_height29(self):
data/raw/repos\research\slim\nets,cyclegan_test.py,def test_error_if_height_not_multiple_of_four_height30(self):
data/raw/repos\research\slim\nets,cyclegan_test.py,def test_error_if_height_not_multiple_of_four_height31(self):
data/raw/repos\research\slim\nets,cyclegan_test.py,"def _error_if_width_not_multiple_of_four_helper(self, width):"
data/raw/repos\research\slim\nets,cyclegan_test.py,def test_error_if_width_not_multiple_of_four_width29(self):
data/raw/repos\research\slim\nets,cyclegan_test.py,def test_error_if_width_not_multiple_of_four_width30(self):
data/raw/repos\research\slim\nets,cyclegan_test.py,def test_error_if_width_not_multiple_of_four_width31(self):
data/raw/repos\research\slim\nets,dcgan.py,def _validate_image_inputs(inputs):
data/raw/repos\research\slim\nets,dcgan_test.py,def test_generator_run(self):
data/raw/repos\research\slim\nets,dcgan_test.py,def test_generator_graph(self):
data/raw/repos\research\slim\nets,dcgan_test.py,def test_generator_invalid_input(self):
data/raw/repos\research\slim\nets,dcgan_test.py,def test_discriminator_run(self):
data/raw/repos\research\slim\nets,dcgan_test.py,def test_discriminator_graph(self):
data/raw/repos\research\slim\nets,dcgan_test.py,def test_discriminator_invalid_input(self):
data/raw/repos\research\slim\nets,i3d_test.py,def testBuildClassificationNetwork(self):
data/raw/repos\research\slim\nets,i3d_test.py,def testBuildBaseNetwork(self):
data/raw/repos\research\slim\nets,i3d_test.py,def testBuildOnlyUptoFinalEndpoint(self):
data/raw/repos\research\slim\nets,i3d_test.py,def testBuildAndCheckAllEndPointsUptoMixed5c(self):
data/raw/repos\research\slim\nets,i3d_test.py,def testHalfSizeImages(self):
data/raw/repos\research\slim\nets,i3d_test.py,def testTenFrames(self):
data/raw/repos\research\slim\nets,i3d_test.py,def testEvaluation(self):
data/raw/repos\research\slim\nets,i3d_utils.py,def center_initializer():
data/raw/repos\research\slim\nets,i3d_utils.py,"def _initializer(shape, dtype=tf.float32, partition_info=None):"
data/raw/repos\research\slim\nets,i3d_utils.py,"def reduced_kernel_size_3d(input_tensor, kernel_size):"
data/raw/repos\research\slim\nets,inception_resnet_v2.py,"def block35(net, scale=1.0, activation_fn=tf.nn.relu, scope=None, reuse=None):"
data/raw/repos\research\slim\nets,inception_resnet_v2.py,"def block17(net, scale=1.0, activation_fn=tf.nn.relu, scope=None, reuse=None):"
data/raw/repos\research\slim\nets,inception_resnet_v2.py,"def block8(net, scale=1.0, activation_fn=tf.nn.relu, scope=None, reuse=None):"
data/raw/repos\research\slim\nets,inception_resnet_v2.py,"def add_and_check_final(name, net):"
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testBuildLogits(self):
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testBuildWithoutAuxLogits(self):
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testBuildNoClasses(self):
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testBuildEndPoints(self):
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testBuildBaseNetwork(self):
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testBuildOnlyUptoFinalEndpoint(self):
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testBuildAndCheckAllEndPointsUptoPreAuxLogits(self):
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testBuildAndCheckAllEndPointsUptoPreAuxLogitsWithAlignedFeatureMaps(self):
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testBuildAndCheckAllEndPointsUptoPreAuxLogitsWithOutputStrideEight(self):
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testVariablesSetDevice(self):
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testHalfSizeImages(self):
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testGlobalPool(self):
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testGlobalPoolUnknownImageShape(self):
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testUnknownBatchSize(self):
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testEvaluation(self):
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testTrainEvalWithReuse(self):
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testNoBatchNormScaleByDefault(self):
data/raw/repos\research\slim\nets,inception_resnet_v2_test.py,def testBatchNormScale(self):
data/raw/repos\research\slim\nets,inception_v1_test.py,def testBuildClassificationNetwork(self):
data/raw/repos\research\slim\nets,inception_v1_test.py,def testBuildPreLogitsNetwork(self):
data/raw/repos\research\slim\nets,inception_v1_test.py,def testBuildBaseNetwork(self):
data/raw/repos\research\slim\nets,inception_v1_test.py,def testBuildOnlyUptoFinalEndpoint(self):
data/raw/repos\research\slim\nets,inception_v1_test.py,def testBuildAndCheckAllEndPointsUptoMixed5c(self):
data/raw/repos\research\slim\nets,inception_v1_test.py,def testModelHasExpectedNumberOfParameters(self):
data/raw/repos\research\slim\nets,inception_v1_test.py,def testHalfSizeImages(self):
data/raw/repos\research\slim\nets,inception_v1_test.py,def testBuildBaseNetworkWithoutRootBlock(self):
data/raw/repos\research\slim\nets,inception_v1_test.py,def testUnknownImageShape(self):
data/raw/repos\research\slim\nets,inception_v1_test.py,def testGlobalPoolUnknownImageShape(self):
data/raw/repos\research\slim\nets,inception_v1_test.py,def testUnknowBatchSize(self):
data/raw/repos\research\slim\nets,inception_v1_test.py,def testEvaluation(self):
data/raw/repos\research\slim\nets,inception_v1_test.py,def testTrainEvalWithReuse(self):
data/raw/repos\research\slim\nets,inception_v1_test.py,def testLogitsNotSqueezed(self):
data/raw/repos\research\slim\nets,inception_v1_test.py,def testNoBatchNormScaleByDefault(self):
data/raw/repos\research\slim\nets,inception_v1_test.py,def testBatchNormScale(self):
data/raw/repos\research\slim\nets,inception_v2.py,"def _reduced_kernel_size_for_small_input(input_tensor, kernel_size):"
data/raw/repos\research\slim\nets,inception_v2_test.py,def testBuildClassificationNetwork(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testBuildPreLogitsNetwork(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testBuildBaseNetwork(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testBuildOnlyUptoFinalEndpoint(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testBuildAndCheckAllEndPointsUptoMixed5c(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testModelHasExpectedNumberOfParameters(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testBuildEndPointsWithDepthMultiplierLessThanOne(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testBuildEndPointsWithDepthMultiplierGreaterThanOne(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testRaiseValueErrorWithInvalidDepthMultiplier(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testBuildEndPointsWithUseSeparableConvolutionFalse(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testBuildEndPointsNCHWDataFormat(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testBuildErrorsForDataFormats(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testHalfSizeImages(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testBuildBaseNetworkWithoutRootBlock(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testUnknownImageShape(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testGlobalPoolUnknownImageShape(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testUnknowBatchSize(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testEvaluation(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testTrainEvalWithReuse(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testLogitsNotSqueezed(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testNoBatchNormScaleByDefault(self):
data/raw/repos\research\slim\nets,inception_v2_test.py,def testBatchNormScale(self):
data/raw/repos\research\slim\nets,inception_v3.py,"def _reduced_kernel_size_for_small_input(input_tensor, kernel_size):"
data/raw/repos\research\slim\nets,inception_v3_test.py,def testBuildClassificationNetwork(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testBuildPreLogitsNetwork(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testBuildBaseNetwork(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testBuildOnlyUptoFinalEndpoint(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testBuildAndCheckAllEndPointsUptoMixed7c(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testModelHasExpectedNumberOfParameters(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testBuildEndPoints(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testBuildEndPointsWithDepthMultiplierLessThanOne(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testBuildEndPointsWithDepthMultiplierGreaterThanOne(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testRaiseValueErrorWithInvalidDepthMultiplier(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testHalfSizeImages(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testUnknownImageShape(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testGlobalPoolUnknownImageShape(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testUnknowBatchSize(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testEvaluation(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testTrainEvalWithReuse(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testLogitsNotSqueezed(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testNoBatchNormScaleByDefault(self):
data/raw/repos\research\slim\nets,inception_v3_test.py,def testBatchNormScale(self):
data/raw/repos\research\slim\nets,inception_v4.py,"def block_inception_a(inputs, scope=None, reuse=None):"
data/raw/repos\research\slim\nets,inception_v4.py,"def block_reduction_a(inputs, scope=None, reuse=None):"
data/raw/repos\research\slim\nets,inception_v4.py,"def block_inception_b(inputs, scope=None, reuse=None):"
data/raw/repos\research\slim\nets,inception_v4.py,"def block_reduction_b(inputs, scope=None, reuse=None):"
data/raw/repos\research\slim\nets,inception_v4.py,"def block_inception_c(inputs, scope=None, reuse=None):"
data/raw/repos\research\slim\nets,inception_v4.py,"def inception_v4_base(inputs, final_endpoint='Mixed_7d', scope=None):"
data/raw/repos\research\slim\nets,inception_v4.py,"def add_and_check_final(name, net):"
data/raw/repos\research\slim\nets,inception_v4_test.py,def testBuildLogits(self):
data/raw/repos\research\slim\nets,inception_v4_test.py,def testBuildPreLogitsNetwork(self):
data/raw/repos\research\slim\nets,inception_v4_test.py,def testBuildWithoutAuxLogits(self):
data/raw/repos\research\slim\nets,inception_v4_test.py,def testAllEndPointsShapes(self):
data/raw/repos\research\slim\nets,inception_v4_test.py,def testBuildBaseNetwork(self):
data/raw/repos\research\slim\nets,inception_v4_test.py,def testBuildOnlyUpToFinalEndpoint(self):
data/raw/repos\research\slim\nets,inception_v4_test.py,def testVariablesSetDevice(self):
data/raw/repos\research\slim\nets,inception_v4_test.py,def testHalfSizeImages(self):
data/raw/repos\research\slim\nets,inception_v4_test.py,def testGlobalPool(self):
data/raw/repos\research\slim\nets,inception_v4_test.py,def testGlobalPoolUnknownImageShape(self):
data/raw/repos\research\slim\nets,inception_v4_test.py,def testUnknownBatchSize(self):
data/raw/repos\research\slim\nets,inception_v4_test.py,def testEvaluation(self):
data/raw/repos\research\slim\nets,inception_v4_test.py,def testTrainEvalWithReuse(self):
data/raw/repos\research\slim\nets,inception_v4_test.py,def testNoBatchNormScaleByDefault(self):
data/raw/repos\research\slim\nets,inception_v4_test.py,def testBatchNormScale(self):
data/raw/repos\research\slim\nets,lenet.py,def lenet_arg_scope(weight_decay=0.0):
data/raw/repos\research\slim\nets,mobilenet_v1.py,"def _fixed_padding(inputs, kernel_size, rate=1):"
data/raw/repos\research\slim\nets,mobilenet_v1.py,"def wrapped_partial(func, *args, **kwargs):"
data/raw/repos\research\slim\nets,mobilenet_v1.py,"def _reduced_kernel_size_for_small_input(input_tensor, kernel_size):"
data/raw/repos\research\slim\nets,mobilenet_v1_eval.py,def imagenet_input(is_training):
data/raw/repos\research\slim\nets,mobilenet_v1_eval.py,"def metrics(logits, labels):"
data/raw/repos\research\slim\nets,mobilenet_v1_eval.py,def build_model():
data/raw/repos\research\slim\nets,mobilenet_v1_eval.py,def eval_model():
data/raw/repos\research\slim\nets,mobilenet_v1_eval.py,def main(unused_arg):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testBuildClassificationNetwork(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testBuildPreLogitsNetwork(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testBuildBaseNetwork(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testBuildOnlyUptoFinalEndpoint(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testBuildCustomNetworkUsingConvDefs(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testBuildAndCheckAllEndPointsUptoConv2d_13(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testOutputStride16BuildAndCheckAllEndPointsUptoConv2d_13(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testOutputStride8BuildAndCheckAllEndPointsUptoConv2d_13(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testBuildAndCheckAllEndPointsApproximateFaceNet(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testModelHasExpectedNumberOfParameters(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testBuildEndPointsWithDepthMultiplierLessThanOne(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testBuildEndPointsWithDepthMultiplierGreaterThanOne(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testRaiseValueErrorWithInvalidDepthMultiplier(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testHalfSizeImages(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testUnknownImageShape(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testGlobalPoolUnknownImageShape(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testUnknowBatchSize(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testEvaluation(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testTrainEvalWithReuse(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testLogitsNotSqueezed(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testBatchNormScopeDoesNotHaveIsTrainingWhenItsSetToNone(self):
data/raw/repos\research\slim\nets,mobilenet_v1_test.py,def testBatchNormScopeDoesHasIsTrainingWhenItsNotNone(self):
data/raw/repos\research\slim\nets,mobilenet_v1_train.py,def get_learning_rate():
data/raw/repos\research\slim\nets,mobilenet_v1_train.py,def get_quant_delay():
data/raw/repos\research\slim\nets,mobilenet_v1_train.py,def imagenet_input(is_training):
data/raw/repos\research\slim\nets,mobilenet_v1_train.py,def build_model():
data/raw/repos\research\slim\nets,mobilenet_v1_train.py,def get_checkpoint_init_fn():
data/raw/repos\research\slim\nets,mobilenet_v1_train.py,def init_fn(sess):
data/raw/repos\research\slim\nets,mobilenet_v1_train.py,def train_model():
data/raw/repos\research\slim\nets,mobilenet_v1_train.py,def main(unused_arg):
data/raw/repos\research\slim\nets,nets_factory.py,"def get_network_fn(name, num_classes, weight_decay=0.0, is_training=False):"
data/raw/repos\research\slim\nets,nets_factory.py,"def network_fn(images, **kwargs):"
data/raw/repos\research\slim\nets,nets_factory_test.py,def testGetNetworkFnFirstHalf(self):
data/raw/repos\research\slim\nets,nets_factory_test.py,def testGetNetworkFnSecondHalf(self):
data/raw/repos\research\slim\nets,nets_factory_test.py,def testGetNetworkFnVideoModels(self):
data/raw/repos\research\slim\nets,overfeat.py,def overfeat_arg_scope(weight_decay=0.0005):
data/raw/repos\research\slim\nets,overfeat_test.py,def testBuild(self):
data/raw/repos\research\slim\nets,overfeat_test.py,def testFullyConvolutional(self):
data/raw/repos\research\slim\nets,overfeat_test.py,def testGlobalPool(self):
data/raw/repos\research\slim\nets,overfeat_test.py,def testEndPoints(self):
data/raw/repos\research\slim\nets,overfeat_test.py,def testNoClasses(self):
data/raw/repos\research\slim\nets,overfeat_test.py,def testModelVariables(self):
data/raw/repos\research\slim\nets,overfeat_test.py,def testEvaluation(self):
data/raw/repos\research\slim\nets,overfeat_test.py,def testTrainEvalWithReuse(self):
data/raw/repos\research\slim\nets,overfeat_test.py,def testForward(self):
data/raw/repos\research\slim\nets,pix2pix.py,def pix2pix_arg_scope():
data/raw/repos\research\slim\nets,pix2pix.py,"def upsample(net, num_outputs, kernel_size, method='nn_upsample_conv'):"
data/raw/repos\research\slim\nets,pix2pix.py,def _default_generator_blocks():
data/raw/repos\research\slim\nets,pix2pix.py,"def padded(net, scope):"
data/raw/repos\research\slim\nets,pix2pix_test.py,def _reduced_default_blocks(self):
data/raw/repos\research\slim\nets,pix2pix_test.py,def test_output_size_nn_upsample_conv(self):
data/raw/repos\research\slim\nets,pix2pix_test.py,def test_output_size_conv2d_transpose(self):
data/raw/repos\research\slim\nets,pix2pix_test.py,def test_block_number_dictates_number_of_layers(self):
data/raw/repos\research\slim\nets,pix2pix_test.py,"def _layer_output_size(self, input_size, kernel_size=4, stride=2, pad=2):"
data/raw/repos\research\slim\nets,pix2pix_test.py,def test_four_layers(self):
data/raw/repos\research\slim\nets,pix2pix_test.py,def test_four_layers_no_padding(self):
data/raw/repos\research\slim\nets,pix2pix_test.py,def test_four_layers_wrog_paddig(self):
data/raw/repos\research\slim\nets,pix2pix_test.py,def test_four_layers_negative_padding(self):
data/raw/repos\research\slim\nets,post_training_quantization.py,"def _preprocess_for_quantization(image_data, image_size, crop_padding=32):"
data/raw/repos\research\slim\nets,post_training_quantization.py,"def restore_model(sess, checkpoint_path, enable_ema=True):"
data/raw/repos\research\slim\nets,post_training_quantization.py,def _representative_dataset_gen():
data/raw/repos\research\slim\nets,post_training_quantization.py,def main(_):
data/raw/repos\research\slim\nets,resnet_utils.py,"def subsample(inputs, factor, scope=None):"
data/raw/repos\research\slim\nets,resnet_utils.py,"def conv2d_same(inputs, num_outputs, kernel_size, stride, rate=1, scope=None):"
data/raw/repos\research\slim\nets,resnet_v1.py,def __enter__(self):
data/raw/repos\research\slim\nets,resnet_v1.py,"def __exit__(self, exc_type, exc_value, traceback):"
data/raw/repos\research\slim\nets,resnet_v1.py,"def resnet_v1_block(scope, base_depth, num_units, stride):"
data/raw/repos\research\slim\nets,resnet_v1_test.py,"def create_test_input(batch_size, height, width, channels):"
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testSubsampleThreeByThree(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testSubsampleFourByFour(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testConv2DSameEven(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testConv2DSameOdd(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,"def _resnet_plain(self, inputs, blocks, output_stride=None, scope=None):"
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testEndPointsV1(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,"def _stack_blocks_nondense(self, net, blocks):"
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testAtrousValuesBottleneck(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testStridingLastUnitVsSubsampleBlockEnd(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testClassificationEndPoints(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testClassificationEndPointsWithNoBatchNormArgscope(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testEndpointNames(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testClassificationShapes(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testFullyConvolutionalEndpointShapes(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testRootlessFullyConvolutionalEndpointShapes(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testAtrousFullyConvolutionalEndpointShapes(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testAtrousFullyConvolutionalValues(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testUnknownBatchSize(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testFullyConvolutionalUnknownHeightWidth(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testAtrousFullyConvolutionalUnknownHeightWidth(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testDepthMultiplier(self):
data/raw/repos\research\slim\nets,resnet_v1_test.py,def testMinBaseDepth(self):
data/raw/repos\research\slim\nets,resnet_v2.py,"def resnet_v2_block(scope, base_depth, num_units, stride):"
data/raw/repos\research\slim\nets,resnet_v2_test.py,"def create_test_input(batch_size, height, width, channels):"
data/raw/repos\research\slim\nets,resnet_v2_test.py,def testSubsampleThreeByThree(self):
data/raw/repos\research\slim\nets,resnet_v2_test.py,def testSubsampleFourByFour(self):
data/raw/repos\research\slim\nets,resnet_v2_test.py,def testConv2DSameEven(self):
data/raw/repos\research\slim\nets,resnet_v2_test.py,def testConv2DSameOdd(self):
data/raw/repos\research\slim\nets,resnet_v2_test.py,"def _resnet_plain(self, inputs, blocks, output_stride=None, scope=None):"
data/raw/repos\research\slim\nets,resnet_v2_test.py,def testEndPointsV2(self):
data/raw/repos\research\slim\nets,resnet_v2_test.py,"def _stack_blocks_nondense(self, net, blocks):"
data/raw/repos\research\slim\nets,resnet_v2_test.py,def testAtrousValuesBottleneck(self):
data/raw/repos\research\slim\nets,resnet_v2_test.py,def testClassificationEndPoints(self):
data/raw/repos\research\slim\nets,resnet_v2_test.py,def testEndpointNames(self):
data/raw/repos\research\slim\nets,resnet_v2_test.py,def testClassificationShapes(self):
data/raw/repos\research\slim\nets,resnet_v2_test.py,def testFullyConvolutionalEndpointShapes(self):
data/raw/repos\research\slim\nets,resnet_v2_test.py,def testRootlessFullyConvolutionalEndpointShapes(self):
data/raw/repos\research\slim\nets,resnet_v2_test.py,def testAtrousFullyConvolutionalEndpointShapes(self):
data/raw/repos\research\slim\nets,resnet_v2_test.py,def testAtrousFullyConvolutionalValues(self):
data/raw/repos\research\slim\nets,resnet_v2_test.py,def testUnknownBatchSize(self):
data/raw/repos\research\slim\nets,resnet_v2_test.py,def testFullyConvolutionalUnknownHeightWidth(self):
data/raw/repos\research\slim\nets,resnet_v2_test.py,def testAtrousFullyConvolutionalUnknownHeightWidth(self):
data/raw/repos\research\slim\nets,s3dg.py,"def self_gating(input_tensor, scope, data_format='NDHWC'):"
data/raw/repos\research\slim\nets,s3dg.py,"def gating_fn(inputs, scope):"
data/raw/repos\research\slim\nets,s3dg_test.py,def testBuildClassificationNetwork(self):
data/raw/repos\research\slim\nets,s3dg_test.py,def testBuildBaseNetwork(self):
data/raw/repos\research\slim\nets,s3dg_test.py,def testBuildOnlyUptoFinalEndpointNoGating(self):
data/raw/repos\research\slim\nets,s3dg_test.py,def testBuildAndCheckAllEndPointsUptoMixed5c(self):
data/raw/repos\research\slim\nets,s3dg_test.py,def testHalfSizeImages(self):
data/raw/repos\research\slim\nets,s3dg_test.py,def testTenFrames(self):
data/raw/repos\research\slim\nets,s3dg_test.py,def testEvaluation(self):
data/raw/repos\research\slim\nets,vgg.py,def vgg_arg_scope(weight_decay=0.0005):
data/raw/repos\research\slim\nets,vgg_test.py,def testBuild(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testFullyConvolutional(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testGlobalPool(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testEndPoints(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testNoClasses(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testModelVariables(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testEvaluation(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testTrainEvalWithReuse(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testForward(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testBuild(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testFullyConvolutional(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testGlobalPool(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testEndPoints(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testNoClasses(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testModelVariables(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testEvaluation(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testTrainEvalWithReuse(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testForward(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testBuild(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testFullyConvolutional(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testGlobalPool(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testEndPoints(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testNoClasses(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testModelVariables(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testEvaluation(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testTrainEvalWithReuse(self):
data/raw/repos\research\slim\nets,vgg_test.py,def testForward(self):
data/raw/repos\research\slim\nets\mobilenet,conv_blocks.py,"def _fixed_padding(inputs, kernel_size, rate=1):"
data/raw/repos\research\slim\nets\mobilenet,conv_blocks.py,"def _make_divisible(v, divisor, min_value=None):"
data/raw/repos\research\slim\nets\mobilenet,conv_blocks.py,"def _split_divisible(num, num_ways, divisible_by=8):"
data/raw/repos\research\slim\nets\mobilenet,conv_blocks.py,def _v1_compatible_scope_naming(scope):
data/raw/repos\research\slim\nets\mobilenet,conv_blocks.py,"def expand_input_by_factor(n, divisible_by=8):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet.py,"def apply_activation(x, name=None, activation_fn=None):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet.py,"def _fixed_padding(inputs, kernel_size, rate=1):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet.py,"def _make_divisible(v, divisor, min_value=None):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet.py,def _set_arg_scope_defaults(defaults):
data/raw/repos\research\slim\nets\mobilenet,mobilenet.py,"def op(opfunc, multiplier_func=depth_multiplier, **params):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet.py,def __enter__(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet.py,"def __exit__(self, exc_type, exc_value, traceback):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet.py,"def safe_arg_scope(funcs, **kwargs):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet.py,"def _scope_all(scope, default_scope=None):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2.py,"def wrapped_partial(func, *args, **kwargs):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2.py,"def mobilenet_base(input_tensor, depth_multiplier=1.0, **kwargs):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2.py,"def mobilenet_base_group_norm(input_tensor, depth_multiplier=1.0, **kwargs):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2.py,def training_scope(**kwargs):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2_test.py,def find_ops(optype):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2_test.py,def testCreation(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2_test.py,def testCreationNoClasses(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2_test.py,def testImageSizes(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2_test.py,def testWithSplits(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2_test.py,def testWithOutputStride8(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2_test.py,def testDivisibleBy(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2_test.py,def testDivisibleByWithArgScope(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2_test.py,def testFineGrained(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2_test.py,def testMobilenetBase(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2_test.py,def testWithOutputStride16(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2_test.py,def testMultiplier(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2_test.py,"def inverse_multiplier(output_params, multiplier):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2_test.py,def testWithOutputStride8AndExplicitPadding(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2_test.py,def testWithOutputStride16AndExplicitPadding(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2_test.py,def testBatchNormScopeDoesNotHaveIsTrainingWhenItsSetToNone(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v2_test.py,def testBatchNormScopeDoesHasIsTrainingWhenItsNotNone(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v3.py,def hard_swish(x):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v3.py,"def reduce_to_1x1(input_tensor, default_size=7, **kwargs):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v3.py,"def mbv3_op(ef, n, k, s=1, act=tf.nn.relu, se=None, **kwargs):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v3.py,"def mbv3_fused(ef, n, k, s=1, **kwargs):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v3.py,"def mobilenet_base(input_tensor, depth_multiplier=1.0, **kwargs):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v3.py,"def func_wrapper(*f_args, **f_kwargs):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v3.py,"def _reduce_consecutive_layers(conv_defs, start_id, end_id, multiplier=0.5):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v3_test.py,"def assertVariablesHaveNormalizerFn(self, use_groupnorm):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v3_test.py,"def testMobilenetV3Large(self, use_groupnorm):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v3_test.py,"def testMobilenetV3Small(self, use_groupnorm):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v3_test.py,"def testMobilenetEdgeTpu(self, use_groupnorm):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v3_test.py,def testMobilenetEdgeTpuChangeScope(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v3_test.py,"def testMobilenetV3BaseOnly(self, use_groupnorm):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v3_test.py,def testMobilenetV3BaseOnly_VariableInput(self):
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v3_test.py,"def testMobilenetV3WithReduceMean(self, use_groupnorm):"
data/raw/repos\research\slim\nets\mobilenet,mobilenet_v3_test.py,"def testMobilenetV3WithOutReduceMean(self, use_groupnorm):"
data/raw/repos\research\slim\nets\nasnet,nasnet.py,def cifar_config():
data/raw/repos\research\slim\nets\nasnet,nasnet.py,def large_imagenet_config():
data/raw/repos\research\slim\nets\nasnet,nasnet.py,def mobile_imagenet_config():
data/raw/repos\research\slim\nets\nasnet,nasnet.py,"def _update_hparams(hparams, is_training):"
data/raw/repos\research\slim\nets\nasnet,nasnet.py,"def _build_aux_head(net, end_points, num_classes, hparams, scope):"
data/raw/repos\research\slim\nets\nasnet,nasnet.py,"def _imagenet_stem(inputs, hparams, stem_cell, current_step=None):"
data/raw/repos\research\slim\nets\nasnet,nasnet.py,"def _cifar_stem(inputs, hparams):"
data/raw/repos\research\slim\nets\nasnet,nasnet.py,"def add_and_check_endpoint(endpoint_name, net):"
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testBuildLogitsCifarModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testBuildLogitsMobileModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testBuildLogitsLargeModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testBuildPreLogitsCifarModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testBuildPreLogitsMobileModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testBuildPreLogitsLargeModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testAllEndPointsShapesCifarModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testNoAuxHeadCifarModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testAllEndPointsShapesMobileModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testNoAuxHeadMobileModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testAllEndPointsShapesLargeModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testNoAuxHeadLargeModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testVariablesSetDeviceMobileModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testUnknownBatchSizeMobileModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testEvaluationMobileModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testOverrideHParamsCifarModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testOverrideHParamsMobileModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testOverrideHParamsLargeModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testCurrentStepCifarModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_test.py,def testUseBoundedAcitvationCifarModel(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_utils.py,"def calc_reduction_layers(num_cells, num_reduction_layers):"
data/raw/repos\research\slim\nets\nasnet,nasnet_utils.py,def get_channel_index(data_format=INVALID):
data/raw/repos\research\slim\nets\nasnet,nasnet_utils.py,"def get_channel_dim(shape, data_format=INVALID):"
data/raw/repos\research\slim\nets\nasnet,nasnet_utils.py,"def global_avg_pool(x, data_format=INVALID):"
data/raw/repos\research\slim\nets\nasnet,nasnet_utils.py,"def factorized_reduction(net, output_filters, stride, data_format=INVALID):"
data/raw/repos\research\slim\nets\nasnet,nasnet_utils.py,"def drop_path(net, keep_prob, is_training=True):"
data/raw/repos\research\slim\nets\nasnet,nasnet_utils.py,def _operation_to_filter_shape(operation):
data/raw/repos\research\slim\nets\nasnet,nasnet_utils.py,def _operation_to_num_layers(operation):
data/raw/repos\research\slim\nets\nasnet,nasnet_utils.py,def _operation_to_info(operation):
data/raw/repos\research\slim\nets\nasnet,nasnet_utils.py,def _operation_to_pooling_type(operation):
data/raw/repos\research\slim\nets\nasnet,nasnet_utils.py,def _operation_to_pooling_shape(operation):
data/raw/repos\research\slim\nets\nasnet,nasnet_utils.py,def _operation_to_pooling_info(operation):
data/raw/repos\research\slim\nets\nasnet,nasnet_utils.py,"def _pooling(net, stride, operation, use_bounded_activation):"
data/raw/repos\research\slim\nets\nasnet,nasnet_utils.py,"def _reduce_prev_layer(self, prev_layer, curr_layer):"
data/raw/repos\research\slim\nets\nasnet,nasnet_utils.py,"def _cell_base(self, net, prev_layer):"
data/raw/repos\research\slim\nets\nasnet,nasnet_utils.py,"def _combine_unused_states(self, net):"
data/raw/repos\research\slim\nets\nasnet,nasnet_utils_test.py,def testCalcReductionLayers(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_utils_test.py,def testGetChannelIndex(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_utils_test.py,def testGetChannelDim(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_utils_test.py,def testGlobalAvgPool(self):
data/raw/repos\research\slim\nets\nasnet,nasnet_utils_test.py,def test_factorized_reduction(self):
data/raw/repos\research\slim\nets\nasnet,pnasnet.py,def large_imagenet_config():
data/raw/repos\research\slim\nets\nasnet,pnasnet.py,def mobile_imagenet_config():
data/raw/repos\research\slim\nets\nasnet,pnasnet.py,"def add_and_check_endpoint(endpoint_name, net):"
data/raw/repos\research\slim\nets\nasnet,pnasnet_test.py,def testBuildLogitsLargeModel(self):
data/raw/repos\research\slim\nets\nasnet,pnasnet_test.py,def testBuildLogitsMobileModel(self):
data/raw/repos\research\slim\nets\nasnet,pnasnet_test.py,def testBuildNonExistingLayerLargeModel(self):
data/raw/repos\research\slim\nets\nasnet,pnasnet_test.py,def testBuildNonExistingLayerMobileModel(self):
data/raw/repos\research\slim\nets\nasnet,pnasnet_test.py,def testBuildPreLogitsLargeModel(self):
data/raw/repos\research\slim\nets\nasnet,pnasnet_test.py,def testBuildPreLogitsMobileModel(self):
data/raw/repos\research\slim\nets\nasnet,pnasnet_test.py,def testAllEndPointsShapesLargeModel(self):
data/raw/repos\research\slim\nets\nasnet,pnasnet_test.py,def testAllEndPointsShapesMobileModel(self):
data/raw/repos\research\slim\nets\nasnet,pnasnet_test.py,def testNoAuxHeadLargeModel(self):
data/raw/repos\research\slim\nets\nasnet,pnasnet_test.py,def testNoAuxHeadMobileModel(self):
data/raw/repos\research\slim\nets\nasnet,pnasnet_test.py,def testOverrideHParamsLargeModel(self):
data/raw/repos\research\slim\nets\nasnet,pnasnet_test.py,def testOverrideHParamsMobileModel(self):
data/raw/repos\research\slim\nets\nasnet,pnasnet_test.py,def testUseBoundedAcitvationMobileModel(self):
data/raw/repos\research\slim\preprocessing,inception_preprocessing.py,"def apply_with_random_selector(x, func, num_cases):"
data/raw/repos\research\slim\preprocessing,inception_preprocessing.py,"def distort_color(image, color_ordering=0, fast_mode=True, scope=None):"
data/raw/repos\research\slim\preprocessing,preprocessing_factory.py,"def get_preprocessing(name, is_training=False, use_grayscale=False):"
data/raw/repos\research\slim\preprocessing,preprocessing_factory.py,"def preprocessing_fn(image, output_height, output_width, **kwargs):"
data/raw/repos\research\slim\preprocessing,vgg_preprocessing.py,"def _crop(image, offset_height, offset_width, crop_height, crop_width):"
data/raw/repos\research\slim\preprocessing,vgg_preprocessing.py,"def _random_crop(image_list, crop_height, crop_width):"
data/raw/repos\research\slim\preprocessing,vgg_preprocessing.py,"def _central_crop(image_list, crop_height, crop_width):"
data/raw/repos\research\slim\preprocessing,vgg_preprocessing.py,"def _mean_image_subtraction(image, means):"
data/raw/repos\research\slim\preprocessing,vgg_preprocessing.py,"def _smallest_size_at_least(height, width, smallest_side):"
data/raw/repos\research\slim\preprocessing,vgg_preprocessing.py,"def _aspect_preserving_resize(image, smallest_side):"
data/raw/repos\research\vid2depth,inference.py,def _run_inference():
data/raw/repos\research\vid2depth,inference.py,"def _gray2rgb(im, cmap=CMAP):"
data/raw/repos\research\vid2depth,inference.py,def main(_):
data/raw/repos\research\vid2depth,model.py,def build_train_graph(self):
data/raw/repos\research\vid2depth,model.py,def build_inference_for_training(self):
data/raw/repos\research\vid2depth,model.py,def build_loss(self):
data/raw/repos\research\vid2depth,model.py,"def gradient_x(self, img):"
data/raw/repos\research\vid2depth,model.py,"def gradient_y(self, img):"
data/raw/repos\research\vid2depth,model.py,"def depth_smoothness(self, depth, img):"
data/raw/repos\research\vid2depth,model.py,"def ssim(self, x, y):"
data/raw/repos\research\vid2depth,model.py,def build_train_op(self):
data/raw/repos\research\vid2depth,model.py,def build_summaries(self):
data/raw/repos\research\vid2depth,model.py,def build_depth_test_graph(self):
data/raw/repos\research\vid2depth,model.py,def build_egomotion_test_graph(self):
data/raw/repos\research\vid2depth,model.py,"def unpack_image_batches(self, image_seq):"
data/raw/repos\research\vid2depth,model.py,"def inference(self, inputs, sess, mode):"
data/raw/repos\research\vid2depth,nets.py,"def egomotion_net(image_stack, is_training=True, legacy_mode=False):"
data/raw/repos\research\vid2depth,nets.py,"def disp_net(target_image, is_training=True):"
data/raw/repos\research\vid2depth,nets.py,"def _resize_like(inputs, ref):"
data/raw/repos\research\vid2depth,project.py,"def inverse_warp(img, depth, egomotion, intrinsic_mat, intrinsic_mat_inv):"
data/raw/repos\research\vid2depth,project.py,"def _pixel2cam(depth, pixel_coords, intrinsic_mat_inv):"
data/raw/repos\research\vid2depth,project.py,"def _cam2pixel(cam_coords, proj_c2p):"
data/raw/repos\research\vid2depth,project.py,"def _meshgrid_abs(height, width):"
data/raw/repos\research\vid2depth,project.py,"def _euler2mat(z, y, x):"
data/raw/repos\research\vid2depth,project.py,"def _egomotion_vec2mat(vec, batch_size):"
data/raw/repos\research\vid2depth,project.py,"def _bilinear_sampler(im, x, y, name='blinear_sampler'):"
data/raw/repos\research\vid2depth,project.py,"def _spatial_transformer(img, coords):"
data/raw/repos\research\vid2depth,project.py,"def get_cloud(depth, intrinsics_inv, name=None):"
data/raw/repos\research\vid2depth,reader.py,def read_data(self):
data/raw/repos\research\vid2depth,reader.py,"def unpack_images(self, image_seq):"
data/raw/repos\research\vid2depth,reader.py,"def preprocess_image(cls, image):"
data/raw/repos\research\vid2depth,reader.py,"def augment_image_colorspace(cls, image_seq):"
data/raw/repos\research\vid2depth,reader.py,"def augment_images_scale_crop(cls, im, intrinsics, out_h, out_w):"
data/raw/repos\research\vid2depth,reader.py,"def scale_randomly(im, intrinsics):"
data/raw/repos\research\vid2depth,reader.py,"def crop_randomly(im, intrinsics, out_h, out_w):"
data/raw/repos\research\vid2depth,reader.py,"def compile_file_list(self, data_dir, split, load_pose=False):"
data/raw/repos\research\vid2depth,reader.py,"def make_intrinsics_matrix(cls, fx, fy, cx, cy):"
data/raw/repos\research\vid2depth,reader.py,"def get_multi_scale_intrinsics(cls, intrinsics, num_scales):"
data/raw/repos\research\vid2depth,train.py,def main(_):
data/raw/repos\research\vid2depth,util.py,def get_seq_middle(seq_length):
data/raw/repos\research\vid2depth,util.py,def info(obj):
data/raw/repos\research\vid2depth,util.py,def is_a_numpy_array(obj):
data/raw/repos\research\vid2depth,util.py,def count_parameters(also_print=True):
data/raw/repos\research\vid2depth,util.py,def get_vars_to_restore(ckpt=None):
data/raw/repos\research\vid2depth,util.py,def format_number(n):
data/raw/repos\research\vid2depth,util.py,def read_text_lines(filepath):
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,def collect_frames(self):
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def get_example_with_index(self, target_index):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def load_intrinsics(self, unused_frame_idx, cy):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def is_valid_sample(self, target_index):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def load_image_raw(self, frame_id):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def load_image_sequence(self, target_index):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def load_example(self, target_index):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def scale_intrinsics(self, mat, sx, sy):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def collect_static_frames(self, static_frames_file):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,def collect_train_frames(self):
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def is_valid_sample(self, frames, target_index):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def get_example_with_index(self, target_index):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def load_image_sequence(self, frames, target_index):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def load_pose_sequence(self, frames, target_index):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def load_example(self, frames, target_index):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def load_pose_raw(self, drive, frame_id):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def load_image_raw(self, drive, cam_id, frame_id):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def load_intrinsics_raw(self, drive, cam_id):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def read_raw_calib_file(self, filepath):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def scale_intrinsics(self, mat, sx, sy):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def __init__(self, dataset_dir, img_height=128, img_width=416, seq_length=3):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,def collect_test_frames(self):
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,def collect_train_frames(self):
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def is_valid_sample(self, frames, target_frame_index):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def load_image_sequence(self, frames, target_frame_index):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def load_example(self, frames, target_frame_index):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def get_example_with_index(self, target_frame_index):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def load_image(self, drive, frame_id):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def load_intrinsics(self, drive, unused_frame_id):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def read_calib_file(self, filepath, cam_id=2):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def parse_line(line, shape):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def scale_intrinsics(self, mat, sx, sy):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def collect_frames(self, split):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def get_example_with_index(self, target_index):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def load_intrinsics(self, frame_id, split):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def is_valid_example(self, target_frame_id):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def load_image_sequence(self, target_frame_id):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def load_example(self, target_frame_id):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def scale_intrinsics(self, mat, sx, sy):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,def get_resource_path(relative_path):
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,"def get_seq_start_end(target_index, seq_length, sample_every=1):"
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,def atoi(text):
data/raw/repos\research\vid2depth\dataset,dataset_loader.py,def natural_keys(text):
data/raw/repos\research\vid2depth\dataset,gen_data.py,def _generate_data():
data/raw/repos\research\vid2depth\dataset,gen_data.py,"def _gen_example(i, all_examples):"
data/raw/repos\research\vid2depth\dataset,gen_data.py,def _gen_example_star(params):
data/raw/repos\research\vid2depth\dataset,gen_data.py,def _stack_image_seq(seq):
data/raw/repos\research\vid2depth\dataset,gen_data.py,def main(_):
data/raw/repos\research\vid2depth\ops,icp_grad.py,"def _icp_grad(op, grad_transform, grad_residual):"
data/raw/repos\research\vid2depth\ops,icp_grad_test.py,def test_grad_transform(self):
data/raw/repos\research\vid2depth\ops,icp_grad_test.py,def test_grad_transform_same_ego_motion(self):
data/raw/repos\research\vid2depth\ops,icp_grad_test.py,def test_grad_residual(self):
data/raw/repos\research\vid2depth\ops,icp_test.py,def setUp(self):
data/raw/repos\research\vid2depth\ops,icp_test.py,"def _run_icp(self, cloud_source, ego_motion, cloud_target):"
data/raw/repos\research\vid2depth\ops,icp_test.py,def _generate_random_cloud(self):
data/raw/repos\research\vid2depth\ops,icp_test.py,def _generate_organized_cloud(self):
data/raw/repos\research\vid2depth\ops,icp_test.py,def _load_lidar_cloud(self):
data/raw/repos\research\vid2depth\ops,icp_test.py,def test_translate_small_cloud(self):
data/raw/repos\research\vid2depth\ops,icp_test.py,def test_translate_random_cloud(self):
data/raw/repos\research\vid2depth\ops,icp_test.py,def test_rotate_random_cloud(self):
data/raw/repos\research\vid2depth\ops,icp_test.py,def test_translate_organized_cloud(self):
data/raw/repos\research\vid2depth\ops,icp_test.py,def test_rotate_organized_cloud(self):
data/raw/repos\research\vid2depth\ops,icp_test.py,def test_translate_lidar_cloud(self):
data/raw/repos\research\vid2depth\ops,icp_test.py,def test_translate_lidar_cloud_ego_motion(self):
data/raw/repos\research\vid2depth\ops,icp_test.py,def test_rotate_lidar_cloud_ego_motion(self):
data/raw/repos\research\vid2depth\ops,icp_test.py,def test_no_change_lidar_cloud(self):
data/raw/repos\research\vid2depth\ops,icp_test.py,def test_translate_lidar_cloud_batch_size_2(self):
data/raw/repos\research\vid2depth\ops,icp_train_demo.py,def __init__(self):
data/raw/repos\research\vid2depth\ops,icp_train_demo.py,def setup(cls):
data/raw/repos\research\vid2depth\ops,icp_train_demo.py,def random_transform(cls):
data/raw/repos\research\vid2depth\ops,icp_train_demo.py,"def next_batch(cls, batch_size):"
data/raw/repos\research\vid2depth\ops,icp_train_demo.py,def placeholder_inputs(batch_size):
data/raw/repos\research\vid2depth\ops,icp_train_demo.py,"def fill_feed_dict(source_placeholder, target_placeholder):"
data/raw/repos\research\vid2depth\ops,icp_train_demo.py,def run_training():
data/raw/repos\research\vid2depth\ops,icp_train_demo.py,"def inference(source, target):"
data/raw/repos\research\vid2depth\ops,icp_train_demo.py,"def loss_func(transform, residual):"
data/raw/repos\research\vid2depth\ops,icp_train_demo.py,"def training(loss, learning_rate):"
data/raw/repos\research\vid2depth\ops,icp_train_demo.py,def main(_):
data/raw/repos\research\vid2depth\ops,icp_util.py,def get_transformation_matrix(transform):
data/raw/repos\research\vid2depth\ops,icp_util.py,def np_get_transformation_matrix(transform):
data/raw/repos\research\vid2depth\ops,icp_util.py,"def transform_cloud_xyz(cloud, transform):"
data/raw/repos\research\vid2depth\ops,icp_util.py,"def np_transform_cloud_xyz(cloud, transform):"
data/raw/repos\research\vid2depth\ops,icp_util.py,"def batch_transform_cloud_xyz(cloud, transform):"
data/raw/repos\tensorflow_models,tensorflow_models_test.py,def testVisionImport(self):
data/raw/repos\tensorflow_models,tensorflow_models_test.py,def testNLPImport(self):
data/raw/repos\tensorflow_models,tensorflow_models_test.py,def testCommonImports(self):
data/raw/repos\tensorflow_models,tensorflow_models_test.py,def testUpliftImports(self):
